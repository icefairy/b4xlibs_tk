Version=6.25
NumberOfModules=0
Build1=Default,com.zxdemo
ManifestCode='This code will be applied to the manifest file during compilation.~\n~'You do not need to modify it in most cases.~\n~'See this link for for more information: http://www.basic4ppc.com/forum/showthread.php?p=78136~\n~AddManifestText(~\n~<uses-sdk android:minSdkVersion="4" android:targetSdkVersion="14"/>~\n~<supports-screens android:largeScreens="true" ~\n~    android:normalScreens="true" ~\n~    android:smallScreens="true" ~\n~    android:anyDensity="true"/>)~\n~SetApplicationAttribute(android:icon, "@drawable/icon")~\n~SetApplicationAttribute(android:label, "$LABEL$")~\n~'End of default text.~\n~AddPermission("android.permission.CAMERA")~\n~AddPermission("android.permission.FLASHLIGHT")~\n~AddPermission("android.hardware.camera")~\n~AddManifestText(<uses-feature android:name="android.hardware.telephony" android:required="false" />)~\n~AddManifestText(<uses-feature android:name="android.hardware.camera" android:required="false" />)~\n~AddManifestText(<uses-feature android:name="android.hardware.camera.autofocus" android:required="false" />)~\n~AddManifestText(<uses-feature android:name="android.hardware.camera.flash" android:required="false" />)~\n~AddApplicationText(<activity android:name="ice.zxing.CaptureActivity"~\n~			android:screenOrientation="landscape" android:configChanges="orientation|keyboardHidden"~\n~			android:theme="@android:style/Theme.NoTitleBar.Fullscreen"~\n~			android:windowSoftInputMode="stateAlwaysHidden"></activity>)
IconFile=
NumberOfFiles=4
File1=ewm.png
File2=layscanner.bal
File3=scannerbeep.wav
File4=scanning_light.png
NumberOfLibraries=7
Library1=core
Library2=camera
Library3=javaobject
Library4=reflection
Library5=animationplus
Library6=audio
Library7=b4azxing
@EndOfDesignText@
#Region  Project Attributes 
	#ApplicationLabel: zxdemo
	#VersionCode: 1
	#VersionName: 
	'SupportedOrientations possible values: unspecified, landscape or portrait.
	#SupportedOrientations: unspecified
	#CanInstallToExternalStorage: False
#End Region

#Region  Activity Attributes 
	#FullScreen: False
	#IncludeTitle: True
#End Region
'#AdditionalJar:zxcore-3.2.1.jar
'#AdditionalJar:zxjavase-3.2.1.jar
Sub Process_Globals

End Sub

Sub Globals

	Dim btn As Button
	Dim edt As EditText
	Dim b4azx As Zxing_B4A
	Dim jo As JavaObject
End Sub
'readme
'本项目依赖的库以及jar：camera2.2 javaobject2.05 reflection2.4  animationplus2.3 以及zxcore-3.2.1.jar zxjavase-3.2.1.jar
'本项目依赖的类文件：cvCRZxing.bas CameraExClass.bas
Sub Activity_Create(FirstTime As Boolean)
	jo=Me
	btn.Initialize("btn")
	btn.Text="scan"
	edt.Initialize("")
	edt.SingleLine=False
	edt.Gravity=Bit.Xor(Gravity.LEFT,Gravity.TOP)
	Activity.AddView(btn,10%x,10%y,80%x,15%y)
	Activity.AddView(edt,5%x,30%y,90%x,65%y)
End Sub
Sub btn_Click
'	StartActivity(actZXScanner)
'	b4azx.BeginScan("zx")
	Dim bmp As Bitmap=LoadBitmap(File.DirAssets,"ewm.png")
	Dim ret As String=jo.RunMethod("readQRCode",Array As Object(bmp))
	Log(ret)
End Sub
Sub zx_result(atype As String,Values As String,bts() As Byte)
	Log(Values)
End Sub
Sub gotzxresult(str As String)
	edt.Text=str&CRLF&edt.Text
End Sub
Sub Activity_Resume
	
End Sub

Sub Activity_Pause (UserClosed As Boolean)
	
End Sub
#If java
import java.util.Hashtable;
import java.util.Vector;

import com.google.zxing.BarcodeFormat;
import com.google.zxing.BinaryBitmap;
import com.google.zxing.DecodeHintType;
import com.google.zxing.LuminanceSource;
import com.google.zxing.MultiFormatReader;
import com.google.zxing.RGBLuminanceSource;
import com.google.zxing.Reader;
import com.google.zxing.Result;
import com.google.zxing.common.HybridBinarizer;

import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Log;
static final Vector<BarcodeFormat> PRODUCT_FORMATS = new Vector(5);
	   static  Vector<BarcodeFormat> ONE_D_FORMATS;
	   static  Vector<BarcodeFormat> QR_CODE_FORMATS;
	   static  Vector<BarcodeFormat> DATA_MATRIX_FORMATS;
	   static int a=0;
		public static void init()
		{
		a=1;
	     PRODUCT_FORMATS.add(BarcodeFormat.UPC_A);
	     PRODUCT_FORMATS.add(BarcodeFormat.UPC_E);
	     PRODUCT_FORMATS.add(BarcodeFormat.EAN_13);
	     PRODUCT_FORMATS.add(BarcodeFormat.EAN_8);
	     PRODUCT_FORMATS.add(BarcodeFormat.RSS_14);
	     ONE_D_FORMATS = new Vector(PRODUCT_FORMATS.size() + 4);
	     ONE_D_FORMATS.addAll(PRODUCT_FORMATS);
	     ONE_D_FORMATS.add(BarcodeFormat.CODE_39);
	     ONE_D_FORMATS.add(BarcodeFormat.CODE_93);
	     ONE_D_FORMATS.add(BarcodeFormat.CODE_128);
	     ONE_D_FORMATS.add(BarcodeFormat.ITF);
	     QR_CODE_FORMATS = new Vector(1);
	     QR_CODE_FORMATS.add(BarcodeFormat.QR_CODE);
	     DATA_MATRIX_FORMATS = new Vector(1);
	     DATA_MATRIX_FORMATS.add(BarcodeFormat.DATA_MATRIX);
	   }
public static String readQRCode(Bitmap bMap)
     {
	 if(a==0){
	 init();
	 }
		 int[] intArray = new int[bMap.getWidth() * bMap.getHeight()];
		 bMap.getPixels(intArray, 0, bMap.getWidth(), 0, 0, bMap.getWidth(), bMap.getHeight());  
		 LuminanceSource source = new RGBLuminanceSource(bMap.getWidth(), bMap.getHeight(), intArray);
		 BinaryBitmap bitmap = new BinaryBitmap(new HybridBinarizer(source));
		 MultiFormatReader reader = new MultiFormatReader(); // use this otherwise ChecksumException
		 Hashtable<DecodeHintType, Object> hints;
		 hints = new Hashtable(3);
		 Vector<BarcodeFormat> decodeFormats = null;

		      decodeFormats = new Vector();
		      decodeFormats.addAll(ONE_D_FORMATS);
		      decodeFormats.addAll(QR_CODE_FORMATS);
		      decodeFormats.addAll(DATA_MATRIX_FORMATS);
		    
		    hints.put(DecodeHintType.POSSIBLE_FORMATS, decodeFormats);
		    reader.setHints(hints);
			    Result result=null;
				try {
					result = reader.decodeWithState(bitmap);
					return result.getText();
				} catch (Exception e) {
					Log.e("B4A", "Error:"+e.getMessage());
					e.printStackTrace();
					
				}
   return null;
 }
#end if