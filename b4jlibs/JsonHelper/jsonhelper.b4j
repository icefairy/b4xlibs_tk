Version=4.2
AppType=JavaFX
NumberOfModules=0
Build1=Default,b4j.example
NumberOfFiles=1
File1=laymain.bjl
NumberOfLibraries=4
Library1=jcore
Library2=jfx
Library3=javaobject
Library4=json
@EndOfDesignText@
#Region  Project Attributes 
	#MainFormWidth: 1024
	#MainFormHeight: 768
#End Region

Sub Process_Globals
	Private fx As JFX
	Private MainForm As Form
	Private edtJson As TextArea
	Private edtcode As TextArea
	Private sIndent As String="    "
End Sub

Sub AppStart (Form1 As Form, Args() As String)
	MainForm = Form1
	MainForm.SetFormStyle("UNIFIED")
	MainForm.RootPane.LoadLayout("laymain") 'Load the layout file.
	MainForm.Show
	DisableScrollBar(edtJson,True,False)
End Sub
Sub tob4x_Action
	Log("tob4x")
	If edtJson.Text.Length<1 Then
		fx.Msgbox(MainForm,"JSON string is empty","Empty")
	Else
		edtcode.Text= parsetob4x(edtJson.Text)
	End If
End Sub
Sub tojava_Action
	Log("tojava")
End Sub
Sub exit_Action
	If askexit Then ExitApplication
End Sub
Private Sub askexit As Boolean
	If fx.Msgbox2(MainForm,"Sure to exit?","exit","Yes","No","",fx.MSGBOX_CONFIRMATION)=fx.DialogResponse.POSITIVE Then
		Return True
	End If
	Return False
End Sub
Sub MainForm_CloseRequest (EventData As Event)
	If askexit=False Then EventData.Consume
End Sub
Sub reset_Action
	edtJson.Text=""
	edtcode.Text=""
End Sub
Sub DisableScrollBar(ta As TextArea,showvertical As Boolean,showhorizontal As Boolean)
	Dim jo As JavaObject = ta
	Dim scrollbarver As JavaObject = jo.RunMethod("lookup", Array(".scroll-bar:vertical"))
	Dim scrollbarhor As JavaObject = jo.RunMethod("lookup", Array(".scroll-bar:horizontal"))
	Dim d_d As Double = 1,d_e As Double=0
	If showvertical Then
   		scrollbarver.RunMethod("setOpacity", Array(d_e))
	Else
		scrollbarver.RunMethod("setOpacity", Array(d_d))
	End If
	If showhorizontal Then
		scrollbarhor.RunMethod("setOpacity", Array(d_e))
	Else
		scrollbarhor.RunMethod("setOpacity", Array(d_d))
	End If
End Sub
#Region b4x

Sub parsetob4x(str As String) As String
	Dim text As String = str
		Dim parser As JSONParser
		parser.Initialize(text)
		Dim squareBracketFound As Boolean
		'check whether we need to call NextArray or NextObject
		For i = 0 To text.Length
			If text.CharAt(i) = "[" Then
				squareBracketFound = True
				Exit
			Else If text.CharAt(i) = "{" Then
				Exit
			End If
		Next
		Dim code As StringBuilder
		code.Initialize
		code.Append("Dim parser As JSONParser").Append(" "&CRLF)
		code.Append("parser.Initialize(str)").Append(" "&CRLF)
		code.Append("Dim root As ")
'		Dim root As mTreeItem = CreateTreeItem_b4x ("")
		If squareBracketFound Then
			code.Append("List = parser.NextArray").Append(" "&CRLF)
			BuildTree_b4x(parser.NextArray, code, "root", "", False, "")
		Else
			code.Append("Map = parser.NextObject").Append(" "&CRLF)
			BuildTree_b4x(parser.NextObject,  code, "root", "", False, "")
		End If
		Return code.ToString
End Sub

Sub BuildTree_b4x(element As Object,code As StringBuilder, _
		parentName As String, GetFromMap As String, BuildList As Boolean, indent As String)
	code.Append(indent)
	If element Is Map Then
		indent = WriteCodeHelper_b4x("Map", code, parentName, GetFromMap, BuildList, indent)
		Dim m As Map = element
		For Each k As String In m.Keys
'			Dim ti As mTreeItem = CreateTreeItem_b4x(k)
'			parent.Children.Add(ti)
			BuildTree_b4x(m.Get(k),  code, k, parentName & ".Get(""" & k & """)", False, indent)
		Next
	Else If element Is List Then
		indent = WriteCodeHelper_b4x("List", code, parentName, GetFromMap, BuildList, indent)
		Dim l As List = element
		Dim index As Int = 0
		For Each e As Object In l
'			Dim ti As mTreeItem = CreateTreeItem_b4x(index)
'			parent.Children.Add(ti)
			Dim stubCode As StringBuilder
			'only write the code for the first item
			If index = 0 Then stubCode = code Else stubCode.Initialize
			BuildTree_b4x(e,  stubCode, "col" & parentName ,"", index = 0, indent)
			index = index + 1
		Next
	Else
		Dim objectType As String
		If element Is Int Then
			objectType = "Int"
		Else If element Is Double Then
			objectType = "Double"
		Else
			objectType = "String"
		End If
		indent = WriteCodeHelper_b4x(objectType, code, parentName, GetFromMap, BuildList, indent)
'		parent.Text = parent.Text & ": " & element
	End If
	If BuildList Then
		'Log(indent)
		code.Append(indent.SubString(sIndent.Length)).Append("Next").Append(" "&CRLF)
	End If
End Sub
Sub WriteCodeHelper_b4x (ObjectType As String, code As StringBuilder, _
	parentName As String, GetFromMap As String, BuildList As Boolean, indent As String) As String
	If GetFromMap.Length > 0 Then
		Select ObjectType.ToLowerCase
		Case "int"
			code.Append("Dim " & parentName & " As " & ObjectType & " = " & GetFromMap.Replace("Get","GetDefault").Replace(")",",0)")).Append(" "&CRLF)
		Case "double"
			code.Append("Dim " & parentName & " As " & ObjectType & " = " & GetFromMap.Replace("Get","GetDefault").Replace(")",",0)")).Append(" "&CRLF)
		Case "string"
			code.Append("Dim " & parentName & " As " & ObjectType & " = " & GetFromMap.Replace("Get","GetDefault").Replace(")",","""")")).Append(" "&CRLF)
		Case Else
			'Log(ObjectType)
			code.Append("Dim " & parentName & " As " & ObjectType & " = " & GetFromMap&" "&CRLF)
		End Select		
	Else If BuildList Then
		code.Append("For Each " & parentName & " As " & ObjectType & " In " & parentName.SubString(3)).Append(" "&CRLF)
		indent = indent & sIndent
	End If
	Return indent
End Sub
#End Region