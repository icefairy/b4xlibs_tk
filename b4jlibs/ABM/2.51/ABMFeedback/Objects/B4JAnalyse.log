Analysing: ABMShared.bas
ABMShared.bas[0] ﻿Type=StaticCode 
ABMShared.bas[0] Version=4.7 
ABMShared.bas[0] ModulesStructureVersion=1 
ABMShared.bas[0] B4J=true 
ABMShared.bas[0] @EndOfDesignText@ 
ABMShared.bas[1] 'Static code module 
ABMShared.bas[2] Sub Process_Globals 
ABMShared.bas[3]  Public MyTheme As ABMTheme 
ABMShared.bas[4]  Private ABM As ABMaterial 'ignore 
ABMShared.bas[5]  Public NeedsAuthorization As Boolean = False 
ABMShared.bas[6]  Public AppVersion As String = DateTime.now 
ABMShared.bas[7]  Public AppPublishedStartURL As String = {0} 
ABMShared.bas[8]  Public AppName As String = {1} 
ABMShared.bas[9]  
ABMShared.bas[10]  Public CachedPages As Map 
ABMShared.bas[11]  Public CacheScavengePeriodSeconds As Int = 15*60 ' 15 minutes ' 10 minutes 
ABMShared.bas[12]  Public SessionMaxInactiveIntervalSeconds As Int = 30*60 ' 30 minutes '1*60*24 ' one hour ' -1 = immortal but beware! This means the cache is NEVER emptied! 
ABMShared.bas[13]  
ABMShared.bas[14] End Sub 
ABMShared.bas[15]  
ABMShared.bas[16] Public Sub NavigateToPage(ws As WebSocket, PageId As String, TargetUrl As String) 
ABMShared.bas[17]  If AppVersion <> {2} Then 
ABMShared.bas[18]  TargetUrl = TargetUrl & {3} & AppVersion 
ABMShared.bas[19]  End If 
ABMShared.bas[20]  ABM.RemoveMeFromCache(CachedPages, PageId) 
ABMShared.bas[21]  If ws.Open Then 
ABMShared.bas[22]  ws.Eval( {4} , Array As Object(TargetUrl)) 
ABMShared.bas[23]  ws.Flush 
ABMShared.bas[24]  End If 
ABMShared.bas[25] End Sub 
ABMShared.bas[26]  
ABMShared.bas[27] Sub RedirectOutput (Dir As String, FileName As String) 
ABMShared.bas[28]  #if RELEASE 
ABMShared.bas[29]  Dim out As OutputStream = File.OpenOutput(Dir, FileName, False) 'Set to True to append the logs 
ABMShared.bas[30]  Dim ps As JavaObject 
ABMShared.bas[31]  ps.InitializeNewInstance( {5} , Array(out, True, {6} )) 
ABMShared.bas[32]  Dim jo As JavaObject 
ABMShared.bas[33]  jo.InitializeStatic( {7} ) 
ABMShared.bas[34]  jo.RunMethod( {8} , Array(ps)) 
ABMShared.bas[35]  jo.RunMethod( {9} , Array(ps)) 
ABMShared.bas[36]  #end if 
ABMShared.bas[37] End Sub 
ABMShared.bas[38]  
ABMShared.bas[39] ' build methods for ABM objects 
ABMShared.bas[40] Sub BuildTheme(themeName As String) 
ABMShared.bas[41]  MyTheme.Initialize(themeName) 
ABMShared.bas[42]  
ABMShared.bas[43]  ' the page theme 
ABMShared.bas[44]  MyTheme.Page.BackColor = ABM.COLOR_BLUEGREY 
ABMShared.bas[45]  MyTheme.Page.BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
ABMShared.bas[46]  
ABMShared.bas[47]  ' the navbar theme 
ABMShared.bas[48]  MyTheme.AddNavigationBarTheme( {10} ) 
ABMShared.bas[49]  MyTheme.NavigationBar( {11} ).TopBarBackColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[50]  
ABMShared.bas[51]  ' a label header theme 
ABMShared.bas[52]  MyTheme.AddLabelTheme( {12} ) 
ABMShared.bas[53]  MyTheme.Label( {13} ).ForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[54]  MyTheme.Label( {14} ).ForeColorIntensity = ABM.INTENSITY_DARKEN2 
ABMShared.bas[55]  
ABMShared.bas[56]  ' another toast theme 
ABMShared.bas[57]  MyTheme.AddToastTheme( {15} ) 
ABMShared.bas[58]  MyTheme.Toast( {16} ).Rounded = True 
ABMShared.bas[59]  MyTheme.Toast( {17} ).ActionForeColor = ABM.COLOR_BLACK 
ABMShared.bas[60]  MyTheme.Toast( {18} ).BackColor = ABM.COLOR_RED 
ABMShared.bas[61]  
ABMShared.bas[62]  MyTheme.AddToastTheme( {19} ) 
ABMShared.bas[63]  MyTheme.Toast( {20} ).Rounded = True 
ABMShared.bas[64]  MyTheme.Toast( {21} ).ActionForeColor = ABM.COLOR_BLACK 
ABMShared.bas[65]  MyTheme.Toast( {22} ).BackColor = ABM.COLOR_GREEN 
ABMShared.bas[66]  
ABMShared.bas[67]  ' input 
ABMShared.bas[68]  MyTheme.AddInputTheme( {23} ) 
ABMShared.bas[69]  MyTheme.Input( {24} ).FocusForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[70]  MyTheme.Input( {25} ).FocusForeColorIntensity = ABM.INTENSITY_NORMAL 
ABMShared.bas[71]  
ABMShared.bas[72]  ' combo 
ABMShared.bas[73]  MyTheme.AddComboTheme( {26} ) 
ABMShared.bas[74]  MyTheme.Combo( {27} ).FocusForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[75]  MyTheme.Combo( {28} ).FocusforeColorIntensity = ABM.INTENSITY_NORMAL 
ABMShared.bas[76]  
ABMShared.bas[77]  ' label 
ABMShared.bas[78]  MyTheme.AddLabelTheme( {29} ) 
ABMShared.bas[79]  MyTheme.Label( {30} ).ForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[80]  MyTheme.Label( {31} ).ForeColorIntensity = ABM.INTENSITY_DARKEN2 
ABMShared.bas[81]  
ABMShared.bas[82]  
ABMShared.bas[83]  ' label zdepth 
ABMShared.bas[84]  MyTheme.AddLabelTheme( {32} ) 
ABMShared.bas[85]  MyTheme.Label( {33} ).ForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[86]  MyTheme.Label( {34} ).ZDepth = ABM.ZDEPTH_1 
ABMShared.bas[87] End Sub 
ABMShared.bas[88]  
ABMShared.bas[89] Sub BuildNavigationBar(page As ABMPage, Title As String, logo As String, ActiveTopReturnName As String, ActiveSideReturnName As String, ActiveSideSubReturnName As String) 
ABMShared.bas[90]  ' page.SetFontStack( {35} ) is the default in 2.02+ 
ABMShared.bas[91]  
ABMShared.bas[92]  Dim sbtopimg As ABMImage 
ABMShared.bas[93]  sbtopimg.Initialize(page, {36} , logo, 1) 
ABMShared.bas[94]  sbtopimg.SetFixedSize(236, 49) 
ABMShared.bas[95]  
ABMShared.bas[96]  page.NavigationBar.Initialize(page, {37} , ABM.SIDEBAR_MANUAL_HIDEMEDIUMSMALL, Title, True, True, 300, 48, sbtopimg, ABM.COLLAPSE_ACCORDION, {38} ) 
ABMShared.bas[97]  page.PaddingBottom = 100 
ABMShared.bas[98]  
ABMShared.bas[99]  page.NavigationBar.ActiveTopReturnName = ActiveTopReturnName 
ABMShared.bas[100]  page.NavigationBar.ActiveSideReturnName = ActiveSideReturnName 
ABMShared.bas[101]  page.NavigationBar.ActiveSideSubReturnName = ActiveSideSubReturnName 
ABMShared.bas[102]  
ABMShared.bas[103]  page.NavigationBar.AddTopItem( {39} , {40} , {41} , {42} , False) 
ABMShared.bas[104]  
ABMShared.bas[105]  page.NavigationBar.AddSideBarItem( {43} , {44} , {45} , {46} ) 
ABMShared.bas[106]  page.NavigationBar.AddSideBarDivider( {47} ) 
ABMShared.bas[107]  
ABMShared.bas[108]  
ABMShared.bas[109] End Sub 
ABMShared.bas[110]  
ABMShared.bas[111] Sub LogOff(page As ABMPage, myAppName As String) 
ABMShared.bas[112]  Dim Network As String = page.ws.Session.GetAttribute( {48} ) 
ABMShared.bas[113]  Dim Name As String = page.ws.Session.GetAttribute( {49} ) 
ABMShared.bas[114]  Select Case Network 
ABMShared.bas[115]  Case {50} 
ABMShared.bas[116]  ' do whatever you have to do to log off your user 
ABMShared.bas[117]  
ABMShared.bas[118]  page.ws.Session.SetAttribute( {51} , {52} ) 
ABMShared.bas[119]  page.ws.Session.SetAttribute( {53} , {54} ) 
ABMShared.bas[120]  page.ws.Session.SetAttribute( {55} , {56} ) 
ABMShared.bas[121]  page.ws.Session.SetAttribute( {57} , {58} ) 
ABMShared.bas[122]  'page.ws.Session.SetAttribute( {59} , {60} ) 
ABMShared.bas[123]  ABM.DeleteLogin(page, myAppName) 
ABMShared.bas[124]  NavigateToPage(page.ws, page.GetPageID, {61} ) 
ABMShared.bas[125]  Case ABM.SOCIALOAUTH_FACEBOOK 
ABMShared.bas[126]  ' the event SignedOffSocialNetwork will be raised on the page, do the rest there 
ABMShared.bas[127]  page.SignOffSocialNetwork(Network, {62} , Name) 
ABMShared.bas[128]  End Select 
ABMShared.bas[129] End Sub 
ABMShared.bas[130]  
ABMShared.bas[131] Sub Mid(Text As String, Start As Int, Length As Int) As String 
ABMShared.bas[132]  Return Text.SubString2(Start-1,Start+Length-1) 
ABMShared.bas[133] End Sub 
ABMShared.bas[134]  
ABMShared.bas[135] Sub Mid2(Text As String, Start As Int) As String 
ABMShared.bas[136]  Return Text.SubString(Start-1) 
ABMShared.bas[137] End Sub 
ABMShared.bas[138]  
ABMShared.bas[139] Sub ReplaceAll(Text As String, Pattern As String, Replacement As String) As String 
ABMShared.bas[140]  Dim jo As JavaObject = Regex.Matcher(Pattern, Text) 
ABMShared.bas[141]  Return jo.RunMethod( {63} , Array(Replacement)) 
ABMShared.bas[142] End Sub 
ABMShared.bas[143]  
ABMShared.bas[144] public Sub BuildParagraph(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[145]  Dim lbl As ABMLabel 
ABMShared.bas[146]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {64} ) 
ABMShared.bas[147]  Return lbl 
ABMShared.bas[148] End Sub 
ABMShared.bas[149]  
ABMShared.bas[150] public Sub BuildParagraphBQ(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[151]  Dim lbl As ABMLabel 
ABMShared.bas[152]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {65} ) 
ABMShared.bas[153]  lbl.IsBlockQuote = True 
ABMShared.bas[154]  Return lbl 
ABMShared.bas[155] End Sub 
ABMShared.bas[156]  
ABMShared.bas[157] public Sub BuildParagraphBQWithZDepth(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[158]  Dim lbl As ABMLabel 
ABMShared.bas[159]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {66} ) 
ABMShared.bas[160]  lbl.IsBlockQuote = True 
ABMShared.bas[161]  Return lbl 
ABMShared.bas[162] End Sub 
ABMShared.bas[163]  
ABMShared.bas[164] public Sub BuildImage(page As ABMPage, id As String, image As String, opacity As Double, Caption As String) As ABMImage 
ABMShared.bas[165]  Dim img As ABMImage 
ABMShared.bas[166]  img.Initialize(page, id, image,opacity) 
ABMShared.bas[167]  img.IsMaterialBoxed = True 
ABMShared.bas[168]  img.IsResponsive = True 
ABMShared.bas[169]  img.Caption = Caption 
ABMShared.bas[170]  Return img 
ABMShared.bas[171] End Sub 
ABMShared.bas[172]  
ABMShared.bas[173]  
ABMShared.bas[174]  
ABMShared.bas[175]  
Analysing: DBM.bas
DBM.bas[0] ﻿Type=StaticCode 
DBM.bas[0] Version=4.7 
DBM.bas[0] ModulesStructureVersion=1 
DBM.bas[0] B4J=true 
DBM.bas[0] @EndOfDesignText@ 
DBM.bas[1] Sub Process_Globals 
DBM.bas[2]  Private pool As ConnectionPool 
DBM.bas[3]  Private SQLite As SQL 
DBM.bas[4]  Public UsePool As Boolean 
DBM.bas[5] End Sub 
DBM.bas[6]  
DBM.bas[7] Sub InitializeSQLite(Dir As String, fileName As String, createIfNeeded As Boolean) 'ignore 
DBM.bas[8]  Log( {0} ) 
DBM.bas[9]  SQLite.InitializeSQLite(Dir, fileName, createIfNeeded) 
DBM.bas[10]  UsePool = False 
DBM.bas[11] End Sub 
DBM.bas[12]  
DBM.bas[13] Sub InitializeMySQL(jdbcUrl As String ,login As String, password As String, poolSize As Int) 
DBM.bas[14]  Log( {1} ) 
DBM.bas[15]  UsePool = True 
DBM.bas[16]  Try 
DBM.bas[17]  pool.Initialize( {2} , jdbcUrl, login, password) 
DBM.bas[18]  Catch 
DBM.bas[19]  Log( {3} &LastException.Message) 
DBM.bas[20]  End Try 
DBM.bas[21]  
DBM.bas[22]  ' change pool size... 
DBM.bas[23]  Dim jo As JavaObject = pool 
DBM.bas[24]  jo.RunMethod( {4} , Array(poolSize)) 
DBM.bas[25] End Sub 
DBM.bas[26]  
DBM.bas[27] Sub GetSQL() As SQL 
DBM.bas[28]  If UsePool Then 
DBM.bas[29]  Return pool.GetConnection 
DBM.bas[30]  Else 
DBM.bas[31]  Return SQLite 
DBM.bas[32]  End If 
DBM.bas[33] End Sub 
DBM.bas[34]  
DBM.bas[35] Sub CloseSQL(mySQL As SQL) 
DBM.bas[36]  If UsePool Then 
DBM.bas[37]  mySQL.Close 
DBM.bas[38]  End If 
DBM.bas[39] End Sub 
DBM.bas[40]  
DBM.bas[41] Sub CreateTablesIfNeeded() 
DBM.bas[42]  Dim SQL As SQL = GetSQL 
DBM.bas[43]  Dim SQL_str As String 
DBM.bas[44]  
DBM.bas[45]  ' Create the tables 
DBM.bas[46]  If UsePool Then 
DBM.bas[47]  SQL_str = {5} 
DBM.bas[48]  If SQLSelectSingleResult(SQL, SQL_str) = 0 Then 
DBM.bas[49]  SQL_str = {6} 
DBM.bas[50]  SQLCreate(SQL, SQL_str) 
DBM.bas[51]  
DBM.bas[52]  'SQL_str = {7} 
DBM.bas[53]  'SQLCreate(SQL, SQL_str) 
DBM.bas[54]  
DBM.bas[55]  SQL_str = {8} 
DBM.bas[56]  SQLCreate(SQL, SQL_str) 
DBM.bas[57]  
DBM.bas[58]  SQL_str = {9} 
DBM.bas[59]  SQLCreate(SQL, SQL_str) 
DBM.bas[60]  
DBM.bas[61]  SQL_str = {10} 
DBM.bas[62]  SQLCreate(SQL, SQL_str) 
DBM.bas[63]  
DBM.bas[64]  SQL_str = {11} 
DBM.bas[65]  SQLCreate(SQL, SQL_str) 
DBM.bas[66]  
DBM.bas[67]  ' create the administrator, set your password! 
DBM.bas[68]  SQL_str = {12} 
DBM.bas[69]  SQLCreate(SQL, SQL_str) 
DBM.bas[70]  
DBM.bas[71]  End If 
DBM.bas[72]  Else 
DBM.bas[73]  SQL_str = {13} 
DBM.bas[74]  If SQLSelectSingleResult(SQL, SQL_str) = 0 Then 
DBM.bas[75]  SQL_str = {14} 'best mode for multithreaded apps. 
DBM.bas[76]  SQLCreate(SQL, SQL_str) 
DBM.bas[77]  
DBM.bas[78]  SQL_str = {15} 
DBM.bas[79]  SQLCreate(SQL, SQL_str) 
DBM.bas[80]  
DBM.bas[81]  'SQL_str = {16} 
DBM.bas[82]  'SQLCreate(SQL, SQL_str) 
DBM.bas[83]  
DBM.bas[84]  SQL_str = {17} 
DBM.bas[85]  SQLCreate(SQL, SQL_str) 
DBM.bas[86]  
DBM.bas[87]  SQL_str = {18} 
DBM.bas[88]  SQLCreate(SQL, SQL_str) 
DBM.bas[89]  
DBM.bas[90]  SQL_str = {19} 
DBM.bas[91]  SQLCreate(SQL, SQL_str) 
DBM.bas[92]  
DBM.bas[93]  SQL_str = {20} 
DBM.bas[94]  SQLCreate(SQL, SQL_str) 
DBM.bas[95]  
DBM.bas[96]  ' create the administrator, set your password! 
DBM.bas[97]  SQL_str = {21} 
DBM.bas[98]  SQLCreate(SQL, SQL_str) 
DBM.bas[99]  End If 
DBM.bas[100]  End If 
DBM.bas[101]  CloseSQL(SQL) 
DBM.bas[102] End Sub 
DBM.bas[103]  
DBM.bas[104] Sub SQLSelect(SQL As SQL, Query As String, Args As List) As List 
DBM.bas[105]  Dim l As List 
DBM.bas[106]  l.Initialize 
DBM.bas[107]  Dim cur As ResultSet 
DBM.bas[108]  Try 
DBM.bas[109]  cur = SQL.ExecQuery2(Query, Args) 
DBM.bas[110]  Catch 
DBM.bas[111]  Log(LastException) 
DBM.bas[112]  Return l 
DBM.bas[113]  End Try 
DBM.bas[114]  Do While cur.NextRow 
DBM.bas[115]  Dim res As Map 
DBM.bas[116]  res.Initialize 
DBM.bas[117]  For i = 0 To cur.ColumnCount - 1 
DBM.bas[118]  res.Put(cur.GetColumnName(i).ToLowerCase, cur.GetString2(i)) 
DBM.bas[119]  Next 
DBM.bas[120]  l.Add(res) 
DBM.bas[121]  Loop 
DBM.bas[122]  cur.Close 
DBM.bas[123]  Return l 
DBM.bas[124] End Sub 
DBM.bas[125]  
DBM.bas[126] Sub SQLCreate(SQL As SQL, Query As String) As Int 
DBM.bas[127]  Dim res As Int 
DBM.bas[128]  Try 
DBM.bas[129]  SQL.ExecNonQuery(Query) 
DBM.bas[130]  res = 0 
DBM.bas[131]  Catch 
DBM.bas[132]  Log(LastException) 
DBM.bas[133]  res = -99999999 
DBM.bas[134]  End Try 
DBM.bas[135]  Return res 
DBM.bas[136] End Sub 
DBM.bas[137]  
DBM.bas[138] Sub SQLInsert(SQL As SQL, Query As String) As Int 
DBM.bas[139]  Dim res As Int 
DBM.bas[140]  Try 
DBM.bas[141]  SQL.ExecNonQuery(Query) 
DBM.bas[142]  If UsePool Then 
DBM.bas[143]  res = SQLSelectSingleResult(SQL, {22} ) 
DBM.bas[144]  Else 
DBM.bas[145]  res = SQLSelectSingleResult(SQL, {23} ) 
DBM.bas[146]  End If 
DBM.bas[147]  Catch 
DBM.bas[148]  Log(LastException) 
DBM.bas[149]  res = -99999999 
DBM.bas[150]  End Try 
DBM.bas[151]  Return res 
DBM.bas[152] End Sub 
DBM.bas[153]  
DBM.bas[154] Sub SQLUpdate(SQL As SQL, Query As String) As Int 
DBM.bas[155]  Dim res As Int 
DBM.bas[156]  Try 
DBM.bas[157]  SQL.ExecNonQuery(Query) 
DBM.bas[158]  res = 0 
DBM.bas[159]  Catch 
DBM.bas[160]  Log(LastException) 
DBM.bas[161]  res = -99999999 
DBM.bas[162]  End Try 
DBM.bas[163]  Return res 
DBM.bas[164] End Sub 
DBM.bas[165]  
DBM.bas[166] Sub SQLDelete(SQL As SQL, Query As String) As Int 
DBM.bas[167]  Dim res As Int 
DBM.bas[168]  Try 
DBM.bas[169]  SQL.ExecNonQuery(Query) 
DBM.bas[170]  res = 0 
DBM.bas[171]  Catch 
DBM.bas[172]  Log(LastException) 
DBM.bas[173]  res = -99999999 
DBM.bas[174]  End Try 
DBM.bas[175]  Return res 
DBM.bas[176] End Sub 
DBM.bas[177]  
DBM.bas[178] Sub SQLSelectSingleResult(SQL As SQL, Query As String) As String 
DBM.bas[179]  Dim res As String 
DBM.bas[180]  Try 
DBM.bas[181]  res = SQL.ExecQuerySingleResult(Query) 
DBM.bas[182]  Catch 
DBM.bas[183]  Log(LastException) 
DBM.bas[184]  res = -99999999 
DBM.bas[185]  End Try 
DBM.bas[186]  If res = Null Then 
DBM.bas[187]  Return {24} 
DBM.bas[188]  End If 
DBM.bas[189]  Return res 
DBM.bas[190] End Sub 
DBM.bas[191]  
DBM.bas[192] Sub SQLInsertOrUpdate(SQL As SQL, SelectQuery As String, InsertQuery As String, UpdateQuery As String) As Int 
DBM.bas[193]  Dim foundres As Int = SQLSelectSingleResult(SQL, SelectQuery) 
DBM.bas[194]  If foundres = -99999999 Then 
DBM.bas[195]  Return foundres 
DBM.bas[196]  End If 
DBM.bas[197]  Dim res As Int 
DBM.bas[198]  If foundres = 0 Then 
DBM.bas[199]  res = SQLInsert(SQL, InsertQuery) 
DBM.bas[200]  Else 
DBM.bas[201]  res = SQLUpdate(SQL, UpdateQuery) 
DBM.bas[202]  If res = 0 Then 
DBM.bas[203]  res = foundres 
DBM.bas[204]  End If 
DBM.bas[205]  End If 
DBM.bas[206]  Return res 
DBM.bas[207] End Sub 
DBM.bas[208]  
DBM.bas[209] Sub BuildSelectQuery(TableName As String, Fields As Map, WhereFields As Map, OrderFields As Map) As String 
DBM.bas[210]  Dim sb As StringBuilder 
DBM.bas[211]  sb.Initialize 
DBM.bas[212]  sb.Append( {25} ) 
DBM.bas[213]  For i = 0 To Fields.Size - 1 
DBM.bas[214]  Dim col As String = Fields.GetKeyAt(i) 
DBM.bas[215]  If i > 0 Then 
DBM.bas[216]  sb.Append( {26} ) 
DBM.bas[217]  End If 
DBM.bas[218]  sb.Append(col) 
DBM.bas[219]  Next 
DBM.bas[220]  sb.Append( {27} & TableName) 
DBM.bas[221]  If WhereFields.IsInitialized Then 
DBM.bas[222]  sb.Append( {28} ) 
DBM.bas[223]  For i = 0 To WhereFields.Size - 1 
DBM.bas[224]  Dim col As String = WhereFields.GetKeyAt(i) 
DBM.bas[225]  Dim value As String = WhereFields.GetValueAt(i) 
DBM.bas[226]  If i > 0 Then 
DBM.bas[227]  sb.Append( {29} ) 
DBM.bas[228]  End If 
DBM.bas[229]  sb.Append(col & {30} & value) 
DBM.bas[230]  Next 
DBM.bas[231]  End If 
DBM.bas[232]  If OrderFields.IsInitialized Then 
DBM.bas[233]  sb.Append( {31} ) 
DBM.bas[234]  For i = 0 To WhereFields.Size - 1 
DBM.bas[235]  Dim col As String = OrderFields.GetKeyAt(i) 
DBM.bas[236]  If i > 0 Then 
DBM.bas[237]  sb.Append( {32} ) 
DBM.bas[238]  End If 
DBM.bas[239]  sb.Append(col) 
DBM.bas[240]  Next 
DBM.bas[241]  End If 
DBM.bas[242]  
DBM.bas[243]  Return sb.ToString 
DBM.bas[244] End Sub 
DBM.bas[245]  
DBM.bas[246] Sub BuildInsertQuery(TableName As String, Fields As Map) As String 
DBM.bas[247]  Dim sb As StringBuilder 
DBM.bas[248]  sb.Initialize 
DBM.bas[249]  sb.Append( {33} & TableName & {34} ) 
DBM.bas[250]  For i = 0 To Fields.Size - 1 
DBM.bas[251]  Dim col As String = Fields.GetKeyAt(i) 
DBM.bas[252]  If i > 0 Then 
DBM.bas[253]  sb.Append( {35} ) 
DBM.bas[254]  End If 
DBM.bas[255]  sb.Append(col) 
DBM.bas[256]  Next 
DBM.bas[257]  sb.Append( {36} ) 
DBM.bas[258]  For i = 0 To Fields.Size - 1 
DBM.bas[259]  Dim col As String = Fields.GetValueAt(i) 
DBM.bas[260]  If i > 0 Then 
DBM.bas[261]  sb.Append( {37} ) 
DBM.bas[262]  End If 
DBM.bas[263]  sb.Append(col) 
DBM.bas[264]  Next 
DBM.bas[265]  sb.Append( {38} ) 
DBM.bas[266]  Return sb.ToString 
DBM.bas[267] End Sub 
DBM.bas[268]  
DBM.bas[269] Sub BuildDeleteQuery(TableName As String, WhereFields As Map) As String 'ignore 
DBM.bas[270]  Dim sb As StringBuilder 
DBM.bas[271]  sb.Initialize 
DBM.bas[272]  sb.Append( {39} & TableName) 
DBM.bas[273]  If WhereFields.IsInitialized Then 
DBM.bas[274]  sb.Append( {40} ) 
DBM.bas[275]  For i = 0 To WhereFields.Size - 1 
DBM.bas[276]  Dim col As String = WhereFields.GetKeyAt(i) 
DBM.bas[277]  Dim value As String = WhereFields.GetValueAt(i) 
DBM.bas[278]  If i > 0 Then 
DBM.bas[279]  sb.Append( {41} ) 
DBM.bas[280]  End If 
DBM.bas[281]  sb.Append(col & {42} & value) 
DBM.bas[282]  Next 
DBM.bas[283]  End If 
DBM.bas[284]  Return sb.ToString 
DBM.bas[285] End Sub 
DBM.bas[286]  
DBM.bas[287] Sub BuildUpdateQuery(TableName As String, Fields As Map, WhereFields As Map) As String 
DBM.bas[288]  Dim sb As StringBuilder 
DBM.bas[289]  sb.Initialize 
DBM.bas[290]  sb.Append( {43} & TableName & {44} ) 
DBM.bas[291]  For i = 0 To Fields.Size - 1 
DBM.bas[292]  Dim col As String = Fields.GetKeyAt(i) 
DBM.bas[293]  Dim value As String = Fields.GetValueAt(i) 
DBM.bas[294]  If i > 0 Then 
DBM.bas[295]  sb.Append( {45} ) 
DBM.bas[296]  End If 
DBM.bas[297]  sb.Append(col & {46} & value) 
DBM.bas[298]  Next 
DBM.bas[299]  If WhereFields.IsInitialized Then 
DBM.bas[300]  sb.Append( {47} ) 
DBM.bas[301]  For i = 0 To WhereFields.Size - 1 
DBM.bas[302]  Dim col As String = WhereFields.GetKeyAt(i) 
DBM.bas[303]  Dim value As String = WhereFields.GetValueAt(i) 
DBM.bas[304]  If i > 0 Then 
DBM.bas[305]  sb.Append( {48} ) 
DBM.bas[306]  End If 
DBM.bas[307]  sb.Append(col & {49} & value) 
DBM.bas[308]  Next 
DBM.bas[309]  End If 
DBM.bas[310]  Return sb.ToString 
DBM.bas[311] End Sub 
DBM.bas[312]  
DBM.bas[313] Sub SetQuotes(str As String) As String 
DBM.bas[314]  str = ABMShared.ReplaceAll(str, {50} , {51} ) 
DBM.bas[315]  Return {52} & str & {53} 
DBM.bas[316] End Sub 
Analysing: ABMApplication.bas
ABMApplication.bas[0] ﻿Type=Class 
ABMApplication.bas[0] Version=4.7 
ABMApplication.bas[0] ModulesStructureVersion=1 
ABMApplication.bas[0] B4J=true 
ABMApplication.bas[0] @EndOfDesignText@ 
ABMApplication.bas[1] 'Main application 
ABMApplication.bas[2] Sub Class_Globals 
ABMApplication.bas[3]  ' change to match you app 
ABMApplication.bas[4]  Private InitialPage As String = {0} 
ABMApplication.bas[5]  ' other variables needed 
ABMApplication.bas[6]  Private AppPage As ABMPage 
ABMApplication.bas[7]  Private theme As ABMTheme 
ABMApplication.bas[8]  Private ws As WebSocket 'ignore 
ABMApplication.bas[9]  Private ABM As ABMaterial 'ignore 
ABMApplication.bas[10]  Private Pages As List 
ABMApplication.bas[11]  Private PageNeedsUpload As List 
ABMApplication.bas[12]  Private ABMPageId As String = {1} 
ABMApplication.bas[13] End Sub 
ABMApplication.bas[14]  
ABMApplication.bas[15] Public Sub Initialize 
ABMApplication.bas[16]  Pages.Initialize 
ABMApplication.bas[17]  PageNeedsUpload.Initialize 
ABMApplication.bas[18]  ' add your icons 
ABMApplication.bas[19]  ABM.AddAppleTouchIcon( {2} , {3} ) 
ABMApplication.bas[20]  ABM.AddMSTileIcon( {4} , {5} ) 
ABMApplication.bas[21]  ABM.AddFavorityIcon( {6} , {7} ) 
ABMApplication.bas[22]  ABM.AppVersion=ABMShared.AppVersion 
ABMApplication.bas[23]  ABM.AppPublishedStartURL = ABM.AppPublishedStartURL 
ABMApplication.bas[24]  ABM.PreloadAllJavascriptAndCSSFiles=True ' NEW 
ABMApplication.bas[25]  #if release 
ABMApplication.bas[26]  ABM.ActivateGZip( {8} , 1000) ' NEW 
ABMApplication.bas[27]  ABM.AppDefaultPageCSSInline=True ' NEW 
ABMApplication.bas[28]  ABM.AppDefaultPageJSInline=True ' NEW 
ABMApplication.bas[29]  
ABMApplication.bas[30]  Dim folders As List ' NEW 
ABMApplication.bas[31]  folders.Initialize 
ABMApplication.bas[32]  folders.Add(File.DirApp & {9} & ABMShared.AppName & {10} ) 
ABMApplication.bas[33]  ABM.ActivatePNGOptimize( {11} , folders, False , 9, False, False) 
ABMApplication.bas[34]  #end if 
ABMApplication.bas[35]  ' start with the base theme defined in ABMShared 
ABMApplication.bas[36]  theme.Initialize( {12} ) 
ABMApplication.bas[37]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMApplication.bas[38]  
ABMApplication.bas[39]  ' add additional themes specific for this page 
ABMApplication.bas[40]  
ABMApplication.bas[41]  ' initialize this page using our theme 
ABMApplication.bas[42]  AppPage.InitializeWithTheme(ABMShared.AppName, {13} & ABMShared.AppName, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMApplication.bas[43]  AppPage.ShowLoader=True 
ABMApplication.bas[44]  AppPage.PageTitle = {14} 
ABMApplication.bas[45]  AppPage.PageDescription = {15} 
ABMApplication.bas[46]  
ABMApplication.bas[47]  
ABMApplication.bas[48]  ' adding a navigation bar 
ABMApplication.bas[49]  
ABMApplication.bas[50]  
ABMApplication.bas[51]  ' create the page grid 
ABMApplication.bas[52]  AppPage.AddRows(1,True, {16} ).AddCells12(1, {17} ) 
ABMApplication.bas[53]  AppPage.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[54]  
ABMApplication.bas[55]  ' add a modal sheet template to enter contact information 
ABMApplication.bas[56]  AppPage.AddModalSheetTemplate(BuildLoginSheet) 
ABMApplication.bas[57]  
ABMApplication.bas[58]  ' add a error box template if the name is not entered 
ABMApplication.bas[59]  AppPage.AddModalSheetTemplate(BuildWrongInputModalSheet) 
ABMApplication.bas[60] End Sub 
ABMApplication.bas[61]  
ABMApplication.bas[62] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMApplication.bas[63]  ws = WebSocket1 
ABMApplication.bas[64]  ABMPageId = ABM.GetPageID(AppPage, ABMShared.AppName,ws) 
ABMApplication.bas[65]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 'ignore 
ABMApplication.bas[66]  
ABMApplication.bas[67]  ' Prepare the page IMPORTANT! 
ABMApplication.bas[68]  AppPage.Prepare 
ABMApplication.bas[69]  
ABMApplication.bas[70]  ' navigate to the first page 
ABMApplication.bas[71]  If ABMShared.NeedsAuthorization Then 
ABMApplication.bas[72]  If ws.Session.GetAttribute2( {18} , {19} ) = {20} Then 
ABMApplication.bas[73]  Dim loginpwd As String = ABM.LoadLogin(AppPage, ABMShared.AppName) 
ABMApplication.bas[74]  If loginpwd <> {21} Then 
ABMApplication.bas[75]  Dim SQL As SQL = DBM.GetSQL 
ABMApplication.bas[76]  Dim split() As String = Regex.Split( {22} , loginpwd) 
ABMApplication.bas[77]  
ABMApplication.bas[78]  Dim vars As List 
ABMApplication.bas[79]  vars.Initialize 
ABMApplication.bas[80]  vars.Add(split(0)) 
ABMApplication.bas[81]  vars.Add(split(1)) 
ABMApplication.bas[82]  Dim users As List = DBM.SQLSelect(SQL, {23} , vars) 
ABMApplication.bas[83]  
ABMApplication.bas[84]  'Dim users As List = DBM.SQLSelect(SQL, {24} & split(0) & {25} & split(1) & {26} ) 
ABMApplication.bas[85]  If users.Size > 0 Then 
ABMApplication.bas[86]  Dim user As Map = users.Get(0) 
ABMApplication.bas[87]  ws.Session.SetAttribute( {27} , {28} ) 
ABMApplication.bas[88]  ws.Session.SetAttribute( {29} , split(0)) 
ABMApplication.bas[89]  ws.Session.SetAttribute( {30} , {31} ) 
ABMApplication.bas[90]  ws.Session.SetAttribute( {32} , {33} & user.Get( {34} ) ) ' lowercase! 
ABMApplication.bas[91]  ws.Session.SetAttribute( {35} , {36} & user.Get( {37} ) ) ' lowercase! 
ABMApplication.bas[92]  ABMShared.NavigateToPage(ws, ABMPageId, {38} & InitialPage) 
ABMApplication.bas[93]  DBM.CloseSQL(SQL) 
ABMApplication.bas[94]  Return 
ABMApplication.bas[95]  End If 
ABMApplication.bas[96]  DBM.CloseSQL(SQL) 
ABMApplication.bas[97]  End If 
ABMApplication.bas[98]  AppPage.ShowModalSheet( {39} ) 
ABMApplication.bas[99]  Return 
ABMApplication.bas[100]  End If 
ABMApplication.bas[101]  End If 
ABMApplication.bas[102]  ABMShared.NavigateToPage(ws, ABMPageId, {40} & InitialPage) 
ABMApplication.bas[103] End Sub 
ABMApplication.bas[104]  
ABMApplication.bas[105] Private Sub WebSocket_Disconnected 
ABMApplication.bas[106]  Log( {41} ) 
ABMApplication.bas[107] End Sub 
ABMApplication.bas[108]  
ABMApplication.bas[109] Sub Page_ParseEvent(Params As Map) 
ABMApplication.bas[110]  Dim eventName As String = Params.Get( {42} ) 
ABMApplication.bas[111]  Dim eventParams() As String = Regex.Split( {43} ,Params.Get( {44} )) 
ABMApplication.bas[112]  If eventName = {45} Then 
ABMApplication.bas[113]  Log( {46} ) 
ABMApplication.bas[114]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMApplication.bas[115]  Return 
ABMApplication.bas[116]  End If 
ABMApplication.bas[117]  If SubExists(Me, eventName) Then 
ABMApplication.bas[118]  Params.Remove( {47} ) 
ABMApplication.bas[119]  Params.Remove( {48} ) 
ABMApplication.bas[120]  Select Case Params.Size 
ABMApplication.bas[121]  Case 0 
ABMApplication.bas[122]  CallSub(Me, eventName) 
ABMApplication.bas[123]  Case 1 
ABMApplication.bas[124]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMApplication.bas[125]  Case 2 
ABMApplication.bas[126]  If Params.get(eventParams(0)) = {49} Then 
ABMApplication.bas[127]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMApplication.bas[128]  CallSub2(Me, eventName, PassedTables) 
ABMApplication.bas[129]  Else 
ABMApplication.bas[130]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMApplication.bas[131]  End If 
ABMApplication.bas[132]  Case Else 
ABMApplication.bas[133]  ' cannot be called directly, to many param 
ABMApplication.bas[134]  CallSub2(Me, eventName, Params) 
ABMApplication.bas[135]  End Select 
ABMApplication.bas[136]  End If 
ABMApplication.bas[137] End Sub 
ABMApplication.bas[138]  
ABMApplication.bas[139] public Sub AddPage(page As ABMPage) 
ABMApplication.bas[140]  Pages.Add(page.Name) 
ABMApplication.bas[141]  PageNeedsUpload.Add(ABM.WritePageToDisk(page, File.DirApp & {50} & ABMShared.AppName & {51} & page.Name & {52} , {53} , ABMShared.NeedsAuthorization)) 
ABMApplication.bas[142] End Sub 
ABMApplication.bas[143]  
ABMApplication.bas[144] public Sub StartServer(srvr As Server, srvrName As String, srvrPort As Int) 
ABMApplication.bas[145]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {54} & ABMShared.AppName, {55} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[146]  
ABMApplication.bas[147]  ' start the server 
ABMApplication.bas[148]  srvr.Initialize(srvrName) 
ABMApplication.bas[149]  
ABMApplication.bas[150]  srvr.AddFilter( {56} , {57} , False) 
ABMApplication.bas[151]  srvr.AddWebSocket( {58} & ABMShared.AppName, {59} ) 
ABMApplication.bas[152]  For i =0 To Pages.Size - 1 
ABMApplication.bas[153]  srvr.AddWebSocket( {60} & ABMShared.AppName & {61} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[154]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[155]  srvr.AddHandler( {62} & ABMShared.AppName & {63} & Pages.Get(i) & {64} , {65} , False) 
ABMApplication.bas[156]  End If 
ABMApplication.bas[157]  Next 
ABMApplication.bas[158]  srvr.AddBackgroundWorker( {66} ) 
ABMApplication.bas[159]  srvr.Port = srvrPort 
ABMApplication.bas[160]  
ABMApplication.bas[161]  #If RELEASE 
ABMApplication.bas[162]  srvr.SetStaticFilesOptions(CreateMap( {67} : {68} , {69} :True, {70} :False)) 
ABMApplication.bas[163]  #Else 
ABMApplication.bas[164]  srvr.SetStaticFilesOptions(CreateMap( {71} : {72} , {73} :False, {74} :False)) 
ABMApplication.bas[165]  #End If 
ABMApplication.bas[166]  srvr.Start 
ABMApplication.bas[167]  Dim jo As JavaObject = srvr 
ABMApplication.bas[168]  Dim connectors() As Object = jo.GetFieldJO( {75} ).RunMethod( {76} , Null) 
ABMApplication.bas[169]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[170]  For Each c As JavaObject In connectors 
ABMApplication.bas[171]  c.RunMethod( {77} , Array(timeout)) 
ABMApplication.bas[172]  Next 
ABMApplication.bas[173]  
ABMApplication.bas[174]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[175] End Sub 
ABMApplication.bas[176]  
ABMApplication.bas[177] public Sub StartServerHTTP2(srvr As Server, srvrName As String, srvrPort As Int, SSLsvrPort As Int, SSLKeyStoreFileName As String, SSLKeyStorePassword As String, SSLKeyManagerPassword As String) 
ABMApplication.bas[178]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {78} & ABMShared.AppName, {79} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[179]  
ABMApplication.bas[180]  Dim ssl As SslConfiguration 
ABMApplication.bas[181]  ssl.Initialize 
ABMApplication.bas[182]  ssl.SetKeyStorePath(File.DirApp, SSLKeyStoreFileName) 'path to keystore file 
ABMApplication.bas[183]  ssl.KeyStorePassword = SSLKeyStorePassword 
ABMApplication.bas[184]  ssl.KeyManagerPassword = SSLKeyManagerPassword 
ABMApplication.bas[185]  srvr.SetSslConfiguration(ssl, SSLsvrPort) 
ABMApplication.bas[186]  
ABMApplication.bas[187]  ' start the server 
ABMApplication.bas[188]  srvr.Initialize(srvrName) 
ABMApplication.bas[189]  
ABMApplication.bas[190]  srvr.AddFilter( {80} , {81} , False) 
ABMApplication.bas[191]  srvr.AddWebSocket( {82} & ABMShared.AppName, {83} ) 
ABMApplication.bas[192]  For i =0 To Pages.Size - 1 
ABMApplication.bas[193]  srvr.AddWebSocket( {84} & ABMShared.AppName & {85} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[194]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[195]  srvr.AddHandler( {86} & ABMShared.AppName & {87} & Pages.Get(i) & {88} , {89} , False) 
ABMApplication.bas[196]  End If 
ABMApplication.bas[197]  Next 
ABMApplication.bas[198]  srvr.AddBackgroundWorker( {90} ) 
ABMApplication.bas[199]  srvr.Port = srvrPort 
ABMApplication.bas[200]  srvr.Http2Enabled = True 
ABMApplication.bas[201]  #If RELEASE 
ABMApplication.bas[202]  srvr.SetStaticFilesOptions(CreateMap( {91} : {92} , {93} :True, {94} :False)) 
ABMApplication.bas[203]  #Else 
ABMApplication.bas[204]  srvr.SetStaticFilesOptions(CreateMap( {95} : {96} , {97} :False, {98} :False)) 
ABMApplication.bas[205]  #End If 
ABMApplication.bas[206]  srvr.Start 
ABMApplication.bas[207]  Dim jo As JavaObject = srvr 
ABMApplication.bas[208]  Dim connectors() As Object = jo.GetFieldJO( {99} ).RunMethod( {100} , Null) 
ABMApplication.bas[209]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[210]  For Each c As JavaObject In connectors 
ABMApplication.bas[211]  c.RunMethod( {101} , Array(timeout)) 
ABMApplication.bas[212]  Next 
ABMApplication.bas[213]  
ABMApplication.bas[214]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[215] End Sub 
ABMApplication.bas[216]  
ABMApplication.bas[217] Sub msbtn1_Clicked(Target As String) 
ABMApplication.bas[218]  Dim SQL As SQL = DBM.GetSQL 
ABMApplication.bas[219]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {102} ) 
ABMApplication.bas[220]  Dim inp1 As ABMInput = mymodal.Content.Component( {103} ) 
ABMApplication.bas[221]  Dim inp2 As ABMInput = mymodal.Content.Component( {104} ) 
ABMApplication.bas[222]  ' here check the login a page against your login database 
ABMApplication.bas[223]  
ABMApplication.bas[224]  Dim vars As List 
ABMApplication.bas[225]  vars.Initialize 
ABMApplication.bas[226]  vars.Add(inp1.Text) 
ABMApplication.bas[227]  vars.Add(inp2.Text) 
ABMApplication.bas[228]  Dim users As List = DBM.SQLSelect(SQL, {105} , vars) 
ABMApplication.bas[229]  If users.Size = 0 Then 
ABMApplication.bas[230]  inp2.Text = {106} 
ABMApplication.bas[231]  'mymodal.Refresh 
ABMApplication.bas[232]  AppPage.ShowModalSheet( {107} ) 
ABMApplication.bas[233]  Return 
ABMApplication.bas[234]  End If 
ABMApplication.bas[235]  Dim user As Map = users.Get(0) 
ABMApplication.bas[236]  DBM.CloseSQL(SQL) 
ABMApplication.bas[237]  ABM.SaveLogin(AppPage, ABMShared.AppName, inp1.Text, inp2.Text) 
ABMApplication.bas[238]  ws.Session.SetAttribute( {108} , {109} ) 
ABMApplication.bas[239]  ws.Session.SetAttribute( {110} , inp1.Text) 
ABMApplication.bas[240]  ws.Session.SetAttribute( {111} , {112} ) 
ABMApplication.bas[241]  ws.Session.SetAttribute( {113} , {114} & user.Get( {115} ) ) ' lowercase! 
ABMApplication.bas[242]  ws.Session.SetAttribute( {116} , {117} & user.Get( {118} ) ) ' lowercase! 
ABMApplication.bas[243]  ABMShared.NavigateToPage(ws, ABMPageId, {119} & InitialPage) 
ABMApplication.bas[244] End Sub 
ABMApplication.bas[245]  
ABMApplication.bas[246] Sub inp2_EnterPressed(value As String) 
ABMApplication.bas[247]  Dim SQL As SQL = DBM.GetSQL 
ABMApplication.bas[248]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {120} ) 
ABMApplication.bas[249]  Dim inp1 As ABMInput = mymodal.Content.Component( {121} ) 
ABMApplication.bas[250]  Dim inp2 As ABMInput = mymodal.Content.Component( {122} ) 
ABMApplication.bas[251]  ' here check the login a page against your login database 
ABMApplication.bas[252]  Dim vars As List 
ABMApplication.bas[253]  vars.Initialize 
ABMApplication.bas[254]  vars.Add(inp1.Text) 
ABMApplication.bas[255]  vars.Add(inp2.Text) 
ABMApplication.bas[256]  Dim users As List = DBM.SQLSelect(SQL, {123} , vars) 
ABMApplication.bas[257]  If users.Size = 0 Then 
ABMApplication.bas[258]  inp2.Text = {124} 
ABMApplication.bas[259]  'mymodal.Refresh 
ABMApplication.bas[260]  AppPage.ShowModalSheet( {125} ) 
ABMApplication.bas[261]  Return 
ABMApplication.bas[262]  End If 
ABMApplication.bas[263]  Dim user As Map = users.Get(0) 
ABMApplication.bas[264]  DBM.CloseSQL(SQL) 
ABMApplication.bas[265]  ABM.SaveLogin(AppPage, ABMShared.AppName, inp1.Text, inp2.Text) 
ABMApplication.bas[266]  ws.Session.SetAttribute( {126} , {127} ) 
ABMApplication.bas[267]  ws.Session.SetAttribute( {128} , inp1.Text) 
ABMApplication.bas[268]  ws.Session.SetAttribute( {129} , {130} ) 
ABMApplication.bas[269]  ws.Session.SetAttribute( {131} , {132} & user.Get( {133} ) ) ' lowercase! 
ABMApplication.bas[270]  ws.Session.SetAttribute( {134} , {135} & user.Get( {136} ) ) ' lowercase! 
ABMApplication.bas[271]  ABMShared.NavigateToPage(ws, ABMPageId, {137} & InitialPage) 
ABMApplication.bas[272] End Sub 
ABMApplication.bas[273]  
ABMApplication.bas[274] Sub BuildLoginSheet() As ABMModalSheet 
ABMApplication.bas[275]  Dim myModal As ABMModalSheet 
ABMApplication.bas[276]  myModal.Initialize(AppPage, {138} , False, False, {139} ) 
ABMApplication.bas[277]  myModal.Content.UseTheme( {140} ) 
ABMApplication.bas[278]  myModal.Footer.UseTheme( {141} ) 
ABMApplication.bas[279]  myModal.IsDismissible = False 
ABMApplication.bas[280]  
ABMApplication.bas[281]  ' create the grid for the content 
ABMApplication.bas[282]  myModal.Content.AddRows(3,True, {142} ).AddCells12(1, {143} ) 
ABMApplication.bas[283]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[284]  
ABMApplication.bas[285]  ' add paragraph 
ABMApplication.bas[286]  myModal.Content.Cell(1,1).AddComponent(ABMShared.BuildParagraph(AppPage, {144} , {145} ) ) 
ABMApplication.bas[287]  
ABMApplication.bas[288]  ' create the input fields for the content 
ABMApplication.bas[289]  Dim inp1 As ABMInput 
ABMApplication.bas[290]  inp1.Initialize(AppPage, {146} , ABM.INPUT_TEXT, {147} , False, {148} ) 
ABMApplication.bas[291]  myModal.Content.Cell(2,1).AddComponent(inp1) 
ABMApplication.bas[292]  
ABMApplication.bas[293]  Dim inp2 As ABMInput 
ABMApplication.bas[294]  inp2.Initialize(AppPage, {149} , ABM.INPUT_PASSWORD, {150} , False, {151} ) 
ABMApplication.bas[295]  myModal.Content.Cell(2,1).AddComponent(inp2) 
ABMApplication.bas[296]  
ABMApplication.bas[297]  ' via social network 
ABMApplication.bas[298]  Dim sOAuth As ABMSocialOAuth 
ABMApplication.bas[299]  sOAuth.Initialize(AppPage, {152} ) 
ABMApplication.bas[300]  
ABMApplication.bas[301]  ' via social network 
ABMApplication.bas[302] ' Dim sOAuth As ABMSocialOAuth 
ABMApplication.bas[303] ' sOAuth.Initialize(AppPage, {153} ) 
ABMApplication.bas[304] ' sOAuth.AddFacebookButton( {154} , {155} , {156} ) 
ABMApplication.bas[305] ' sOAuth.AddTwitterButton( {157} , {158} , {159} ) 
ABMApplication.bas[306] ' sOAuth.AddGooglePlusButton( {160} , {161} ) 
ABMApplication.bas[307] ' sOAuth.AddLinkedInButton( {162} , {163} ) 
ABMApplication.bas[308] ' sOAuth.AddWindowsLiveButton( {164} , {165} , {166} ) 
ABMApplication.bas[309] ' sOAuth.AddFourSquareButton( {167} , {168} , {169} ) 
ABMApplication.bas[310] ' sOAuth.AddInstagramButton( {170} , {171} , {172} ) 
ABMApplication.bas[311] ' sOAuth.AddSoundCloudButton( {173} , {174} , {175} ) 
ABMApplication.bas[312] ' sOAuth.AddYahooButton( {176} , {177} , {178} ) 
ABMApplication.bas[313] ' 
ABMApplication.bas[314] ' myModal.Content.Cell(3,1).AddComponent(sOAuth) 
ABMApplication.bas[315]  
ABMApplication.bas[316]  ' create the grid for the footer 
ABMApplication.bas[317]  ' we add a row without the default 20px padding so we need to use AddRowsM(). If we do not use this method, a scrollbar will appear to the sheet. 
ABMApplication.bas[318]  myModal.Footer.AddRowsM(1,True,0,0, {179} ).AddCellsOS(1,9,9,9,3,3,3, {180} ) 
ABMApplication.bas[319]  myModal.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[320]  
ABMApplication.bas[321]  ' create the button for the footer 
ABMApplication.bas[322]  Dim msbtn1 As ABMButton 
ABMApplication.bas[323]  msbtn1.InitializeFlat(AppPage, {181} , {182} , {183} , {184} , {185} ) 
ABMApplication.bas[324]  myModal.Footer.Cell(1,1).AddComponent(msbtn1) 
ABMApplication.bas[325]  
ABMApplication.bas[326]  Return myModal 
ABMApplication.bas[327] End Sub 
ABMApplication.bas[328]  
ABMApplication.bas[329] Sub BuildWrongInputModalSheet() As ABMModalSheet 
ABMApplication.bas[330]  Dim myModalError As ABMModalSheet 
ABMApplication.bas[331]  myModalError.Initialize(AppPage, {186} , False, False, {187} ) 
ABMApplication.bas[332]  myModalError.Content.UseTheme( {188} ) 
ABMApplication.bas[333]  myModalError.Footer.UseTheme( {189} ) 
ABMApplication.bas[334]  myModalError.IsDismissible = True 
ABMApplication.bas[335]  
ABMApplication.bas[336]  ' create the grid for the content 
ABMApplication.bas[337]  myModalError.Content.AddRows(1,True, {190} ).AddCells12(1, {191} ) 
ABMApplication.bas[338]  myModalError.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[339]  
ABMApplication.bas[340]  Dim lbl1 As ABMLabel 
ABMApplication.bas[341]  lbl1.Initialize(AppPage, {192} , {193} ,ABM.SIZE_PARAGRAPH, False, {194} ) 
ABMApplication.bas[342]  myModalError.Content.Cell(1,1).AddComponent(lbl1) 
ABMApplication.bas[343]  
ABMApplication.bas[344]  Return myModalError 
ABMApplication.bas[345] End Sub 
ABMApplication.bas[346]  
ABMApplication.bas[347]  
ABMApplication.bas[348] ' clicked on the navigation bar 
ABMApplication.bas[349] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMApplication.bas[350]  AppPage.SaveNavigationBarPosition 
ABMApplication.bas[351] End Sub 
ABMApplication.bas[352]  
ABMApplication.bas[353] Sub Page_FileUploaded(FileName As String, success As Boolean) 
ABMApplication.bas[354]  
ABMApplication.bas[355] End Sub 
ABMApplication.bas[356]  
ABMApplication.bas[357] Sub Page_ToastClicked(ToastId As String, Action As String) 
ABMApplication.bas[358]  
ABMApplication.bas[359] End Sub 
ABMApplication.bas[360]  
ABMApplication.bas[361] Sub Page_ToastDismissed(ToastId As String) 
ABMApplication.bas[362]  
ABMApplication.bas[363] End Sub 
ABMApplication.bas[364]  
ABMApplication.bas[365] Sub Page_ModalSheetDismissed(ModalSheetName As String) 
ABMApplication.bas[366]  If ModalSheetName = {195} Then 
ABMApplication.bas[367]  AppPage.ShowModalSheet( {196} ) 
ABMApplication.bas[368]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {197} ) 
ABMApplication.bas[369]  Dim inp1 As ABMInput = mymodal.Content.Component( {198} ) 
ABMApplication.bas[370]  inp1.SetFocus 
ABMApplication.bas[371]  End If 
ABMApplication.bas[372] End Sub 
ABMApplication.bas[373]  
ABMApplication.bas[374] Sub Page_Authenticated(Params As Map) 
ABMApplication.bas[375]  Dim Name As String = Params.Get( {199} ) 
ABMApplication.bas[376]  Log( {200} & Name) 
ABMApplication.bas[377]  
ABMApplication.bas[378]  Dim CurrentFields, WhereFields As Map 
ABMApplication.bas[379]  CurrentFields.Initialize 
ABMApplication.bas[380]  WhereFields.Initialize 
ABMApplication.bas[381]  
ABMApplication.bas[382]  CurrentFields.Put( {201} , 0) 
ABMApplication.bas[383]  CurrentFields.Put( {202} , DBM.SetQuotes(Name)) 
ABMApplication.bas[384]  CurrentFields.Put( {203} , DBM.SetQuotes(Name)) 
ABMApplication.bas[385]  CurrentFields.Put( {204} , DBM.SetQuotes( {205} )) 
ABMApplication.bas[386]  CurrentFields.Put( {206} , 0) 
ABMApplication.bas[387]  
ABMApplication.bas[388]  ' build the where values 
ABMApplication.bas[389]  WhereFields.Put( {207} , DBM.SetQuotes(Name)) 
ABMApplication.bas[390]  
ABMApplication.bas[391]  Dim SQL As SQL = DBM.GetSQL 
ABMApplication.bas[392]  
ABMApplication.bas[393]  Dim SQL_Select As String = {208} & Name & {209} 
ABMApplication.bas[394]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {210} , CurrentFields) 
ABMApplication.bas[395]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {211} , CurrentFields, WhereFields) 
ABMApplication.bas[396]  Dim newID As Int = DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update ) 
ABMApplication.bas[397]  
ABMApplication.bas[398]  
ABMApplication.bas[399]  DBM.CloseSQL(SQL) 
ABMApplication.bas[400]  
ABMApplication.bas[401]  ws.Session.SetAttribute( {212} , Params.Get( {213} )) 
ABMApplication.bas[402]  ws.Session.SetAttribute( {214} , Name) 
ABMApplication.bas[403]  ws.Session.SetAttribute( {215} , {216} ) 
ABMApplication.bas[404]  ws.Session.SetAttribute( {217} , {218} ) 
ABMApplication.bas[405]  ws.Session.SetAttribute( {219} , {220} & newID ) 
ABMApplication.bas[406]  ABMShared.NavigateToPage(ws, ABMPageId, {221} & InitialPage) 
ABMApplication.bas[407] End Sub 
Analysing: ABMPageTemplate.bas
ABMPageTemplate.bas[0] ﻿Type=Class 
ABMPageTemplate.bas[0] Version=4.7 
ABMPageTemplate.bas[0] ModulesStructureVersion=1 
ABMPageTemplate.bas[0] B4J=true 
ABMPageTemplate.bas[0] @EndOfDesignText@ 
ABMPageTemplate.bas[1] 'Class module 
ABMPageTemplate.bas[2] Sub Class_Globals 
ABMPageTemplate.bas[3]  Private ws As WebSocket 'ignore 
ABMPageTemplate.bas[4]  ' will hold our page information 
ABMPageTemplate.bas[5]  Public page As ABMPage 
ABMPageTemplate.bas[6]  ' page theme 
ABMPageTemplate.bas[7]  Private theme As ABMTheme 
ABMPageTemplate.bas[8]  ' to access the constants 
ABMPageTemplate.bas[9]  Private ABM As ABMaterial 'ignore 
ABMPageTemplate.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ABMPageTemplate.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
ABMPageTemplate.bas[12]  Private ABMPageId As String = {1} 
ABMPageTemplate.bas[13]  
ABMPageTemplate.bas[14]  ' your own variables 
ABMPageTemplate.bas[15]  
ABMPageTemplate.bas[16] End Sub 
ABMPageTemplate.bas[17]  
ABMPageTemplate.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
ABMPageTemplate.bas[19] Public Sub Initialize 
ABMPageTemplate.bas[20]  ' build the local structure IMPORTANT! 
ABMPageTemplate.bas[21]  ' start with the base theme defined in ABMShared 
ABMPageTemplate.bas[22]  theme.Initialize( {2} ) 
ABMPageTemplate.bas[23]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMPageTemplate.bas[24]  
ABMPageTemplate.bas[25]  ' add additional themes specific for this page 
ABMPageTemplate.bas[26]  
ABMPageTemplate.bas[27]  ' initialize this page using our theme 
ABMPageTemplate.bas[28]  page.InitializeWithTheme(Name, {3} & ABMShared.AppName & {4} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMPageTemplate.bas[29]  page.ShowLoader=True 
ABMPageTemplate.bas[30]  page.PageHTMLName = {5} 
ABMPageTemplate.bas[31]  page.PageTitle = {6} 
ABMPageTemplate.bas[32]  page.PageDescription = {7} 
ABMPageTemplate.bas[33]  page.PageKeywords = {8} 
ABMPageTemplate.bas[34]  page.PageSiteMapPriority = {9} 
ABMPageTemplate.bas[35]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ABMPageTemplate.bas[36]  
ABMPageTemplate.bas[37]  ' adding a navigation bar 
ABMPageTemplate.bas[38]  
ABMPageTemplate.bas[39]  
ABMPageTemplate.bas[40]  ' create the page grid 
ABMPageTemplate.bas[41]  page.AddRows(1,True, {10} ).AddCells12(1, {11} ) 
ABMPageTemplate.bas[42]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMPageTemplate.bas[43]  
ABMPageTemplate.bas[44] End Sub 
ABMPageTemplate.bas[45]  
ABMPageTemplate.bas[46] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMPageTemplate.bas[47]  Log( {12} ) 
ABMPageTemplate.bas[48]  ws = WebSocket1 
ABMPageTemplate.bas[49]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ABMPageTemplate.bas[50]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ABMPageTemplate.bas[51]  
ABMPageTemplate.bas[52]  If ABMShared.NeedsAuthorization Then 
ABMPageTemplate.bas[53]  If session.GetAttribute2( {13} , {14} ) = {15} Then 
ABMPageTemplate.bas[54]  ABMShared.NavigateToPage(ws, ABMPageId, {16} ) 
ABMPageTemplate.bas[55]  Return 
ABMPageTemplate.bas[56]  End If 
ABMPageTemplate.bas[57]  End If 
ABMPageTemplate.bas[58]  
ABMPageTemplate.bas[59]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ABMPageTemplate.bas[60]  If page.ComesFromPageCache Then 
ABMPageTemplate.bas[61]  ' refresh the page 
ABMPageTemplate.bas[62]  page.Refresh 
ABMPageTemplate.bas[63]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ABMPageTemplate.bas[64]  page.FinishedLoading 
ABMPageTemplate.bas[65]  Else 
ABMPageTemplate.bas[66]  ' Prepare the page 
ABMPageTemplate.bas[67]  page.Prepare 
ABMPageTemplate.bas[68]  ' Load the dynamic part of the page 
ABMPageTemplate.bas[69]  ' ********************* 1 ********************** 
ABMPageTemplate.bas[70]  ' set all the code you have in ConnectPage() HERE. 
ABMPageTemplate.bas[71]  
ABMPageTemplate.bas[72]  page.Refresh ' IMPORTANT 
ABMPageTemplate.bas[73]  
ABMPageTemplate.bas[74]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ABMPageTemplate.bas[75]  page.FinishedLoading 'IMPORTANT 
ABMPageTemplate.bas[76]  
ABMPageTemplate.bas[77]  ' comes from the Page_Ready event 
ABMPageTemplate.bas[78]  page.RestoreNavigationBarPosition 
ABMPageTemplate.bas[79]  End If 
ABMPageTemplate.bas[80]  Log(ABMPageId) 
ABMPageTemplate.bas[81] End Sub 
ABMPageTemplate.bas[82]  
ABMPageTemplate.bas[83] Private Sub WebSocket_Disconnected 
ABMPageTemplate.bas[84]  Log( {17} ) 
ABMPageTemplate.bas[85] End Sub 
ABMPageTemplate.bas[86]  
ABMPageTemplate.bas[87]  Sub Page_ParseEvent(Params As Map) 
ABMPageTemplate.bas[88]  Dim eventName As String = Params.Get( {18} ) 
ABMPageTemplate.bas[89]  Dim eventParams() As String = Regex.Split( {19} ,Params.Get( {20} )) 
ABMPageTemplate.bas[90]  If eventName = {21} Then 
ABMPageTemplate.bas[91]  Log( {22} ) 
ABMPageTemplate.bas[92]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMPageTemplate.bas[93]  Return 
ABMPageTemplate.bas[94]  End If 
ABMPageTemplate.bas[95]  If SubExists(Me, eventName) Then 
ABMPageTemplate.bas[96]  Params.Remove( {23} ) 
ABMPageTemplate.bas[97]  Params.Remove( {24} ) 
ABMPageTemplate.bas[98]  Select Case Params.Size 
ABMPageTemplate.bas[99]  Case 0 
ABMPageTemplate.bas[100]  CallSub(Me, eventName) 
ABMPageTemplate.bas[101]  Case 1 
ABMPageTemplate.bas[102]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMPageTemplate.bas[103]  Case 2 
ABMPageTemplate.bas[104]  If Params.get(eventParams(0)) = {25} Then 
ABMPageTemplate.bas[105]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMPageTemplate.bas[106]  CallSub2(Me, eventName, PassedTables) 
ABMPageTemplate.bas[107]  Else 
ABMPageTemplate.bas[108]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMPageTemplate.bas[109]  End If 
ABMPageTemplate.bas[110]  Case Else 
ABMPageTemplate.bas[111]  ' cannot be called directly, to many param 
ABMPageTemplate.bas[112]  CallSub2(Me, eventName, Params) 
ABMPageTemplate.bas[113]  End Select 
ABMPageTemplate.bas[114]  End If 
ABMPageTemplate.bas[115] End Sub 
ABMPageTemplate.bas[116]  
ABMPageTemplate.bas[117] ' clicked on the navigation bar 
ABMPageTemplate.bas[118] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMPageTemplate.bas[119]  page.SaveNavigationBarPosition 
ABMPageTemplate.bas[120]  
ABMPageTemplate.bas[121] End Sub 
ABMPageTemplate.bas[122]  
ABMPageTemplate.bas[123] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
ABMPageTemplate.bas[124]  
ABMPageTemplate.bas[125] End Sub 
ABMPageTemplate.bas[126]  
ABMPageTemplate.bas[127] Sub Page_FileUploaded(FileName As String, success As Boolean) 
ABMPageTemplate.bas[128]  
ABMPageTemplate.bas[129] End Sub 
ABMPageTemplate.bas[130]  
ABMPageTemplate.bas[131] Sub Page_ToastClicked(ToastId As String, Action As String) 
ABMPageTemplate.bas[132]  
ABMPageTemplate.bas[133] End Sub 
ABMPageTemplate.bas[134]  
ABMPageTemplate.bas[135] Sub Page_ToastDismissed(ToastId As String) 
ABMPageTemplate.bas[136]  
ABMPageTemplate.bas[137] End Sub 
Analysing: ABMUploadHandler.bas
ABMUploadHandler.bas[0] ﻿Type=Class 
ABMUploadHandler.bas[0] Version=4.7 
ABMUploadHandler.bas[0] ModulesStructureVersion=1 
ABMUploadHandler.bas[0] B4J=true 
ABMUploadHandler.bas[0] @EndOfDesignText@ 
ABMUploadHandler.bas[1] 'Handler class 
ABMUploadHandler.bas[2] Sub Class_Globals 
ABMUploadHandler.bas[3]  Dim ABM As ABMaterial 
ABMUploadHandler.bas[4]  Public DownLoadAllowedfiles As List 
ABMUploadHandler.bas[5] End Sub 
ABMUploadHandler.bas[6]  
ABMUploadHandler.bas[7] Public Sub Initialize 
ABMUploadHandler.bas[8]  
ABMUploadHandler.bas[9] End Sub 
ABMUploadHandler.bas[10]  
ABMUploadHandler.bas[11] Sub Handle(req As ServletRequest, resp As ServletResponse) 
ABMUploadHandler.bas[12]  'get the callback page from the session (multiple modules can use this handler) 
ABMUploadHandler.bas[13]  Dim callback As Object = req.GetSession.GetAttribute( {0} ) 
ABMUploadHandler.bas[14]  Dim downloadfolder As String = File.Combine(File.DirApp, req.GetSession.GetAttribute( {1} )) 
ABMUploadHandler.bas[15]  Dim MaxSize As Int 
ABMUploadHandler.bas[16]  Dim ActiveCaseNumber As String 
ABMUploadHandler.bas[17]  Try 
ABMUploadHandler.bas[18]  MaxSize = req.GetSession.GetAttribute( {2} ) 
ABMUploadHandler.bas[19]  Catch 
ABMUploadHandler.bas[20]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[21]  Return 
ABMUploadHandler.bas[22]  End Try 
ABMUploadHandler.bas[23]  
ABMUploadHandler.bas[24]  Try 
ABMUploadHandler.bas[25]  ActiveCaseNumber = req.GetSession.GetAttribute( {3} ) 
ABMUploadHandler.bas[26]  Catch 
ABMUploadHandler.bas[27]  Log( {4} ) 
ABMUploadHandler.bas[28]  End Try 
ABMUploadHandler.bas[29]  
ABMUploadHandler.bas[30]  Dim data As Map 
ABMUploadHandler.bas[31]  Dim fileName As String 
ABMUploadHandler.bas[32]  Dim tmpFileName As String 
ABMUploadHandler.bas[33]  DownLoadAllowedfiles.Initialize2(Array As String( {5} , {6} , {7} , {8} )) 
ABMUploadHandler.bas[34]  Try 
ABMUploadHandler.bas[35]  data = req.GetMultipartData(downloadfolder, MaxSize) 
ABMUploadHandler.bas[36]  Dim filePart As Part = data.Get( {9} ) 
ABMUploadHandler.bas[37]  If filePart.IsInitialized Then 
ABMUploadHandler.bas[38]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[39]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[40]  If IsAllowed(fileName) = False Then 
ABMUploadHandler.bas[41]  File.Delete( {10} , tmpFileName) 
ABMUploadHandler.bas[42]  If SubExists(callback, {11} ) Then 
ABMUploadHandler.bas[43]  CallSubDelayed3(callback, {12} , fileName, False) 
ABMUploadHandler.bas[44]  End If 
ABMUploadHandler.bas[45]  'resp.SendError(500, {13} ) 
ABMUploadHandler.bas[46]  Return 
ABMUploadHandler.bas[47]  End If 
ABMUploadHandler.bas[48]  
ABMUploadHandler.bas[49]  If ABM.HandleUpload(downloadfolder, tmpFileName, ActiveCaseNumber & fileName) Then 
ABMUploadHandler.bas[50]  If SubExists(callback, {14} ) Then 
ABMUploadHandler.bas[51]  CallSubDelayed3(callback, {15} , fileName, True) 
ABMUploadHandler.bas[52]  End If 
ABMUploadHandler.bas[53]  Else 
ABMUploadHandler.bas[54]  If SubExists(callback, {16} ) Then 
ABMUploadHandler.bas[55]  CallSubDelayed3(callback, {17} , fileName, False) 
ABMUploadHandler.bas[56]  End If 
ABMUploadHandler.bas[57]  End If 
ABMUploadHandler.bas[58]  Else ' try image 
ABMUploadHandler.bas[59]  Dim filePart As Part = data.Get( {18} ) 
ABMUploadHandler.bas[60]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[61]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[62]  If IsAllowed(fileName) = False Then 
ABMUploadHandler.bas[63]  File.Delete( {19} , tmpFileName) 
ABMUploadHandler.bas[64]  If SubExists(callback, {20} ) Then 
ABMUploadHandler.bas[65]  CallSubDelayed3(callback, {21} , fileName, False) 
ABMUploadHandler.bas[66]  End If 
ABMUploadHandler.bas[67]  'resp.SendError(500, {22} ) 
ABMUploadHandler.bas[68]  Return 
ABMUploadHandler.bas[69]  End If 
ABMUploadHandler.bas[70]  If ABM.HandleUpload(downloadfolder, tmpFileName, ActiveCaseNumber & fileName) Then 
ABMUploadHandler.bas[71]  If SubExists(callback, {23} ) Then 
ABMUploadHandler.bas[72]  CallSubDelayed3(callback, {24} , fileName, True) 
ABMUploadHandler.bas[73]  End If 
ABMUploadHandler.bas[74]  Else 
ABMUploadHandler.bas[75]  If SubExists(callback, {25} ) Then 
ABMUploadHandler.bas[76]  CallSubDelayed3(callback, {26} , fileName, False) 
ABMUploadHandler.bas[77]  End If 
ABMUploadHandler.bas[78]  End If 
ABMUploadHandler.bas[79]  End If 
ABMUploadHandler.bas[80]  
ABMUploadHandler.bas[81]  Catch 
ABMUploadHandler.bas[82]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[83]  If SubExists(callback, {27} ) Then 
ABMUploadHandler.bas[84]  CallSubDelayed3(callback, {28} , LastException.Message , False) 
ABMUploadHandler.bas[85]  End If 
ABMUploadHandler.bas[86]  End Try 
ABMUploadHandler.bas[87] End Sub 
ABMUploadHandler.bas[88]  
ABMUploadHandler.bas[89] Sub IsAllowed(fileName As String) As Boolean 
ABMUploadHandler.bas[90]  If DownLoadAllowedfiles.Size = 0 Then Return True 
ABMUploadHandler.bas[91]  For i = 0 To DownLoadAllowedfiles.Size - 1 
ABMUploadHandler.bas[92]  If fileName.ToUpperCase.EndsWith(DownLoadAllowedfiles.Get(i)) Then 
ABMUploadHandler.bas[93]  Return True 
ABMUploadHandler.bas[94]  End If 
ABMUploadHandler.bas[95]  Next 
ABMUploadHandler.bas[96]  Return False 
ABMUploadHandler.bas[97] End Sub 
Analysing: OverviewCasesPage.bas
OverviewCasesPage.bas[0] ﻿Type=Class 
OverviewCasesPage.bas[0] Version=4.7 
OverviewCasesPage.bas[0] ModulesStructureVersion=1 
OverviewCasesPage.bas[0] B4J=true 
OverviewCasesPage.bas[0] @EndOfDesignText@ 
OverviewCasesPage.bas[1] 'Class module 
OverviewCasesPage.bas[2] Sub Class_Globals 
OverviewCasesPage.bas[3]  Private ws As WebSocket 'ignore 
OverviewCasesPage.bas[4]  ' will hold our page information 
OverviewCasesPage.bas[5]  Public page As ABMPage 
OverviewCasesPage.bas[6]  ' page theme 
OverviewCasesPage.bas[7]  Private theme As ABMTheme 
OverviewCasesPage.bas[8]  ' to access the constants 
OverviewCasesPage.bas[9]  Private ABM As ABMaterial 'ignore 
OverviewCasesPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
OverviewCasesPage.bas[11]  Public Name As String = {1} 
OverviewCasesPage.bas[12]  
OverviewCasesPage.bas[13]  ' your own variables 
OverviewCasesPage.bas[14]  Dim myToastId As Int 
OverviewCasesPage.bas[15]  Dim ActiveCaseId As Int 
OverviewCasesPage.bas[16]  Dim ActiveCaseNumber As String 
OverviewCasesPage.bas[17]  Dim ActiveCaseUserID As Int 
OverviewCasesPage.bas[18]  
OverviewCasesPage.bas[19]  Dim ActiveCaseNoteID As Int 
OverviewCasesPage.bas[20]  Dim Filter As String 
OverviewCasesPage.bas[21]  Dim FilterCount As String 
OverviewCasesPage.bas[22]  Dim LastSort As String = {2} 
OverviewCasesPage.bas[23]  'Dim MyPoints As Map 
OverviewCasesPage.bas[24]  'Dim MyNotAvailablePoints As Map 
OverviewCasesPage.bas[25]  Dim UserType As String 
OverviewCasesPage.bas[26]  Dim UserID As Int 
OverviewCasesPage.bas[27]  Dim UserName As String 
OverviewCasesPage.bas[28]  Dim Attachments As Map 
OverviewCasesPage.bas[29]  Dim RemoveAttachments As Map 
OverviewCasesPage.bas[30]  Dim TypeDelete As String 
OverviewCasesPage.bas[31]  
OverviewCasesPage.bas[32]  Public DownloadFolder As String = {3} & ABMShared.AppName & {4} 
OverviewCasesPage.bas[33]  Public DownloadMaxSize As String = 500*1024 
OverviewCasesPage.bas[34]  Public MaxRows As Int = 10 
OverviewCasesPage.bas[35]  Private ABMPageId As String = {5} 
OverviewCasesPage.bas[36] End Sub 
OverviewCasesPage.bas[37]  
OverviewCasesPage.bas[38] 'Initializes the object. You can add parameters to this method if needed. 
OverviewCasesPage.bas[39] Public Sub Initialize 
OverviewCasesPage.bas[40]  ' build the local structure IMPORTANT! 
OverviewCasesPage.bas[41]  ' start with the base theme defined in ABMShared 
OverviewCasesPage.bas[42]  theme.Initialize( {6} ) 
OverviewCasesPage.bas[43]  theme.AddABMTheme(ABMShared.MyTheme) 
OverviewCasesPage.bas[44]  
OverviewCasesPage.bas[45]  ' add additional themes specific for this page 
OverviewCasesPage.bas[46]  theme.AddTableTheme( {7} ) 
OverviewCasesPage.bas[47]  theme.Table( {8} ).ZDepth = ABM.ZDEPTH_1 
OverviewCasesPage.bas[48]  
OverviewCasesPage.bas[49]  theme.Table( {9} ).AddCellTheme( {10} ) 
OverviewCasesPage.bas[50]  theme.Table( {11} ).Cell( {12} ).BackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[51]  theme.Table( {13} ).Cell( {14} ).ForeColor = ABM.COLOR_WHITE 
OverviewCasesPage.bas[52]  
OverviewCasesPage.bas[53]  theme.Table( {15} ).AddCellTheme( {16} ) 
OverviewCasesPage.bas[54]  theme.Table( {17} ).Cell( {18} ).BackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[55]  theme.Table( {19} ).Cell( {20} ).ForeColor = ABM.COLOR_WHITE 
OverviewCasesPage.bas[56]  theme.Table( {21} ).Cell( {22} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
OverviewCasesPage.bas[57]  
OverviewCasesPage.bas[58]  theme.Table( {23} ).AddCellTheme( {24} ) 
OverviewCasesPage.bas[59]  theme.Table( {25} ).Cell( {26} ).BackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[60]  theme.Table( {27} ).Cell( {28} ).ForeColor = ABM.COLOR_WHITE 
OverviewCasesPage.bas[61]  theme.Table( {29} ).Cell( {30} ).Align = ABM.TABLECELL_HORIZONTALALIGN_CENTER 
OverviewCasesPage.bas[62]  
OverviewCasesPage.bas[63]  theme.Table( {31} ).AddCellTheme( {32} ) 
OverviewCasesPage.bas[64]  theme.Table( {33} ).Cell( {34} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[65]  theme.Table( {35} ).Cell( {36} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
OverviewCasesPage.bas[66]  
OverviewCasesPage.bas[67]  theme.Table( {37} ).AddCellTheme( {38} ) 
OverviewCasesPage.bas[68]  theme.Table( {39} ).Cell( {40} ).BackColor = ABM.COLOR_GREEN 
OverviewCasesPage.bas[69]  theme.Table( {41} ).Cell( {42} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
OverviewCasesPage.bas[70]  theme.Table( {43} ).Cell( {44} ).ActiveBackColor = ABM.COLOR_GREEN 
OverviewCasesPage.bas[71]  theme.Table( {45} ).Cell( {46} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
OverviewCasesPage.bas[72]  'theme.Table( {47} ).Cell( {48} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
OverviewCasesPage.bas[73]  
OverviewCasesPage.bas[74]  theme.Table( {49} ).AddCellTheme( {50} ) 
OverviewCasesPage.bas[75]  theme.Table( {51} ).Cell( {52} ).BackColor = ABM.COLOR_ORANGE 
OverviewCasesPage.bas[76]  theme.Table( {53} ).Cell( {54} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
OverviewCasesPage.bas[77]  theme.Table( {55} ).Cell( {56} ).ActiveBackColor = ABM.COLOR_ORANGE 
OverviewCasesPage.bas[78]  theme.Table( {57} ).Cell( {58} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
OverviewCasesPage.bas[79]  
OverviewCasesPage.bas[80]  theme.Table( {59} ).AddCellTheme( {60} ) 
OverviewCasesPage.bas[81]  theme.Table( {61} ).Cell( {62} ).BackColor = ABM.COLOR_GREY 
OverviewCasesPage.bas[82]  theme.Table( {63} ).Cell( {64} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
OverviewCasesPage.bas[83]  theme.Table( {65} ).Cell( {66} ).ActiveBackColor = ABM.COLOR_GREY 
OverviewCasesPage.bas[84]  theme.Table( {67} ).Cell( {68} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
OverviewCasesPage.bas[85]  
OverviewCasesPage.bas[86]  theme.Table( {69} ).AddCellTheme( {70} ) 
OverviewCasesPage.bas[87]  theme.Table( {71} ).Cell( {72} ).BackColor = ABM.COLOR_YELLOW 
OverviewCasesPage.bas[88]  theme.Table( {73} ).Cell( {74} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
OverviewCasesPage.bas[89]  theme.Table( {75} ).Cell( {76} ).ActiveBackColor = ABM.COLOR_YELLOW 
OverviewCasesPage.bas[90]  theme.Table( {77} ).Cell( {78} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
OverviewCasesPage.bas[91]  
OverviewCasesPage.bas[92]  theme.Table( {79} ).AddCellTheme( {80} ) 
OverviewCasesPage.bas[93]  theme.Table( {81} ).Cell( {82} ).BackColor = ABM.COLOR_RED 
OverviewCasesPage.bas[94]  theme.Table( {83} ).Cell( {84} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
OverviewCasesPage.bas[95]  theme.Table( {85} ).Cell( {86} ).ActiveBackColor = ABM.COLOR_RED 
OverviewCasesPage.bas[96]  theme.Table( {87} ).Cell( {88} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
OverviewCasesPage.bas[97]  'theme.Table( {89} ).Cell( {90} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
OverviewCasesPage.bas[98]  
OverviewCasesPage.bas[99]  theme.Table( {91} ).AddCellTheme( {92} ) 
OverviewCasesPage.bas[100]  theme.Table( {93} ).Cell( {94} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[101]  theme.Table( {95} ).Cell( {96} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
OverviewCasesPage.bas[102]  theme.Table( {97} ).Cell( {98} ).BorderColor = ABM.COLOR_LIGHTBLUE 
OverviewCasesPage.bas[103]  theme.Table( {99} ).Cell( {100} ).BorderWidth = 1 
OverviewCasesPage.bas[104]  theme.Table( {101} ).Cell( {102} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
OverviewCasesPage.bas[105]  
OverviewCasesPage.bas[106]  theme.Table( {103} ).AddCellTheme( {104} ) 
OverviewCasesPage.bas[107]  theme.Table( {105} ).Cell( {106} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[108]  theme.Table( {107} ).Cell( {108} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
OverviewCasesPage.bas[109]  theme.Table( {109} ).Cell( {110} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
OverviewCasesPage.bas[110]  
OverviewCasesPage.bas[111]  theme.Table( {111} ).AddCellTheme( {112} ) 
OverviewCasesPage.bas[112]  theme.Table( {113} ).Cell( {114} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[113]  theme.Table( {115} ).Cell( {116} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
OverviewCasesPage.bas[114]  theme.Table( {117} ).Cell( {118} ).Align = ABM.TABLECELL_HORIZONTALALIGN_CENTER 
OverviewCasesPage.bas[115]  
OverviewCasesPage.bas[116]  ' add additional themes specific for this page 
OverviewCasesPage.bas[117]  theme.AddButtonTheme( {119} ) 
OverviewCasesPage.bas[118]  theme.Button( {120} ).BackColor = ABM.COLOR_LIGHTBLUE 
OverviewCasesPage.bas[119]  
OverviewCasesPage.bas[120]  ' modal sheet 
OverviewCasesPage.bas[121]  theme.AddContainerTheme( {121} ) 
OverviewCasesPage.bas[122]  theme.Container( {122} ).BackColor = ABM.COLOR_WHITE 
OverviewCasesPage.bas[123]  
OverviewCasesPage.bas[124]  ' modal sheet 
OverviewCasesPage.bas[125]  theme.AddContainerTheme( {123} ) 
OverviewCasesPage.bas[126]  theme.Container( {124} ).BackColor = ABM.COLOR_LIGHTBLUE 
OverviewCasesPage.bas[127]  
OverviewCasesPage.bas[128]  ' chip 
OverviewCasesPage.bas[129]  theme.AddChipTheme( {125} ) 
OverviewCasesPage.bas[130]  theme.Chip( {126} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
OverviewCasesPage.bas[131]  
OverviewCasesPage.bas[132]  ' note container theme 
OverviewCasesPage.bas[133]  theme.AddContainerTheme( {127} ) 
OverviewCasesPage.bas[134]  theme.Container( {128} ).BackColor = ABM.COLOR_BLUEGREY 
OverviewCasesPage.bas[135]  theme.Container( {129} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN5 
OverviewCasesPage.bas[136]  theme.Container( {130} ).ZDepth = ABM.ZDEPTH_1 
OverviewCasesPage.bas[137]  
OverviewCasesPage.bas[138]  ' initialize this page using our theme 
OverviewCasesPage.bas[139]  page.InitializeWithTheme(Name, {131} & ABMShared.AppName & {132} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
OverviewCasesPage.bas[140]  page.ShowLoader=True 
OverviewCasesPage.bas[141]  ' SPECIAL ONE, we're going to add chips later for the zip attachments, but not in the build 
OverviewCasesPage.bas[142]  ' however, we want all javascript code and css code to be loaded. 
OverviewCasesPage.bas[143]  ' Note: in case you add chips in BuildPage() this is done automatically by ABMaterial 
OverviewCasesPage.bas[144]  page.NeedsChips = True 
OverviewCasesPage.bas[145]  page.PageTitle = {133} 
OverviewCasesPage.bas[146]  page.PageDescription = {134} 
OverviewCasesPage.bas[147]  page.PageHTMLName = {135} 
OverviewCasesPage.bas[148]  page.PageKeywords = {136} 
OverviewCasesPage.bas[149]  page.PageSiteMapPriority = {137} 
OverviewCasesPage.bas[150]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
OverviewCasesPage.bas[151]  page.DisableBackButton = True 
OverviewCasesPage.bas[152]  page.ShowConnectedIndicator = True 
OverviewCasesPage.bas[153]  
OverviewCasesPage.bas[154]  ABMShared.BuildNavigationBar(page, {138} , {139} , {140} , {141} , {142} ) 
OverviewCasesPage.bas[155]  
OverviewCasesPage.bas[156]  ' create the page grid 
OverviewCasesPage.bas[157]  page.AddRowsM(2,True,0,0, {143} ).AddCells12(1, {144} ) 
OverviewCasesPage.bas[158]  page.AddRows(1,True, {145} ).AddCellsOS(1,0,0,0,6,6,8, {146} ).AddCellsOS(1,0,0,0,4,4,2, {147} ).AddCellsOSMP(1,0,0,0,2,2,1,14,0,0,0, {148} ) 
OverviewCasesPage.bas[159]  page.AddRows(4,True, {149} ).AddCells12(1, {150} ) 
OverviewCasesPage.bas[160]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[161]  
OverviewCasesPage.bas[162]  ' add a modal sheet template to enter user information 
OverviewCasesPage.bas[163]  page.AddModalSheetTemplate(BuildInputSheet) 
OverviewCasesPage.bas[164]  ' add a modal sheet template for a yes no msgbox 
OverviewCasesPage.bas[165]  page.AddModalSheetTemplate(BuildMsgBoxYesNo) 
OverviewCasesPage.bas[166]  ' add a modal sheet template for a msgbox 
OverviewCasesPage.bas[167]  page.AddModalSheetTemplate(BuildMsgBox) 
OverviewCasesPage.bas[168]  ' add a modal sheet template for an upload 
OverviewCasesPage.bas[169]  page.AddModalSheetTemplate(BuildAttachmentSheet) 
OverviewCasesPage.bas[170]  ' add a modal sheet template to enter case information 
OverviewCasesPage.bas[171]  page.AddModalSheetTemplate(BuildNoteInputSheet) 
OverviewCasesPage.bas[172]  
OverviewCasesPage.bas[173]  ' create the action button 
OverviewCasesPage.bas[174]  Dim AddCaseBtn As ABMActionButton 
OverviewCasesPage.bas[175]  AddCaseBtn.Initialize(page, {151} , {152} , {153} , {154} ) 
OverviewCasesPage.bas[176]  AddCaseBtn.MainButton.Size = ABM.BUTTONSIZE_LARGE 
OverviewCasesPage.bas[177]  
OverviewCasesPage.bas[178]  ' add to page 
OverviewCasesPage.bas[179]  page.AddActionButton(AddCaseBtn) 
OverviewCasesPage.bas[180] End Sub 
OverviewCasesPage.bas[181]  
OverviewCasesPage.bas[182] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
OverviewCasesPage.bas[183]  Log( {155} ) 
OverviewCasesPage.bas[184]  ws = WebSocket1 
OverviewCasesPage.bas[185]  ABMPageId = ABM.GetPageID(page, Name,ws) 
OverviewCasesPage.bas[186]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
OverviewCasesPage.bas[187]  
OverviewCasesPage.bas[188]  If ABMShared.NeedsAuthorization Then 
OverviewCasesPage.bas[189]  If session.GetAttribute2( {156} , {157} ) = {158} Then 
OverviewCasesPage.bas[190]  ABMShared.NavigateToPage(ws, ABMPageId, {159} ) 
OverviewCasesPage.bas[191]  Return 
OverviewCasesPage.bas[192]  End If 
OverviewCasesPage.bas[193]  End If 
OverviewCasesPage.bas[194]  
OverviewCasesPage.bas[195]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
OverviewCasesPage.bas[196]  If page.ComesFromPageCache Then 
OverviewCasesPage.bas[197]  ' refresh the page 
OverviewCasesPage.bas[198]  page.Refresh 
OverviewCasesPage.bas[199]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OverviewCasesPage.bas[200]  page.FinishedLoading 
OverviewCasesPage.bas[201]  Else 
OverviewCasesPage.bas[202]  ' Prepare the page 
OverviewCasesPage.bas[203]  page.Prepare 
OverviewCasesPage.bas[204]  
OverviewCasesPage.bas[205]  ' Load the dynamic part of the page 
OverviewCasesPage.bas[206]  ' ********************* 1 ********************** 
OverviewCasesPage.bas[207]  ' set all the code you have in ConnectPage() HERE. 
OverviewCasesPage.bas[208]  ' add paragraph 
OverviewCasesPage.bas[209]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraphBQ(page, {160} , {161} ) ) 
OverviewCasesPage.bas[210]  
OverviewCasesPage.bas[211]  Dim searchCase As ABMInput 
OverviewCasesPage.bas[212]  searchCase.Initialize(page, {162} , ABM.INPUT_TEXT, {163} , False, {164} ) 
OverviewCasesPage.bas[213]  page.CellR(1,1).AddComponent(searchCase) 
OverviewCasesPage.bas[214]  
OverviewCasesPage.bas[215]  Dim casestatussearch As ABMCombo 
OverviewCasesPage.bas[216]  casestatussearch.Initialize(page, {165} , {166} , 650 , {167} ) 
OverviewCasesPage.bas[217]  
OverviewCasesPage.bas[218]  ' add items 
OverviewCasesPage.bas[219] ' casestatussearch.AddItem( {168} , {169} , BuildSimpleItem( {170} , {171} , {172} )) 
OverviewCasesPage.bas[220] ' casestatussearch.AddItem( {173} , {174} , BuildSimpleItem( {175} , {176} , {177} )) 
OverviewCasesPage.bas[221] ' casestatussearch.AddItem( {178} , {179} , BuildSimpleItem( {180} , {181} , {182} )) 
OverviewCasesPage.bas[222] ' casestatussearch.AddItem( {183} , {184} , BuildSimpleItem( {185} , {186} , {187} )) 
OverviewCasesPage.bas[223] ' casestatussearch.AddItem( {188} , {189} , BuildSimpleItem( {190} , {191} , {192} )) 
OverviewCasesPage.bas[224] ' casestatussearch.AddItem( {193} , {194} , BuildSimpleItem( {195} , {196} , {197} )) 
OverviewCasesPage.bas[225] ' casestatussearch.AddItem( {198} , {199} , BuildSimpleItem( {200} , {201} , {202} )) 
OverviewCasesPage.bas[226] ' casestatussearch.AddItem( {203} , {204} , BuildSimpleItem( {205} , {206} , {207} )) 
OverviewCasesPage.bas[227] ' casestatussearch.AddItem( {208} , {209} , BuildSimpleItem( {210} , {211} , {212} )) 
OverviewCasesPage.bas[228]  
OverviewCasesPage.bas[229]  casestatussearch.AddItem( {213} , {214} , BuildSimpleItem( {215} , {216} , {217} )) 
OverviewCasesPage.bas[230]  casestatussearch.AddItem( {218} , {219} , BuildSimpleItem( {220} , {221} , {222} )) 
OverviewCasesPage.bas[231]  casestatussearch.AddItem( {223} , {224} , BuildSimpleItem( {225} , {226} , {227} )) 
OverviewCasesPage.bas[232]  casestatussearch.AddItem( {228} , {229} , BuildSimpleItem( {230} , {231} , {232} )) 
OverviewCasesPage.bas[233]  casestatussearch.AddItem( {233} , {234} , BuildSimpleItem( {235} , {236} , {237} )) 
OverviewCasesPage.bas[234]  casestatussearch.AddItem( {238} , {239} , BuildSimpleItem( {240} , {241} , {242} )) 
OverviewCasesPage.bas[235]  casestatussearch.AddItem( {243} , {244} , BuildSimpleItem( {245} , {246} , {247} )) 
OverviewCasesPage.bas[236]  casestatussearch.AddItem( {248} , {249} , BuildSimpleItem( {250} , {251} , {252} )) 
OverviewCasesPage.bas[237]  casestatussearch.AddItem( {253} , {254} , BuildSimpleItem( {255} , {256} , {257} )) 
OverviewCasesPage.bas[238]  casestatussearch.AddItem( {258} , {259} , BuildSimpleItem( {260} , {261} , {262} )) 
OverviewCasesPage.bas[239]  casestatussearch.AddItem( {263} , {264} , BuildSimpleItem( {265} , {266} , {267} )) 
OverviewCasesPage.bas[240]  casestatussearch.AddItem( {268} , {269} , BuildSimpleItem( {270} , {271} , {272} )) 
OverviewCasesPage.bas[241]  
OverviewCasesPage.bas[242]  
OverviewCasesPage.bas[243]  
OverviewCasesPage.bas[244]  casestatussearch.SetActiveItemId( {273} ) 
OverviewCasesPage.bas[245]  
OverviewCasesPage.bas[246]  page.CellR(0,2).AddComponent(casestatussearch) 
OverviewCasesPage.bas[247]  
OverviewCasesPage.bas[248]  Dim btnSearch As ABMButton 
OverviewCasesPage.bas[249]  btnSearch.InitializeFloating(page, {274} , {275} , {276} ) 
OverviewCasesPage.bas[250]  page.CellR(0,3).AddComponent(btnSearch) 
OverviewCasesPage.bas[251]  
OverviewCasesPage.bas[252]  Dim pagination As ABMPagination 
OverviewCasesPage.bas[253]  pagination.Initialize(page, {277} , 10, True, True, {278} ) 
OverviewCasesPage.bas[254]  pagination.SetTotalNumberOfPages(20) 
OverviewCasesPage.bas[255]  
OverviewCasesPage.bas[256]  page.CellR(1,1).AddComponent(pagination) 
OverviewCasesPage.bas[257]  
OverviewCasesPage.bas[258]  ' create a table 
OverviewCasesPage.bas[259]  Dim tblCases As ABMTable 
OverviewCasesPage.bas[260]  tblCases.IsResponsive = True 
OverviewCasesPage.bas[261]  ' IMPORTANT: we set usingQueriesToSort = true because we are going to handle the sorting, not the javascript sorting library 
OverviewCasesPage.bas[262]  ' When using Pagination, the sorting library does not know all the data 
OverviewCasesPage.bas[263]  ' SetColumnDataFields() is used when the user clicks on a column head to sort to return in the SortChanged() event and the GetSortColumn() And SetSortColumn() methods. 
OverviewCasesPage.bas[264]  ' tblCases.Initialize(page, {279} , True, True, True, {280} ) 
OverviewCasesPage.bas[265]  ' tblCases.SetHeaders( Array As String ( {281} , {282} , {283} , {284} , {285} , {286} , {287} , {288} , {289} , {290} , {291} , {292} , {293} )) 
OverviewCasesPage.bas[266]  ' tblCases.SetHeaderThemes( Array As String ( {294} , {295} , {296} , {297} , {298} , {299} , {300} , {301} , {302} , {303} , {304} , {305} , {306} )) 
OverviewCasesPage.bas[267]  ' tblCases.SetHeaderHeights( Array As Int (0 , 51 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 0 , 48 , 48 )) 
OverviewCasesPage.bas[268]  ' tblCases.SetColumnVisible( Array As Boolean(False, True , True , True , True , True , True , True , True , False , True , True , True )) 
OverviewCasesPage.bas[269]  ' tblCases.SetColumnSortable( Array As Boolean(False, False , True , True , True , True , True , True , True , False , False ,False , False )) 
OverviewCasesPage.bas[270]  ' tblCases.SetColumnDataFields(Array As String ( {307} , {308} , {309} , {310} , {311} , {312} , {313} , {314} , {315} , {316} , {317} , {318} , {319} )) 
OverviewCasesPage.bas[271]  ' 
OverviewCasesPage.bas[272]  tblCases.Initialize(page, {320} , True, True, True, {321} ) 
OverviewCasesPage.bas[273]  tblCases.SetHeaders( Array As String ( {322} , {323} , {324} , {325} , {326} , {327} , {328} , {329} , {330} , {331} )) 
OverviewCasesPage.bas[274]  tblCases.SetHeaderThemes( Array As String ( {332} , {333} , {334} , {335} , {336} , {337} , {338} , {339} , {340} , {341} )) 
OverviewCasesPage.bas[275]  tblCases.SetHeaderHeights( Array As Int (0 , 51 , 0 , 0 , 0 , 0 , 0 , 0 , 48 , 48 )) 
OverviewCasesPage.bas[276]  tblCases.SetColumnVisible( Array As Boolean(False, True , True , True , True , True , True , True , True , True )) 
OverviewCasesPage.bas[277]  tblCases.SetColumnSortable( Array As Boolean(False, False , True , True , True , True , True , False ,False , False )) 
OverviewCasesPage.bas[278]  tblCases.SetColumnDataFields(Array As String ( {342} , {343} , {344} , {345} , {346} , {347} , {348} , {349} , {350} , {351} )) 
OverviewCasesPage.bas[279]  
OverviewCasesPage.bas[280]  tblCases.SetFooter( {352} , 12, {353} ) 
OverviewCasesPage.bas[281]  
OverviewCasesPage.bas[282]  page.CellR(1,1).AddComponent(tblCases) 
OverviewCasesPage.bas[283]  
OverviewCasesPage.bas[284]  UserType = page.ws.Session.GetAttribute2( {354} , {355} ) 
OverviewCasesPage.bas[285]  UserID = page.ws.Session.GetAttribute2( {356} , {357} ) 
OverviewCasesPage.bas[286]  
OverviewCasesPage.bas[287]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[288]  
OverviewCasesPage.bas[289]  Dim NowWH As String = ABM.GetBrowserWidthHeight(page) 
OverviewCasesPage.bas[290]  If NowWH <> {358} And NowWH <> {359} Then 
OverviewCasesPage.bas[291]  Dim split() As String = Regex.Split( {360} , NowWH) 
OverviewCasesPage.bas[292]  Dim NewH As Int = split(1) - 350 
OverviewCasesPage.bas[293]  NewH = NewH / 50 
OverviewCasesPage.bas[294]  NewH = NewH / 5 
OverviewCasesPage.bas[295]  NewH = NewH * 5 
OverviewCasesPage.bas[296]  If NewH >= 10 Then 
OverviewCasesPage.bas[297]  MaxRows = NewH 
OverviewCasesPage.bas[298]  End If 
OverviewCasesPage.bas[299]  End If 
OverviewCasesPage.bas[300]  'Log(MaxRows) 
OverviewCasesPage.bas[301]  
OverviewCasesPage.bas[302]  Dim users As List = DBM.SQLSelect(SQL, {361} & UserID, Null) 
OverviewCasesPage.bas[303]  If users.Size > 0 Then 
OverviewCasesPage.bas[304]  Dim user As Map = users.Get(0) 
OverviewCasesPage.bas[305]  UserName = user.GetDefault( {362} , {363} ) 
OverviewCasesPage.bas[306]  End If 
OverviewCasesPage.bas[307]  
OverviewCasesPage.bas[308]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[309]  
OverviewCasesPage.bas[310]  'LoadMyPoints 
OverviewCasesPage.bas[311]  
OverviewCasesPage.bas[312]  Dim inp As ABMModalSheet = page.ModalSheet( {364} ) 
OverviewCasesPage.bas[313]  Dim casetype As ABMCombo = inp.Content.Component( {365} ) 
OverviewCasesPage.bas[314]  
OverviewCasesPage.bas[315]  casetype.Clear 
OverviewCasesPage.bas[316]  
OverviewCasesPage.bas[317]  If UserType = {366} Then ' administrators can access users and create NEW items for features not requested 
OverviewCasesPage.bas[318]  page.NavigationBar.AddSideBarItem( {367} , {368} , {369} , {370} ) 
OverviewCasesPage.bas[319]  casetype.AddItem( {371} , {372} , BuildSimpleItem( {373} , {374} , {375} )) 
OverviewCasesPage.bas[320]  casetype.AddItem( {376} , {377} , BuildSimpleItem( {378} , {379} , {380} )) 
OverviewCasesPage.bas[321]  casetype.AddItem( {381} , {382} , BuildSimpleItem( {383} , {384} , {385} )) 
OverviewCasesPage.bas[322]  Else 
OverviewCasesPage.bas[323]  casetype.AddItem( {386} , {387} , BuildSimpleItem( {388} , {389} , {390} )) 
OverviewCasesPage.bas[324]  casetype.AddItem( {391} , {392} , BuildSimpleItem( {393} , {394} , {395} )) 
OverviewCasesPage.bas[325]  End If 
OverviewCasesPage.bas[326]  
OverviewCasesPage.bas[327]  casetype.Refresh 
OverviewCasesPage.bas[328]  
OverviewCasesPage.bas[329]  page.NavigationBar.Refresh 
OverviewCasesPage.bas[330]  
OverviewCasesPage.bas[331]  ' this page uses uploads, so needs some settings 
OverviewCasesPage.bas[332]  page.ws.session.SetAttribute( {396} , Me) 
OverviewCasesPage.bas[333]  page.ws.session.SetAttribute( {397} , DownloadFolder) 
OverviewCasesPage.bas[334]  page.ws.session.SetAttribute( {398} , DownloadMaxSize) 
OverviewCasesPage.bas[335]  
OverviewCasesPage.bas[336]  page.Refresh ' IMPORTANT 
OverviewCasesPage.bas[337]  
OverviewCasesPage.bas[338]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OverviewCasesPage.bas[339]  page.FinishedLoading 'IMPORTANT 
OverviewCasesPage.bas[340]  
OverviewCasesPage.bas[341]  ' comes from the Page_Ready event 
OverviewCasesPage.bas[342]  page.RestoreNavigationBarPosition 
OverviewCasesPage.bas[343]  
OverviewCasesPage.bas[344]  ' so it represents the correct values, not the ones saved in the .html file IMPORTANT! 
OverviewCasesPage.bas[345]  LoadCases(1) 
OverviewCasesPage.bas[346]  End If 
OverviewCasesPage.bas[347]  Log(ABMPageId) 
OverviewCasesPage.bas[348] End Sub 
OverviewCasesPage.bas[349]  
OverviewCasesPage.bas[350] Private Sub WebSocket_Disconnected 
OverviewCasesPage.bas[351]  Log( {399} ) 
OverviewCasesPage.bas[352]  Try 
OverviewCasesPage.bas[353]  
OverviewCasesPage.bas[354]  ws.Session.RemoveAttribute( {400} ) 
OverviewCasesPage.bas[355]  ws.Session.RemoveAttribute( {401} ) 
OverviewCasesPage.bas[356]  ws.Session.RemoveAttribute( {402} ) 
OverviewCasesPage.bas[357]  Catch 
OverviewCasesPage.bas[358]  Log(LastException.Message) 
OverviewCasesPage.bas[359]  End Try 
OverviewCasesPage.bas[360] End Sub 
OverviewCasesPage.bas[361]  
OverviewCasesPage.bas[362]  Sub Page_ParseEvent(Params As Map) 
OverviewCasesPage.bas[363]  Dim eventName As String = Params.Get( {403} ) 
OverviewCasesPage.bas[364]  Dim eventParams() As String = Regex.Split( {404} ,Params.Get( {405} )) 
OverviewCasesPage.bas[365]  If eventName = {406} Then 
OverviewCasesPage.bas[366]  Log( {407} ) 
OverviewCasesPage.bas[367]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
OverviewCasesPage.bas[368]  Return 
OverviewCasesPage.bas[369]  End If 
OverviewCasesPage.bas[370]  If SubExists(Me, eventName) Then 
OverviewCasesPage.bas[371]  Params.Remove( {408} ) 
OverviewCasesPage.bas[372]  Params.Remove( {409} ) 
OverviewCasesPage.bas[373]  Select Case Params.Size 
OverviewCasesPage.bas[374]  Case 0 
OverviewCasesPage.bas[375]  CallSub(Me, eventName) 
OverviewCasesPage.bas[376]  Case 1 
OverviewCasesPage.bas[377]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
OverviewCasesPage.bas[378]  Case 2 
OverviewCasesPage.bas[379]  If Params.get(eventParams(0)) = {410} Then 
OverviewCasesPage.bas[380]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
OverviewCasesPage.bas[381]  CallSub2(Me, eventName, PassedTables) 
OverviewCasesPage.bas[382]  Else 
OverviewCasesPage.bas[383]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
OverviewCasesPage.bas[384]  End If 
OverviewCasesPage.bas[385]  Case Else 
OverviewCasesPage.bas[386]  ' cannot be called directly, to many param 
OverviewCasesPage.bas[387]  CallSub2(Me, eventName, Params) 
OverviewCasesPage.bas[388]  End Select 
OverviewCasesPage.bas[389]  End If 
OverviewCasesPage.bas[390] End Sub 
OverviewCasesPage.bas[391]  
OverviewCasesPage.bas[392] private Sub LoadCases(fromPage As Int) 
OverviewCasesPage.bas[393]  Dim tblCases As ABMTable = page.Component( {411} ) 
OverviewCasesPage.bas[394]  
OverviewCasesPage.bas[395]  If UserType = {412} Then ' if andministrator, show delete button column 
OverviewCasesPage.bas[396]  tblCases.SetColumnVisible(Array As Boolean(False, True , True , True , True , True , True , True , True , True )) 
OverviewCasesPage.bas[397]  Else 
OverviewCasesPage.bas[398]  tblCases.SetColumnVisible(Array As Boolean(False, True , True , True , True , True , True , True , True , False )) 
OverviewCasesPage.bas[399]  End If 
OverviewCasesPage.bas[400]  
OverviewCasesPage.bas[401]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[402]  
OverviewCasesPage.bas[403]  Dim SQL_str As String 
OverviewCasesPage.bas[404]  SQL_str = {413} & FilterCount 
OverviewCasesPage.bas[405]  Dim numcases As Int = DBM.SQLSelectSingleResult(SQL, SQL_str) 
OverviewCasesPage.bas[406]  
OverviewCasesPage.bas[407] ' SQL_str = {414} _ 
OverviewCasesPage.bas[408] ' & {415} & UserID & {416} & UserID & {417} _ 
OverviewCasesPage.bas[409] ' & {418} & Filter & {419} & LastSort & {420} & ((fromPage - 1) * MaxRows) & {421} & MaxRows 
OverviewCasesPage.bas[410]  SQL_str = {0} 
OverviewCasesPage.bas[437]  
OverviewCasesPage.bas[438]  Dim cases As List = DBM.SQLSelect(SQL, SQL_str, Null) 
OverviewCasesPage.bas[439]  If cases.Size = 0 And fromPage > 1 Then 
OverviewCasesPage.bas[440]  ' we are on a page without any lines (maybe removed by other user?) 
OverviewCasesPage.bas[441]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[442]  fromPage = fromPage - 1 
OverviewCasesPage.bas[443]  LoadCases(fromPage) 
OverviewCasesPage.bas[444]  Return 
OverviewCasesPage.bas[445]  End If 
OverviewCasesPage.bas[446]  tblCases.SetFooter( {422} & numcases, 12, {423} ) 
OverviewCasesPage.bas[447]  tblCases.Clear 
OverviewCasesPage.bas[448]  For i = 0 To cases.Size - 1 
OverviewCasesPage.bas[449]  Dim tblFields As Map = cases.Get(i) 
OverviewCasesPage.bas[450]  Dim rCellValues As List 
OverviewCasesPage.bas[451]  Dim rCellThemes As List 
OverviewCasesPage.bas[452]  rCellValues.Initialize 
OverviewCasesPage.bas[453]  rCellThemes.Initialize 
OverviewCasesPage.bas[454]  
OverviewCasesPage.bas[455]  rCellValues.Add(tblFields.Get( {424} )) 
OverviewCasesPage.bas[456]  rCellThemes.Add( {425} ) 
OverviewCasesPage.bas[457]  
OverviewCasesPage.bas[458]  ' special string value: if starts with [ICON], not the text but the icon will be shown 
OverviewCasesPage.bas[459]  Select Case tblFields.Get( {426} ) 
OverviewCasesPage.bas[460]  Case {427} 
OverviewCasesPage.bas[461]  rCellValues.Add( {428} ) 
OverviewCasesPage.bas[462]  Case {429} 
OverviewCasesPage.bas[463]  rCellValues.Add( {430} ) 
OverviewCasesPage.bas[464]  Case {431} 
OverviewCasesPage.bas[465]  rCellValues.Add( {432} ) 
OverviewCasesPage.bas[466]  End Select 
OverviewCasesPage.bas[467]  rCellThemes.Add( {433} ) 
OverviewCasesPage.bas[468]  
OverviewCasesPage.bas[469]  Select Case tblFields.Get( {434} ) 
OverviewCasesPage.bas[470]  Case {435} 
OverviewCasesPage.bas[471]  rCellValues.Add( {436} ) 
OverviewCasesPage.bas[472]  Case {437} 
OverviewCasesPage.bas[473]  rCellValues.Add( {438} ) 
OverviewCasesPage.bas[474]  Case {439} 
OverviewCasesPage.bas[475]  rCellValues.Add( {440} ) 
OverviewCasesPage.bas[476]  End Select 
OverviewCasesPage.bas[477]  rCellThemes.Add( {441} ) 
OverviewCasesPage.bas[478]  
OverviewCasesPage.bas[479]  rCellValues.Add(tblFields.Get( {442} )) 
OverviewCasesPage.bas[480]  rCellThemes.Add( {443} ) 
OverviewCasesPage.bas[481]  
OverviewCasesPage.bas[482]  Select Case tblFields.Get( {444} ) 
OverviewCasesPage.bas[483]  Case {445} 
OverviewCasesPage.bas[484]  rCellValues.Add( {446} ) 
OverviewCasesPage.bas[485]  rCellThemes.Add( {447} ) 
OverviewCasesPage.bas[486]  Case {448} 
OverviewCasesPage.bas[487]  rCellValues.Add( {449} ) 
OverviewCasesPage.bas[488]  rCellThemes.Add( {450} ) 
OverviewCasesPage.bas[489]  Case {451} 
OverviewCasesPage.bas[490]  rCellValues.Add( {452} ) 
OverviewCasesPage.bas[491]  rCellThemes.Add( {453} ) 
OverviewCasesPage.bas[492]  Case {454} 
OverviewCasesPage.bas[493]  rCellValues.Add( {455} ) 
OverviewCasesPage.bas[494]  rCellThemes.Add( {456} ) 
OverviewCasesPage.bas[495]  Case {457} 
OverviewCasesPage.bas[496]  rCellValues.Add( {458} ) 
OverviewCasesPage.bas[497]  rCellThemes.Add( {459} ) 
OverviewCasesPage.bas[498]  Case {460} 
OverviewCasesPage.bas[499]  rCellValues.Add( {461} ) 
OverviewCasesPage.bas[500]  rCellThemes.Add( {462} ) 
OverviewCasesPage.bas[501]  Case {463} 
OverviewCasesPage.bas[502]  rCellValues.Add( {464} ) 
OverviewCasesPage.bas[503]  rCellThemes.Add( {465} ) 
OverviewCasesPage.bas[504]  Case {466} 
OverviewCasesPage.bas[505]  rCellValues.Add( {467} ) 
OverviewCasesPage.bas[506]  rCellThemes.Add( {468} ) 
OverviewCasesPage.bas[507]  Case {469} 
OverviewCasesPage.bas[508]  rCellValues.Add( {470} ) 
OverviewCasesPage.bas[509]  rCellThemes.Add( {471} ) 
OverviewCasesPage.bas[510]  Case {472} 
OverviewCasesPage.bas[511]  rCellValues.Add( {473} ) 
OverviewCasesPage.bas[512]  rCellthemes.Add( {474} ) 
OverviewCasesPage.bas[513]  End Select 
OverviewCasesPage.bas[514]  
OverviewCasesPage.bas[515]  If tblFields.Get( {475} ) = {476} Then 
OverviewCasesPage.bas[516]  rCellValues.Add( {477} ) 
OverviewCasesPage.bas[517]  Else 
OverviewCasesPage.bas[518]  rCellValues.Add(tblFields.Get( {478} )) 
OverviewCasesPage.bas[519]  End If 
OverviewCasesPage.bas[520]  rCellThemes.Add( {479} ) 
OverviewCasesPage.bas[521]  
OverviewCasesPage.bas[522]  rCellValues.Add(tblFields.Get( {480} )) 
OverviewCasesPage.bas[523]  rCellThemes.Add( {481} ) 
OverviewCasesPage.bas[524]  
OverviewCasesPage.bas[525] ' If tblFields.Get( {482} ) = Null Then 
OverviewCasesPage.bas[526] ' rCellValues.Add( {483} ) 
OverviewCasesPage.bas[527] ' Else 
OverviewCasesPage.bas[528] ' rCellValues.Add(tblFields.Get( {484} )) 
OverviewCasesPage.bas[529] ' End If 
OverviewCasesPage.bas[530] ' rCellThemes.Add( {485} ) 
OverviewCasesPage.bas[531] ' 
OverviewCasesPage.bas[532] ' Dim points As String = GetMyPoints(tblFields.Get( {486} )) 
OverviewCasesPage.bas[533] ' If points <> {487} Then 
OverviewCasesPage.bas[534] ' If UserType <> {488} Then ' admins and donators get double point value 
OverviewCasesPage.bas[535] ' Select Case points 
OverviewCasesPage.bas[536] ' Case {489} 
OverviewCasesPage.bas[537] ' rCellValues.Add( {490} ) 
OverviewCasesPage.bas[538] ' Case {491} 
OverviewCasesPage.bas[539] ' rCellValues.Add( {492} ) 
OverviewCasesPage.bas[540] ' Case {493} 
OverviewCasesPage.bas[541] ' rCellValues.Add( {494} ) 
OverviewCasesPage.bas[542] ' Case {495} 
OverviewCasesPage.bas[543] ' rCellValues.Add( {496} ) 
OverviewCasesPage.bas[544] ' Case {497} 
OverviewCasesPage.bas[545] ' rCellValues.Add( {498} ) 
OverviewCasesPage.bas[546] ' End Select 
OverviewCasesPage.bas[547] ' Else 
OverviewCasesPage.bas[548] ' Select Case points 
OverviewCasesPage.bas[549] ' Case {499} 
OverviewCasesPage.bas[550] ' rCellValues.Add( {500} ) 
OverviewCasesPage.bas[551] ' Case {501} 
OverviewCasesPage.bas[552] ' rCellValues.Add( {502} ) 
OverviewCasesPage.bas[553] ' Case {503} 
OverviewCasesPage.bas[554] ' rCellValues.Add( {504} ) 
OverviewCasesPage.bas[555] ' Case {505} 
OverviewCasesPage.bas[556] ' rCellValues.Add( {506} ) 
OverviewCasesPage.bas[557] ' Case {507} 
OverviewCasesPage.bas[558] ' rCellValues.Add( {508} ) 
OverviewCasesPage.bas[559] ' End Select 
OverviewCasesPage.bas[560] ' End If 
OverviewCasesPage.bas[561] ' rCellThemes.Add( {509} ) 
OverviewCasesPage.bas[562] ' 
OverviewCasesPage.bas[563] ' rCellValues.Add(points) 
OverviewCasesPage.bas[564] ' rCellThemes.Add( {510} ) 
OverviewCasesPage.bas[565] ' Else 
OverviewCasesPage.bas[566] ' rCellValues.Add( {511} ) 
OverviewCasesPage.bas[567] ' rCellThemes.Add( {512} ) 
OverviewCasesPage.bas[568] ' 
OverviewCasesPage.bas[569] ' rCellValues.Add( {513} ) 
OverviewCasesPage.bas[570] ' rCellThemes.Add( {514} ) 
OverviewCasesPage.bas[571] ' End If 
OverviewCasesPage.bas[572]  
OverviewCasesPage.bas[573]  If tblFields.Get( {515} ) <> Null Then 
OverviewCasesPage.bas[574]  Dim numNotes As String = tblFields.Get( {516} ) 
OverviewCasesPage.bas[575]  rCellValues.Add(numNotes) 
OverviewCasesPage.bas[576]  Dim numNotesTheme As String = {517} 
OverviewCasesPage.bas[577]  If tblFields.Get( {518} ) <> Null Then 
OverviewCasesPage.bas[578]  If tblFields.Get( {519} ) = {520} Then 
OverviewCasesPage.bas[579]  numNotesTheme = {521} 
OverviewCasesPage.bas[580]  End If 
OverviewCasesPage.bas[581]  End If 
OverviewCasesPage.bas[582]  rCellThemes.Add(numNotesTheme) 
OverviewCasesPage.bas[583]  Else 
OverviewCasesPage.bas[584]  rCellValues.Add( {522} ) 
OverviewCasesPage.bas[585]  rCellThemes.Add( {523} ) 
OverviewCasesPage.bas[586]  End If 
OverviewCasesPage.bas[587]  
OverviewCasesPage.bas[588]  Dim btnEdit As ABMButton 
OverviewCasesPage.bas[589]  btnEdit.InitializeFloating(page, {524} , {525} , {526} ) 
OverviewCasesPage.bas[590]  rCellValues.Add(btnEdit) 
OverviewCasesPage.bas[591]  rCellThemes.Add( {527} ) 
OverviewCasesPage.bas[592]  
OverviewCasesPage.bas[593]  If UserType = {528} Then 
OverviewCasesPage.bas[594]  Dim btnDelete As ABMButton 
OverviewCasesPage.bas[595]  btnDelete.InitializeFloating(page, {529} , {530} , {531} ) 
OverviewCasesPage.bas[596]  rCellValues.Add(btnDelete) 
OverviewCasesPage.bas[597]  rCellThemes.Add( {532} ) 
OverviewCasesPage.bas[598]  End If 
OverviewCasesPage.bas[599]  
OverviewCasesPage.bas[600]  tblCases.AddRow( {533} & i, rCellValues) 
OverviewCasesPage.bas[601]  tblCases.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in rCellValues! Must follow IMMEDIATELY AFTER AddRow! 
OverviewCasesPage.bas[602]  Next 
OverviewCasesPage.bas[603]  tblCases.Refresh 
OverviewCasesPage.bas[604]  
OverviewCasesPage.bas[605]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[606]  
OverviewCasesPage.bas[607]  Dim pagination As ABMPagination = page.Component( {534} ) 
OverviewCasesPage.bas[608]  If (numcases Mod MaxRows > 0) Or (numcases = 0) Then 
OverviewCasesPage.bas[609]  numcases = numcases/MaxRows + 1 
OverviewCasesPage.bas[610]  Else 
OverviewCasesPage.bas[611]  numcases = numcases/MaxRows 
OverviewCasesPage.bas[612]  End If 
OverviewCasesPage.bas[613]  pagination.SetTotalNumberOfPages(numcases) 
OverviewCasesPage.bas[614]  pagination.SetActivePage(fromPage) 
OverviewCasesPage.bas[615]  pagination.Refresh 
OverviewCasesPage.bas[616] End Sub 
OverviewCasesPage.bas[617]  
OverviewCasesPage.bas[618] 'Sub GetMyPoints(caseID As Int) As Int 
OverviewCasesPage.bas[619] ' Return MyPoints.GetDefault( {535} & caseID, {536} ) 
OverviewCasesPage.bas[620] 'End Sub 
OverviewCasesPage.bas[621] ' 
OverviewCasesPage.bas[622] 'Sub LoadMyPoints() 
OverviewCasesPage.bas[623] ' Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[624] ' MyPoints.Initialize 
OverviewCasesPage.bas[625] ' MyPoints.Clear 
OverviewCasesPage.bas[626] ' MyNotAvailablePoints.Initialize 
OverviewCasesPage.bas[627] ' MyNotAvailablePoints.Clear 
OverviewCasesPage.bas[628] ' Dim cases As List = DBM.SQLSelect(SQL, {537} & UserID & {538} , Null ) 
OverviewCasesPage.bas[629] ' For i = 0 To cases.Size - 1 
OverviewCasesPage.bas[630] ' Dim cas As Map = cases.Get(i) 
OverviewCasesPage.bas[631] ' MyPoints.Put(cas.Get( {539} ), cas.Get( {540} )) 
OverviewCasesPage.bas[632] ' MyNotAvailablePoints.Put(cas.Get( {541} ), False) 
OverviewCasesPage.bas[633] ' Next 
OverviewCasesPage.bas[634] ' DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[635] 'End Sub 
OverviewCasesPage.bas[636] ' 
OverviewCasesPage.bas[637] 'Sub GetArePointsAvailable(points As String) As Boolean 
OverviewCasesPage.bas[638] ' Return MyNotAvailablePoints.GetDefault(points, True) 
OverviewCasesPage.bas[639] 'End Sub 
OverviewCasesPage.bas[640]  
OverviewCasesPage.bas[641] ' clicked on the navigation bar 
OverviewCasesPage.bas[642] Sub Page_NavigationbarClicked(Action As String, Value As String) 
OverviewCasesPage.bas[643]  page.SaveNavigationBarPosition 
OverviewCasesPage.bas[644]  'If Action = {542} Then Return 
OverviewCasesPage.bas[645]  If Action = {543} Then 
OverviewCasesPage.bas[646]  ABMShared.LogOff(page, ABMShared.AppName) 
OverviewCasesPage.bas[647]  Return 
OverviewCasesPage.bas[648]  End If 
OverviewCasesPage.bas[649]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
OverviewCasesPage.bas[650] End Sub 
OverviewCasesPage.bas[651]  
OverviewCasesPage.bas[652] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
OverviewCasesPage.bas[653]  page.ws.Session.SetAttribute( {544} , {545} ) 
OverviewCasesPage.bas[654]  page.ws.Session.SetAttribute( {546} , {547} ) 
OverviewCasesPage.bas[655]  page.ws.Session.SetAttribute( {548} , {549} ) 
OverviewCasesPage.bas[656]  page.ws.Session.SetAttribute( {550} , {551} ) 
OverviewCasesPage.bas[657]  page.ws.Session.SetAttribute( {552} , {553} ) 
OverviewCasesPage.bas[658]  ABMShared.NavigateToPage(ws, ABMPageId, {554} ) 
OverviewCasesPage.bas[659] End Sub 
OverviewCasesPage.bas[660]  
OverviewCasesPage.bas[661] Sub pagination_PageChanged(OldPage As Int, NewPage As Int) 
OverviewCasesPage.bas[662]  ' do your stuff 
OverviewCasesPage.bas[663]  LoadCases(NewPage) 
OverviewCasesPage.bas[664] End Sub 
OverviewCasesPage.bas[665]  
OverviewCasesPage.bas[666] Sub btnSearch_Clicked(Target As String) 
OverviewCasesPage.bas[667]  DoSearch 
OverviewCasesPage.bas[668] End Sub 
OverviewCasesPage.bas[669]  
OverviewCasesPage.bas[670] Sub searchCase_EnterPressed(value As String) 
OverviewCasesPage.bas[671]  DoSearch 
OverviewCasesPage.bas[672] End Sub 
OverviewCasesPage.bas[673]  
OverviewCasesPage.bas[674] Sub DoSearch() 
OverviewCasesPage.bas[675]  Dim searchCase As ABMInput = page.Component( {555} ) 
OverviewCasesPage.bas[676]  Dim casestatussearch As ABMCombo = page.Component( {556} ) 
OverviewCasesPage.bas[677]  FilterCount= {557} ; 
OverviewCasesPage.bas[678]  Filter = searchCase.Text 
OverviewCasesPage.bas[679]  Dim extra As String 
OverviewCasesPage.bas[680]  
OverviewCasesPage.bas[681]  Select Case casestatussearch.GetActiveItemId 
OverviewCasesPage.bas[682]  Case {558} 
OverviewCasesPage.bas[683]  extra = {559} 
OverviewCasesPage.bas[684]  Case {560} 
OverviewCasesPage.bas[685]  extra = {561} 
OverviewCasesPage.bas[686]  Case {562} 
OverviewCasesPage.bas[687]  extra = {563} 
OverviewCasesPage.bas[688]  Case {564} 
OverviewCasesPage.bas[689]  extra = {565} 
OverviewCasesPage.bas[690]  Case {566} 
OverviewCasesPage.bas[691]  extra = {567} 
OverviewCasesPage.bas[692]  Case {568} 
OverviewCasesPage.bas[693]  extra = {569} 
OverviewCasesPage.bas[694]  Case {570} 
OverviewCasesPage.bas[695]  extra = {571} 
OverviewCasesPage.bas[696]  Case {572} 
OverviewCasesPage.bas[697]  extra = {573} 
OverviewCasesPage.bas[698]  Case {574} 
OverviewCasesPage.bas[699]  extra = {575} 
OverviewCasesPage.bas[700]  Case {576} 
OverviewCasesPage.bas[701]  extra = {577} 
OverviewCasesPage.bas[702]  Case {578} 
OverviewCasesPage.bas[703]  extra = {579} 
OverviewCasesPage.bas[704]  Case {580} 
OverviewCasesPage.bas[705]  extra = {581} & UserID & {582} 
OverviewCasesPage.bas[706]  End Select 
OverviewCasesPage.bas[707]  If Filter <> {583} Then 
OverviewCasesPage.bas[708]  If extra <> {584} Then 
OverviewCasesPage.bas[709]  FilterCount = {585} & extra & {586} & Filter & {587} 
OverviewCasesPage.bas[710]  Filter = {588} & extra & {589} & Filter & {590} 
OverviewCasesPage.bas[711]  Else 
OverviewCasesPage.bas[712]  FilterCount = {591} & Filter & {592} 
OverviewCasesPage.bas[713]  Filter = {593} & Filter & {594} 
OverviewCasesPage.bas[714]  End If 
OverviewCasesPage.bas[715]  Else 
OverviewCasesPage.bas[716]  If extra <> {595} Then 
OverviewCasesPage.bas[717]  FilterCount = {596} & extra & {597} 
OverviewCasesPage.bas[718]  Filter = {598} & extra & {599} 
OverviewCasesPage.bas[719]  End If 
OverviewCasesPage.bas[720]  End If 
OverviewCasesPage.bas[721]  ' reload the table 
OverviewCasesPage.bas[722]  LoadCases(1) 
OverviewCasesPage.bas[723] End Sub 
OverviewCasesPage.bas[724]  
OverviewCasesPage.bas[725] Sub AddCaseBtn_Clicked(Target As String, SubTarget As String) 
OverviewCasesPage.bas[726]  ' reset all the values on the form 
OverviewCasesPage.bas[727]  ActiveCaseId = 0 
OverviewCasesPage.bas[728]  Dim inp As ABMModalSheet = page.ModalSheet( {600} ) 
OverviewCasesPage.bas[729]  
OverviewCasesPage.bas[730]  Dim lblCaseCreator As ABMLabel = inp.Content.Component( {601} ) 
OverviewCasesPage.bas[731]  lblCaseCreator.Text = UserName 
OverviewCasesPage.bas[732]  
OverviewCasesPage.bas[733]  Dim casetype As ABMCombo = inp.Content.Component( {602} ) 
OverviewCasesPage.bas[734]  casetype.SetActiveItemId( {603} ) 
OverviewCasesPage.bas[735]  casetype.Enabled = True 
OverviewCasesPage.bas[736]  
OverviewCasesPage.bas[737]  Dim casesummary As ABMInput = inp.Content.Component( {604} ) 
OverviewCasesPage.bas[738]  casesummary.Text = {605} 
OverviewCasesPage.bas[739]  casesummary.Enabled = True 
OverviewCasesPage.bas[740]  
OverviewCasesPage.bas[741]  Dim casedescription As ABMInput = inp.Content.Component( {606} ) 
OverviewCasesPage.bas[742]  casedescription.Text = {607} 
OverviewCasesPage.bas[743]  casedescription.Enabled = True 
OverviewCasesPage.bas[744]  
OverviewCasesPage.bas[745]  Dim casestatus As ABMCombo = inp.Content.Component( {608} ) 
OverviewCasesPage.bas[746]  casestatus.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[747]  casestatus.SetActiveItemId( {609} ) 
OverviewCasesPage.bas[748]  Dim caseversion As ABMInput = inp.Content.Component( {610} ) 
OverviewCasesPage.bas[749]  caseversion.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[750]  caseversion.Text = {611} 
OverviewCasesPage.bas[751]  
OverviewCasesPage.bas[752]  Dim savebtn As ABMButton = inp.Footer.Component( {612} ) 
OverviewCasesPage.bas[753]  savebtn.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[754]  
OverviewCasesPage.bas[755]  Dim attbtn As ABMButton = inp.Footer.Component( {613} ) 
OverviewCasesPage.bas[756]  attbtn.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[757]  
OverviewCasesPage.bas[758]  ' don't allow notes to be added until the case is created 
OverviewCasesPage.bas[759]  Dim notebtn As ABMButton = inp.Footer.Component( {614} ) 
OverviewCasesPage.bas[760]  notebtn.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[761]  
OverviewCasesPage.bas[762]  If UserType = {615} Then ' admin, we're allowed to do everythig 
OverviewCasesPage.bas[763]  Dim casestatus As ABMCombo = inp.Content.Component( {616} ) 
OverviewCasesPage.bas[764]  casestatus.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[765]  casestatus.SetActiveItemId( {617} ) 
OverviewCasesPage.bas[766]  
OverviewCasesPage.bas[767]  Dim caseversion As ABMInput = inp.Content.Component( {618} ) 
OverviewCasesPage.bas[768]  caseversion.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[769]  caseversion.Text = {619} 
OverviewCasesPage.bas[770]  Else ' a user 
OverviewCasesPage.bas[771]  Dim casestatus As ABMCombo = inp.Content.Component( {620} ) 
OverviewCasesPage.bas[772]  casestatus.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[773]  casestatus.SetActiveItemId( {621} ) 
OverviewCasesPage.bas[774]  
OverviewCasesPage.bas[775]  Dim caseversion As ABMInput = inp.Content.Component( {622} ) 
OverviewCasesPage.bas[776]  caseversion.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[777]  caseversion.Text = {623} 
OverviewCasesPage.bas[778]  End If 
OverviewCasesPage.bas[779]  
OverviewCasesPage.bas[780] ' Dim casepoints As ABMCombo 
OverviewCasesPage.bas[781] ' casepoints = inp.Content.Component( {624} ) 
OverviewCasesPage.bas[782] ' casepoints.Clear 
OverviewCasesPage.bas[783] ' ' only show availble choice of points 
OverviewCasesPage.bas[784] ' If UserType <> 0 Then ' if administrator or donator, points count triple 
OverviewCasesPage.bas[785] ' casepoints.AddItem( {625} , {626} , BuildSimpleItem( {627} , {628} , {629} )) 
OverviewCasesPage.bas[786] ' If GetArePointsAvailable( {630} ) Then 
OverviewCasesPage.bas[787] ' casepoints.AddItem( {631} , {632} , BuildSimpleItem( {633} , {634} , {635} )) 
OverviewCasesPage.bas[788] ' End If 
OverviewCasesPage.bas[789] ' If GetArePointsAvailable( {636} ) Then 
OverviewCasesPage.bas[790] ' casepoints.AddItem( {637} , {638} , BuildSimpleItem( {639} , {640} , {641} )) 
OverviewCasesPage.bas[791] ' End If 
OverviewCasesPage.bas[792] ' If GetArePointsAvailable( {642} ) Then 
OverviewCasesPage.bas[793] ' casepoints.AddItem( {643} , {644} , BuildSimpleItem( {645} , {646} , {647} )) 
OverviewCasesPage.bas[794] ' End If 
OverviewCasesPage.bas[795] ' If GetArePointsAvailable( {648} ) Then 
OverviewCasesPage.bas[796] ' casepoints.AddItem( {649} , {650} , BuildSimpleItem( {651} , {652} , {653} )) 
OverviewCasesPage.bas[797] ' End If 
OverviewCasesPage.bas[798] ' If GetArePointsAvailable( {654} ) Then 
OverviewCasesPage.bas[799] ' casepoints.AddItem( {655} , {656} , BuildSimpleItem( {657} , {658} , {659} )) 
OverviewCasesPage.bas[800] ' End If 
OverviewCasesPage.bas[801] ' Else 
OverviewCasesPage.bas[802] ' casepoints.AddItem( {660} , {661} , BuildSimpleItem( {662} , {663} , {664} )) 
OverviewCasesPage.bas[803] ' If GetArePointsAvailable( {665} ) Then 
OverviewCasesPage.bas[804] ' casepoints.AddItem( {666} , {667} , BuildSimpleItem( {668} , {669} , {670} )) 
OverviewCasesPage.bas[805] ' End If 
OverviewCasesPage.bas[806] ' If GetArePointsAvailable( {671} ) Then 
OverviewCasesPage.bas[807] ' casepoints.AddItem( {672} , {673} , BuildSimpleItem( {674} , {675} , {676} )) 
OverviewCasesPage.bas[808] ' End If 
OverviewCasesPage.bas[809] ' If GetArePointsAvailable( {677} ) Then 
OverviewCasesPage.bas[810] ' casepoints.AddItem( {678} , {679} , BuildSimpleItem( {680} , {681} , {682} )) 
OverviewCasesPage.bas[811] ' End If 
OverviewCasesPage.bas[812] ' If GetArePointsAvailable( {683} ) Then 
OverviewCasesPage.bas[813] ' casepoints.AddItem( {684} , {685} , BuildSimpleItem( {686} , {687} , {688} )) 
OverviewCasesPage.bas[814] ' End If 
OverviewCasesPage.bas[815] ' If GetArePointsAvailable( {689} ) Then 
OverviewCasesPage.bas[816] ' casepoints.AddItem( {690} , {691} , BuildSimpleItem( {692} , {693} , {694} )) 
OverviewCasesPage.bas[817] ' End If 
OverviewCasesPage.bas[818] ' End If 
OverviewCasesPage.bas[819] ' casepoints.SetActiveItemId( {695} ) 
OverviewCasesPage.bas[820] ' casepoints.Refresh 
OverviewCasesPage.bas[821]  
OverviewCasesPage.bas[822]  ' removes all attachment chip components in this cell from possible a previous edit/view 
OverviewCasesPage.bas[823]  inp.Content.Cell(5,1).RemoveAllComponents 
OverviewCasesPage.bas[824]  
OverviewCasesPage.bas[825]  ' removes all note components in this cell from possible a previous edit/view 
OverviewCasesPage.bas[826]  inp.Content.Cell(6,1).RemoveAllComponents 
OverviewCasesPage.bas[827]  
OverviewCasesPage.bas[828]  
OverviewCasesPage.bas[829]  
OverviewCasesPage.bas[830]  'inp.Refresh 
OverviewCasesPage.bas[831]  
OverviewCasesPage.bas[832]  Attachments.Initialize 
OverviewCasesPage.bas[833]  RemoveAttachments.Initialize 
OverviewCasesPage.bas[834]  
OverviewCasesPage.bas[835]  DateTime.DateFormat = {696} 
OverviewCasesPage.bas[836]  DateTime.TimeFormat = {697} 
OverviewCasesPage.bas[837]  
OverviewCasesPage.bas[838]  ActiveCaseNumber = DateTime.Date(DateTime.Now) & DateTime.Time(DateTime.Now) & Rnd(1,50000) 
OverviewCasesPage.bas[839]  ws.Session.SetAttribute( {698} , ActiveCaseNumber) 
OverviewCasesPage.bas[840]  page.ShowModalSheet( {699} ) 
OverviewCasesPage.bas[841]  
OverviewCasesPage.bas[842]  
OverviewCasesPage.bas[843] End Sub 
OverviewCasesPage.bas[844]  
OverviewCasesPage.bas[845] Sub tblCases_Clicked(PassedRowsAndColumns As List) 
OverviewCasesPage.bas[846]  ' fill with the active values 
OverviewCasesPage.bas[847]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
OverviewCasesPage.bas[848]  Dim tblCases As ABMTable = page.Component(tblCellInfo.TableName) 
OverviewCasesPage.bas[849]  If tblCellInfo.Column = 8 Then ' edit 
OverviewCasesPage.bas[850]  Dim inp As ABMModalSheet = page.ModalSheet( {700} ) 
OverviewCasesPage.bas[851]  ActiveCaseId = tblCases.GetString(tblCellInfo.Row, 0) 
OverviewCasesPage.bas[852]  
OverviewCasesPage.bas[853]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[854]  
OverviewCasesPage.bas[855]  Dim cases As List = DBM.SQLSelect(SQL, {701} & ActiveCaseId, Null) 
OverviewCasesPage.bas[856]  If cases.Size = 0 Then 
OverviewCasesPage.bas[857]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[858]  Return 
OverviewCasesPage.bas[859]  End If 
OverviewCasesPage.bas[860]  
OverviewCasesPage.bas[861]  Dim cas As Map = cases.Get(0) 
OverviewCasesPage.bas[862]  
OverviewCasesPage.bas[863]  ActiveCaseNumber = cas.Get( {702} ) 
OverviewCasesPage.bas[864]  ' used for the upload of attachements in ABMUploadHandler 
OverviewCasesPage.bas[865]  ws.Session.SetAttribute( {703} , ActiveCaseNumber) 
OverviewCasesPage.bas[866]  
OverviewCasesPage.bas[867]  Attachments.Initialize 
OverviewCasesPage.bas[868]  ' list with attachments that should be removed (clicked x on chip) 
OverviewCasesPage.bas[869]  RemoveAttachments.Initialize 
OverviewCasesPage.bas[870]  ' load attachments 
OverviewCasesPage.bas[871]  Dim attCounter As Int = 0 
OverviewCasesPage.bas[872]  
OverviewCasesPage.bas[873]  ActiveCaseUserID = cas.Get( {704} ) 
OverviewCasesPage.bas[874]  
OverviewCasesPage.bas[875]  Dim CanBeclosed As Boolean = (UserType = {705} Or page.ws.Session.GetAttribute( {706} ) = ActiveCaseUserID) ' if the administrator or the creator of the case 
OverviewCasesPage.bas[876]  
OverviewCasesPage.bas[877]  Dim SQL_str As String = {707} & ActiveCaseId 
OverviewCasesPage.bas[878]  Dim attachs As List = DBM.SQLSelect(SQL,SQL_str, Null) 
OverviewCasesPage.bas[879]  
OverviewCasesPage.bas[880]  Dim attLocation As String = {708} 
OverviewCasesPage.bas[881]  
OverviewCasesPage.bas[882]  ' removes all chip components in this cell 
OverviewCasesPage.bas[883]  inp.Content.Cell(5,1).RemoveAllComponents 
OverviewCasesPage.bas[884]  
OverviewCasesPage.bas[885]  For i=0 To attachs.Size - 1 
OverviewCasesPage.bas[886]  Dim attach As Map = attachs.Get(i) 
OverviewCasesPage.bas[887]  Dim fileName As String = attach.Get( {709} ) 
OverviewCasesPage.bas[888]  Attachments.Put(attach.Get( {710} ), fileName) 
OverviewCasesPage.bas[889]  
OverviewCasesPage.bas[890]  Dim chip As ABMChip 
OverviewCasesPage.bas[891]  attCounter = attCounter + 1 
OverviewCasesPage.bas[892]  chip.Initialize(page, attCounter, {711} & attLocation & fileName & {712} & ABMShared.mid2(fileName, ActiveCaseNumber.Length+1) & {713} , CanBeclosed, {714} ) 
OverviewCasesPage.bas[893]  chip.Tag = attach.Get( {715} ) 
OverviewCasesPage.bas[894]  inp.Content.Cell(5,1).AddArrayComponent(chip, {716} ) 
OverviewCasesPage.bas[895]  Next 
OverviewCasesPage.bas[896]  
OverviewCasesPage.bas[897]  Dim lblCaseCreator As ABMLabel = inp.Content.Component( {717} ) 
OverviewCasesPage.bas[898]  lblCaseCreator.Text = cas.Get( {718} ) 
OverviewCasesPage.bas[899]  
OverviewCasesPage.bas[900]  ' set the rest of the input fields 
OverviewCasesPage.bas[901]  Dim casetype As ABMCombo = inp.Content.Component( {719} ) 
OverviewCasesPage.bas[902]  casetype.SetActiveItemId( {720} & cas.Get( {721} )) 
OverviewCasesPage.bas[903]  casetype.Enabled = True 
OverviewCasesPage.bas[904]  
OverviewCasesPage.bas[905]  Dim casesummary As ABMInput = inp.Content.Component( {722} ) 
OverviewCasesPage.bas[906]  casesummary.Text = cas.Get( {723} ) 
OverviewCasesPage.bas[907]  casesummary.Enabled = True 
OverviewCasesPage.bas[908]  
OverviewCasesPage.bas[909]  Dim casedescription As ABMInput = inp.Content.Component( {724} ) 
OverviewCasesPage.bas[910]  casedescription.Text = cas.Get( {725} ) 
OverviewCasesPage.bas[911]  casedescription.Enabled = True 
OverviewCasesPage.bas[912]  
OverviewCasesPage.bas[913] ' Dim casepoints As ABMCombo = inp.Content.Component( {726} ) 
OverviewCasesPage.bas[914] ' Dim points As String = GetMyPoints(ActiveCaseId) 
OverviewCasesPage.bas[915] ' Dim PointsInt As Int 
OverviewCasesPage.bas[916] ' PointsInt = points 
OverviewCasesPage.bas[917] ' If UserID <> 0 Then ' admins and donators get double the point value 
OverviewCasesPage.bas[918] ' PointsInt = PointsInt / 10 
OverviewCasesPage.bas[919] ' Else 
OverviewCasesPage.bas[920] ' PointsInt = PointsInt / 5 
OverviewCasesPage.bas[921] ' End If 
OverviewCasesPage.bas[922] ' 
OverviewCasesPage.bas[923] ' casepoints.Clear 
OverviewCasesPage.bas[924] ' ' only show availble choice of points 
OverviewCasesPage.bas[925] ' If UserType <> 0 Then ' if administrator or donator, points count triple 
OverviewCasesPage.bas[926] ' casepoints.AddItem( {727} , {728} , BuildSimpleItem( {729} , {730} , {731} )) 
OverviewCasesPage.bas[927] ' If GetArePointsAvailable( {732} ) Or PointsInt = 1 Then 
OverviewCasesPage.bas[928] ' casepoints.AddItem( {733} , {734} , BuildSimpleItem( {735} , {736} , {737} )) 
OverviewCasesPage.bas[929] ' End If 
OverviewCasesPage.bas[930] ' If GetArePointsAvailable( {738} ) Or PointsInt = 2 Then 
OverviewCasesPage.bas[931] ' casepoints.AddItem( {739} , {740} , BuildSimpleItem( {741} , {742} , {743} )) 
OverviewCasesPage.bas[932] ' End If 
OverviewCasesPage.bas[933] ' If GetArePointsAvailable( {744} ) Or PointsInt = 3 Then 
OverviewCasesPage.bas[934] ' casepoints.AddItem( {745} , {746} , BuildSimpleItem( {747} , {748} , {749} )) 
OverviewCasesPage.bas[935] ' End If 
OverviewCasesPage.bas[936] ' If GetArePointsAvailable( {750} ) Or PointsInt = 4 Then 
OverviewCasesPage.bas[937] ' casepoints.AddItem( {751} , {752} , BuildSimpleItem( {753} , {754} , {755} )) 
OverviewCasesPage.bas[938] ' End If 
OverviewCasesPage.bas[939] ' If GetArePointsAvailable( {756} ) Or PointsInt = 5 Then 
OverviewCasesPage.bas[940] ' casepoints.AddItem( {757} , {758} , BuildSimpleItem( {759} , {760} , {761} )) 
OverviewCasesPage.bas[941] ' End If 
OverviewCasesPage.bas[942] ' Else 
OverviewCasesPage.bas[943] ' casepoints.AddItem( {762} , {763} , BuildSimpleItem( {764} , {765} , {766} )) 
OverviewCasesPage.bas[944] ' If GetArePointsAvailable( {767} ) Or PointsInt = 1 Then 
OverviewCasesPage.bas[945] ' casepoints.AddItem( {768} , {769} , BuildSimpleItem( {770} , {771} , {772} )) 
OverviewCasesPage.bas[946] ' End If 
OverviewCasesPage.bas[947] ' If GetArePointsAvailable( {773} ) Or PointsInt = 2 Then 
OverviewCasesPage.bas[948] ' casepoints.AddItem( {774} , {775} , BuildSimpleItem( {776} , {777} , {778} )) 
OverviewCasesPage.bas[949] ' End If 
OverviewCasesPage.bas[950] ' If GetArePointsAvailable( {779} ) Or PointsInt = 3 Then 
OverviewCasesPage.bas[951] ' casepoints.AddItem( {780} , {781} , BuildSimpleItem( {782} , {783} , {784} )) 
OverviewCasesPage.bas[952] ' End If 
OverviewCasesPage.bas[953] ' If GetArePointsAvailable( {785} ) Or PointsInt = 4 Then 
OverviewCasesPage.bas[954] ' casepoints.AddItem( {786} , {787} , BuildSimpleItem( {788} , {789} , {790} )) 
OverviewCasesPage.bas[955] ' End If 
OverviewCasesPage.bas[956] ' If GetArePointsAvailable( {791} ) Or PointsInt = 5 Then 
OverviewCasesPage.bas[957] ' casepoints.AddItem( {792} , {793} , BuildSimpleItem( {794} , {795} , {796} )) 
OverviewCasesPage.bas[958] ' End If 
OverviewCasesPage.bas[959] ' End If 
OverviewCasesPage.bas[960] ' casepoints.SetActiveItemId( {797} & PointsInt) 
OverviewCasesPage.bas[961] ' casepoints.Refresh 
OverviewCasesPage.bas[962]  
OverviewCasesPage.bas[963]  Dim savebtn As ABMButton = inp.Footer.Component( {798} ) 
OverviewCasesPage.bas[964]  savebtn.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[965]  
OverviewCasesPage.bas[966]  Dim attbtn As ABMButton = inp.Footer.Component( {799} ) 
OverviewCasesPage.bas[967]  attbtn.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[968]  
OverviewCasesPage.bas[969]  Dim notebtn As ABMButton = inp.Footer.Component( {800} ) 
OverviewCasesPage.bas[970]  notebtn.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[971]  
OverviewCasesPage.bas[972]  If UserType = {801} Then ' admin, we're allowed to do everything 
OverviewCasesPage.bas[973]  Dim casestatus As ABMCombo = inp.Content.Component( {802} ) 
OverviewCasesPage.bas[974]  casestatus.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[975]  casestatus.SetActiveItemId( {803} & cas.Get( {804} )) 
OverviewCasesPage.bas[976]  
OverviewCasesPage.bas[977]  Dim caseversion As ABMInput = inp.Content.Component( {805} ) 
OverviewCasesPage.bas[978]  caseversion.Visibility = ABM.VISIBILITY_ALL 
OverviewCasesPage.bas[979]  caseversion.Text = cas.Get( {806} ) 
OverviewCasesPage.bas[980]  
OverviewCasesPage.bas[981]  Else ' a user 
OverviewCasesPage.bas[982]  Dim casestatus As ABMCombo = inp.Content.Component( {807} ) 
OverviewCasesPage.bas[983]  casestatus.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[984]  casestatus.SetActiveItemId( {808} & cas.Get( {809} )) 
OverviewCasesPage.bas[985]  
OverviewCasesPage.bas[986]  Dim caseversion As ABMInput = inp.Content.Component( {810} ) 
OverviewCasesPage.bas[987]  caseversion.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[988]  caseversion.Text = cas.Get( {811} ) 
OverviewCasesPage.bas[989]  
OverviewCasesPage.bas[990]  If page.ws.Session.GetAttribute( {812} ) <> ActiveCaseUserID Then ' this is not the creator, so disable editing 
OverviewCasesPage.bas[991]  casetype.Enabled = False 
OverviewCasesPage.bas[992]  casesummary.Enabled = False 
OverviewCasesPage.bas[993]  casedescription.Enabled = False 
OverviewCasesPage.bas[994]  attbtn.Visibility = ABM.VISIBILITY_HIDE_ALL 
OverviewCasesPage.bas[995]  
OverviewCasesPage.bas[996]  End If 
OverviewCasesPage.bas[997]  End If 
OverviewCasesPage.bas[998]  
OverviewCasesPage.bas[999]  ' Show the notes 
OverviewCasesPage.bas[1000]  SQL_str = {813} & ActiveCaseId & {814} 
OverviewCasesPage.bas[1001]  Dim notes As List = DBM.SQLSelect(SQL, SQL_str, Null) 
OverviewCasesPage.bas[1002]  
OverviewCasesPage.bas[1003]  ' removes all note components in this cell 
OverviewCasesPage.bas[1004]  inp.Content.Cell(6,1).RemoveAllComponents 
OverviewCasesPage.bas[1005]  
OverviewCasesPage.bas[1006]  For i = 0 To notes.Size - 1 
OverviewCasesPage.bas[1007]  Dim note As Map = notes.Get(i) 
OverviewCasesPage.bas[1008]  Dim notecont As ABMContainer = BuildNoteContainer(( {815} & note.Get( {816} )), note.get( {817} ), note.Get( {818} ), note.Get( {819} ), note.Get( {820} )) 
OverviewCasesPage.bas[1009]  inp.Content.Cell(6,1).AddComponent(notecont) 
OverviewCasesPage.bas[1010]  Next 
OverviewCasesPage.bas[1011]  
OverviewCasesPage.bas[1012]  ' set my read status for this case 
OverviewCasesPage.bas[1013]  
OverviewCasesPage.bas[1014]  tblCases.UseCellTheme(tblCellInfo.Row, 7, {821} ) 
OverviewCasesPage.bas[1015]  tblCases.Refresh 
OverviewCasesPage.bas[1016]  
OverviewCasesPage.bas[1017]  Dim CurrentFields, WhereFields As Map 
OverviewCasesPage.bas[1018]  CurrentFields.Initialize 
OverviewCasesPage.bas[1019]  WhereFields.Initialize 
OverviewCasesPage.bas[1020]  CurrentFields.Clear 
OverviewCasesPage.bas[1021]  WhereFields.Clear 
OverviewCasesPage.bas[1022]  
OverviewCasesPage.bas[1023]  CurrentFields.Put( {822} , ActiveCaseId) 
OverviewCasesPage.bas[1024]  CurrentFields.Put( {823} , UserID) 
OverviewCasesPage.bas[1025]  CurrentFields.Put( {824} , 1) 
OverviewCasesPage.bas[1026]  
OverviewCasesPage.bas[1027]  ' build the where values 
OverviewCasesPage.bas[1028]  WhereFields.Put( {825} , ActiveCaseId) 
OverviewCasesPage.bas[1029]  WhereFields.Put( {826} , UserID) 
OverviewCasesPage.bas[1030]  
OverviewCasesPage.bas[1031]  Dim SQL_Select As String = DBM.BuildSelectQuery( {827} , CurrentFields, WhereFields, Null) 
OverviewCasesPage.bas[1032]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {828} , CurrentFields) 
OverviewCasesPage.bas[1033]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {829} , CurrentFields, WhereFields) 
OverviewCasesPage.bas[1034]  DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
OverviewCasesPage.bas[1035]  
OverviewCasesPage.bas[1036]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[1037]  
OverviewCasesPage.bas[1038]  'inp.Refresh 
OverviewCasesPage.bas[1039]  page.ShowModalSheet( {830} ) 
OverviewCasesPage.bas[1040]  Return 
OverviewCasesPage.bas[1041]  End If 
OverviewCasesPage.bas[1042]  If tblCellInfo.Column = 9 Then ' delete 
OverviewCasesPage.bas[1043]  TypeDelete = {831} 
OverviewCasesPage.bas[1044]  Dim msg As ABMModalSheet = page.ModalSheet( {832} ) 
OverviewCasesPage.bas[1045]  ActiveCaseId = tblCases.GetString(tblCellInfo.Row, 0) 
OverviewCasesPage.bas[1046]  Dim lbl As ABMLabel = msg.Content.Component( {833} ) 
OverviewCasesPage.bas[1047]  lbl.Text = {834} & tblCases.GetString(tblCellInfo.Row,3) & {835} 
OverviewCasesPage.bas[1048]  page.ShowModalSheet( {836} ) 
OverviewCasesPage.bas[1049]  Return 
OverviewCasesPage.bas[1050]  End If 
OverviewCasesPage.bas[1051] End Sub 
OverviewCasesPage.bas[1052]  
OverviewCasesPage.bas[1053] Sub Chip_Closed(Target As String) 
OverviewCasesPage.bas[1054]  Dim inp As ABMModalSheet = page.ModalSheet( {837} ) 
OverviewCasesPage.bas[1055]  Dim ch As ABMChip = inp.Content.Component(Target) 
OverviewCasesPage.bas[1056]  Dim intTag As Int = ch.Tag 
OverviewCasesPage.bas[1057]  RemoveAttachments.put(intTag, ch.Tag) 
OverviewCasesPage.bas[1058] End Sub 
OverviewCasesPage.bas[1059]  
OverviewCasesPage.bas[1060] Sub tblCases_SortChanged(DataField As String, Order As String) 
OverviewCasesPage.bas[1061]  Select Case DataField 
OverviewCasesPage.bas[1062]  Case {838} , {839} , {840} , {841} , {842} ', {843} 
OverviewCasesPage.bas[1063]  LastSort = {844} & DataField & {845} & Order & {846} 
OverviewCasesPage.bas[1064]  'Case {847} 
OverviewCasesPage.bas[1065]  'LastSort = {848} & Order & {849} 
OverviewCasesPage.bas[1066]  Case Else 
OverviewCasesPage.bas[1067]  LastSort = {850} 
OverviewCasesPage.bas[1068]  End Select 
OverviewCasesPage.bas[1069]  ' reload the table 
OverviewCasesPage.bas[1070]  Dim pagination As ABMPagination = page.Component( {851} ) 
OverviewCasesPage.bas[1071]  LoadCases(pagination.GetActivePage()) 
OverviewCasesPage.bas[1072] End Sub 
OverviewCasesPage.bas[1073]  
OverviewCasesPage.bas[1074] #Region Inputscreen 
OverviewCasesPage.bas[1075] Sub BuildInputSheet() As ABMModalSheet 
OverviewCasesPage.bas[1076]  Dim inp As ABMModalSheet 
OverviewCasesPage.bas[1077]  inp.Initialize(page, {852} , True, False, {853} ) 
OverviewCasesPage.bas[1078]  inp.IsDismissible = False 
OverviewCasesPage.bas[1079]  inp.Size = ABM.MODALSHEET_SIZE_LARGE 
OverviewCasesPage.bas[1080]  
OverviewCasesPage.bas[1081]  inp.Content.AddRowsM(1, True,0,0, {854} ).AddCells12(1, {855} ) 
OverviewCasesPage.bas[1082]  inp.Content.AddRowsM(1, True,0,0, {856} ).AddCellsOS(1, 0,0,0,3,3,3, {857} ).AddCellsOS(1, 0,0,0,9,9,9, {858} )'.AddCellsOS(1, 0,0,0,2,2,2, {859} ) 
OverviewCasesPage.bas[1083]  inp.Content.AddRowsM(1, True,0,0, {860} ).AddCells12(1, {861} ) 
OverviewCasesPage.bas[1084]  inp.Content.AddRowsM(1, True,0,0, {862} ).AddCellsOS(1, 0,0,0,3,3,3, {863} ).AddCellsOS(1, 0,0,0,9,9,9, {864} ) 
OverviewCasesPage.bas[1085]  inp.Content.AddRowsM(6, True,0,0, {865} ).AddCells12(1, {866} ) 
OverviewCasesPage.bas[1086]  inp.Content.BuildGrid 
OverviewCasesPage.bas[1087]  
OverviewCasesPage.bas[1088]  ' add paragraph 
OverviewCasesPage.bas[1089]  inp.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraphBQWithZDepth(page, {867} , {868} ) ) 
OverviewCasesPage.bas[1090]  
OverviewCasesPage.bas[1091]  Dim lblCaseCreator As ABMLabel 
OverviewCasesPage.bas[1092]  lblCaseCreator.Initialize(page, {869} , UserName, ABM.SIZE_PARAGRAPH, False, {870} ) 
OverviewCasesPage.bas[1093]  inp.Content.CellR(0,1).AddComponent(lblCaseCreator) 
OverviewCasesPage.bas[1094]  
OverviewCasesPage.bas[1095]  Dim casetype As ABMCombo 
OverviewCasesPage.bas[1096]  casetype.Initialize(page, {871} , {872} , 650 , {873} ) 
OverviewCasesPage.bas[1097]  
OverviewCasesPage.bas[1098]  ' add items 
OverviewCasesPage.bas[1099]  casetype.AddItem( {874} , {875} , BuildSimpleItem( {876} , {877} , {878} )) 
OverviewCasesPage.bas[1100]  casetype.AddItem( {879} , {880} , BuildSimpleItem( {881} , {882} , {883} )) 
OverviewCasesPage.bas[1101]  casetype.AddItem( {884} , {885} , BuildSimpleItem( {886} , {887} , {888} )) 
OverviewCasesPage.bas[1102]  
OverviewCasesPage.bas[1103]  inp.Content.CellR(1,1).AddComponent(casetype) 
OverviewCasesPage.bas[1104]  
OverviewCasesPage.bas[1105]  Dim casesummary As ABMInput 
OverviewCasesPage.bas[1106]  casesummary.Initialize(page, {889} , ABM.INPUT_TEXT, {890} , False, {891} ) 
OverviewCasesPage.bas[1107]  inp.Content.CellR(0,2).AddComponent(casesummary) 
OverviewCasesPage.bas[1108]  
OverviewCasesPage.bas[1109] ' Dim casepoints As ABMCombo 
OverviewCasesPage.bas[1110] ' casepoints.Initialize(page, {892} , {893} , 650 , {894} ) 
OverviewCasesPage.bas[1111] ' 
OverviewCasesPage.bas[1112] ' ' add items 
OverviewCasesPage.bas[1113] ' If UserType <> 0 Then ' if administrator or donator, points count double 
OverviewCasesPage.bas[1114] ' casepoints.AddItem( {895} , {896} , BuildSimpleItem( {897} , {898} , {899} )) 
OverviewCasesPage.bas[1115] ' casepoints.AddItem( {900} , {901} , BuildSimpleItem( {902} , {903} , {904} )) 
OverviewCasesPage.bas[1116] ' casepoints.AddItem( {905} , {906} , BuildSimpleItem( {907} , {908} , {909} )) 
OverviewCasesPage.bas[1117] ' casepoints.AddItem( {910} , {911} , BuildSimpleItem( {912} , {913} , {914} )) 
OverviewCasesPage.bas[1118] ' casepoints.AddItem( {915} , {916} , BuildSimpleItem( {917} , {918} , {919} )) 
OverviewCasesPage.bas[1119] ' casepoints.AddItem( {920} , {921} , BuildSimpleItem( {922} , {923} , {924} )) 
OverviewCasesPage.bas[1120] ' Else 
OverviewCasesPage.bas[1121] ' casepoints.AddItem( {925} , {926} , BuildSimpleItem( {927} , {928} , {929} )) 
OverviewCasesPage.bas[1122] ' casepoints.AddItem( {930} , {931} , BuildSimpleItem( {932} , {933} , {934} )) 
OverviewCasesPage.bas[1123] ' casepoints.AddItem( {935} , {936} , BuildSimpleItem( {937} , {938} , {939} )) 
OverviewCasesPage.bas[1124] ' casepoints.AddItem( {940} , {941} , BuildSimpleItem( {942} , {943} , {944} )) 
OverviewCasesPage.bas[1125] ' casepoints.AddItem( {945} , {946} , BuildSimpleItem( {947} , {948} , {949} )) 
OverviewCasesPage.bas[1126] ' casepoints.AddItem( {950} , {951} , BuildSimpleItem( {952} , {953} , {954} )) 
OverviewCasesPage.bas[1127] ' End If 
OverviewCasesPage.bas[1128] ' casepoints.SetActiveItemId( {955} ) 
OverviewCasesPage.bas[1129] ' 
OverviewCasesPage.bas[1130] ' inp.Content.CellR(0,3).AddComponent(casepoints) 
OverviewCasesPage.bas[1131]  
OverviewCasesPage.bas[1132]  Dim casedescription As ABMInput 
OverviewCasesPage.bas[1133]  casedescription.Initialize(page, {956} , ABM.INPUT_TEXT, {957} , True, {958} ) 
OverviewCasesPage.bas[1134]  inp.Content.CellR(1,1).AddComponent(casedescription) 
OverviewCasesPage.bas[1135]  
OverviewCasesPage.bas[1136]  Dim casestatus As ABMCombo 
OverviewCasesPage.bas[1137]  casestatus.Initialize(page, {959} , {960} , 650 , {961} ) 
OverviewCasesPage.bas[1138]  
OverviewCasesPage.bas[1139]  ' add items 
OverviewCasesPage.bas[1140] ' casestatus.AddItem( {962} , {963} , BuildSimpleItem( {964} , {965} , {966} )) 
OverviewCasesPage.bas[1141] ' casestatus.AddItem( {967} , {968} , BuildSimpleItem( {969} , {970} , {971} )) 
OverviewCasesPage.bas[1142] ' casestatus.AddItem( {972} , {973} , BuildSimpleItem( {974} , {975} , {976} )) 
OverviewCasesPage.bas[1143] ' casestatus.AddItem( {977} , {978} , BuildSimpleItem( {979} , {980} , {981} )) 
OverviewCasesPage.bas[1144] ' casestatus.AddItem( {982} , {983} , BuildSimpleItem( {984} , {985} , {986} )) 
OverviewCasesPage.bas[1145] ' casestatus.AddItem( {987} , {988} , BuildSimpleItem( {989} , {990} , {991} )) 
OverviewCasesPage.bas[1146] ' casestatus.AddItem( {992} , {993} , BuildSimpleItem( {994} , {995} , {996} )) 
OverviewCasesPage.bas[1147]  
OverviewCasesPage.bas[1148]  casestatus.AddItem( {997} , {998} , BuildSimpleItem( {999} , {1000} , {1001} )) 
OverviewCasesPage.bas[1149]  casestatus.AddItem( {1002} , {1003} , BuildSimpleItem( {1004} , {1005} , {1006} )) 
OverviewCasesPage.bas[1150]  casestatus.AddItem( {1007} , {1008} , BuildSimpleItem( {1009} , {1010} , {1011} )) 
OverviewCasesPage.bas[1151]  casestatus.AddItem( {1012} , {1013} , BuildSimpleItem( {1014} , {1015} , {1016} )) 
OverviewCasesPage.bas[1152]  casestatus.AddItem( {1017} , {1018} , BuildSimpleItem( {1019} , {1020} , {1021} )) 
OverviewCasesPage.bas[1153]  casestatus.AddItem( {1022} , {1023} , BuildSimpleItem( {1024} , {1025} , {1026} )) 
OverviewCasesPage.bas[1154]  casestatus.AddItem( {1027} , {1028} , BuildSimpleItem( {1029} , {1030} , {1031} )) 
OverviewCasesPage.bas[1155]  casestatus.AddItem( {1032} , {1033} , BuildSimpleItem( {1034} , {1035} , {1036} )) 
OverviewCasesPage.bas[1156]  casestatus.AddItem( {1037} , {1038} , BuildSimpleItem( {1039} , {1040} , {1041} )) 
OverviewCasesPage.bas[1157]  casestatus.AddItem( {1042} , {1043} , BuildSimpleItem( {1044} , {1045} , {1046} )) 
OverviewCasesPage.bas[1158]  
OverviewCasesPage.bas[1159]  inp.Content.CellR(1,1).AddComponent(casestatus) 
OverviewCasesPage.bas[1160]  
OverviewCasesPage.bas[1161]  Dim caseversion As ABMInput 
OverviewCasesPage.bas[1162]  caseversion.Initialize(page, {1047} , ABM.INPUT_TEXT, {1048} , False, {1049} ) 
OverviewCasesPage.bas[1163]  inp.Content.CellR(0,2).AddComponent(caseversion) 
OverviewCasesPage.bas[1164]  
OverviewCasesPage.bas[1165]  ' keep two rows for the attachments and notes 
OverviewCasesPage.bas[1166]  
OverviewCasesPage.bas[1167]  inp.Footer.AddRowsM(1,True,0,0, {1050} ).AddCells12(1, {1051} ) 
OverviewCasesPage.bas[1168]  inp.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[1169]  
OverviewCasesPage.bas[1170]  ' create the buttons for the footer, create in opposite order as aligned right in a footer 
OverviewCasesPage.bas[1171]  Dim CancelBtn As ABMButton 
OverviewCasesPage.bas[1172]  CancelBtn.InitializeFlat(page, {1052} , {1053} , {1054} , {1055} , {1056} ) 
OverviewCasesPage.bas[1173]  inp.Footer.Cell(1,1).AddComponent(CancelBtn) 
OverviewCasesPage.bas[1174]  
OverviewCasesPage.bas[1175]  Dim SaveBtn As ABMButton 
OverviewCasesPage.bas[1176]  SaveBtn.InitializeFlat(page, {1057} , {1058} , {1059} , {1060} , {1061} ) 
OverviewCasesPage.bas[1177]  inp.Footer.Cell(1,1).AddComponent(SaveBtn) 
OverviewCasesPage.bas[1178]  
OverviewCasesPage.bas[1179]  Dim AttBtn As ABMButton 
OverviewCasesPage.bas[1180]  AttBtn.InitializeFlat(page, {1062} , {1063} , {1064} , {1065} , {1066} ) 
OverviewCasesPage.bas[1181]  inp.Footer.Cell(1,1).AddComponent(AttBtn) 
OverviewCasesPage.bas[1182]  
OverviewCasesPage.bas[1183]  Dim NoteBtn As ABMButton 
OverviewCasesPage.bas[1184]  NoteBtn.InitializeFlat(page, {1067} , {1068} , {1069} , {1070} , {1071} ) 
OverviewCasesPage.bas[1185]  inp.Footer.Cell(1,1).AddComponent(NoteBtn) 
OverviewCasesPage.bas[1186]  
OverviewCasesPage.bas[1187]  Return inp 
OverviewCasesPage.bas[1188] End Sub 
OverviewCasesPage.bas[1189]  
OverviewCasesPage.bas[1190] Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
OverviewCasesPage.bas[1191]  Dim lbl As ABMLabel 
OverviewCasesPage.bas[1192]  If icon <> {1072} Then 
OverviewCasesPage.bas[1193]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {1073} ) 
OverviewCasesPage.bas[1194]  Else 
OverviewCasesPage.bas[1195]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {1074} ) 
OverviewCasesPage.bas[1196]  End If 
OverviewCasesPage.bas[1197]  lbl.VerticalAlign = True 
OverviewCasesPage.bas[1198]  lbl.IconName = icon 
OverviewCasesPage.bas[1199]  Return lbl 
OverviewCasesPage.bas[1200] End Sub 
OverviewCasesPage.bas[1201]  
OverviewCasesPage.bas[1202] Sub NoteBtn_Clicked(Target As String) 
OverviewCasesPage.bas[1203]  ActiveCaseNoteID = 0 
OverviewCasesPage.bas[1204]  
OverviewCasesPage.bas[1205]  Dim inpNote As ABMModalSheet = page.ModalSheet( {1075} ) 
OverviewCasesPage.bas[1206]  Dim Notedescription As ABMInput = inpNote.Content.Component( {1076} ) 
OverviewCasesPage.bas[1207]  Notedescription.Text = {1077} 
OverviewCasesPage.bas[1208]  
OverviewCasesPage.bas[1209]  page.ShowModalSheet( {1078} ) 
OverviewCasesPage.bas[1210] End Sub 
OverviewCasesPage.bas[1211]  
OverviewCasesPage.bas[1212] Sub SaveBtn_Clicked(Target As String) 
OverviewCasesPage.bas[1213]  If CheckInput = False Then 
OverviewCasesPage.bas[1214]  Dim msgbox As ABMModalSheet = page.ModalSheet( {1079} ) 
OverviewCasesPage.bas[1215]  Dim lbl As ABMLabel = msgbox.Content.Component( {1080} ) 
OverviewCasesPage.bas[1216]  lbl.Text = {1081} 
OverviewCasesPage.bas[1217]  page.ShowModalSheet( {1082} ) 
OverviewCasesPage.bas[1218]  Return 
OverviewCasesPage.bas[1219]  End If 
OverviewCasesPage.bas[1220]  
OverviewCasesPage.bas[1221]  Dim inp As ABMModalSheet = page.ModalSheet( {1083} ) 
OverviewCasesPage.bas[1222]  
OverviewCasesPage.bas[1223]  Dim CurrentFields, WhereFields As Map 
OverviewCasesPage.bas[1224]  CurrentFields.Initialize 
OverviewCasesPage.bas[1225]  WhereFields.Initialize 
OverviewCasesPage.bas[1226]  
OverviewCasesPage.bas[1227]  Dim casetype As ABMCombo = inp.Content.Component( {1084} ) 
OverviewCasesPage.bas[1228]  Dim casesummary As ABMInput = inp.Content.Component( {1085} ) 
OverviewCasesPage.bas[1229]  Dim casedescription As ABMInput = inp.Content.Component( {1086} ) 
OverviewCasesPage.bas[1230]  Dim casestatus As ABMCombo = inp.Content.Component( {1087} ) 
OverviewCasesPage.bas[1231]  Dim caseversion As ABMInput = inp.Content.Component( {1088} ) 
OverviewCasesPage.bas[1232]  'Dim casepoints As ABMCombo = inp.Content.Component( {1089} ) 
OverviewCasesPage.bas[1233]  
OverviewCasesPage.bas[1234]  CurrentFields.Put( {1090} , ABMShared.Mid(casetype.GetActiveItemId(), 8, 1)) 
OverviewCasesPage.bas[1235]  CurrentFields.Put( {1091} , DBM.SetQuotes(casesummary.Text)) 
OverviewCasesPage.bas[1236]  CurrentFields.Put( {1092} , DBM.SetQuotes(casedescription.Text)) 
OverviewCasesPage.bas[1237]  CurrentFields.Put( {1093} , ABMShared.Mid(casestatus.GetActiveItemId(), 5, 1)) 
OverviewCasesPage.bas[1238]  CurrentFields.Put( {1094} , page.ws.Session.GetAttribute2( {1095} , {1096} )) 
OverviewCasesPage.bas[1239]  DateTime.DateFormat = {1097} 
OverviewCasesPage.bas[1240]  CurrentFields.Put( {1098} , DBM.SetQuotes(DateTime.Date(DateTime.Now))) 
OverviewCasesPage.bas[1241]  CurrentFields.Put( {1099} , DBM.SetQuotes(caseversion.text)) 
OverviewCasesPage.bas[1242]  CurrentFields.Put( {1100} , DBM.SetQuotes(ActiveCaseNumber)) 
OverviewCasesPage.bas[1243]  'Dim MyRank As Int = ABMShared.Mid(casepoints.GetActiveItemId(), 5, 1) 
OverviewCasesPage.bas[1244]  
OverviewCasesPage.bas[1245] ' ' admins and donators get double the point value 
OverviewCasesPage.bas[1246] ' If UserType <> {1101} Then 
OverviewCasesPage.bas[1247] ' MyRank = MyRank * 10 
OverviewCasesPage.bas[1248] ' Else 
OverviewCasesPage.bas[1249] ' MyRank = MyRank * 5 
OverviewCasesPage.bas[1250] ' End If 
OverviewCasesPage.bas[1251]  
OverviewCasesPage.bas[1252]  ' build the where values 
OverviewCasesPage.bas[1253]  WhereFields.Put( {1102} , ActiveCaseId) 
OverviewCasesPage.bas[1254]  
OverviewCasesPage.bas[1255]  
OverviewCasesPage.bas[1256]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[1257]  
OverviewCasesPage.bas[1258]  Dim SQL_Select As String = {1103} & ActiveCaseId 
OverviewCasesPage.bas[1259]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {1104} , CurrentFields) 
OverviewCasesPage.bas[1260]  
OverviewCasesPage.bas[1261]  CurrentFields.Remove( {1105} ) 
OverviewCasesPage.bas[1262]  CurrentFields.Remove( {1106} ) 
OverviewCasesPage.bas[1263]  
OverviewCasesPage.bas[1264]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {1107} , CurrentFields, WhereFields) 
OverviewCasesPage.bas[1265]  ActiveCaseId = DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
OverviewCasesPage.bas[1266]  
OverviewCasesPage.bas[1267] ' ' clear the current one with so many points 
OverviewCasesPage.bas[1268] ' If MyRank > 0 Then 
OverviewCasesPage.bas[1269] ' DBM.SQLDelete(SQL, {1108} & MyRank & {1109} & UserID) 
OverviewCasesPage.bas[1270] ' End If 
OverviewCasesPage.bas[1271] ' ' save myPoints 
OverviewCasesPage.bas[1272] ' Dim CurrentFields, WhereFields As Map 
OverviewCasesPage.bas[1273] ' CurrentFields.Initialize 
OverviewCasesPage.bas[1274] ' WhereFields.Initialize 
OverviewCasesPage.bas[1275] ' CurrentFields.Clear 
OverviewCasesPage.bas[1276] ' WhereFields.Clear 
OverviewCasesPage.bas[1277] ' 
OverviewCasesPage.bas[1278] ' CurrentFields.Put( {1110} , ActiveCaseId) 
OverviewCasesPage.bas[1279] ' CurrentFields.Put( {1111} , UserID) 
OverviewCasesPage.bas[1280] ' CurrentFields.Put( {1112} , MyRank) 
OverviewCasesPage.bas[1281] ' 
OverviewCasesPage.bas[1282] ' WhereFields.Put( {1113} , ActiveCaseId) 
OverviewCasesPage.bas[1283] ' WhereFields.Put( {1114} , UserID) 
OverviewCasesPage.bas[1284] ' 
OverviewCasesPage.bas[1285] ' Dim SQL_Select As String = DBM.BuildSelectQuery( {1115} , CurrentFields, WhereFields, Null) 
OverviewCasesPage.bas[1286] ' Dim SQL_Insert As String = DBM.BuildInsertQuery( {1116} , CurrentFields) 
OverviewCasesPage.bas[1287] ' Dim SQL_Update As String = DBM.BuildUpdateQuery( {1117} , CurrentFields, WhereFields) 
OverviewCasesPage.bas[1288] ' DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
OverviewCasesPage.bas[1289]  
OverviewCasesPage.bas[1290]  ' add/update the new ones 
OverviewCasesPage.bas[1291]  For i = 0 To Attachments.Size - 1 
OverviewCasesPage.bas[1292]  Dim fileName As String = Attachments.GetValueAt(i) 
OverviewCasesPage.bas[1293]  Dim CaseAID As Int = Attachments.GetKeyAt(i) 
OverviewCasesPage.bas[1294]  If RemoveAttachments.ContainsKey(CaseAID) = False Then 
OverviewCasesPage.bas[1295]  Dim CurrentFields, WhereFields As Map 
OverviewCasesPage.bas[1296]  CurrentFields.Initialize 
OverviewCasesPage.bas[1297]  WhereFields.Initialize 
OverviewCasesPage.bas[1298]  CurrentFields.Clear 
OverviewCasesPage.bas[1299]  WhereFields.Clear 
OverviewCasesPage.bas[1300]  
OverviewCasesPage.bas[1301]  CurrentFields.Put( {1118} , ActiveCaseId) 
OverviewCasesPage.bas[1302]  If fileName.ToUpperCase.EndsWith( {1119} ) Then 
OverviewCasesPage.bas[1303]  CurrentFields.Put( {1120} , 0) 
OverviewCasesPage.bas[1304]  Else ' image 
OverviewCasesPage.bas[1305]  CurrentFields.Put( {1121} , 1) 
OverviewCasesPage.bas[1306]  End If 
OverviewCasesPage.bas[1307]  CurrentFields.Put( {1122} , DBM.SetQuotes(fileName)) 
OverviewCasesPage.bas[1308]  
OverviewCasesPage.bas[1309]  ' build the where values 
OverviewCasesPage.bas[1310]  WhereFields.Put( {1123} , CaseAID) 
OverviewCasesPage.bas[1311]  
OverviewCasesPage.bas[1312]  Dim SQL_Select As String = {1124} & CaseAID 
OverviewCasesPage.bas[1313]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {1125} , CurrentFields) 
OverviewCasesPage.bas[1314]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {1126} , CurrentFields, WhereFields) 
OverviewCasesPage.bas[1315]  DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
OverviewCasesPage.bas[1316]  End If 
OverviewCasesPage.bas[1317]  Next 
OverviewCasesPage.bas[1318]  ' remove the ones the x button on the chip was pressed 
OverviewCasesPage.bas[1319]  For Each CaseAID As Int In RemoveAttachments.Keys 
OverviewCasesPage.bas[1320]  DBM.SQLDelete(SQL, {1127} & CaseAID) 
OverviewCasesPage.bas[1321]  Dim fileName As String = Attachments.GetDefault(CaseAID, {1128} ) 
OverviewCasesPage.bas[1322]  If fileName <> {1129} Then 
OverviewCasesPage.bas[1323]  File.Delete(File.DirApp, {1130} & ABMShared.AppName & {1131} & fileName) 
OverviewCasesPage.bas[1324]  End If 
OverviewCasesPage.bas[1325]  Next 
OverviewCasesPage.bas[1326]  
OverviewCasesPage.bas[1327]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[1328]  
OverviewCasesPage.bas[1329]  ' reload my points 
OverviewCasesPage.bas[1330]  'LoadMyPoints 
OverviewCasesPage.bas[1331]  
OverviewCasesPage.bas[1332]  ' reload the table 
OverviewCasesPage.bas[1333]  Dim pagination As ABMPagination = page.Component( {1132} ) 
OverviewCasesPage.bas[1334]  LoadCases(pagination.GetActivePage()) 
OverviewCasesPage.bas[1335]  
OverviewCasesPage.bas[1336]  page.CloseModalSheet( {1133} ) 
OverviewCasesPage.bas[1337] End Sub 
OverviewCasesPage.bas[1338]  
OverviewCasesPage.bas[1339] Sub CheckInput() As Boolean 
OverviewCasesPage.bas[1340]  Dim inp As ABMModalSheet = page.ModalSheet( {1134} ) 
OverviewCasesPage.bas[1341]  
OverviewCasesPage.bas[1342]  Dim casetype As ABMCombo = inp.Content.Component( {1135} ) 
OverviewCasesPage.bas[1343]  Dim casesummary As ABMInput = inp.Content.Component( {1136} ) 
OverviewCasesPage.bas[1344]  Dim casedescription As ABMInput = inp.Content.Component( {1137} ) 
OverviewCasesPage.bas[1345]  If casetype.GetActiveItemId = {1138} Or casesummary.Text = {1139} Or casedescription.Text = {1140} Then 
OverviewCasesPage.bas[1346]  Return False 
OverviewCasesPage.bas[1347]  End If 
OverviewCasesPage.bas[1348]  Return True 
OverviewCasesPage.bas[1349] End Sub 
OverviewCasesPage.bas[1350]  
OverviewCasesPage.bas[1351] Sub CancelBtn_Clicked(Target As String) 
OverviewCasesPage.bas[1352]  page.CloseModalSheet( {1141} ) 
OverviewCasesPage.bas[1353] End Sub 
OverviewCasesPage.bas[1354]  
OverviewCasesPage.bas[1355] Sub AttBtn_Clicked(Target As String) 
OverviewCasesPage.bas[1356]  If CheckInput = False Then 
OverviewCasesPage.bas[1357]  Dim msgbox As ABMModalSheet = page.ModalSheet( {1142} ) 
OverviewCasesPage.bas[1358]  Dim lbl As ABMLabel = msgbox.Content.Component( {1143} ) 
OverviewCasesPage.bas[1359]  lbl.Text = {1144} 
OverviewCasesPage.bas[1360]  page.ShowModalSheet( {1145} ) 
OverviewCasesPage.bas[1361]  Return 
OverviewCasesPage.bas[1362]  End If 
OverviewCasesPage.bas[1363]  page.ShowModalSheet( {1146} ) 
OverviewCasesPage.bas[1364] End Sub 
OverviewCasesPage.bas[1365]  
OverviewCasesPage.bas[1366] #End Region 
OverviewCasesPage.bas[1367]  
OverviewCasesPage.bas[1368] #Region Attachment screen 
OverviewCasesPage.bas[1369] Sub BuildAttachmentSheet() As ABMModalSheet 
OverviewCasesPage.bas[1370]  Dim att As ABMModalSheet 
OverviewCasesPage.bas[1371]  att.Initialize(page, {1147} , False, False, {1148} ) 
OverviewCasesPage.bas[1372]  att.IsDismissible = False 
OverviewCasesPage.bas[1373]  
OverviewCasesPage.bas[1374]  att.Content.AddRowsM(2, True,0,0, {1149} ).AddCells12(1, {1150} ) 
OverviewCasesPage.bas[1375]  att.Content.BuildGrid 
OverviewCasesPage.bas[1376]  
OverviewCasesPage.bas[1377]  ' add paragraph 
OverviewCasesPage.bas[1378]  att.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraphBQ(page, {1151} , {1152} ) ) 
OverviewCasesPage.bas[1379]  
OverviewCasesPage.bas[1380]  ' create the upload 
OverviewCasesPage.bas[1381]  Dim upload1 As ABMUpload 
OverviewCasesPage.bas[1382]  upload1.Initialize(page, {1153} , {1154} , {1155} , {1156} ) 
OverviewCasesPage.bas[1383]  att.Content.CellR(1,1).AddComponent(upload1) 
OverviewCasesPage.bas[1384]  
OverviewCasesPage.bas[1385]  
OverviewCasesPage.bas[1386]  att.Footer.AddRowsM(1,True,0,0, {1157} ).AddCells12(1, {1158} ) 
OverviewCasesPage.bas[1387]  att.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[1388]  
OverviewCasesPage.bas[1389]  ' create the buttons for the footer, create in opposite order as aligned right in a footer 
OverviewCasesPage.bas[1390]  Dim AttCloseBtn As ABMButton 
OverviewCasesPage.bas[1391]  AttCloseBtn.InitializeFlat(page, {1159} , {1160} , {1161} , {1162} , {1163} ) 
OverviewCasesPage.bas[1392]  att.Footer.Cell(1,1).AddComponent(AttCloseBtn) 
OverviewCasesPage.bas[1393]  
OverviewCasesPage.bas[1394]  Return att 
OverviewCasesPage.bas[1395] End Sub 
OverviewCasesPage.bas[1396]  
OverviewCasesPage.bas[1397] Sub Page_FileUploaded(FileName As String, success As Boolean) 
OverviewCasesPage.bas[1398]  myToastId = myToastId + 1 
OverviewCasesPage.bas[1399]  
OverviewCasesPage.bas[1400]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[1401]  
OverviewCasesPage.bas[1402]  Dim attachs As List = DBM.SQLSelect(SQL, {1164} & ActiveCaseNumber & FileName & {1165} , Null) 
OverviewCasesPage.bas[1403]  
OverviewCasesPage.bas[1404]  If attachs.Size = 0 Then 
OverviewCasesPage.bas[1405]  Attachments.put(Attachments.Size-1000, ActiveCaseNumber & FileName) 
OverviewCasesPage.bas[1406]  Else 
OverviewCasesPage.bas[1407]  Dim attach As Map = attachs.Get(0) 
OverviewCasesPage.bas[1408]  Attachments.put(attach.Get( {1166} ), ActiveCaseNumber & FileName) 
OverviewCasesPage.bas[1409]  End If 
OverviewCasesPage.bas[1410]  
OverviewCasesPage.bas[1411]  If success Then 
OverviewCasesPage.bas[1412]  page.ShowToast( {1167} & myToastId, {1168} , {1169} & FileName & {1170} , 5000) 
OverviewCasesPage.bas[1413]  Else 
OverviewCasesPage.bas[1414]  page.ShowToast( {1171} & myToastId, {1172} , {1173} & FileName & {1174} , 5000) 
OverviewCasesPage.bas[1415]  End If 
OverviewCasesPage.bas[1416]  
OverviewCasesPage.bas[1417]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[1418]  page.ws.Flush ' IMPORTANT 
OverviewCasesPage.bas[1419] End Sub 
OverviewCasesPage.bas[1420]  
OverviewCasesPage.bas[1421] Sub AttCloseBtn_Clicked(Target As String) 
OverviewCasesPage.bas[1422]  page.CloseModalSheet( {1175} ) 
OverviewCasesPage.bas[1423]  
OverviewCasesPage.bas[1424]  ' refresh the sheet met the new attachments 
OverviewCasesPage.bas[1425]  Dim inp As ABMModalSheet = page.ModalSheet( {1176} ) 
OverviewCasesPage.bas[1426]  
OverviewCasesPage.bas[1427]  ' removes all components in this cell 
OverviewCasesPage.bas[1428]  inp.Content.Cell(5,1).RemoveAllComponents 
OverviewCasesPage.bas[1429]  
OverviewCasesPage.bas[1430]  Dim CanBeclosed As Boolean = (UserType = {1177} Or page.ws.Session.GetAttribute( {1178} ) = ActiveCaseUserID) ' if the administrator or the creator of the case 
OverviewCasesPage.bas[1431]  
OverviewCasesPage.bas[1432]  Dim attLocation As String = {1179} 
OverviewCasesPage.bas[1433]  
OverviewCasesPage.bas[1434]  Dim attcounter As Int = 0 
OverviewCasesPage.bas[1435]  For i = 0 To Attachments.Size - 1 
OverviewCasesPage.bas[1436]  Dim fileName As String = Attachments.GetValueAt(i) 
OverviewCasesPage.bas[1437]  Dim CaseAID As Int = Attachments.GetKeyAt(i) 
OverviewCasesPage.bas[1438]  If RemoveAttachments.ContainsKey(CaseAID) = False Then 
OverviewCasesPage.bas[1439]  attcounter = attcounter + 1 
OverviewCasesPage.bas[1440]  Dim chip As ABMChip 
OverviewCasesPage.bas[1441]  chip.Initialize(page, attcounter, {1180} & attLocation & fileName & {1181} & ABMShared.mid2(fileName, ActiveCaseNumber.Length+1) & {1182} , CanBeclosed, {1183} ) 
OverviewCasesPage.bas[1442]  chip.Tag = CaseAID 
OverviewCasesPage.bas[1443]  inp.Content.Cell(5,1).AddArrayComponent(chip, {1184} ) 
OverviewCasesPage.bas[1444]  End If 
OverviewCasesPage.bas[1445]  Next 
OverviewCasesPage.bas[1446]  
OverviewCasesPage.bas[1447]  inp.Refresh 
OverviewCasesPage.bas[1448] End Sub 
OverviewCasesPage.bas[1449] #End Region 
OverviewCasesPage.bas[1450]  
OverviewCasesPage.bas[1451] #Region MessageboxYesNo 
OverviewCasesPage.bas[1452] Sub BuildMsgBoxYesNo() As ABMModalSheet 
OverviewCasesPage.bas[1453]  Dim msg As ABMModalSheet 
OverviewCasesPage.bas[1454]  msg.Initialize(page, {1185} , False, False, {1186} ) 
OverviewCasesPage.bas[1455]  msg.IsDismissible = False 
OverviewCasesPage.bas[1456]  
OverviewCasesPage.bas[1457]  msg.Content.AddRowsM(1, True,0,0, {1187} ).AddCells12(1, {1188} ) 
OverviewCasesPage.bas[1458]  msg.Content.BuildGrid 
OverviewCasesPage.bas[1459]  
OverviewCasesPage.bas[1460]  ' add paragraph 
OverviewCasesPage.bas[1461]  msg.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {1189} , {1190} ) ) 
OverviewCasesPage.bas[1462]  
OverviewCasesPage.bas[1463]  msg.Footer.AddRowsM(1,True,0,0, {1191} ).AddCellsOS(1,6,6,6,3,3,3, {1192} ).AddCellsOS(1,0,0,0,3,3,3, {1193} ) 
OverviewCasesPage.bas[1464]  msg.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[1465]  
OverviewCasesPage.bas[1466]  ' create the buttons for the footer 
OverviewCasesPage.bas[1467]  Dim msgyes As ABMButton 
OverviewCasesPage.bas[1468]  msgyes.InitializeFlat(page, {1194} , {1195} , {1196} , {1197} , {1198} ) 
OverviewCasesPage.bas[1469]  msg.Footer.Cell(1,1).AddComponent(msgyes) 
OverviewCasesPage.bas[1470]  
OverviewCasesPage.bas[1471]  Dim msgno As ABMButton 
OverviewCasesPage.bas[1472]  msgno.InitializeFlat(page, {1199} , {1200} , {1201} , {1202} , {1203} ) 
OverviewCasesPage.bas[1473]  msg.Footer.Cell(1,2).AddComponent(msgno) 
OverviewCasesPage.bas[1474]  
OverviewCasesPage.bas[1475]  Return msg 
OverviewCasesPage.bas[1476] End Sub 
OverviewCasesPage.bas[1477]  
OverviewCasesPage.bas[1478] Sub msgyes_Clicked(Target As String) 
OverviewCasesPage.bas[1479]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[1480]  
OverviewCasesPage.bas[1481]  Select Case TypeDelete 
OverviewCasesPage.bas[1482]  Case {1204} 
OverviewCasesPage.bas[1483]  ' delete the note 
OverviewCasesPage.bas[1484]  DBM.SQLDelete(SQL, {1205} & ActiveCaseNoteID) 
OverviewCasesPage.bas[1485]  
OverviewCasesPage.bas[1486]  ' refresh to case input sheet 
OverviewCasesPage.bas[1487]  Dim inp As ABMModalSheet = page.ModalSheet( {1206} ) 
OverviewCasesPage.bas[1488]  
OverviewCasesPage.bas[1489]  ' Show the notes 
OverviewCasesPage.bas[1490]  Dim SQL_Str As String = {1207} & ActiveCaseId & {1208} 
OverviewCasesPage.bas[1491]  Dim notes As List = DBM.SQLSelect(SQL, SQL_Str, Null) 
OverviewCasesPage.bas[1492]  
OverviewCasesPage.bas[1493]  ' removes all note components in this cell 
OverviewCasesPage.bas[1494]  inp.Content.Cell(6,1).RemoveAllComponents 
OverviewCasesPage.bas[1495]  
OverviewCasesPage.bas[1496]  For i = 0 To notes.Size - 1 
OverviewCasesPage.bas[1497]  Dim note As Map = notes.Get(i) 
OverviewCasesPage.bas[1498]  Dim notecont As ABMContainer = BuildNoteContainer(( {1209} & note.Get( {1210} )), note.get( {1211} ), note.Get( {1212} ), note.Get( {1213} ), note.Get( {1214} )) 
OverviewCasesPage.bas[1499]  inp.Content.Cell(6,1).AddComponent(notecont) 
OverviewCasesPage.bas[1500]  Next 
OverviewCasesPage.bas[1501]  
OverviewCasesPage.bas[1502]  inp.Refresh 
OverviewCasesPage.bas[1503]  Case {1215} 
OverviewCasesPage.bas[1504]  ' delete all the notes 
OverviewCasesPage.bas[1505]  DBM.SQLDelete(SQL, {1216} & ActiveCaseId) 
OverviewCasesPage.bas[1506]  
OverviewCasesPage.bas[1507]  ' delete all the attachements 
OverviewCasesPage.bas[1508]  DBM.SQLDelete(SQL, {1217} & ActiveCaseId) 
OverviewCasesPage.bas[1509]  
OverviewCasesPage.bas[1510]  ' delete all the points 
OverviewCasesPage.bas[1511]  ' DBM.SQLDelete(SQL, {1218} & ActiveCaseId) 
OverviewCasesPage.bas[1512]  
OverviewCasesPage.bas[1513]  ' build the where values 
OverviewCasesPage.bas[1514]  DBM.SQLDelete(SQL, {1219} & ActiveCaseId) 
OverviewCasesPage.bas[1515]  
OverviewCasesPage.bas[1516]  ' reload the table 
OverviewCasesPage.bas[1517]  Dim pagination As ABMPagination = page.Component( {1220} ) 
OverviewCasesPage.bas[1518]  LoadCases(pagination.GetActivePage()) 
OverviewCasesPage.bas[1519]  End Select 
OverviewCasesPage.bas[1520]  
OverviewCasesPage.bas[1521]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[1522]  
OverviewCasesPage.bas[1523]  page.CloseModalSheet( {1221} ) 
OverviewCasesPage.bas[1524] End Sub 
OverviewCasesPage.bas[1525]  
OverviewCasesPage.bas[1526] Sub msgno_Clicked(Target As String) 
OverviewCasesPage.bas[1527]  page.CloseModalSheet( {1222} ) 
OverviewCasesPage.bas[1528] End Sub 
OverviewCasesPage.bas[1529] #End Region 
OverviewCasesPage.bas[1530]  
OverviewCasesPage.bas[1531] #Region Messagebox 
OverviewCasesPage.bas[1532] Sub BuildMsgBox() As ABMModalSheet 
OverviewCasesPage.bas[1533]  Dim msgbox As ABMModalSheet 
OverviewCasesPage.bas[1534]  msgbox.Initialize(page, {1223} , False, False, {1224} ) 
OverviewCasesPage.bas[1535]  msgbox.IsDismissible = False 
OverviewCasesPage.bas[1536]  
OverviewCasesPage.bas[1537]  msgbox.Content.AddRowsM(1, True,0,0, {1225} ).AddCells12(1, {1226} ) 
OverviewCasesPage.bas[1538]  msgbox.Content.BuildGrid 
OverviewCasesPage.bas[1539]  
OverviewCasesPage.bas[1540]  ' add paragraph 
OverviewCasesPage.bas[1541]  msgbox.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {1227} , {1228} ) ) 
OverviewCasesPage.bas[1542]  
OverviewCasesPage.bas[1543]  msgbox.Footer.AddRowsM(1,True,0,0, {1229} ).AddCellsOS(1,6,6,6,3,3,3, {1230} ).AddCellsOS(1,0,0,0,3,3,3, {1231} ) 
OverviewCasesPage.bas[1544]  msgbox.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[1545]  
OverviewCasesPage.bas[1546]  ' create the buttons for the footer 
OverviewCasesPage.bas[1547]  Dim msgok As ABMButton 
OverviewCasesPage.bas[1548]  msgok.InitializeFlat(page, {1232} , {1233} , {1234} , {1235} , {1236} ) 
OverviewCasesPage.bas[1549]  msgbox.Footer.Cell(1,1).AddComponent(msgok) 
OverviewCasesPage.bas[1550]  
OverviewCasesPage.bas[1551]  Return msgbox 
OverviewCasesPage.bas[1552] End Sub 
OverviewCasesPage.bas[1553]  
OverviewCasesPage.bas[1554] Sub msgok_Clicked(Target As String) 
OverviewCasesPage.bas[1555]  page.CloseModalSheet( {1237} ) 
OverviewCasesPage.bas[1556] End Sub 
OverviewCasesPage.bas[1557]  
OverviewCasesPage.bas[1558] #End Region 
OverviewCasesPage.bas[1559]  
OverviewCasesPage.bas[1560] #region Notes 
OverviewCasesPage.bas[1561] Sub BuildNoteContainer(CaseNoteID As String, Description As String, Creator As String, CreationDate As String, CreatorID As Int) As ABMContainer 
OverviewCasesPage.bas[1562]  
OverviewCasesPage.bas[1563]  Dim caseNote As ABMContainer 
OverviewCasesPage.bas[1564]  caseNote.Initialize(page, CaseNoteID, {1238} ) 
OverviewCasesPage.bas[1565]  
OverviewCasesPage.bas[1566]  caseNote.AddRowsM(1, True, 10,0, {1239} ).AddCellsOS(2,0,0,0,6,6,6, {1240} ) 
OverviewCasesPage.bas[1567]  caseNote.AddRowsM(2, True, 0,0, {1241} ).AddCells12(1, {1242} ) 
OverviewCasesPage.bas[1568]  caseNote.AddRows(2, True, {1243} ).AddCells12(1, {1244} ) 
OverviewCasesPage.bas[1569]  
OverviewCasesPage.bas[1570]  caseNote.BuildGrid 
OverviewCasesPage.bas[1571]  
OverviewCasesPage.bas[1572]  Dim lblCreationDate As ABMLabel 
OverviewCasesPage.bas[1573]  lblCreationDate.Initialize(page, {1245} , CreationDate, ABM.SIZE_PARAGRAPH, False, {1246} ) 
OverviewCasesPage.bas[1574]  caseNote.CellR(0,1).AddComponent(lblCreationDate) 
OverviewCasesPage.bas[1575]  
OverviewCasesPage.bas[1576]  Dim lblCreator As ABMLabel 
OverviewCasesPage.bas[1577]  lblCreator.Initialize(page, {1247} , Creator, ABM.SIZE_PARAGRAPH, False, {1248} ) 
OverviewCasesPage.bas[1578]  caseNote.CellR(0,2).AddComponent(lblCreator) 
OverviewCasesPage.bas[1579]  
OverviewCasesPage.bas[1580]  Dim casenotedescription As ABMInput 
OverviewCasesPage.bas[1581]  casenotedescription.Initialize(page, {1249} , ABM.INPUT_TEXT, {1250} , True, {1251} ) 
OverviewCasesPage.bas[1582]  casenotedescription.Enabled = False 
OverviewCasesPage.bas[1583]  casenotedescription.Text = Description 
OverviewCasesPage.bas[1584]  caseNote.CellR(1,1).AddComponent(casenotedescription) 
OverviewCasesPage.bas[1585]  
OverviewCasesPage.bas[1586]  If UserID = CreatorID Or UserType = {1252} Then ' admin or creator of then note 
OverviewCasesPage.bas[1587]  Dim btnNoteEdit As ABMButton 
OverviewCasesPage.bas[1588]  btnNoteEdit.InitializeFloating(page, CaseNoteID, {1253} , {1254} ) 
OverviewCasesPage.bas[1589]  caseNote.Cell(3,1).AddArrayComponent(btnNoteEdit, {1255} ) 
OverviewCasesPage.bas[1590]  End If 
OverviewCasesPage.bas[1591]  
OverviewCasesPage.bas[1592]  If UserType = {1256} Then 
OverviewCasesPage.bas[1593]  Dim btnNoteDelete As ABMButton 
OverviewCasesPage.bas[1594]  btnNoteDelete.InitializeFloating(page, CaseNoteID, {1257} , {1258} ) 
OverviewCasesPage.bas[1595]  caseNote.Cell(3,1).AddArrayComponent(btnNoteDelete, {1259} ) 
OverviewCasesPage.bas[1596]  End If 
OverviewCasesPage.bas[1597]  
OverviewCasesPage.bas[1598]  Return caseNote 
OverviewCasesPage.bas[1599] End Sub 
OverviewCasesPage.bas[1600]  
OverviewCasesPage.bas[1601] Sub btnNoteEdit_Clicked(Target As String) 
OverviewCasesPage.bas[1602]  Dim inp As ABMModalSheet = page.ModalSheet( {1260} ) 
OverviewCasesPage.bas[1603]  
OverviewCasesPage.bas[1604]  'as this is an array element we have to find out from which one. 
OverviewCasesPage.bas[1605]  Target = ABMShared.replaceAll(Target, {1261} , {1262} ) ' watch case! 
OverviewCasesPage.bas[1606]  ActiveCaseNoteID = ABMShared.Mid2(Target, {1263} .Length + 1) 
OverviewCasesPage.bas[1607]  
OverviewCasesPage.bas[1608]  Dim note As ABMContainer = inp.Content.Component( {1264} & ActiveCaseNoteID) 
OverviewCasesPage.bas[1609]  Dim casenotedescription As ABMInput = note.Component( {1265} ) 
OverviewCasesPage.bas[1610]  
OverviewCasesPage.bas[1611]  Dim inpNote As ABMModalSheet = page.ModalSheet( {1266} ) 
OverviewCasesPage.bas[1612]  Dim Notedescription As ABMInput = inpNote.Content.Component( {1267} ) 
OverviewCasesPage.bas[1613]  Notedescription.Text = casenotedescription.Text 
OverviewCasesPage.bas[1614]  
OverviewCasesPage.bas[1615]  page.ShowModalSheet( {1268} ) 
OverviewCasesPage.bas[1616] End Sub 
OverviewCasesPage.bas[1617]  
OverviewCasesPage.bas[1618] Sub btnNoteDelete_Clicked(Target As String) 
OverviewCasesPage.bas[1619]  
OverviewCasesPage.bas[1620]  TypeDelete = {1269} 
OverviewCasesPage.bas[1621]  
OverviewCasesPage.bas[1622]  Dim inp As ABMModalSheet = page.ModalSheet( {1270} ) 
OverviewCasesPage.bas[1623]  
OverviewCasesPage.bas[1624]  'as this is an array element we have to find out from which one 
OverviewCasesPage.bas[1625]  Target = ABMShared.replaceAll(Target, {1271} , {1272} ) ' watch case 
OverviewCasesPage.bas[1626]  ActiveCaseNoteID = ABMShared.Mid2(Target, {1273} .Length + 1) 
OverviewCasesPage.bas[1627]  
OverviewCasesPage.bas[1628]  Dim note As ABMContainer = inp.Content.Component( {1274} & ActiveCaseNoteID) 
OverviewCasesPage.bas[1629]  Dim casenotedescription As ABMInput = note.Component( {1275} ) 
OverviewCasesPage.bas[1630]  
OverviewCasesPage.bas[1631]  Dim msg As ABMModalSheet = page.ModalSheet( {1276} ) 
OverviewCasesPage.bas[1632]  
OverviewCasesPage.bas[1633]  Dim lbl As ABMLabel = msg.Content.Component( {1277} ) 
OverviewCasesPage.bas[1634]  lbl.Text = {1278} & casenotedescription.Text & {1279} 
OverviewCasesPage.bas[1635]  page.ShowModalSheet( {1280} ) 
OverviewCasesPage.bas[1636]  
OverviewCasesPage.bas[1637]  Log(Target) 
OverviewCasesPage.bas[1638] End Sub 
OverviewCasesPage.bas[1639]  
OverviewCasesPage.bas[1640] Sub BuildNoteInputSheet() As ABMModalSheet 
OverviewCasesPage.bas[1641]  Dim inpNote As ABMModalSheet 
OverviewCasesPage.bas[1642]  inpNote.Initialize(page, {1281} , False, False, {1282} ) 
OverviewCasesPage.bas[1643]  inpNote.IsDismissible = False 
OverviewCasesPage.bas[1644]  
OverviewCasesPage.bas[1645]  inpNote.Content.AddRowsM(2, True,0,0, {1283} ).AddCells12(1, {1284} ) 
OverviewCasesPage.bas[1646]  inpNote.Content.BuildGrid 
OverviewCasesPage.bas[1647]  
OverviewCasesPage.bas[1648]  ' add paragraph 
OverviewCasesPage.bas[1649]  inpNote.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraphBQWithZDepth(page, {1285} , {1286} ) ) 
OverviewCasesPage.bas[1650]  
OverviewCasesPage.bas[1651]  Dim Notedescription As ABMInput 
OverviewCasesPage.bas[1652]  Notedescription.Initialize(page, {1287} , ABM.INPUT_TEXT, {1288} , True, {1289} ) 
OverviewCasesPage.bas[1653]  inpNote.Content.CellR(1,1).AddComponent(Notedescription) 
OverviewCasesPage.bas[1654]  
OverviewCasesPage.bas[1655]  inpNote.Footer.AddRowsM(1,True,0,0, {1290} ).AddCells12(1, {1291} ) 
OverviewCasesPage.bas[1656]  inpNote.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OverviewCasesPage.bas[1657]  
OverviewCasesPage.bas[1658]  ' create the buttons for the footer, create in opposite order as aligned right in a footer 
OverviewCasesPage.bas[1659]  Dim btnNoteCancel As ABMButton 
OverviewCasesPage.bas[1660]  btnNoteCancel.InitializeFlat(page, {1292} , {1293} , {1294} , {1295} , {1296} ) 
OverviewCasesPage.bas[1661]  inpNote.Footer.Cell(1,1).AddComponent(btnNoteCancel) 
OverviewCasesPage.bas[1662]  
OverviewCasesPage.bas[1663]  Dim BtnNoteSave As ABMButton 
OverviewCasesPage.bas[1664]  BtnNoteSave.InitializeFlat(page, {1297} , {1298} , {1299} , {1300} , {1301} ) 
OverviewCasesPage.bas[1665]  inpNote.Footer.Cell(1,1).AddComponent(BtnNoteSave) 
OverviewCasesPage.bas[1666]  
OverviewCasesPage.bas[1667]  Return inpNote 
OverviewCasesPage.bas[1668] End Sub 
OverviewCasesPage.bas[1669]  
OverviewCasesPage.bas[1670] Sub btnNoteCancel_Clicked(Target As String) 
OverviewCasesPage.bas[1671]  page.CloseModalSheet( {1302} ) 
OverviewCasesPage.bas[1672] End Sub 
OverviewCasesPage.bas[1673]  
OverviewCasesPage.bas[1674] Sub btnNoteSave_Clicked(Target As String) 
OverviewCasesPage.bas[1675]  Dim inpNote As ABMModalSheet = page.ModalSheet( {1303} ) 
OverviewCasesPage.bas[1676]  
OverviewCasesPage.bas[1677]  Dim Notedescription As ABMInput = inpNote.Content.Component( {1304} ) 
OverviewCasesPage.bas[1678]  
OverviewCasesPage.bas[1679]  Dim CurrentFields, WhereFields As Map 
OverviewCasesPage.bas[1680]  CurrentFields.Initialize 
OverviewCasesPage.bas[1681]  WhereFields.Initialize 
OverviewCasesPage.bas[1682]  
OverviewCasesPage.bas[1683]  CurrentFields.Put( {1305} , ActiveCaseId) 
OverviewCasesPage.bas[1684]  CurrentFields.Put( {1306} , UserID) 
OverviewCasesPage.bas[1685]  CurrentFields.Put( {1307} , DBM.SetQuotes(Notedescription.Text)) 
OverviewCasesPage.bas[1686]  DateTime.DateFormat = {1308} 
OverviewCasesPage.bas[1687]  CurrentFields.Put( {1309} , DBM.SetQuotes(DateTime.Date(DateTime.Now))) 
OverviewCasesPage.bas[1688]  
OverviewCasesPage.bas[1689]  ' build the where values 
OverviewCasesPage.bas[1690]  WhereFields.Put( {1310} , ActiveCaseNoteID) 
OverviewCasesPage.bas[1691]  
OverviewCasesPage.bas[1692]  
OverviewCasesPage.bas[1693]  Dim SQL As SQL = DBM.GetSQL 
OverviewCasesPage.bas[1694]  
OverviewCasesPage.bas[1695]  Dim SQL_Select As String = {1311} & ActiveCaseNoteID 
OverviewCasesPage.bas[1696]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {1312} , CurrentFields) 
OverviewCasesPage.bas[1697]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {1313} , CurrentFields, WhereFields) 
OverviewCasesPage.bas[1698]  ActiveCaseNoteID = DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
OverviewCasesPage.bas[1699]  
OverviewCasesPage.bas[1700]  page.CloseModalSheet( {1314} ) 
OverviewCasesPage.bas[1701]  
OverviewCasesPage.bas[1702]  ' reset everyones read status for this case 
OverviewCasesPage.bas[1703]  DBM.SQLDelete(SQL, {1315} & ActiveCaseId) 
OverviewCasesPage.bas[1704]  
OverviewCasesPage.bas[1705]  ' refresh to case input sheet 
OverviewCasesPage.bas[1706]  Dim inp As ABMModalSheet = page.ModalSheet( {1316} ) 
OverviewCasesPage.bas[1707]  ' Show the notes 
OverviewCasesPage.bas[1708]  Dim vars As List 
OverviewCasesPage.bas[1709]  vars.initialize 
OverviewCasesPage.bas[1710]  vars.Add(ActiveCaseId) 
OverviewCasesPage.bas[1711]  Dim SQL_str As String = {1317} 
OverviewCasesPage.bas[1712]  Dim notes As List = DBM.SQLSelect(SQL, SQL_str, vars) 
OverviewCasesPage.bas[1713]  
OverviewCasesPage.bas[1714]  ' removes all note components in this cell 
OverviewCasesPage.bas[1715]  inp.Content.Cell(6,1).RemoveAllComponents 
OverviewCasesPage.bas[1716]  
OverviewCasesPage.bas[1717]  For i = 0 To notes.Size - 1 
OverviewCasesPage.bas[1718]  Dim note As Map = notes.Get(i) 
OverviewCasesPage.bas[1719]  Dim notecont As ABMContainer = BuildNoteContainer(( {1318} & note.Get( {1319} )), note.get( {1320} ), note.Get( {1321} ), note.Get( {1322} ), note.Get( {1323} )) 
OverviewCasesPage.bas[1720]  inp.Content.Cell(6,1).AddComponent(notecont) 
OverviewCasesPage.bas[1721]  Next 
OverviewCasesPage.bas[1722]  
OverviewCasesPage.bas[1723]  inp.Refresh 
OverviewCasesPage.bas[1724]  
OverviewCasesPage.bas[1725]  DBM.CloseSQL(SQL) 
OverviewCasesPage.bas[1726] End Sub 
OverviewCasesPage.bas[1727]  
OverviewCasesPage.bas[1728] #End Region 
OverviewCasesPage.bas[1729]  
OverviewCasesPage.bas[1730]  
Analysing: UsersPage.bas
UsersPage.bas[0] ﻿Type=Class 
UsersPage.bas[0] Version=4.7 
UsersPage.bas[0] ModulesStructureVersion=1 
UsersPage.bas[0] B4J=true 
UsersPage.bas[0] @EndOfDesignText@ 
UsersPage.bas[1] 'Class module 
UsersPage.bas[2] Sub Class_Globals 
UsersPage.bas[3]  Private ws As WebSocket 'ignore 
UsersPage.bas[4]  ' will hold our page information 
UsersPage.bas[5]  Public page As ABMPage 
UsersPage.bas[6]  ' page theme 
UsersPage.bas[7]  Private theme As ABMTheme 
UsersPage.bas[8]  ' to access the constants 
UsersPage.bas[9]  Private ABM As ABMaterial 'ignore 
UsersPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
UsersPage.bas[11]  Public Name As String = {0} 
UsersPage.bas[12]  
UsersPage.bas[13]  ' your own variables 
UsersPage.bas[14]  Dim ActiveUserId As Int 
UsersPage.bas[15]  Dim Filter As String = {1} 
UsersPage.bas[16]  Dim LastSort As String 
UsersPage.bas[17]  Private ABMPageId As String = {2} 
UsersPage.bas[18] End Sub 
UsersPage.bas[19]  
UsersPage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
UsersPage.bas[21] Public Sub Initialize 
UsersPage.bas[22]  ' build the local structure IMPORTANT! 
UsersPage.bas[23]  ' start with the base theme defined in ABMShared 
UsersPage.bas[24]  theme.Initialize( {3} ) 
UsersPage.bas[25]  theme.AddABMTheme(ABMShared.MyTheme) 
UsersPage.bas[26]  
UsersPage.bas[27]  ' add additional themes specific for this page 
UsersPage.bas[28]  theme.AddTableTheme( {4} ) 
UsersPage.bas[29]  theme.Table( {5} ).ZDepth = ABM.ZDEPTH_1 
UsersPage.bas[30]  
UsersPage.bas[31]  theme.Table( {6} ).AddCellTheme( {7} ) 
UsersPage.bas[32]  theme.Table( {8} ).Cell( {9} ).BackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[33]  theme.Table( {10} ).Cell( {11} ).ForeColor = ABM.COLOR_WHITE 
UsersPage.bas[34]  
UsersPage.bas[35]  theme.Table( {12} ).AddCellTheme( {13} ) 
UsersPage.bas[36]  theme.Table( {14} ).Cell( {15} ).BackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[37]  theme.Table( {16} ).Cell( {17} ).ForeColor = ABM.COLOR_WHITE 
UsersPage.bas[38]  theme.Table( {18} ).Cell( {19} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
UsersPage.bas[39]  
UsersPage.bas[40]  theme.Table( {20} ).AddCellTheme( {21} ) 
UsersPage.bas[41]  theme.Table( {22} ).Cell( {23} ).BackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[42]  theme.Table( {24} ).Cell( {25} ).ForeColor = ABM.COLOR_WHITE 
UsersPage.bas[43]  theme.Table( {26} ).Cell( {27} ).Align = ABM.TABLECELL_HORIZONTALALIGN_CENTER 
UsersPage.bas[44]  
UsersPage.bas[45]  theme.Table( {28} ).AddCellTheme( {29} ) 
UsersPage.bas[46]  theme.Table( {30} ).Cell( {31} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[47]  theme.Table( {32} ).Cell( {33} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
UsersPage.bas[48]  
UsersPage.bas[49]  theme.Table( {34} ).AddCellTheme( {35} ) 
UsersPage.bas[50]  theme.Table( {36} ).Cell( {37} ).BackColor = ABM.COLOR_GREEN 
UsersPage.bas[51]  theme.Table( {38} ).Cell( {39} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
UsersPage.bas[52]  theme.Table( {40} ).Cell( {41} ).ActiveBackColor = ABM.COLOR_GREEN 
UsersPage.bas[53]  theme.Table( {42} ).Cell( {43} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
UsersPage.bas[54]  'theme.Table( {44} ).Cell( {45} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
UsersPage.bas[55]  
UsersPage.bas[56]  theme.Table( {46} ).AddCellTheme( {47} ) 
UsersPage.bas[57]  theme.Table( {48} ).Cell( {49} ).BackColor = ABM.COLOR_RED 
UsersPage.bas[58]  theme.Table( {50} ).Cell( {51} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
UsersPage.bas[59]  theme.Table( {52} ).Cell( {53} ).ActiveBackColor = ABM.COLOR_RED 
UsersPage.bas[60]  theme.Table( {54} ).Cell( {55} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
UsersPage.bas[61]  'theme.Table( {56} ).Cell( {57} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
UsersPage.bas[62]  
UsersPage.bas[63]  theme.Table( {58} ).AddCellTheme( {59} ) 
UsersPage.bas[64]  theme.Table( {60} ).Cell( {61} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[65]  theme.Table( {62} ).Cell( {63} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
UsersPage.bas[66]  theme.Table( {64} ).Cell( {65} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
UsersPage.bas[67]  
UsersPage.bas[68]  theme.Table( {66} ).AddCellTheme( {67} ) 
UsersPage.bas[69]  theme.Table( {68} ).Cell( {69} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
UsersPage.bas[70]  theme.Table( {70} ).Cell( {71} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
UsersPage.bas[71]  theme.Table( {72} ).Cell( {73} ).Align = ABM.TABLECELL_HORIZONTALALIGN_CENTER 
UsersPage.bas[72]  
UsersPage.bas[73]  ' add additional themes specific for this page 
UsersPage.bas[74]  theme.AddButtonTheme( {74} ) 
UsersPage.bas[75]  theme.Button( {75} ).BackColor = ABM.COLOR_LIGHTBLUE 
UsersPage.bas[76]  
UsersPage.bas[77]  ' modal sheet 
UsersPage.bas[78]  theme.AddContainerTheme( {76} ) 
UsersPage.bas[79]  theme.Container( {77} ).BackColor = ABM.COLOR_WHITE 
UsersPage.bas[80]  
UsersPage.bas[81]  ' modal sheet 
UsersPage.bas[82]  theme.AddContainerTheme( {78} ) 
UsersPage.bas[83]  theme.Container( {79} ).BackColor = ABM.COLOR_LIGHTBLUE 
UsersPage.bas[84]  
UsersPage.bas[85]  ' initialize this page using our theme 
UsersPage.bas[86]  page.InitializeWithTheme(Name, {80} & ABMShared.AppName & {81} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
UsersPage.bas[87]  page.ShowLoader=True 
UsersPage.bas[88]  page.PageTitle = {82} 
UsersPage.bas[89]  page.PageDescription = {83} 
UsersPage.bas[90]  page.PageHTMLName = {84} 
UsersPage.bas[91]  page.PageKeywords = {85} 
UsersPage.bas[92]  page.PageSiteMapPriority = {86} 
UsersPage.bas[93]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
UsersPage.bas[94]  page.DisableBackButton = True 
UsersPage.bas[95]  page.ShowConnectedIndicator = True 
UsersPage.bas[96]  
UsersPage.bas[97]  ABMShared.BuildNavigationBar(page, {87} , {88} , {89} , {90} , {91} ) 
UsersPage.bas[98]  
UsersPage.bas[99]  ' create the page grid 
UsersPage.bas[100]  page.AddRowsM(1,True,0,0, {92} ).AddCells12(1, {93} ) 
UsersPage.bas[101]  page.AddRows(1,True, {94} ).AddCellsOS(1,0,0,0,10,10,11, {95} ).AddCellsOSMP(1,0,0,0,2,2,1,14,0,0,0, {96} ) 
UsersPage.bas[103]  page.AddRows(4,True, {97} ).AddCells12(1, {98} ) 
UsersPage.bas[104]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
UsersPage.bas[105]  
UsersPage.bas[106]  ' add a modal sheet template to enter user information 
UsersPage.bas[107]  page.AddModalSheetTemplate(BuildInputSheet) 
UsersPage.bas[108]  ' add a modal sheet template for a yes no msgbox 
UsersPage.bas[109]  page.AddModalSheetTemplate(BuildMsgBoxYesNo) 
UsersPage.bas[110]  
UsersPage.bas[111]  ' create the action button 
UsersPage.bas[112]  Dim AddUserbtn As ABMActionButton 
UsersPage.bas[113]  AddUserbtn.Initialize(page, {99} , {100} , {101} , {102} ) 
UsersPage.bas[114]  AddUserbtn.MainButton.Size = ABM.BUTTONSIZE_LARGE 
UsersPage.bas[115]  
UsersPage.bas[116]  ' add to page 
UsersPage.bas[117]  page.AddActionButton(AddUserbtn) 
UsersPage.bas[118]  
UsersPage.bas[119] End Sub 
UsersPage.bas[120]  
UsersPage.bas[121] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
UsersPage.bas[122]  Log( {103} ) 
UsersPage.bas[123]  ws = WebSocket1 
UsersPage.bas[124]  ABMPageId = ABM.GetPageID(page, Name,ws) 
UsersPage.bas[125]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
UsersPage.bas[126]  
UsersPage.bas[127]  If ABMShared.NeedsAuthorization Then 
UsersPage.bas[128]  If session.GetAttribute2( {104} , {105} ) = {106} Then 
UsersPage.bas[129]  ABMShared.NavigateToPage(ws, ABMPageId, {107} ) 
UsersPage.bas[130]  Return 
UsersPage.bas[131]  End If 
UsersPage.bas[132]  End If 
UsersPage.bas[133]  
UsersPage.bas[134]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
UsersPage.bas[135]  If page.ComesFromPageCache Then 
UsersPage.bas[136]  ' refresh the page 
UsersPage.bas[137]  page.Refresh 
UsersPage.bas[138]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
UsersPage.bas[139]  page.FinishedLoading 
UsersPage.bas[140]  Else 
UsersPage.bas[141]  ' Prepare the page 
UsersPage.bas[142]  page.Prepare 
UsersPage.bas[143]  ' Load the dynamic part of the page 
UsersPage.bas[144]  ' ********************* 1 ********************** 
UsersPage.bas[145]  ' set all the code you have in ConnectPage() HERE. 
UsersPage.bas[146]  Dim searchUser As ABMInput 
UsersPage.bas[147]  searchUser.Initialize(page, {108} , ABM.INPUT_TEXT, {109} , False, {110} ) 
UsersPage.bas[148]  page.CellR(1,1).AddComponent(searchUser) 
UsersPage.bas[149]  
UsersPage.bas[150]  Dim btnSearch As ABMButton 
UsersPage.bas[151]  btnSearch.InitializeFloating(page, {111} , {112} , {113} ) 
UsersPage.bas[152]  page.CellR(0,2).AddComponent(btnSearch) 
UsersPage.bas[153]  
UsersPage.bas[154]  Dim pagination As ABMPagination 
UsersPage.bas[155]  pagination.Initialize(page, {114} , 10, True, True, {115} ) 
UsersPage.bas[156]  pagination.SetTotalNumberOfPages(0) 
UsersPage.bas[157]  
UsersPage.bas[158]  page.CellR(1,1).AddComponent(pagination) 
UsersPage.bas[159]  
UsersPage.bas[160]  ' create a table 
UsersPage.bas[161]  Dim tblUsers As ABMTable 
UsersPage.bas[162]  tblUsers.IsResponsive = True 
UsersPage.bas[163]  ' IMPORTANT: we set usingQueriesToSort = true because we are going to handle the sorting, not the javascript sorting library 
UsersPage.bas[164]  ' When using Pagination, the sorting library does not know all the data 
UsersPage.bas[165]  ' SetColumnDataFields() is used when the user clicks on a column head to sort to return in the SortChanged() event and the GetSortColumn() And SetSortColumn() methods. 
UsersPage.bas[166]  tblUsers.Initialize(page, {116} , True, True, True, {117} ) 
UsersPage.bas[167]  tblUsers.SetHeaders( Array As String ( {118} , {119} , {120} , {121} , {122} , {123} , {124} )) 
UsersPage.bas[168]  tblUsers.SetHeaderThemes( Array As String ( {125} , {126} , {127} , {128} , {129} , {130} , {131} )) 
UsersPage.bas[169]  tblUsers.SetHeaderHeights( Array As Int (0 , 0 , 0 , 0 , 0 , 48 , 48 )) 
UsersPage.bas[170]  tblUsers.SetColumnVisible( Array As Boolean(False, True , True , True , True , True , True )) 
UsersPage.bas[171]  tblUsers.SetColumnSortable( Array As Boolean(False, True , True , True , True , False , False )) 
UsersPage.bas[172]  tblUsers.SetColumnDataFields(Array As String ( {132} , {133} , {134} , {135} , {136} , {137} , {138} )) 
UsersPage.bas[173]  
UsersPage.bas[174]  tblUsers.SetFooter( {139} , 12, {140} ) 
UsersPage.bas[175]  
UsersPage.bas[176]  page.CellR(1,1).AddComponent(tblUsers) 
UsersPage.bas[177]  
UsersPage.bas[178]  If page.ws.Session.GetAttribute2( {141} , {142} ) = {143} Then 
UsersPage.bas[179]  page.NavigationBar.AddSideBarItem( {144} , {145} , {146} , {147} ) 
UsersPage.bas[180]  End If 
UsersPage.bas[181]  
UsersPage.bas[182]  page.Refresh ' IMPORTANT 
UsersPage.bas[183]  
UsersPage.bas[184]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
UsersPage.bas[185]  page.FinishedLoading 'IMPORTANT 
UsersPage.bas[186]  
UsersPage.bas[187]  ' comes from the Page_Ready event 
UsersPage.bas[188]  page.RestoreNavigationBarPosition 
UsersPage.bas[189]  
UsersPage.bas[190]  ' so it represents the correct values, not the ones saved in the .html file IMPORTANT! 
UsersPage.bas[191]  LoadUsers(1) 
UsersPage.bas[192]  End If 
UsersPage.bas[193]  Log(ABMPageId) 
UsersPage.bas[194] End Sub 
UsersPage.bas[195]  
UsersPage.bas[196] Private Sub WebSocket_Disconnected 
UsersPage.bas[197]  Log( {148} ) 
UsersPage.bas[198] End Sub 
UsersPage.bas[199]  
UsersPage.bas[200]  Sub Page_ParseEvent(Params As Map) 
UsersPage.bas[201]  Dim eventName As String = Params.Get( {149} ) 
UsersPage.bas[202]  Dim eventParams() As String = Regex.Split( {150} ,Params.Get( {151} )) 
UsersPage.bas[203]  If eventName = {152} Then 
UsersPage.bas[204]  Log( {153} ) 
UsersPage.bas[205]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
UsersPage.bas[206]  Return 
UsersPage.bas[207]  End If 
UsersPage.bas[208]  If SubExists(Me, eventName) Then 
UsersPage.bas[209]  Params.Remove( {154} ) 
UsersPage.bas[210]  Params.Remove( {155} ) 
UsersPage.bas[211]  Select Case Params.Size 
UsersPage.bas[212]  Case 0 
UsersPage.bas[213]  CallSub(Me, eventName) 
UsersPage.bas[214]  Case 1 
UsersPage.bas[215]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
UsersPage.bas[216]  Case 2 
UsersPage.bas[217]  If Params.get(eventParams(0)) = {156} Then 
UsersPage.bas[218]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
UsersPage.bas[219]  CallSub2(Me, eventName, PassedTables) 
UsersPage.bas[220]  Else 
UsersPage.bas[221]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
UsersPage.bas[222]  End If 
UsersPage.bas[223]  Case Else 
UsersPage.bas[224]  ' cannot be called directly, to many param 
UsersPage.bas[225]  CallSub2(Me, eventName, Params) 
UsersPage.bas[226]  End Select 
UsersPage.bas[227]  End If 
UsersPage.bas[228] End Sub 
UsersPage.bas[229]  
UsersPage.bas[230] ' clicked on the navigation bar 
UsersPage.bas[231] Sub Page_NavigationbarClicked(Action As String, Value As String) 
UsersPage.bas[232]  page.SaveNavigationBarPosition 
UsersPage.bas[233]  'If Action = {157} Then Return 
UsersPage.bas[234]  If Action = {158} Then 
UsersPage.bas[235]  ABMShared.LogOff(page, ABMShared.AppName) 
UsersPage.bas[236]  Return 
UsersPage.bas[237]  End If 
UsersPage.bas[238]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
UsersPage.bas[239] End Sub 
UsersPage.bas[240]  
UsersPage.bas[241] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
UsersPage.bas[242]  page.ws.Session.SetAttribute( {159} , {160} ) 
UsersPage.bas[243]  page.ws.Session.SetAttribute( {161} , {162} ) 
UsersPage.bas[244]  page.ws.Session.SetAttribute( {163} , {164} ) 
UsersPage.bas[245]  page.ws.Session.SetAttribute( {165} , {166} ) 
UsersPage.bas[246]  page.ws.Session.SetAttribute( {167} , {168} ) 
UsersPage.bas[247]  ABMShared.NavigateToPage(ws, ABMPageId, {169} ) 
UsersPage.bas[248] End Sub 
UsersPage.bas[249]  
UsersPage.bas[250] private Sub LoadUsers(fromPage As Int) 
UsersPage.bas[251]  Dim tblUsers As ABMTable = page.Component( {170} ) 
UsersPage.bas[252]  
UsersPage.bas[253]  Dim SQL As SQL = DBM.GetSQL 
UsersPage.bas[254]  
UsersPage.bas[255]  Dim numusers As Int = DBM.SQLSelectSingleResult(SQL, {171} & Filter) 
UsersPage.bas[256]  Dim users As List = DBM.SQLSelect(SQL, {172} & Filter & {173} & LastSort & {174} & ((fromPage - 1) * 10) & {175} , Null) 
UsersPage.bas[257]  If users.Size = 0 And fromPage > 1 Then 
UsersPage.bas[258]  ' we are on a page without any lines (maybe removed by other user?) 
UsersPage.bas[259]  DBM.CloseSQL(SQL) 
UsersPage.bas[260]  fromPage = fromPage - 1 
UsersPage.bas[261]  LoadUsers(fromPage) 
UsersPage.bas[262]  Return 
UsersPage.bas[263]  End If 
UsersPage.bas[264]  tblUsers.SetFooter( {176} & numusers, 12, {177} ) 
UsersPage.bas[265]  tblUsers.Clear 
UsersPage.bas[266]  
UsersPage.bas[267]  For i = 0 To users.Size - 1 
UsersPage.bas[268]  Dim tblFields As Map = users.Get(i) 
UsersPage.bas[269]  Dim rCellValues As List 
UsersPage.bas[270]  Dim rCellThemes As List 
UsersPage.bas[271]  rCellValues.Initialize 
UsersPage.bas[272]  rCellThemes.Initialize 
UsersPage.bas[273]  
UsersPage.bas[274]  rCellValues.Add(tblFields.Get( {178} )) 
UsersPage.bas[275]  rCellThemes.Add( {179} ) 
UsersPage.bas[276]  
UsersPage.bas[277]  Select Case tblFields.Get( {180} ) 
UsersPage.bas[278]  Case {181} 
UsersPage.bas[279]  rCellValues.Add( {182} ) 
UsersPage.bas[280]  Case {183} 
UsersPage.bas[281]  rCellValues.Add( {184} ) 
UsersPage.bas[282]  Case {185} 
UsersPage.bas[283]  rCellValues.Add( {186} ) 
UsersPage.bas[284]  End Select 
UsersPage.bas[285]  rCellThemes.Add( {187} ) 
UsersPage.bas[286]  
UsersPage.bas[287]  rCellValues.Add(tblFields.Get( {188} )) 
UsersPage.bas[288]  rCellThemes.Add( {189} ) 
UsersPage.bas[289]  
UsersPage.bas[290]  rCellValues.Add(tblFields.Get( {190} )) 
UsersPage.bas[291]  rCellThemes.Add( {191} ) 
UsersPage.bas[292]  
UsersPage.bas[293]  rCellValues.Add(tblFields.Get( {192} )) 
UsersPage.bas[294]  rCellThemes.Add( {193} ) 
UsersPage.bas[295]  
UsersPage.bas[296]  Dim btnEdit As ABMButton 
UsersPage.bas[297]  btnEdit.InitializeFloating(page, {194} , {195} , {196} ) 
UsersPage.bas[298]  rCellValues.Add(btnEdit) 
UsersPage.bas[299]  rCellThemes.Add( {197} ) 
UsersPage.bas[300]  
UsersPage.bas[301]  Dim btnDelete As ABMButton 
UsersPage.bas[302]  btnDelete.InitializeFloating(page, {198} , {199} , {200} ) 
UsersPage.bas[303]  rCellValues.Add(btnDelete) 
UsersPage.bas[304]  rCellThemes.Add( {201} ) 
UsersPage.bas[305]  
UsersPage.bas[306]  tblUsers.AddRow( {202} & i, rCellValues) 
UsersPage.bas[307]  tblUsers.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in rCellValues! Must follow IMMEDIATELY AFTER AddRow! 
UsersPage.bas[308]  Next 
UsersPage.bas[309]  tblUsers.Refresh 
UsersPage.bas[310]  
UsersPage.bas[311]  DBM.CloseSQL(SQL) 
UsersPage.bas[312]  
UsersPage.bas[313]  Dim pagination As ABMPagination = page.Component( {203} ) 
UsersPage.bas[314]  If (numusers Mod 10 > 0) Or (numusers = 0) Then 
UsersPage.bas[315]  numusers = numusers/10 + 1 
UsersPage.bas[316]  Else 
UsersPage.bas[317]  numusers = numusers/10 
UsersPage.bas[318]  End If 
UsersPage.bas[319]  pagination.SetTotalNumberOfPages(numusers) 
UsersPage.bas[320]  pagination.SetActivePage(fromPage) 
UsersPage.bas[321]  pagination.Refresh 
UsersPage.bas[322] End Sub 
UsersPage.bas[323]  
UsersPage.bas[324] Sub pagination_PageChanged(OldPage As Int, NewPage As Int) 
UsersPage.bas[325]  ' do your stuff 
UsersPage.bas[326]  LoadUsers(NewPage) 
UsersPage.bas[327] End Sub 
UsersPage.bas[328]  
UsersPage.bas[329] Sub AddUserbtn_Clicked(Target As String, SubTarget As String) 
UsersPage.bas[330]  ' reset all the values on the form 
UsersPage.bas[331]  ActiveUserId = 0 
UsersPage.bas[332]  Dim inp As ABMModalSheet = page.ModalSheet( {204} ) 
UsersPage.bas[333]  Dim combo1 As ABMCombo = inp.Content.Component( {205} ) 
UsersPage.bas[334]  combo1.SetActiveItemId( {206} ) 
UsersPage.bas[335]  Dim inpName As ABMInput = inp.Content.Component( {207} ) 
UsersPage.bas[336]  inpName.Text = {208} 
UsersPage.bas[337]  Dim inpLogin As ABMInput = inp.Content.Component( {209} ) 
UsersPage.bas[338]  inpLogin.Text = {210} 
UsersPage.bas[339]  Dim inpPwd As ABMInput = inp.Content.Component( {211} ) 
UsersPage.bas[340]  inpPwd.Text = {212} 
UsersPage.bas[341]  'inp.Refresh 
UsersPage.bas[342]  page.ShowModalSheet( {213} ) 
UsersPage.bas[343] End Sub 
UsersPage.bas[344]  
UsersPage.bas[345] Sub tblUsers_Clicked(PassedRowsAndColumns As List) 
UsersPage.bas[346]  ' fill with the active values 
UsersPage.bas[347]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
UsersPage.bas[348]  Dim tblUsers As ABMTable = page.Component(tblCellInfo.TableName) 
UsersPage.bas[349]  If tblCellInfo.Column = 5 Then ' edit 
UsersPage.bas[350]  Dim SQL As SQL = DBM.GetSQL 
UsersPage.bas[351]  
UsersPage.bas[352]  Dim inp As ABMModalSheet = page.ModalSheet( {214} ) 
UsersPage.bas[353]  ActiveUserId = tblUsers.GetString(tblCellInfo.Row, 0) 
UsersPage.bas[354]  Dim users As List = DBM.SQLSelect(SQL, {215} & ActiveUserId, Null) 
UsersPage.bas[355]  If users.Size > 0 Then 
UsersPage.bas[356]  Dim user As Map = users.Get(0) 
UsersPage.bas[357]  Dim combo1 As ABMCombo = inp.Content.Component( {216} ) 
UsersPage.bas[358]  combo1.SetActiveItemId( {217} & user.Get( {218} )) 
UsersPage.bas[359]  
UsersPage.bas[360]  Dim inpName As ABMInput = inp.Content.Component( {219} ) 
UsersPage.bas[361]  inpName.Text = user.Get( {220} ) 
UsersPage.bas[362]  
UsersPage.bas[363]  Dim inpLogin As ABMInput = inp.Content.Component( {221} ) 
UsersPage.bas[364]  inpLogin.Text = user.Get( {222} ) 
UsersPage.bas[365]  
UsersPage.bas[366]  Dim inpPwd As ABMInput = inp.Content.Component( {223} ) 
UsersPage.bas[367]  inpPwd.Text = user.Get( {224} ) 
UsersPage.bas[368]  End If 
UsersPage.bas[369]  
UsersPage.bas[370]  DBM.CloseSQL(SQL) 
UsersPage.bas[371]  
UsersPage.bas[372]  'inp.Refresh 
UsersPage.bas[373]  page.ShowModalSheet( {225} ) 
UsersPage.bas[374]  
UsersPage.bas[375]  Return 
UsersPage.bas[376]  End If 
UsersPage.bas[377]  If tblCellInfo.Column = 6 Then ' delete 
UsersPage.bas[378]  Dim msg As ABMModalSheet = page.ModalSheet( {226} ) 
UsersPage.bas[379]  ActiveUserId = tblUsers.GetString(tblCellInfo.Row, 0) 
UsersPage.bas[380]  Dim lbl As ABMLabel = msg.Content.Component( {227} ) 
UsersPage.bas[381]  lbl.Text = {228} & tblUsers.GetString(tblCellInfo.Row,2) & {229} 
UsersPage.bas[382]  page.ShowModalSheet( {230} ) 
UsersPage.bas[383]  Return 
UsersPage.bas[384]  End If 
UsersPage.bas[385] End Sub 
UsersPage.bas[386]  
UsersPage.bas[387] Sub tblUsers_SortChanged(DataField As String, Order As String) 
UsersPage.bas[388]  Select Case DataField 
UsersPage.bas[389]  Case {231} , {232} , {233} , {234} 
UsersPage.bas[390]  LastSort = {235} & DataField & {236} & Order & {237} 
UsersPage.bas[391]  Case Else 
UsersPage.bas[392]  LastSort = {238} 
UsersPage.bas[393]  End Select 
UsersPage.bas[394]  ' reload the table 
UsersPage.bas[395]  Dim pagination As ABMPagination = page.Component( {239} ) 
UsersPage.bas[396]  LoadUsers(pagination.GetActivePage()) 
UsersPage.bas[397] End Sub 
UsersPage.bas[398]  
UsersPage.bas[399] Sub BuildInputSheet() As ABMModalSheet 
UsersPage.bas[400]  Dim inp As ABMModalSheet 
UsersPage.bas[401]  inp.Initialize(page, {240} , False, False, {241} ) 
UsersPage.bas[402]  inp.IsDismissible = False 
UsersPage.bas[403]  
UsersPage.bas[404]  inp.Content.AddRowsM(5, True,0,0, {242} ).AddCells12(1, {243} ) 
UsersPage.bas[405]  inp.Content.BuildGrid 
UsersPage.bas[406]  
UsersPage.bas[407]  ' add paragraph 
UsersPage.bas[408]  inp.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {244} , {245} ) ) 
UsersPage.bas[409]  
UsersPage.bas[410]  Dim combo1 As ABMCombo 
UsersPage.bas[411]  combo1.Initialize(page, {246} , {247} , 650 , {248} ) 
UsersPage.bas[412]  
UsersPage.bas[413]  ' add items 
UsersPage.bas[414]  combo1.AddItem( {249} , {250} , BuildSimpleItem( {251} , {252} , {253} )) 
UsersPage.bas[415]  combo1.AddItem( {254} , {255} , BuildSimpleItem( {256} , {257} , {258} )) 
UsersPage.bas[416]  combo1.AddItem( {259} , {260} , BuildSimpleItem( {261} , {262} , {263} )) 
UsersPage.bas[417]  
UsersPage.bas[418]  inp.Content.CellR(1,1).AddComponent(combo1) 
UsersPage.bas[419]  
UsersPage.bas[420]  Dim inpName As ABMInput 
UsersPage.bas[421]  inpName.Initialize(page, {264} , ABM.INPUT_TEXT, {265} , False, {266} ) 
UsersPage.bas[422]  inp.Content.CellR(1,1).AddComponent(inpName) 
UsersPage.bas[423]  
UsersPage.bas[424]  Dim inpLogin As ABMInput 
UsersPage.bas[425]  inpLogin.Initialize(page, {267} , ABM.INPUT_TEXT, {268} , False, {269} ) 
UsersPage.bas[426]  inp.Content.CellR(1,1).AddComponent(inpLogin) 
UsersPage.bas[427]  
UsersPage.bas[428]  Dim inpPwd As ABMInput 
UsersPage.bas[429]  inpPwd.Initialize(page, {270} , ABM.INPUT_TEXT, {271} , False, {272} ) 
UsersPage.bas[430]  inp.Content.CellR(1,1).AddComponent(inpPwd) 
UsersPage.bas[431]  
UsersPage.bas[432]  inp.Footer.AddRowsM(1,True,0,0, {273} ).AddCells12(1, {274} ) 
UsersPage.bas[433]  inp.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
UsersPage.bas[434]  
UsersPage.bas[435]  ' create the buttons for the footer, create in opposite order as aligned right in a footer 
UsersPage.bas[436]  Dim CancelBtn As ABMButton 
UsersPage.bas[437]  CancelBtn.InitializeFlat(page, {275} , {276} , {277} , {278} , {279} ) 
UsersPage.bas[438]  inp.Footer.Cell(1,1).AddComponent(CancelBtn) 
UsersPage.bas[439]  
UsersPage.bas[440]  Dim SaveBtn As ABMButton 
UsersPage.bas[441]  SaveBtn.InitializeFlat(page, {280} , {281} , {282} , {283} , {284} ) 
UsersPage.bas[442]  inp.Footer.Cell(1,1).AddComponent(SaveBtn) 
UsersPage.bas[443]  
UsersPage.bas[444]  Return inp 
UsersPage.bas[445] End Sub 
UsersPage.bas[446]  
UsersPage.bas[447] Sub BuildMsgBoxYesNo() As ABMModalSheet 
UsersPage.bas[448]  Dim msg As ABMModalSheet 
UsersPage.bas[449]  msg.Initialize(page, {285} , False, False, {286} ) 
UsersPage.bas[450]  msg.IsDismissible = False 
UsersPage.bas[451]  
UsersPage.bas[452]  msg.Content.AddRowsM(1, True,0,0, {287} ).AddCells12(1, {288} ) 
UsersPage.bas[453]  msg.Content.BuildGrid 
UsersPage.bas[454]  
UsersPage.bas[455]  ' add paragraph 
UsersPage.bas[456]  msg.Content.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {289} , {290} ) ) 
UsersPage.bas[457]  
UsersPage.bas[458]  msg.Footer.AddRowsM(1,True,0,0, {291} ).AddCellsOS(1,6,6,6,3,3,3, {292} ).AddCellsOS(1,0,0,0,3,3,3, {293} ) 
UsersPage.bas[459]  msg.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
UsersPage.bas[460]  
UsersPage.bas[461]  ' create the buttons for the footer 
UsersPage.bas[462]  Dim msgyes As ABMButton 
UsersPage.bas[463]  msgyes.InitializeFlat(page, {294} , {295} , {296} , {297} , {298} ) 
UsersPage.bas[464]  msg.Footer.Cell(1,1).AddComponent(msgyes) 
UsersPage.bas[465]  
UsersPage.bas[466]  Dim msgno As ABMButton 
UsersPage.bas[467]  msgno.InitializeFlat(page, {299} , {300} , {301} , {302} , {303} ) 
UsersPage.bas[468]  msg.Footer.Cell(1,2).AddComponent(msgno) 
UsersPage.bas[469]  
UsersPage.bas[470]  Return msg 
UsersPage.bas[471] End Sub 
UsersPage.bas[472]  
UsersPage.bas[473] Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
UsersPage.bas[474]  Dim lbl As ABMLabel 
UsersPage.bas[475]  If icon <> {304} Then 
UsersPage.bas[476]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {305} ) 
UsersPage.bas[477]  Else 
UsersPage.bas[478]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {306} ) 
UsersPage.bas[479]  End If 
UsersPage.bas[480]  lbl.VerticalAlign = True 
UsersPage.bas[481]  lbl.IconName = icon 
UsersPage.bas[482]  Return lbl 
UsersPage.bas[483] End Sub 
UsersPage.bas[484]  
UsersPage.bas[485] Sub SaveBtn_Clicked(Target As String) 
UsersPage.bas[486]  Dim inp As ABMModalSheet = page.ModalSheet( {307} ) 
UsersPage.bas[487]  
UsersPage.bas[488]  Dim CurrentFields, WhereFields As Map 
UsersPage.bas[489]  CurrentFields.Initialize 
UsersPage.bas[490]  WhereFields.Initialize 
UsersPage.bas[491]  
UsersPage.bas[492]  ' get the current values 
UsersPage.bas[493]  Dim combo1 As ABMCombo = inp.Content.Component( {308} ) 
UsersPage.bas[494]  CurrentFields.Put( {309} , ABMShared.Mid(combo1.GetActiveItemId(), 8, 1)) 
UsersPage.bas[495]  
UsersPage.bas[496]  Dim inpName As ABMInput = inp.Content.Component( {310} ) 
UsersPage.bas[497]  CurrentFields.Put( {311} , DBM.SetQuotes(inpName.Text)) 
UsersPage.bas[498]  
UsersPage.bas[499]  Dim inpLogin As ABMInput = inp.Content.Component( {312} ) 
UsersPage.bas[500]  CurrentFields.Put( {313} , DBM.SetQuotes(inpLogin.Text)) 
UsersPage.bas[501]  
UsersPage.bas[502]  Dim inpPwd As ABMInput = inp.Content.Component( {314} ) 
UsersPage.bas[503]  CurrentFields.Put( {315} , DBM.SetQuotes(inpPwd.Text)) 
UsersPage.bas[504]  
UsersPage.bas[505]  CurrentFields.Put( {316} , 0) 
UsersPage.bas[506]  
UsersPage.bas[507]  ' build the where values 
UsersPage.bas[508]  WhereFields.Put( {317} , ActiveUserId) 
UsersPage.bas[509]  
UsersPage.bas[510]  Dim SQL As SQL = DBM.GetSQL 
UsersPage.bas[511]  
UsersPage.bas[512]  Dim SQL_Select As String = {318} & ActiveUserId 
UsersPage.bas[513]  Dim SQL_Insert As String = DBM.BuildInsertQuery( {319} , CurrentFields) 
UsersPage.bas[514]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {320} , CurrentFields, WhereFields) 
UsersPage.bas[515]  DBM.SQLInsertOrUpdate(SQL, SQL_Select, SQL_Insert, SQL_Update) 
UsersPage.bas[516]  
UsersPage.bas[517]  DBM.CloseSQL(SQL) 
UsersPage.bas[518]  
UsersPage.bas[519]  ' reload the table 
UsersPage.bas[520]  Dim pagination As ABMPagination = page.Component( {321} ) 
UsersPage.bas[521]  LoadUsers(pagination.GetActivePage()) 
UsersPage.bas[522]  
UsersPage.bas[523]  page.CloseModalSheet( {322} ) 
UsersPage.bas[524] End Sub 
UsersPage.bas[525]  
UsersPage.bas[526] Sub CancelBtn_Clicked(Target As String) 
UsersPage.bas[527]  page.CloseModalSheet( {323} ) 
UsersPage.bas[528] End Sub 
UsersPage.bas[529]  
UsersPage.bas[530] Sub msgyes_Clicked(Target As String) 
UsersPage.bas[531]  Dim Currentfields, Wherefields As Map 
UsersPage.bas[532]  Currentfields.Initialize 
UsersPage.bas[533]  Wherefields.Initialize 
UsersPage.bas[534]  
UsersPage.bas[535]  Currentfields.Put( {324} , 99) 
UsersPage.bas[536]  
UsersPage.bas[537]  ' build the where values 
UsersPage.bas[538]  Wherefields.Put( {325} , ActiveUserId) 
UsersPage.bas[539]  
UsersPage.bas[540]  Dim SQL As SQL = DBM.GetSQL 
UsersPage.bas[541]  
UsersPage.bas[542]  ' we're not actual deleting it, as we would also loose his cases, so we update his active param 
UsersPage.bas[543]  Dim SQL_Update As String = DBM.BuildUpdateQuery( {326} , Currentfields, Wherefields) 
UsersPage.bas[544]  DBM.SQLUpdate(SQL, SQL_Update) 
UsersPage.bas[545]  
UsersPage.bas[546]  ' this would actualy delete him, but then we will have to remove all his cases, attachments, etc also 
UsersPage.bas[547]  'DBUtils.DeleteRecord(DBM.SQLite, {327} , Wherefields) 
UsersPage.bas[548]  
UsersPage.bas[549]  DBM.CloseSQL(SQL) 
UsersPage.bas[550]  
UsersPage.bas[551]  ' reload the table 
UsersPage.bas[552]  Dim pagination As ABMPagination = page.Component( {328} ) 
UsersPage.bas[553]  LoadUsers(pagination.GetActivePage()) 
UsersPage.bas[554]  
UsersPage.bas[555]  page.CloseModalSheet( {329} ) 
UsersPage.bas[556] End Sub 
UsersPage.bas[557]  
UsersPage.bas[558] Sub msgno_Clicked(Target As String) 
UsersPage.bas[559]  page.CloseModalSheet( {330} ) 
UsersPage.bas[560] End Sub 
UsersPage.bas[561]  
UsersPage.bas[562] Sub btnSearch_Clicked(Target As String) 
UsersPage.bas[563]  DoSearch 
UsersPage.bas[564] End Sub 
UsersPage.bas[565]  
UsersPage.bas[566] Sub searchUser_EnterPressed(value As String) 
UsersPage.bas[567]  DoSearch 
UsersPage.bas[568] End Sub 
UsersPage.bas[569]  
UsersPage.bas[570] Sub DoSearch() 
UsersPage.bas[571]  Dim searchUser As ABMInput = page.Component( {331} ) 
UsersPage.bas[572]  Filter = searchUser.Text 
UsersPage.bas[573]  If Filter <> {332} Then 
UsersPage.bas[574]  Filter = {333} & Filter & {334} & Filter & {335} 
UsersPage.bas[575]  Else 
UsersPage.bas[576]  Filter = {336} 
UsersPage.bas[577]  End If 
UsersPage.bas[578]  ' reload the table 
UsersPage.bas[579]  LoadUsers(1) 
UsersPage.bas[580] End Sub 
Analysing: ABMSessionCreator.bas
ABMSessionCreator.bas[0] ﻿Type=Class 
ABMSessionCreator.bas[0] Version=4.7 
ABMSessionCreator.bas[0] ModulesStructureVersion=1 
ABMSessionCreator.bas[0] B4J=true 
ABMSessionCreator.bas[0] @EndOfDesignText@ 
ABMSessionCreator.bas[1] 'Filter class 
ABMSessionCreator.bas[2] Sub Class_Globals 
ABMSessionCreator.bas[3]  
ABMSessionCreator.bas[4] End Sub 
ABMSessionCreator.bas[5]  
ABMSessionCreator.bas[6] Public Sub Initialize 
ABMSessionCreator.bas[7]  
ABMSessionCreator.bas[8] End Sub 
ABMSessionCreator.bas[9]  
ABMSessionCreator.bas[10] 'Return True to allow the request to proceed. 
ABMSessionCreator.bas[11] Public Sub Filter(req As ServletRequest, resp As ServletResponse) As Boolean 
ABMSessionCreator.bas[12]  DateTime.DateFormat = {0} 
ABMSessionCreator.bas[13]  DateTime.TimeFormat = {1} 
ABMSessionCreator.bas[14]  
ABMSessionCreator.bas[15]  Log( {2} & DateTime.Date(DateTime.Now) & {3} & DateTime.Time(DateTime.now)) 
ABMSessionCreator.bas[16]  
ABMSessionCreator.bas[17]  req.GetSession 'a new session will be created if a session doesn't exist. 
ABMSessionCreator.bas[18]  Return True 
ABMSessionCreator.bas[19] End Sub 
Analysing: ABMCacheScavenger.bas
ABMCacheScavenger.bas[0] ﻿Type=Class 
ABMCacheScavenger.bas[0] Version=4.7 
ABMCacheScavenger.bas[0] ModulesStructureVersion=1 
ABMCacheScavenger.bas[0] B4J=true 
ABMCacheScavenger.bas[0] @EndOfDesignText@ 
ABMCacheScavenger.bas[1] 'CacheScavenger 
ABMCacheScavenger.bas[2] Sub Class_Globals 
ABMCacheScavenger.bas[3]  Private scavengeTimer As Timer 
ABMCacheScavenger.bas[4]  Private ABM As ABMaterial 
ABMCacheScavenger.bas[5] End Sub 
ABMCacheScavenger.bas[6]  
ABMCacheScavenger.bas[7] Public Sub Initialize 
ABMCacheScavenger.bas[8]  scavengeTimer.Initialize( {0} , ABMShared.CacheScavengePeriodSeconds * 1000) 
ABMCacheScavenger.bas[9]  scavengeTimer.Enabled = True 
ABMCacheScavenger.bas[10]  StartMessageLoop '<- don't forget! 
ABMCacheScavenger.bas[11] End Sub 
ABMCacheScavenger.bas[12]  
ABMCacheScavenger.bas[13] Sub ScavengeTimer_Tick 
ABMCacheScavenger.bas[14]  'do the work required 
ABMCacheScavenger.bas[15]  ABM.ScavengeCache(ABMShared.CachedPages) 
ABMCacheScavenger.bas[16] End Sub 
Analysing: ABMFeedback.b4j
ABMFeedback.b4j[0] ﻿Version=4.7 
ABMFeedback.b4j[0] AppType=StandardJava 
ABMFeedback.b4j[0] NumberOfModules=9 
ABMFeedback.b4j[0] Module1=ABMShared 
ABMFeedback.b4j[0] Module2=ABMUploadHandler 
ABMFeedback.b4j[0] Module3=ABMApplication 
ABMFeedback.b4j[0] Module4=OverviewCasesPage 
ABMFeedback.b4j[0] Module5=UsersPage 
ABMFeedback.b4j[0] Module6=DBM 
ABMFeedback.b4j[0] Module7=ABMSessionCreator 
ABMFeedback.b4j[0] Module8=ABMPageTemplate 
ABMFeedback.b4j[0] Module9=ABMCacheScavenger 
ABMFeedback.b4j[0] Build1=Default,abmfeedback.ab.com 
ABMFeedback.b4j[0] NumberOfFiles=0 
ABMFeedback.b4j[0] NumberOfLibraries=5 
ABMFeedback.b4j[0] Library1=jcore 
ABMFeedback.b4j[0] Library2=abmaterial 
ABMFeedback.b4j[0] Library3=jserver 
ABMFeedback.b4j[0] Library4=jsql 
ABMFeedback.b4j[0] Library5=javaobject 
ABMFeedback.b4j[0] @EndOfDesignText@ 
ABMFeedback.b4j[1] 'Non-UI application (console / server application) 
ABMFeedback.b4j[2] #Region Project Attributes 
ABMFeedback.b4j[3]  #CommandLineArgs: 
ABMFeedback.b4j[4]  #MergeLibraries: True 
ABMFeedback.b4j[5]  
ABMFeedback.b4j[6]  
ABMFeedback.b4j[7]  #AdditionalJar: mysql-connector-java-5.1.37-bin 
ABMFeedback.b4j[8]  ' --------- for HTTP/2: enable, change to your java version (follow the instruction in http://www.b4x.com/android/forum/threads/server-http-2-configuration.61416/#content) 
ABMFeedback.b4j[9]  '#VirtualMachineArgs: -Xbootclasspath/p:alpn-boot-8.1.5.v20150921.jar 
ABMFeedback.b4j[10] #End Region 
ABMFeedback.b4j[11]  
ABMFeedback.b4j[12] Sub Process_Globals 
ABMFeedback.b4j[13]  Public srvr As Server 
ABMFeedback.b4j[14] End Sub 
ABMFeedback.b4j[15]  
ABMFeedback.b4j[16] Sub AppStart (Args() As String) 
ABMFeedback.b4j[17]  ' Build the Theme 
ABMFeedback.b4j[18]  ABMShared.BuildTheme( {0} ) 
ABMFeedback.b4j[19]  ' the user needs to login 
ABMFeedback.b4j[20]  ABMShared.NeedsAuthorization = True 
ABMFeedback.b4j[21]  
ABMFeedback.b4j[22]  
ABMFeedback.b4j[23]  
ABMFeedback.b4j[24]  ' DBM.InitializeMySQL( {1} , {2} , {3} , 100) 
ABMFeedback.b4j[25]  'DBM.InitializeMySQL( {4} , {5} , {6} , 100) 
ABMFeedback.b4j[26]  DBM.InitializeMySQL( {7} , {8} , {9} , 100) 
ABMFeedback.b4j[27]  
ABMFeedback.b4j[28]  
ABMFeedback.b4j[29]  DBM.CreateTablesIfNeeded 
ABMFeedback.b4j[30]  
ABMFeedback.b4j[31]  ' create the app 
ABMFeedback.b4j[32]  Dim myApp As ABMApplication 
ABMFeedback.b4j[33]  myApp.Initialize 
ABMFeedback.b4j[34]  
ABMFeedback.b4j[35]  ' create the pages 
ABMFeedback.b4j[36]  Dim overviewcasesp As OverviewCasesPage 
ABMFeedback.b4j[37]  overviewcasesp.Initialize 
ABMFeedback.b4j[38]  Dim usersp As UsersPage 
ABMFeedback.b4j[39]  usersp.Initialize 
ABMFeedback.b4j[40]  
ABMFeedback.b4j[41]  ' add the pages to the app 
ABMFeedback.b4j[42]  myApp.AddPage(overviewcasesp.Page) 
ABMFeedback.b4j[43]  myApp.AddPage(usersp.Page) 
ABMFeedback.b4j[44]  
ABMFeedback.b4j[45]  ' start the server, http/1.1 
ABMFeedback.b4j[46]  myApp.StartServer(srvr, {10} , 51044) 
ABMFeedback.b4j[47]  
ABMFeedback.b4j[48]  ' start server HTTP/2 
ABMFeedback.b4j[49]  'myApp.StartServerHTTP2(srvr, {11} , 51044, 51045, {12} , {13} , {14} ) 
ABMFeedback.b4j[50]  
ABMFeedback.b4j[51]  ABMShared.RedirectOutput(File.DirApp, {15} ) 
ABMFeedback.b4j[52]  
ABMFeedback.b4j[53]  StartMessageLoop 
ABMFeedback.b4j[54] End Sub 
ABMFeedback.b4j[55]  
