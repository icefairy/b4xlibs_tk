Analysing: ABMPrint.bas
ABMPrint.bas[0] ﻿Type=StaticCode 
ABMPrint.bas[0] Version=4.7 
ABMPrint.bas[0] ModulesStructureVersion=1 
ABMPrint.bas[0] B4J=true 
ABMPrint.bas[0] @EndOfDesignText@ 
ABMPrint.bas[1] ' 
ABMPrint.bas[2] Sub Process_Globals 
ABMPrint.bas[3] ' Dim PDFjetConstants1 As PDFjetConstants 
ABMPrint.bas[4] ' ' to access the constants 
ABMPrint.bas[5] ' Private ABM As ABMaterial 'ignore 
ABMPrint.bas[6] ' Type RenderImage(row As Int, cellId As String) 
ABMPrint.bas[7] ' Private cObject As Object 
ABMPrint.bas[8] ' Private IsWorking As Boolean 
ABMPrint.bas[9] End Sub 
ABMPrint.bas[10]  
ABMPrint.bas[11] 'Sub PrintToPDF(page As ABMPage, callObject As Object, Theme As ABMTheme, ThemeName As String, TreeTable As ABMTreeTable, dir As String, fileName As String) 
ABMPrint.bas[12] ' If IsWorking Then Return 
ABMPrint.bas[13] ' cObject = callObject 
ABMPrint.bas[14] ' IsWorking = True 
ABMPrint.bas[15] ' 
ABMPrint.bas[16] ' Dim TOP_MARGIN As Int = 25 
ABMPrint.bas[17] ' Dim LEFT_MARGIN As Int = 25 
ABMPrint.bas[18] ' Dim DefaultfontSize As Float = 10 
ABMPrint.bas[19] ' 
ABMPrint.bas[20] ' Dim PDFjetPDF1 As PDFjetPDF 
ABMPrint.bas[21] ' Dim PDFDestination As OutputStream 
ABMPrint.bas[22] ' PDFDestination=File.OpenOutput(dir, {0} & fileName, False) 
ABMPrint.bas[23] ' 
ABMPrint.bas[24] ' PDFjetPDF1.Initialize( {1} , PDFDestination) 
ABMPrint.bas[25] ' PDFjetPDF1.SetAuthor( {2} ) 
ABMPrint.bas[26] ' PDFjetPDF1.SetSubject( {3} ) 
ABMPrint.bas[27] ' 
ABMPrint.bas[28] ' Dim PDFPage As PDFjetPage 
ABMPrint.bas[29] ' PDFPage.Initialize(PDFjetPDF1, PDFjetConstants1.PageSize.A4_PORTRAIT) 
ABMPrint.bas[30] ' 
ABMPrint.bas[31] ' Dim Scale As Float = PDFPage.GetWidth / (TreeTable.ColWidthPx*TreeTable.TotalColSpan + LEFT_MARGIN*2) 
ABMPrint.bas[32] ' If Scale > 1 Then Scale = 1 
ABMPrint.bas[33] ' DefaultfontSize = DefaultfontSize * Scale 
ABMPrint.bas[34] ' Dim BlockWidth As Float = TreeTable.ColWidthPx*Scale 
ABMPrint.bas[35] ' 
ABMPrint.bas[36] ' Dim PDFFont As PDFjetFont 
ABMPrint.bas[37] ' PDFFont.Initialize(PDFjetPDF1, PDFjetConstants1.CoreFont.HELVETICA) 
ABMPrint.bas[38] ' PDFFont.SetSize(DefaultfontSize) 
ABMPrint.bas[39] ' 
ABMPrint.bas[40] '' Dim InputFile As InputStream=File.OpenInput(File.DirAssets, {4} ) ' op de Z drive, in de root 
ABMPrint.bas[41] '' Dim cp As PDFjetCodePage 
ABMPrint.bas[42] '' Dim PDFFont2 As PDFjetFont 
ABMPrint.bas[43] '' PDFFont2.Initialize4(PDFjetPDF1,InputFile ,cp.UNICODE,True ) 
ABMPrint.bas[44] ' 
ABMPrint.bas[45] ' Dim PDFTable As PDFjetTable 
ABMPrint.bas[46] ' PDFTable.Initialize 
ABMPrint.bas[47] ' 
ABMPrint.bas[48] ' Dim TableData1 As PDFjetTableData 
ABMPrint.bas[49] ' TableData1.Initialize 
ABMPrint.bas[50] ' 
ABMPrint.bas[51] ' Dim PDFCell As PDFjetCell 
ABMPrint.bas[52] ' Dim Row As PDFjetCellList 
ABMPrint.bas[53] ' 
ABMPrint.bas[54] ' TreeTable.ResetPDFStart(0) 
ABMPrint.bas[55] ' Dim r As ABMtreeTableRow = TreeTable.NextPDFRow 
ABMPrint.bas[56] ' Do While r <> Null 
ABMPrint.bas[57] ' Row.Initialize 
ABMPrint.bas[58] ' For i=0 To r.cells.Size - 1 
ABMPrint.bas[59] ' Dim c As ABMTreeTableCell = r.cells.Get(i) 
ABMPrint.bas[60] ' PDFCell.Initialize2(PDFFont, c.GetCleanStringValue(page)) 
ABMPrint.bas[61] ' 'PDFCell.Initialize2(PDFFont2, {5} ) 
ABMPrint.bas[62] ' PDFCell.SetBottomPadding(2) 
ABMPrint.bas[63] ' PDFCell.SetLeftPadding(2) 
ABMPrint.bas[64] ' PDFCell.SetRightPadding(2) 
ABMPrint.bas[65] ' PDFCell.SetTopPadding(2) 
ABMPrint.bas[66] ' PDFCell.SetBgColor(ABM.GetColorInt(Theme.TreeTable(ThemeName).Cell(c.theme).BackColor, Theme.TreeTable(ThemeName).Cell(c.theme).BackColorIntensity)) 
ABMPrint.bas[67] ' 
ABMPrint.bas[68] ' PDFCell.SetFgColor(ABM.GetColorInt(Theme.TreeTable(ThemeName).Cell(c.theme).ForeColor, Theme.TreeTable(ThemeName).Cell(c.theme).ForeColorIntensity)) 
ABMPrint.bas[69] ' Dim w As Int = BlockWidth*c.ColSpan 
ABMPrint.bas[70] ' PDFCell.SetWidth(w) 
ABMPrint.bas[71] ' PDFCell.SetNoBorders 
ABMPrint.bas[72] ' 
ABMPrint.bas[73] ' Select Case Theme.TreeTable(ThemeName).Cell(c.theme).Align 
ABMPrint.bas[74] ' Case ABM.TABLECELL_HORIZONTALALIGN_LEFT 
ABMPrint.bas[75] ' PDFCell.SetTextAlignment(PDFjetConstants1.Align.LEFT) 
ABMPrint.bas[76] ' Case ABM.TABLECELL_HORIZONTALALIGN_CENTER 
ABMPrint.bas[77] ' PDFCell.SetTextAlignment(PDFjetConstants1.Align.CENTER) 
ABMPrint.bas[78] ' Case ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
ABMPrint.bas[79] ' PDFCell.SetTextAlignment(PDFjetConstants1.Align.RIGHT) 
ABMPrint.bas[80] ' End Select 
ABMPrint.bas[81] ' Select Case Theme.TreeTable(ThemeName).Cell(c.theme).VerticalAlign 
ABMPrint.bas[82] ' Case ABM.TABLECELL_VERTICALALIGN_TOP 
ABMPrint.bas[83] ' PDFCell.SetTextAlignment(PDFjetConstants1.TextAlign.TOP) 
ABMPrint.bas[84] ' Case ABM.TABLECELL_VERTICALALIGN_MIDDLE 
ABMPrint.bas[85] ' PDFCell.SetTextAlignment(PDFjetConstants1.TextAlign.CENTER) 
ABMPrint.bas[86] ' Case ABM.TABLECELL_VERTICALALIGN_BOTTOM 
ABMPrint.bas[87] ' PDFCell.SetTextAlignment(PDFjetConstants1.TextAlign.BOTTOM) 
ABMPrint.bas[88] ' End Select 
ABMPrint.bas[89] ' Row.Add(PDFCell) 
ABMPrint.bas[90] ' Next 
ABMPrint.bas[91] ' 
ABMPrint.bas[92] ' TableData1.AddRow(Row) 
ABMPrint.bas[93] ' r = TreeTable.NextPDFRow 
ABMPrint.bas[94] ' Loop 
ABMPrint.bas[95] ' 
ABMPrint.bas[96] ' 
ABMPrint.bas[97] ' PDFTable.SetData(TableData1) 
ABMPrint.bas[98] ' PDFTable.SetCellBordersWidth(0) 
ABMPrint.bas[99] ' PDFTable.SetNoCellBorders 
ABMPrint.bas[100] ' PDFTable.SetPosition(LEFT_MARGIN, TOP_MARGIN) 
ABMPrint.bas[101] ' PDFTable.WrapAroundCellText 
ABMPrint.bas[102] ' 
ABMPrint.bas[103] '' Dim code As PDFjetBarCode 
ABMPrint.bas[104] '' code.Initialize(code.CODE39, {6} ) 
ABMPrint.bas[105] '' code.setPosition(LEFT_MARGIN, TOP_MARGIN) 
ABMPrint.bas[106] '' code.setModuleLength(0.75) 
ABMPrint.bas[107] '' code.setFont(PDFFont) 
ABMPrint.bas[108] '' code.DrawOn(PDFPage) 
ABMPrint.bas[109] ' 
ABMPrint.bas[110] ' 
ABMPrint.bas[111] ' Do While True 
ABMPrint.bas[112] ' 
ABMPrint.bas[113] ' PDFTable.DrawOn(PDFPage) 
ABMPrint.bas[114] ' If Not(PDFTable.HasMoreData) Then 
ABMPrint.bas[115] ' PDFTable.ResetRenderedPageCount 
ABMPrint.bas[116] ' Exit 
ABMPrint.bas[117] ' End If 
ABMPrint.bas[118] ' PDFPage.Initialize(PDFjetPDF1, PDFjetConstants1.PageSize.A4_PORTRAIT) 
ABMPrint.bas[119] ' Loop 
ABMPrint.bas[120] ' 
ABMPrint.bas[121] ' PDFjetPDF1.Close 
ABMPrint.bas[122] 'End Sub 
ABMPrint.bas[123]  
ABMPrint.bas[124] 'Sub PDFjetPDF1_CloseComplete(Success As Boolean) 
ABMPrint.bas[125] ' If Success Then 
ABMPrint.bas[126] ' Log( {7} ) 
ABMPrint.bas[127] ' CallSubDelayed(cObject, {8} ) 
ABMPrint.bas[128] ' Else 
ABMPrint.bas[129] ' Log( {9} ) 
ABMPrint.bas[130] ' End If 
ABMPrint.bas[131] ' 
ABMPrint.bas[132] ' IsWorking = False 
ABMPrint.bas[133] 'End Sub 
ABMPrint.bas[134]  
ABMPrint.bas[135]  
ABMPrint.bas[136]  
ABMPrint.bas[137]  
Analysing: ABMShared.bas
ABMShared.bas[0] ﻿Type=StaticCode 
ABMShared.bas[0] Version=4.7 
ABMShared.bas[0] ModulesStructureVersion=1 
ABMShared.bas[0] B4J=true 
ABMShared.bas[0] @EndOfDesignText@ 
ABMShared.bas[1] 'Static code module 
ABMShared.bas[2] Sub Process_Globals 
ABMShared.bas[3]  Public MyTheme As ABMTheme 
ABMShared.bas[4]  Private ABM As ABMaterial 'ignore 
ABMShared.bas[5]  Public NeedsAuthorization As Boolean = False 
ABMShared.bas[6]  Public AppVersion As String = DateTime.Now 
ABMShared.bas[7]  Public AppPublishedStartURL As String = {0} 
ABMShared.bas[8]  Public AppName As String = {1} 
ABMShared.bas[9]  'Public AppPublishedStartURL As String = {2} 
ABMShared.bas[10]  
ABMShared.bas[11]  Public TrackingID As String 
ABMShared.bas[12]  
ABMShared.bas[13]  Public CachedPages As Map 
ABMShared.bas[14]  Public CacheScavengePeriodSeconds As Int = 15*60 ' 15 minutes ' 10 minutes 
ABMShared.bas[15]  Public SessionMaxInactiveIntervalSeconds As Int = 30*60 ' 30 minutes '1*60*24 ' one hour ' -1 = immortal but beware! This means the cache is NEVER emptied! 
ABMShared.bas[16] End Sub 
ABMShared.bas[17]  
ABMShared.bas[18] Public Sub NavigateToPage(ws As WebSocket, PageId As String, TargetUrl As String) 
ABMShared.bas[19]  If AppVersion <> {3} Then 
ABMShared.bas[20]  TargetUrl = TargetUrl & {4} & AppVersion 
ABMShared.bas[21]  End If 
ABMShared.bas[22]  ABM.RemoveMeFromCache(CachedPages, PageId) 
ABMShared.bas[23]  If ws.Open Then 
ABMShared.bas[24]  ws.Eval( {5} , Array As Object(TargetUrl)) 
ABMShared.bas[25]  ws.Flush 
ABMShared.bas[26]  End If 
ABMShared.bas[27] End Sub 
ABMShared.bas[28]  
ABMShared.bas[29] Sub RedirectOutput (Dir As String, FileName As String) 
ABMShared.bas[30]  #if RELEASE 
ABMShared.bas[31]  Dim out As OutputStream = File.OpenOutput(Dir, FileName, False) 'Set to True to append the logs 
ABMShared.bas[32]  Dim ps As JavaObject 
ABMShared.bas[33]  ps.InitializeNewInstance( {6} , Array(out, True, {7} )) 
ABMShared.bas[34]  Dim jo As JavaObject 
ABMShared.bas[35]  jo.InitializeStatic( {8} ) 
ABMShared.bas[36]  jo.RunMethod( {9} , Array(ps)) 
ABMShared.bas[37]  jo.RunMethod( {10} , Array(ps)) 
ABMShared.bas[38]  #end if 
ABMShared.bas[39] End Sub 
ABMShared.bas[40]  
ABMShared.bas[41] ' build methods for ABM objects 
ABMShared.bas[42] Sub BuildTheme(themeName As String) 
ABMShared.bas[43]  MyTheme.Initialize(themeName) 
ABMShared.bas[44]  
ABMShared.bas[45]  ' the page theme 
ABMShared.bas[46]  MyTheme.Page.BackColor = ABM.COLOR_BLUEGREY 
ABMShared.bas[47]  MyTheme.Page.BackColorIntensity = ABM.INTENSITY_LIGHTEN5 
ABMShared.bas[48]  
ABMShared.bas[49]  ' the navbar theme 
ABMShared.bas[50]  MyTheme.AddNavigationBarTheme( {11} ) 
ABMShared.bas[51]  MyTheme.NavigationBar( {12} ).TopBarBackColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[52]  
ABMShared.bas[53]  ' another navbar theme 
ABMShared.bas[54]  MyTheme.AddNavigationBarTheme( {13} ) 
ABMShared.bas[55]  MyTheme.NavigationBar( {14} ).SideBarWavesEffect = ABM.WAVESEFFECT_NONE 
ABMShared.bas[56]  MyTheme.NavigationBar( {15} ).SideBarBackColor = ABM.COLOR_BLUEGREY 
ABMShared.bas[57]  MyTheme.NavigationBar( {16} ).SideBarBackColorIntensity = ABM.INTENSITY_LIGHTEN4 
ABMShared.bas[58]  
ABMShared.bas[59]  ' another navbar theme 
ABMShared.bas[60]  MyTheme.AddNavigationBarTheme( {17} ) 
ABMShared.bas[61]  MyTheme.NavigationBar( {18} ).SideBarWavesEffect = ABM.WAVESEFFECT_NONE 
ABMShared.bas[62]  MyTheme.NavigationBar( {19} ).SideBarBackColor = ABM.COLOR_LIME 
ABMShared.bas[63]  MyTheme.NavigationBar( {20} ).SideBarBackColorIntensity = ABM.INTENSITY_LIGHTEN4 
ABMShared.bas[64]  
ABMShared.bas[65]  ' another navbar theme 
ABMShared.bas[66]  MyTheme.AddNavigationBarTheme( {21} ) 
ABMShared.bas[67]  MyTheme.NavigationBar( {22} ).SideBarWavesEffect = ABM.WAVESEFFECT_NONE 
ABMShared.bas[68]  MyTheme.NavigationBar( {23} ).SideBarBackColor = ABM.COLOR_TEAL 
ABMShared.bas[69]  MyTheme.NavigationBar( {24} ).SideBarBackColorIntensity = ABM.INTENSITY_LIGHTEN4 
ABMShared.bas[70]  
ABMShared.bas[71]  ' the footer theme 
ABMShared.bas[72]  MyTheme.AddContainerTheme( {25} ) 
ABMShared.bas[73]  MyTheme.Container( {26} ).BackColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[74]  MyTheme.Container( {27} ).BackColorIntensity = ABM.INTENSITY_DARKEN3 
ABMShared.bas[75]  
ABMShared.bas[76]  ' footer label theme 
ABMShared.bas[77]  MyTheme.AddLabelTheme( {28} ) 
ABMShared.bas[78]  MyTheme.Label( {29} ).ForeColor = ABM.COLOR_WHITE 
ABMShared.bas[79]  
ABMShared.bas[80]  ' footer label theme 
ABMShared.bas[81]  MyTheme.AddLabelTheme( {30} ) 
ABMShared.bas[82]  MyTheme.Label( {31} ).align = ABM.TEXTALIGN_JUSTIFY 
ABMShared.bas[83]  
ABMShared.bas[84]  ' a label header theme 
ABMShared.bas[85]  MyTheme.AddLabelTheme( {32} ) 
ABMShared.bas[86]  MyTheme.Label( {33} ).ForeColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[87]  MyTheme.Label( {34} ).ForeColorIntensity = ABM.INTENSITY_DARKEN2 
ABMShared.bas[88]  
ABMShared.bas[89]  ' a table theme 
ABMShared.bas[90]  MyTheme.AddTableTheme( {35} ) 
ABMShared.bas[91]  MyTheme.Table( {36} ).ZDepth = ABM.ZDEPTH_2 
ABMShared.bas[92]  MyTheme.Table( {37} ).AddCellTheme( {38} ) 
ABMShared.bas[93]  MyTheme.Table( {39} ).Cell( {40} ).BackColor = ABM.COLOR_BLUEGREY 
ABMShared.bas[94]  MyTheme.Table( {41} ).Cell( {42} ).BackColorIntensity = ABM.INTENSITY_DARKEN2 
ABMShared.bas[95]  MyTheme.Table( {43} ).Cell( {44} ).ForeColor = ABM.COLOR_WHITE 
ABMShared.bas[96]  MyTheme.Table( {45} ).AddCellTheme( {46} ) 
ABMShared.bas[97]  MyTheme.Table( {47} ).Cell( {48} ).BackColor = ABM.COLOR_BLUEGREY 
ABMShared.bas[98]  MyTheme.Table( {49} ).Cell( {50} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN2 
ABMShared.bas[99]  MyTheme.Table( {51} ).Cell( {52} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
ABMShared.bas[100]  MyTheme.Table( {53} ).AddCellTheme( {54} ) 
ABMShared.bas[101]  MyTheme.Table( {55} ).Cell( {56} ).BackColor = ABM.COLOR_WHITE 
ABMShared.bas[102]  MyTheme.Table( {57} ).Cell( {58} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
ABMShared.bas[103]  
ABMShared.bas[104]  ' a toast theme 
ABMShared.bas[105]  MyTheme.AddToastTheme( {59} ) 
ABMShared.bas[106]  MyTheme.Toast( {60} ).Rounded = True 
ABMShared.bas[107]  MyTheme.Toast( {61} ).ActionForeColor = ABM.COLOR_ORANGE 
ABMShared.bas[108]  
ABMShared.bas[109]  ' another toast theme 
ABMShared.bas[110]  MyTheme.AddToastTheme( {62} ) 
ABMShared.bas[111]  MyTheme.Toast( {63} ).Rounded = True 
ABMShared.bas[112]  MyTheme.Toast( {64} ).ActionForeColor = ABM.COLOR_BLACK 
ABMShared.bas[113]  MyTheme.Toast( {65} ).BackColor = ABM.COLOR_RED 
ABMShared.bas[114]  
ABMShared.bas[115]  ' a container theme 
ABMShared.bas[116]  MyTheme.AddContainerTheme( {66} ) 
ABMShared.bas[117]  MyTheme.Container( {67} ).BackColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[118]  MyTheme.Container( {68} ).BackColorIntensity = ABM.INTENSITY_DARKEN2 
ABMShared.bas[119]  
ABMShared.bas[120]  MyTheme.AddContainerTheme( {69} ) 
ABMShared.bas[121]  MyTheme.Container( {70} ).BackColor = ABM.COLOR_LIGHTBLUE 
ABMShared.bas[122]  MyTheme.Container( {71} ).BackColorIntensity = ABM.INTENSITY_DARKEN3 
ABMShared.bas[123]  
ABMShared.bas[124]  MyTheme.AddChartTheme( {72} ) 
ABMShared.bas[125]  MyTheme.Chart( {73} ).ZDepth = ABM.ZDEPTH_2 
ABMShared.bas[126]  MyTheme.Chart( {74} ).BackColor = ABM.COLOR_WHITE 
ABMShared.bas[127]  MyTheme.Chart( {75} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN5 
ABMShared.bas[128] End Sub 
ABMShared.bas[129]  
ABMShared.bas[130] Sub BuildNavigationBar(page As ABMPage, Title As String, logo As String, ActiveTopReturnName As String, ActiveSideReturnName As String, ActiveSideSubReturnName As String) 
ABMShared.bas[131]  'page.SetFontStack( {76} ) ' this is the default now 
ABMShared.bas[132]  
ABMShared.bas[133]  ' old declaration: 
ABMShared.bas[134]  'page.NavigationBar.Initialize(page, {77} , Title, ABM.TEXTALIGN_LEFT, False, True, False,True, 330, 48, logo, ABM.COLLAPSE_ACCORDION, {78} ) 
ABMShared.bas[135]  
ABMShared.bas[136]  ' new declarations: 
ABMShared.bas[137]  
ABMShared.bas[138]  ' we have to make an ABMImage from our logo url 
ABMShared.bas[139]  Dim sbtopimg As ABMImage 
ABMShared.bas[140]  sbtopimg.Initialize(page, {79} , logo, 1) 
ABMShared.bas[141]  sbtopimg.SetFixedSize(236, 49) 
ABMShared.bas[142]  
ABMShared.bas[143]  ' our top component can be a more complex component than an image 
ABMShared.bas[144]  'Dim sbtopimg As ABMContainer = BuildSideBarTopComponent(page, {80} , {81} , {82} , {83} ) 
ABMShared.bas[145]  '' we have to adjust the 'logo' height 
ABMShared.bas[146]  'page.NavigationBar.SideBarLogoHeight = 245 
ABMShared.bas[147]  
ABMShared.bas[148]  
ABMShared.bas[149]  ' behaviour as the old declaration 
ABMShared.bas[150]  page.NavigationBar.Initialize(page, {84} , ABM.SIDEBAR_MANUAL_HIDEMEDIUMSMALL, Title, True, True, 330, 48, sbtopimg, ABM.COLLAPSE_ACCORDION, {85} ) 
ABMShared.bas[151]  
ABMShared.bas[152]  ' new behaviour, the sidebar is ALWAYS hidden 
ABMShared.bas[153]  ' page.NavigationBar.Initialize(page, {86} , ABM.SIDEBAR_MANUAL_ALWAYSHIDE, Title, True, True, 330, 48, sbtopimg, ABM.COLLAPSE_ACCORDION, {87} ) 
ABMShared.bas[154]  
ABMShared.bas[155]  ' new behaviour, the sidebar is created automatically from the top items if the device size is tablet or mobile 
ABMShared.bas[156]  ' note in this case, ALL AddSideBarItem(), AddSideBarSubItem(), AddSideBarDivider() and AddSideBarSubDivider() calls will be IGNORED, as the sidebar will be build dynamically from the top items! 
ABMShared.bas[157]  ' page.NavigationBar.Initialize(page, {88} , ABM.SIDEBAR_AUTO, Title, True, True, 330, 48, sbtopimg, ABM.COLLAPSE_ACCORDION, {89} ) 
ABMShared.bas[158]  page.NavigationBar.TopBarDropDownConstrainWidth = False 
ABMShared.bas[159]  page.NavigationBar.ActiveTopReturnName = ActiveTopReturnName 
ABMShared.bas[160]  page.NavigationBar.ActiveSideReturnName = ActiveSideReturnName 
ABMShared.bas[161]  page.NavigationBar.ActiveSideSubReturnName = ActiveSideSubReturnName 
ABMShared.bas[162]  
ABMShared.bas[163]  ' you must add at least ONE dummy item if you want to add items to the topbar in ConnectNaviagationBar 
ABMShared.bas[164]  page.NavigationBar.AddTopItem( {90} , {91} , {92} , {93} , False) 
ABMShared.bas[165]  
ABMShared.bas[166]  ' you must add at least ONE dummy item if you want to add items to the sidebar 
ABMShared.bas[167]  page.NavigationBar.AddSideBarItem( {94} , {95} , {96} , {97} ) 
ABMShared.bas[168]  
ABMShared.bas[169]  
ABMShared.bas[170] End Sub 
ABMShared.bas[171]  
ABMShared.bas[172] Sub ConnectNavigationBar(page As ABMPage) 
ABMShared.bas[173]  
ABMShared.bas[174]  ' Clear the dummies we created in BuildNavigationBar 
ABMShared.bas[175]  page.NavigationBar.Clear 
ABMShared.bas[176]  
ABMShared.bas[177] ' Dim comp As ABMComponent = page.NavigationBar.SideBarTopComponent 
ABMShared.bas[178] ' If comp <> Null Then 
ABMShared.bas[179] ' If comp.Type = ABM.UITYPE_ABMCONTAINER Then 
ABMShared.bas[180] ' Dim topItem As ABMContainer = ABM.CastABMComponent(comp) 
ABMShared.bas[181] ' Dim subContainer As ABMContainer = topItem.Component(comp.ID & {98} ) 
ABMShared.bas[182] ' Dim lbl1 As ABMLabel = subContainer.Component(comp.ID & {99} ) 
ABMShared.bas[183] ' lbl1.Text = {100} 
ABMShared.bas[184] ' topItem.Refresh 
ABMShared.bas[185] ' End If 
ABMShared.bas[186] ' End If 
ABMShared.bas[187]  
ABMShared.bas[188]  ' this is a special one: a full screen toggle icon. Will be handled automatically 
ABMShared.bas[189]  ' this is experimental, as it has side effects e.g. when you navigate to another page, it is switched of again 
ABMShared.bas[190]  'nb.AddTopFullScreenIcon 
ABMShared.bas[191]  
ABMShared.bas[192]  ' new behaviour: on each top item you can set if it should hide of not on a medium or small device. 
ABMShared.bas[193]  page.NavigationBar.AddTopItem( {101} , {102} , {103} , {104} , False) 
ABMShared.bas[194]  
ABMShared.bas[195] ' NOTE Extra Sidebar 
ABMShared.bas[196] ' Page_NavigationbarClicked() is NOT raised for an Extra sidebar! 
ABMShared.bas[197]  
ABMShared.bas[198] ' BEGIN Extra SideBar 
ABMShared.bas[199] ' Dim extraSideBar As ABMSideBar 
ABMShared.bas[200] ' extraSideBar.Initialize(page, {105} , 530, 48, 56, Null, ABM.COLLAPSE_ACCORDION, {106} ) 
ABMShared.bas[201] ' extraSideBar.AddSideBarComponent( {107} , BuildSideBarComponent(page, {108} , {109} , {110} , {111} )) 
ABMShared.bas[202] ' page.NavigationBar.AddTopItemWithSideBar( {112} , {113} , {114} , {115} , False, extraSideBar) 
ABMShared.bas[203] ' 
ABMShared.bas[204] ' Dim extraSideBar2 As ABMSideBar 
ABMShared.bas[205] ' extraSideBar2.Initialize(page, {116} , 330, 48,56, Null, ABM.COLLAPSE_ACCORDION, {117} ) 
ABMShared.bas[206] ' extraSideBar2.AddSideBarDivider( {118} ) 
ABMShared.bas[207] ' extraSideBar2.AddSideBarItem( {119} , {120} , {121} ) 
ABMShared.bas[208] ' 
ABMShared.bas[209] ' page.NavigationBar.AddTopItemWithSideBar( {122} , {123} , {124} , {125} , False, extraSideBar2) 
ABMShared.bas[210] ' 
ABMShared.bas[211] ' Dim extraSideBar3 As ABMSideBar 
ABMShared.bas[212] ' extraSideBar3.Initialize(page, {126} , 330, 48,56, Null, ABM.COLLAPSE_ACCORDION, {127} ) 
ABMShared.bas[213] ' extraSideBar3.AddSideBarDivider( {128} ) 
ABMShared.bas[214] ' extraSideBar3.AddSideBarItem( {129} , {130} , {131} ) 
ABMShared.bas[215] ' 
ABMShared.bas[216] ' page.NavigationBar.AddTopItemWithSideBar( {132} , {133} , {134} , {135} , False, extraSideBar3) 
ABMShared.bas[217] ' END Extra Sidebar 
ABMShared.bas[218]  
ABMShared.bas[219]  ' Example topbar items with dropdown 
ABMShared.bas[220] ' page.NavigationBar.AddTopItem( {136} , {137} , {138} , {139} , True) 
ABMShared.bas[221] ' page.NavigationBar.AddTopItem( {140} , {141} , {142} , {143} , True) 
ABMShared.bas[222] ' page.NavigationBar.AddTopSubItem( {144} , {145} , {146} , {147} , {148} ) 
ABMShared.bas[223] ' page.NavigationBar.AddTopSubItem( {149} , {150} , {151} , {152} , {153} ) 
ABMShared.bas[224] ' page.NavigationBar.AddTopSubItem( {154} , {155} , {156} , {157} , {158} ) 
ABMShared.bas[225] ' page.NavigationBar.AddTopItem( {159} , {160} , {161} , {162} ,True) 
ABMShared.bas[226]  
ABMShared.bas[227]  ' example of adding a component (container) to a side bar menu 
ABMShared.bas[228]  'page.NavigationBar.AddSideBarComponent( {163} , BuildSideBarComponent(page, {164} , {165} , {166} , {167} ), {168} ) 
ABMShared.bas[229]  'page.NavigationBar.AddSideBarComponent( {169} , BuildSideBarComponent(page, {170} , {171} , {172} , {173} ), {174} ) 
ABMShared.bas[230]  'page.NavigationBar.AddSideBarComponent( {175} , BuildSideBarComponent(page, {176} , {177} , {178} , {179} ), {180} ) 
ABMShared.bas[231]  'page.NavigationBar.AddSideBarComponent( {181} , BuildSideBarComponent(page, {182} , {183} , {184} , {185} ), {186} ) 
ABMShared.bas[232]  page.NavigationBar.AddSideBarDivider( {187} ) 
ABMShared.bas[233]  page.NavigationBar.AddSideBarItem( {188} , {189} , {190} , {191} ) 
ABMShared.bas[234]  page.NavigationBar.AddSideBarDivider( {192} ) 
ABMShared.bas[235]  page.NavigationBar.AddSideBarItem( {193} , {194} , {195} , {196} ) 
ABMShared.bas[236]  page.NavigationBar.AddSideBarDivider( {197} ) 
ABMShared.bas[237]  page.NavigationBar.AddSideBarItem( {198} , {199} , {200} , {201} ) 
ABMShared.bas[238]  page.NavigationBar.AddSideBarDivider( {202} ) 
ABMShared.bas[239]  page.NavigationBar.AddSideBarItem( {203} , {204} , {205} , {206} ) 
ABMShared.bas[240]  page.NavigationBar.AddSideBarDivider( {207} ) 
ABMShared.bas[241]  page.NavigationBar.AddSideBarItem( {208} , {209} , {210} , {211} ) 
ABMShared.bas[242]  page.NavigationBar.AddSideBarSubItem( {212} , {213} , {214} , {215} , {216} ) 
ABMShared.bas[243]  page.NavigationBar.AddSideBarSubItem( {217} , {218} , {219} , {220} , {221} ) 
ABMShared.bas[244]  page.NavigationBar.AddSideBarSubItem( {222} , {223} , {224} , {225} , {226} ) 
ABMShared.bas[245]  page.NavigationBar.AddSideBarSubItem( {227} , {228} , {229} , {230} , {231} ) 
ABMShared.bas[246]  page.NavigationBar.AddSideBarSubItem( {232} , {233} , {234} , {235} , {236} ) 
ABMShared.bas[247]  page.NavigationBar.AddSideBarSubItem( {237} , {238} , {239} , {240} , {241} ) 
ABMShared.bas[248]  page.NavigationBar.AddSideBarSubItem( {242} , {243} , {244} , {245} , {246} ) 
ABMShared.bas[249]  page.NavigationBar.AddSideBarSubItem( {247} , {248} , {249} , {250} , {251} ) 
ABMShared.bas[250]  page.NavigationBar.AddSideBarSubItem( {252} , {253} , {254} , {255} , {256} ) 
ABMShared.bas[251]  page.NavigationBar.AddSideBarSubItem( {257} , {258} , {259} , {260} , {261} ) 
ABMShared.bas[252]  page.NavigationBar.AddSideBarSubItem( {262} , {263} , {264} , {265} , {266} ) 
ABMShared.bas[253]  page.NavigationBar.AddSideBarSubItem( {267} , {268} , {269} , {270} , {271} ) 
ABMShared.bas[254]  page.NavigationBar.AddSideBarSubItem( {272} , {273} , {274} , {275} , {276} ) 
ABMShared.bas[255]  page.NavigationBar.AddSideBarSubItem( {277} , {278} , {279} , {280} , {281} ) 
ABMShared.bas[256]  page.NavigationBar.AddSideBarSubItem( {282} , {283} , {284} , {285} , {286} ) 
ABMShared.bas[257]  page.NavigationBar.AddSideBarSubItem( {287} , {288} , {289} , {290} , {291} ) 
ABMShared.bas[258]  page.NavigationBar.AddSideBarSubItem( {292} , {293} , {294} , {295} , {296} ) 
ABMShared.bas[259]  page.NavigationBar.AddSideBarSubItem( {297} , {298} , {299} , {300} , {301} ) 
ABMShared.bas[260]  page.NavigationBar.AddSideBarSubItem( {302} , {303} , {304} , {305} , {306} ) 
ABMShared.bas[261]  page.NavigationBar.AddSideBarSubItem( {307} , {308} , {309} , {310} , {311} ) 
ABMShared.bas[262]  page.NavigationBar.AddSideBarSubItem( {312} , {313} , {314} , {315} , {316} ) 
ABMShared.bas[263]  page.NavigationBar.AddSideBarSubItem( {317} , {318} , {319} , {320} , {321} ) 
ABMShared.bas[264]  page.NavigationBar.AddSideBarSubItem( {322} , {323} , {324} , {325} , {326} ) 
ABMShared.bas[265]  page.NavigationBar.AddSideBarSubItem( {327} , {328} , {329} , {330} , {331} ) 
ABMShared.bas[266]  page.NavigationBar.AddSideBarSubItem( {332} , {333} , {334} , {335} , {336} ) 
ABMShared.bas[267]  page.NavigationBar.AddSideBarSubItem( {337} , {338} , {339} , {340} , {341} ) 
ABMShared.bas[268]  page.NavigationBar.AddSideBarSubItem( {342} , {343} , {344} , {345} , {346} ) 
ABMShared.bas[269]  page.NavigationBar.AddSideBarSubItem( {347} , {348} , {349} , {350} , {351} ) 
ABMShared.bas[270]  page.NavigationBar.AddSideBarSubItem( {352} , {353} , {354} , {355} , {356} ) 
ABMShared.bas[271]  page.NavigationBar.AddSideBarSubItem( {357} , {358} , {359} , {360} , {361} ) 
ABMShared.bas[272]  page.NavigationBar.AddSideBarSubItem( {362} , {363} , {364} , {365} , {366} ) 
ABMShared.bas[273]  page.NavigationBar.AddSideBarSubItem( {367} , {368} , {369} , {370} , {371} ) 
ABMShared.bas[274]  page.NavigationBar.AddSideBarSubItem( {372} , {373} , {374} , {375} , {376} ) 
ABMShared.bas[275]  page.NavigationBar.AddSideBarSubItem( {377} , {378} , {379} , {380} , {381} ) 
ABMShared.bas[276]  page.NavigationBar.AddSideBarSubItem( {382} , {383} , {384} , {385} , {386} ) 
ABMShared.bas[277]  page.NavigationBar.AddSideBarSubItem( {387} , {388} , {389} , {390} , {391} ) 
ABMShared.bas[278]  page.NavigationBar.AddSideBarSubItem( {392} , {393} , {394} , {395} , {396} ) 
ABMShared.bas[279]  page.NavigationBar.AddSideBarSubItem( {397} , {398} , {399} , {400} , {401} ) 
ABMShared.bas[280]  page.NavigationBar.AddSideBarSubItem( {402} , {403} , {404} , {405} , {406} ) 
ABMShared.bas[281]  page.NavigationBar.AddSideBarSubItem( {407} , {408} , {409} , {410} , {411} ) 
ABMShared.bas[282]  page.NavigationBar.AddSideBarSubItem( {412} , {413} , {414} , {415} , {416} ) 
ABMShared.bas[283]  page.NavigationBar.AddSideBarSubItem( {417} , {418} , {419} , {420} , {421} ) 
ABMShared.bas[284]  page.NavigationBar.AddSideBarSubItem( {422} , {423} , {424} , {425} , {426} ) 
ABMShared.bas[285]  page.NavigationBar.AddSideBarSubItem( {427} , {428} , {429} , {430} , {431} ) 
ABMShared.bas[286]  page.NavigationBar.AddSideBarSubItem( {432} , {433} , {434} , {435} , {436} ) 
ABMShared.bas[287]  'page.NavigationBar.AddSideBarSubItem( {437} , {438} , {439} , {440} , {441} ) 
ABMShared.bas[288]  page.NavigationBar.AddSideBarDivider( {442} ) 
ABMShared.bas[289]  page.NavigationBar.AddSideBarItem( {443} , {444} , {445} , {446} ) 
ABMShared.bas[290]  page.NavigationBar.AddSideBarSubItem( {447} , {448} , {449} , {450} , {451} ) 
ABMShared.bas[291]  page.NavigationBar.AddSideBarSubItem( {452} , {453} , {454} , {455} , {456} ) 
ABMShared.bas[292]  page.NavigationBar.AddSideBarSubItem( {457} , {458} , {459} , {460} , {461} ) 
ABMShared.bas[293]  page.NavigationBar.AddSideBarSubItem( {462} , {463} , {464} , {465} , {466} ) 
ABMShared.bas[294]  page.NavigationBar.AddSideBarSubItem( {467} , {468} , {469} , {470} , {471} ) 
ABMShared.bas[295]  page.NavigationBar.AddSideBarSubItem( {472} , {473} , {474} , {475} , {476} ) 
ABMShared.bas[296]  page.NavigationBar.AddSideBarSubItem( {477} , {478} , {479} , {480} , {481} ) 
ABMShared.bas[297]  page.NavigationBar.AddSideBarSubItem( {482} , {483} , {484} , {485} , {486} ) 
ABMShared.bas[298]  page.NavigationBar.AddSideBarSubItem( {487} , {488} , {489} , {490} , {491} ) 
ABMShared.bas[299]  page.NavigationBar.AddSideBarDivider( {492} ) 
ABMShared.bas[300]  page.NavigationBar.AddSideBarItem( {493} , {494} , {495} , {496} ) 
ABMShared.bas[301]  page.NavigationBar.AddSideBarDivider( {497} ) 
ABMShared.bas[302]  page.NavigationBar.AddSideBarItem( {498} , {499} , {500} , {501} ) 
ABMShared.bas[303]  page.NavigationBar.AddSideBarSubItem( {502} , {503} , {504} , {505} , {506} ) 
ABMShared.bas[304]  page.NavigationBar.AddSideBarSubItem( {507} , {508} , {509} , {510} , {511} ) 
ABMShared.bas[305]  page.NavigationBar.AddSideBarDivider( {512} ) 
ABMShared.bas[306]  page.NavigationBar.AddSideBarItem( {513} , {514} , {515} , {516} ) 
ABMShared.bas[307]  page.NavigationBar.AddSideBarSubItem( {517} , {518} , {519} , {520} , {521} ) 
ABMShared.bas[308]  page.NavigationBar.AddSideBarDivider( {522} ) 
ABMShared.bas[309]  
ABMShared.bas[310]  page.NavigationBar.Refresh ' IMPORTANT 
ABMShared.bas[311] End Sub 
ABMShared.bas[312]  
ABMShared.bas[313] Sub BuildSideBarComponent(page As ABMPage, id As String, image As String, Title As String, Subtitle As String) As ABMContainer 'ignore 
ABMShared.bas[314]  Dim ItemCont As ABMContainer 
ABMShared.bas[315]  ItemCont.Initialize(page, id, {523} ) 
ABMShared.bas[316]  ItemCont.AddRowsM(1,False,0,0, {524} ).AddCellsOSMP(1,0,0,0,3,3,3,4,0,0,0, {525} ).AddCellsOSMP(1,0,0,0,9,9,9,4,0,0,0, {526} ) 
ABMShared.bas[317]  ItemCont.AddRowsM(1,False,0,0, {527} ).AddCells12(1, {528} ) 
ABMShared.bas[318]  ItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[319]  
ABMShared.bas[320]  Dim SubItemCont As ABMContainer 
ABMShared.bas[321]  SubItemCont.Initialize(page, id & {529} , {530} ) 
ABMShared.bas[322]  SubItemCont.AddRowsM(1,False, 0,0, {531} ).AddCells12MP(1,-6,0,0,0, {532} ).AddCells12(1, {533} ) 
ABMShared.bas[323]  SubItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[324]  
ABMShared.bas[325]  ItemCont.Cell(1,2).AddComponent(SubItemCont) 
ABMShared.bas[326]  
ABMShared.bas[327]  Dim img As ABMImage 
ABMShared.bas[328]  img.Initialize(page, id & {534} , image, 1) 
ABMShared.bas[329]  img.SetFixedSize(48,48) 
ABMShared.bas[330]  img.IsCircular = True 
ABMShared.bas[331]  img.IsResponsive = True 
ABMShared.bas[332]  
ABMShared.bas[333]  ItemCont.Cell(1,1).AddComponent(img) 
ABMShared.bas[334]  
ABMShared.bas[335]  Dim lbl1 As ABMLabel 
ABMShared.bas[336]  lbl1.Initialize(page, id & {535} , Title, ABM.SIZE_H6, False, {536} ) 
ABMShared.bas[337]  lbl1.VerticalAlign = True 
ABMShared.bas[338]  
ABMShared.bas[339]  SubItemCont.Cell(1,1).AddComponent(lbl1) 
ABMShared.bas[340]  
ABMShared.bas[341]  Dim lbl2 As ABMLabel 
ABMShared.bas[342]  lbl2.Initialize(page, id & {537} , Subtitle, ABM.SIZE_H6, False, {538} ) 
ABMShared.bas[343]  lbl2.VerticalAlign = True 
ABMShared.bas[344]  
ABMShared.bas[345]  SubItemCont.Cell(1,2).AddComponent(lbl2) 
ABMShared.bas[346]  
ABMShared.bas[347]  Dim editor As ABMEditor 
ABMShared.bas[348]  editor.Initialize(page, {539} , True, True, {540} ) 
ABMShared.bas[349]  ItemCont.Cell(2,1).AddComponent(editor) 
ABMShared.bas[350]  
ABMShared.bas[351]  Return ItemCont 
ABMShared.bas[352] End Sub 
ABMShared.bas[353]  
ABMShared.bas[354] Sub BuildSideBarTopComponent(page As ABMPage, id As String, image As String, Title As String, Subtitle As String) As ABMContainer 'ignore 
ABMShared.bas[355]  ' important! 
ABMShared.bas[356]  'page.NeedsChart = true 
ABMShared.bas[357]  
ABMShared.bas[358]  Dim ItemCont As ABMContainer 
ABMShared.bas[359]  ItemCont.Initialize(page, id, {541} ) 
ABMShared.bas[360]  ItemCont.AddRowsM(1,False,0,0, {542} ).AddCellsOSMP(1,0,0,0,3,3,3,4,0,0,0, {543} ).AddCellsOSMP(1,0,0,0,9,9,9,4,0,0,0, {544} ) 
ABMShared.bas[361]  ItemCont.AddRowsM(1,False,0,0, {545} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {546} ) 
ABMShared.bas[362]  ItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[363]  
ABMShared.bas[364]  Dim SubItemCont As ABMContainer 
ABMShared.bas[365]  SubItemCont.Initialize(page, id & {547} , {548} ) 
ABMShared.bas[366]  SubItemCont.AddRowsM(1,False, 0,0, {549} ).AddCells12MP(1,-6,0,0,0, {550} ).AddCells12(1, {551} ) 
ABMShared.bas[367]  SubItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[368]  
ABMShared.bas[369]  ItemCont.Cell(1,2).AddComponent(SubItemCont) 
ABMShared.bas[370]  
ABMShared.bas[371]  Dim img As ABMImage 
ABMShared.bas[372]  img.Initialize(page, id & {552} , image, 1) 
ABMShared.bas[373]  img.SetFixedSize(48,48) 
ABMShared.bas[374]  img.IsCircular = True 
ABMShared.bas[375]  img.IsResponsive = True 
ABMShared.bas[376]  
ABMShared.bas[377]  ItemCont.Cell(1,1).AddComponent(img) 
ABMShared.bas[378]  
ABMShared.bas[379]  Dim lbl1 As ABMLabel 
ABMShared.bas[380]  lbl1.Initialize(page, id & {553} , Title, ABM.SIZE_H6, False, {554} ) 
ABMShared.bas[381]  lbl1.VerticalAlign = True 
ABMShared.bas[382]  
ABMShared.bas[383]  SubItemCont.Cell(1,1).AddComponent(lbl1) 
ABMShared.bas[384]  
ABMShared.bas[385]  Dim lbl2 As ABMLabel 
ABMShared.bas[386]  lbl2.Initialize(page, id & {555} , Subtitle, ABM.SIZE_H6, False, {556} ) 
ABMShared.bas[387]  lbl2.VerticalAlign = True 
ABMShared.bas[388]  
ABMShared.bas[389]  SubItemCont.Cell(1,2).AddComponent(lbl2) 
ABMShared.bas[390]  
ABMShared.bas[391]  ' create a bar chart 
ABMShared.bas[392]  Dim chart3 As ABMChart 
ABMShared.bas[393]  chart3.Initialize(page, {557} , ABM.CHART_TYPEBAR, ABM.CHART_RATIO_GOLDENSECTION, {558} ) 
ABMShared.bas[394]  ' set some options 
ABMShared.bas[395]  chart3.OptionsBar.AxisYOnlyInteger=True 
ABMShared.bas[396]  chart3.OptionsBar.ChartPaddingRight=60 
ABMShared.bas[397]  
ABMShared.bas[398]  ' add the labels 
ABMShared.bas[399]  chart3.AddLabels(Array As String( {559} , {560} , {561} , {562} , {563} , {564} , {565} )) 
ABMShared.bas[400]  
ABMShared.bas[401]  ' add some series 
ABMShared.bas[402]  Dim Serie3A As ABMChartSerie 
ABMShared.bas[403]  Serie3A.InitializeForBar 
ABMShared.bas[404]  Serie3A.SetValues(Array As Int(30,50,70,80,100,140,170)) 
ABMShared.bas[405]  chart3.AddSerie(Serie3A) 
ABMShared.bas[406]  
ABMShared.bas[407]  Dim Serie3B As ABMChartSerie 
ABMShared.bas[408]  Serie3B.InitializeForBar 
ABMShared.bas[409]  Serie3B.SetValues(Array As Int(100,120,180,150,190,100,70)) 
ABMShared.bas[410]  chart3.AddSerie(Serie3B) 
ABMShared.bas[411]  
ABMShared.bas[412]  ' add the chart 
ABMShared.bas[413]  ItemCont.Cell(2,1).AddComponent(chart3) 
ABMShared.bas[414]  
ABMShared.bas[415]  Return ItemCont 
ABMShared.bas[416] End Sub 
ABMShared.bas[417]  
ABMShared.bas[418] Sub LogOff(page As ABMPage) 
ABMShared.bas[419]  Dim Network As String = page.ws.Session.GetAttribute( {566} ) 
ABMShared.bas[420]  Dim Name As String = page.ws.Session.GetAttribute( {567} ) 
ABMShared.bas[421]  Select Case Network 
ABMShared.bas[422]  Case {568} 
ABMShared.bas[423]  ' do whatever you have to do to log off your user 
ABMShared.bas[424]  
ABMShared.bas[425]  page.ws.Session.SetAttribute( {569} , {570} ) 
ABMShared.bas[426]  page.ws.Session.SetAttribute( {571} , {572} ) 
ABMShared.bas[427]  page.ws.Session.SetAttribute( {573} , {574} ) 
ABMShared.bas[428]  NavigateToPage(page.ws, page.GetPageID, {575} ) 
ABMShared.bas[429]  Case ABM.SOCIALOAUTH_FACEBOOK 
ABMShared.bas[430]  ' the event SignedOffSocialNetwork will be raised on the page, do the rest there 
ABMShared.bas[431]  page.SignOffSocialNetwork(Network, {576} , Name) 
ABMShared.bas[432]  End Select 
ABMShared.bas[433] End Sub 
ABMShared.bas[434]  
ABMShared.bas[435] Sub Date2String(date As Long, withTime As Boolean) As String 
ABMShared.bas[436]  Dim OrigFormat As String=DateTime.DateFormat 
ABMShared.bas[437]  If withTime Then 
ABMShared.bas[438]  DateTime.DateFormat= {577} 
ABMShared.bas[439]  Else 
ABMShared.bas[440]  DateTime.DateFormat= {578} 
ABMShared.bas[441]  End If 
ABMShared.bas[442]  Dim MyDate As String =DateTime.Date(date) 
ABMShared.bas[443]  DateTime.DateFormat=OrigFormat 
ABMShared.bas[444]  Return MyDate 
ABMShared.bas[445] End Sub 
ABMShared.bas[446]  
ABMShared.bas[447] Sub String2Date(date As String) As Long 
ABMShared.bas[448]  Dim lng As Long 
ABMShared.bas[449]  Dim OrigFormat As String=DateTime.DateFormat 
ABMShared.bas[450]  If date.Length > 10 Then 
ABMShared.bas[451]  DateTime.DateFormat = {579} 
ABMShared.bas[452]  DateTime.DateFormat = {580} 
ABMShared.bas[453]  Dim d As String = date.SubString2(0,11) 
ABMShared.bas[454]  Dim t As String = date.SubString(12) 
ABMShared.bas[455]  lng = DateTime.DateTimeParse(d,t) 
ABMShared.bas[456]  Else 
ABMShared.bas[457]  DateTime.DateFormat = {581} 
ABMShared.bas[458]  lng = DateTime.Dateparse(date) 
ABMShared.bas[459]  End If 
ABMShared.bas[460]  DateTime.DateFormat=OrigFormat 
ABMShared.bas[461]  Return lng 
ABMShared.bas[462] End Sub 
ABMShared.bas[463]  
ABMShared.bas[464] Sub Mid(Text As String, Start As Int, Length As Int) As String 
ABMShared.bas[465]  Return Text.SubString2(Start-1,Start+Length-1) 
ABMShared.bas[466] End Sub 
ABMShared.bas[467]  
ABMShared.bas[468] Sub Mid2(Text As String, Start As Int) As String 
ABMShared.bas[469]  Return Text.SubString(Start-1) 
ABMShared.bas[470] End Sub 
ABMShared.bas[471]  
ABMShared.bas[472] Sub BuildFooter(page As ABMPage) 
ABMShared.bas[473]  page.Footer.AddRows(1, True, {582} ).AddCellsOS(2,0,0,0,6,6,6, {583} ) 
ABMShared.bas[474]  page.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[475]  
ABMShared.bas[476]  page.Footer.UseTheme( {584} ) 
ABMShared.bas[477] End Sub 
ABMShared.bas[478]  
ABMShared.bas[479] Sub ConnectFooter(page As ABMPage) 
ABMShared.bas[480]  Dim lbl1 As ABMLabel 
ABMShared.bas[481]  lbl1.Initialize(page, {585} , {586} ,ABM.SIZE_PARAGRAPH, False, {587} ) 
ABMShared.bas[482]  page.Footer.Cell(1,1).AddComponent(lbl1) 
ABMShared.bas[483]  
ABMShared.bas[484]  Dim lbl2 As ABMLabel 
ABMShared.bas[485]  lbl2.Initialize(page, {588} , {589} ,ABM.SIZE_PARAGRAPH, False, {590} ) 
ABMShared.bas[486]  page.Footer.Cell(1,2).AddComponent(lbl2) 
ABMShared.bas[487] End Sub 
ABMShared.bas[488]  
ABMShared.bas[489] Sub BuildFooterFixed(page As ABMPage) 
ABMShared.bas[490]  page.isFixedFooter= True 
ABMShared.bas[491]  ' because we have a fixed footer at the bottom, we have to adjust the padding of the body in pixels 
ABMShared.bas[492]  page.PaddingBottom = 200 
ABMShared.bas[493]  
ABMShared.bas[494]  page.Footer.AddRows(1, True, {591} ).AddCellsOS(2,0,0,0,6,6,6, {592} ) 
ABMShared.bas[495]  page.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMShared.bas[496]  
ABMShared.bas[497]  page.Footer.UseTheme( {593} ) 
ABMShared.bas[498] End Sub 
ABMShared.bas[499]  
ABMShared.bas[500] Sub ConnectFooterFixed(page As ABMPage) 
ABMShared.bas[501]  Dim lbl1 As ABMLabel 
ABMShared.bas[502]  lbl1.Initialize(page, {594} , {595} ,ABM.SIZE_PARAGRAPH, False, {596} ) 
ABMShared.bas[503]  page.Footer.Cell(1,1).AddComponent(lbl1) 
ABMShared.bas[504]  
ABMShared.bas[505]  Dim lbl2 As ABMLabel 
ABMShared.bas[506]  lbl2.Initialize(page, {597} , {598} ,ABM.SIZE_PARAGRAPH, False, {599} ) 
ABMShared.bas[507]  page.Footer.Cell(1,2).AddComponent(lbl2) 
ABMShared.bas[508] End Sub 
ABMShared.bas[509]  
ABMShared.bas[510] public Sub BuildParamTable(page As ABMPage, id As String, Headers As List, Names As List, Descriptions As List) As ABMTable 
ABMShared.bas[511]  Dim tbl As ABMTable 
ABMShared.bas[512]  tbl.Initialize(page, id, False, False, False, {600} ) 
ABMShared.bas[513]  tbl.IgnoreFormattingCodes = True ' build in to ignore formatting tags 
ABMShared.bas[514]  Dim themes As List 
ABMShared.bas[515]  
ABMShared.bas[516]  themes.Initialize2(Array As String( {601} , {602} )) 
ABMShared.bas[517]  tbl.SetHeaders(Headers) 
ABMShared.bas[518]  tbl.SetHeaderThemes(themes) 
ABMShared.bas[519]  
ABMShared.bas[520]  themes.Initialize2(Array As String( {603} , {604} )) 
ABMShared.bas[521]  
ABMShared.bas[522]  For i = 0 To Names.Size - 1 
ABMShared.bas[523]  Dim Values As List 
ABMShared.bas[524]  Values.Initialize 
ABMShared.bas[525]  Values.Add( Names.Get(i)) 
ABMShared.bas[526]  Values.Add( Descriptions.Get(i)) 
ABMShared.bas[527]  tbl.AddRow( {605} & i, Values) 
ABMShared.bas[528]  tbl.SetRowThemes(themes) 
ABMShared.bas[529]  Next 
ABMShared.bas[530]  Return tbl 
ABMShared.bas[531] End Sub 
ABMShared.bas[532]  
ABMShared.bas[533] public Sub BuildParamTable2(page As ABMPage, id As String, Headers As List, Names As List, Descriptions As List) As ABMTable 
ABMShared.bas[534]  Dim tbl As ABMTable 
ABMShared.bas[535]  tbl.Initialize(page, id, False, False, False, {606} ) 
ABMShared.bas[536]  Dim themes As List 
ABMShared.bas[537]  
ABMShared.bas[538]  themes.Initialize2(Array As String( {607} , {608} )) 
ABMShared.bas[539]  tbl.SetHeaders(Headers) 
ABMShared.bas[540]  tbl.SetHeaderThemes(themes) 
ABMShared.bas[541]  
ABMShared.bas[542]  themes.Initialize2(Array As String( {609} , {610} )) 
ABMShared.bas[543]  
ABMShared.bas[544]  For i = 0 To Names.Size - 1 
ABMShared.bas[545]  Dim Values As List 
ABMShared.bas[546]  Values.Initialize 
ABMShared.bas[547]  Values.Add( Names.Get(i)) 
ABMShared.bas[548]  Values.Add( Descriptions.Get(i)) 
ABMShared.bas[549]  tbl.AddRow( {611} & i, Values) 
ABMShared.bas[550]  tbl.SetRowThemes(themes) 
ABMShared.bas[551]  Next 
ABMShared.bas[552]  Return tbl 
ABMShared.bas[553] End Sub 
ABMShared.bas[554]  
ABMShared.bas[555] public Sub BuildHeader(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[556]  Dim hdr As ABMLabel 
ABMShared.bas[557]  hdr.Initialize(page, id, Text, ABM.SIZE_H5, False, {612} ) 
ABMShared.bas[558]  Return hdr 
ABMShared.bas[559] End Sub 
ABMShared.bas[560]  
ABMShared.bas[561] public Sub BuildSubHeader(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[562]  Dim shdr As ABMLabel 
ABMShared.bas[563]  shdr.Initialize(page, id, Text, ABM.SIZE_H5, False, {613} ) 
ABMShared.bas[564]  Return shdr 
ABMShared.bas[565] End Sub 
ABMShared.bas[566]  
ABMShared.bas[567] public Sub BuildSubHeader2(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[568]  Dim shdr As ABMLabel 
ABMShared.bas[569]  shdr.Initialize(page, id, Text, ABM.SIZE_H6, False, {614} ) 
ABMShared.bas[570]  Return shdr 
ABMShared.bas[571] End Sub 
ABMShared.bas[572]  
ABMShared.bas[573] public Sub BuildParagraph(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[574]  Dim lbl As ABMLabel 
ABMShared.bas[575]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {615} ) 
ABMShared.bas[576]  Return lbl 
ABMShared.bas[577] End Sub 
ABMShared.bas[578]  
ABMShared.bas[579] public Sub BuildParagraphBQ(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[580]  Dim lbl As ABMLabel 
ABMShared.bas[581]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {616} ) 
ABMShared.bas[582]  lbl.IsBlockQuote = True 
ABMShared.bas[583]  Return lbl 
ABMShared.bas[584] End Sub 
ABMShared.bas[585]  
ABMShared.bas[586] public Sub BuildSpan(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[587]  Dim lbl As ABMLabel 
ABMShared.bas[588]  lbl.Initialize(page, id, Text , ABM.SIZE_SPAN, False, {617} ) 
ABMShared.bas[589]  Return lbl 
ABMShared.bas[590] End Sub 
ABMShared.bas[591]  
ABMShared.bas[592] public Sub BuildCodeBlock(page As ABMPage, id As String, code As StringBuilder) As ABMCodeLabel 
ABMShared.bas[593]  Dim codelab As ABMCodeLabel 
ABMShared.bas[594]  codelab.Initialize(page, id, code.ToString, {618} ) 
ABMShared.bas[595]  Return codelab 
ABMShared.bas[596] End Sub 
ABMShared.bas[597]  
ABMShared.bas[598] public Sub BuildCodeBlockFromSmartString(page As ABMPage, id As String, code As String) As ABMCodeLabel 
ABMShared.bas[599]  Dim codelab As ABMCodeLabel 
ABMShared.bas[600]  codelab.Initialize(page, id, code, {619} ) 
ABMShared.bas[601]  Return codelab 
ABMShared.bas[602] End Sub 
ABMShared.bas[603]  
ABMShared.bas[604] public Sub BuildImage(page As ABMPage, id As String, image As String, opacity As Double, Caption As String) As ABMImage 
ABMShared.bas[605]  Dim img As ABMImage 
ABMShared.bas[606]  img.Initialize(page, id, image,opacity) 
ABMShared.bas[607]  img.IsMaterialBoxed = True 
ABMShared.bas[608]  img.IsResponsive = True 
ABMShared.bas[609]  img.Caption = Caption 
ABMShared.bas[610]  Return img 
ABMShared.bas[611] End Sub 
ABMShared.bas[612]  
ABMShared.bas[613] public Sub BuildIconBlock(page As ABMPage, id As String, iconName As String) As ABMContainer 
ABMShared.bas[614]  Dim cont As ABMContainer 
ABMShared.bas[615]  cont.Initialize(page, id, {620} ) 
ABMShared.bas[616]  cont.AddRows(2,False, {621} ).AddCells12(1, {622} ) 
ABMShared.bas[617]  cont.BuildGrid ' IMPORTANT 
ABMShared.bas[618]  
ABMShared.bas[619]  ' to help see how the grids looks like in the log 
ABMShared.bas[620]  ' cont.DebugPrintGrid 
ABMShared.bas[621]  
ABMShared.bas[622]  Dim lblicon As ABMLabel 
ABMShared.bas[623]  lblicon.Initialize(page, id & {623} , {624} , ABM.SIZE_H5, False, {625} ) 
ABMShared.bas[624]  lblicon.IconName = iconName 
ABMShared.bas[625]  lblicon.IconSize = ABM.ICONSIZE_MEDIUM 
ABMShared.bas[626]  cont.Cell(1,1).AddComponent(lblicon) 
ABMShared.bas[627]  
ABMShared.bas[628]  Dim lbliconName As ABMLabel 
ABMShared.bas[629]  lbliconName.Initialize(page, id & {626} , iconName, ABM.SIZE_SPAN, False, {627} ) 
ABMShared.bas[630]  cont.Cell(2,1).AddComponent(lbliconName) 
ABMShared.bas[631]  
ABMShared.bas[632]  Return cont 
ABMShared.bas[633] End Sub 
Analysing: ABMApplication.bas
ABMApplication.bas[0] ﻿Type=Class 
ABMApplication.bas[0] Version=4.7 
ABMApplication.bas[0] ModulesStructureVersion=1 
ABMApplication.bas[0] B4J=true 
ABMApplication.bas[0] @EndOfDesignText@ 
ABMApplication.bas[1] 'Main application 
ABMApplication.bas[2] Sub Class_Globals 
ABMApplication.bas[3]  ' change to match you app 
ABMApplication.bas[4]  Private InitialPage As String = {0} 
ABMApplication.bas[5]  ' other variables needed 
ABMApplication.bas[6]  Private AppPage As ABMPage 
ABMApplication.bas[7]  Private theme As ABMTheme 
ABMApplication.bas[8]  Private ws As WebSocket 'ignore 
ABMApplication.bas[9]  Private ABM As ABMaterial 'ignore 
ABMApplication.bas[10]  Private Pages As List 
ABMApplication.bas[11]  Private PageNeedsUpload As List 
ABMApplication.bas[12]  
ABMApplication.bas[13]  Private ABMPageId As String 
ABMApplication.bas[14] End Sub 
ABMApplication.bas[15]  
ABMApplication.bas[16] Public Sub Initialize 
ABMApplication.bas[17]  Pages.Initialize 
ABMApplication.bas[18]  PageNeedsUpload.Initialize 
ABMApplication.bas[19]  ' add your icons 
ABMApplication.bas[20]  ABM.AddAppleTouchIcon( {1} , {2} ) 
ABMApplication.bas[21]  ABM.AddMSTileIcon( {3} , {4} ) 
ABMApplication.bas[22]  ABM.AddFavorityIcon( {5} , {6} ) 
ABMApplication.bas[23]  ABM.AppVersion = ABMShared.AppVersion 
ABMApplication.bas[24]  ABM.AppPublishedStartURL = ABMShared.AppPublishedStartURL 
ABMApplication.bas[25]  
ABMApplication.bas[26]  #If RELEASE 
ABMApplication.bas[27]  ABM.PreloadAllJavascriptAndCSSFiles=True ' NEW 
ABMApplication.bas[28]  ABM.ActivateGZip( {7} , 1000) ' NEW 
ABMApplication.bas[29]  ABM.AppDefaultPageCSSInline=True ' NEW 
ABMApplication.bas[30]  ABM.AppDefaultPageJSInline=True ' NEW 
ABMApplication.bas[31]  
ABMApplication.bas[32]  Dim folders As List ' NEW 
ABMApplication.bas[33]  folders.Initialize 
ABMApplication.bas[34]  folders.Add(File.DirApp & {8} & ABMShared.AppName & {9} ) 
ABMApplication.bas[35]  ABM.ActivatePNGOptimize( {10} , folders, False , 9, False, True) 
ABMApplication.bas[36]  #End If 
ABMApplication.bas[37]  
ABMApplication.bas[38]  BuildPage 
ABMApplication.bas[39] End Sub 
ABMApplication.bas[40]  
ABMApplication.bas[41] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMApplication.bas[42]  Log( {11} ) 
ABMApplication.bas[43]  ws = WebSocket1 
ABMApplication.bas[44]  ABMPageId = ABM.GetPageID(AppPage, ABMShared.AppName,ws) 
ABMApplication.bas[45]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 'ignore 
ABMApplication.bas[46]  
ABMApplication.bas[47]  AppPage.Prepare 
ABMApplication.bas[48]  
ABMApplication.bas[49]  'AppPage.CookieSet( {12} , {13} , {14} ) ' set the cookie 
ABMApplication.bas[50]  'Log(AppPage.CookieGet( {15} )) ' get the cookie 
ABMApplication.bas[51]  'AppPage.CookieExpire( {16} , {17} ) ' remove the cookie 
ABMApplication.bas[52]  
ABMApplication.bas[53]  ' NEW 1.09 has to be done on every page 
ABMApplication.bas[54]  AppPage.SetAcceptedLanguages(Array As String( {18} , {19} , {20} , {21} ), {22} ) 
ABMApplication.bas[55]  Dim ActiveFoundLanguage As String = AppPage.DetectLanguage(ws.UpgradeRequest.GetHeader( {23} )) 
ABMApplication.bas[56]  Log( {24} & ActiveFoundLanguage) 
ABMApplication.bas[57]  ' for the login use the users browser language 
ABMApplication.bas[58]  AppPage.SetActiveLanguage(ActiveFoundLanguage, {25} ) 
ABMApplication.bas[59]  
ABMApplication.bas[60]  ' NEW 
ABMApplication.bas[61]  ConnectPage 
ABMApplication.bas[62]  
ABMApplication.bas[63]  ' navigate to the first page 
ABMApplication.bas[64]  If ABMShared.NeedsAuthorization Then 
ABMApplication.bas[65]  
ABMApplication.bas[66]  ' if you start the app as: http://localhost:51042/demo/index.html?login=demo&pwd=demo 
ABMApplication.bas[67]  Dim params As Map = ws.UpgradeRequest.ParameterMap 
ABMApplication.bas[68]  Dim login(0), pwd(0) As String 
ABMApplication.bas[69]  If params.IsInitialized Then 
ABMApplication.bas[70]  login = params.GetDefault( {26} , Array As String( {27} )) 
ABMApplication.bas[71]  pwd = params.GetDefault( {28} , Array As String( {29} )) 
ABMApplication.bas[72]  End If 
ABMApplication.bas[73]  Log(login(0) & {30} & pwd(0)) 
ABMApplication.bas[74] ' If login(0) = {31} And pwd(0) = {32} Then 
ABMApplication.bas[75] ' ws.Session.SetAttribute( {33} , {34} ) 
ABMApplication.bas[76] ' ws.Session.SetAttribute( {35} , {36} ) 
ABMApplication.bas[77] ' ws.Session.SetAttribute( {37} , {38} ) 
ABMApplication.bas[78] ' End If 
ABMApplication.bas[79]  
ABMApplication.bas[80]  If ws.Session.GetAttribute2( {39} , {40} ) = {41} Then 
ABMApplication.bas[81]  AppPage.ShowModalSheet( {42} ) 
ABMApplication.bas[82]  Return 
ABMApplication.bas[83]  End If 
ABMApplication.bas[84]  End If 
ABMApplication.bas[85]  
ABMApplication.bas[86]  ' NEW 1.09 
ABMApplication.bas[87]  ' but you can of course overrule this (e.g. because the user can choose) 
ABMApplication.bas[88]  AppPage.SetActiveLanguage( {43} , {44} ) 
ABMApplication.bas[89]  
ABMApplication.bas[90]  ABMShared.NavigateToPage(ws, ABMPageId, {45} & InitialPage) 
ABMApplication.bas[91] End Sub 
ABMApplication.bas[92]  
ABMApplication.bas[93] Private Sub WebSocket_Disconnected 
ABMApplication.bas[94]  Log( {46} ) 
ABMApplication.bas[95] End Sub 
ABMApplication.bas[96]  
ABMApplication.bas[97] Sub Page_ParseEvent(Params As Map) 
ABMApplication.bas[98]  Dim eventName As String = Params.Get( {47} ) 
ABMApplication.bas[99]  Dim eventParams() As String = Regex.Split( {48} ,Params.Get( {49} )) 
ABMApplication.bas[100]  If eventName = {50} Then 
ABMApplication.bas[101]  Log( {51} ) 
ABMApplication.bas[102]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMApplication.bas[103]  Return 
ABMApplication.bas[104]  End If 
ABMApplication.bas[105]  If SubExists(Me, eventName) Then 
ABMApplication.bas[106]  Params.Remove( {52} ) 
ABMApplication.bas[107]  Params.Remove( {53} ) 
ABMApplication.bas[108]  Select Case Params.Size 
ABMApplication.bas[109]  Case 0 
ABMApplication.bas[110]  CallSub(Me, eventName) 
ABMApplication.bas[111]  Case 1 
ABMApplication.bas[112]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMApplication.bas[113]  Case 2 
ABMApplication.bas[114]  If Params.get(eventParams(0)) = {54} Then 
ABMApplication.bas[115]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMApplication.bas[116]  CallSub2(Me, eventName, PassedTables) 
ABMApplication.bas[117]  Else 
ABMApplication.bas[118]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMApplication.bas[119]  End If 
ABMApplication.bas[120]  Case Else 
ABMApplication.bas[121]  ' cannot be called diretly, to many param 
ABMApplication.bas[122]  CallSub2(Me, eventName, Params) 
ABMApplication.bas[123]  End Select 
ABMApplication.bas[124]  End If 
ABMApplication.bas[125] End Sub 
ABMApplication.bas[126]  
ABMApplication.bas[127] public Sub AddPage(page As ABMPage) 
ABMApplication.bas[128]  Pages.Add(page.Name) 
ABMApplication.bas[129]  PageNeedsUpload.Add(ABM.WritePageToDisk(page, File.DirApp & {55} & ABMShared.AppName & {56} & page.Name & {57} , page.PageHTMLName, ABMShared.NeedsAuthorization)) 
ABMApplication.bas[130] End Sub 
ABMApplication.bas[131]  
ABMApplication.bas[132] public Sub StartServer(srvr As Server, srvrName As String, srvrPort As Int) 
ABMApplication.bas[133]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {58} & ABMShared.AppName, {59} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[134]  
ABMApplication.bas[135]  ' start the server 
ABMApplication.bas[136]  srvr.Initialize(srvrName) 
ABMApplication.bas[137]  
ABMApplication.bas[138]  srvr.AddFilter( {60} , {61} , False) 
ABMApplication.bas[139]  srvr.AddWebSocket( {62} & ABMShared.AppName, {63} ) 
ABMApplication.bas[140]  For i =0 To Pages.Size - 1 
ABMApplication.bas[141]  srvr.AddWebSocket( {64} & ABMShared.AppName & {65} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[142]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[143]  srvr.AddHandler( {66} & ABMShared.AppName & {67} & Pages.Get(i) & {68} , {69} , False) 
ABMApplication.bas[144]  End If 
ABMApplication.bas[145]  Next 
ABMApplication.bas[146]  srvr.AddBackgroundWorker( {70} ) 
ABMApplication.bas[147]  srvr.Port = srvrPort 
ABMApplication.bas[148]  
ABMApplication.bas[149]  #If RELEASE 
ABMApplication.bas[150]  srvr.SetStaticFilesOptions(CreateMap( {71} : {72} , {73} :True, {74} :False)) 
ABMApplication.bas[151]  #Else 
ABMApplication.bas[152]  srvr.SetStaticFilesOptions(CreateMap( {75} : {76} , {77} :False, {78} :False)) 
ABMApplication.bas[153]  #End If 
ABMApplication.bas[154]  srvr.Start 
ABMApplication.bas[155]  Dim jo As JavaObject = srvr 
ABMApplication.bas[156]  Dim connectors() As Object = jo.GetFieldJO( {79} ).RunMethod( {80} , Null) 
ABMApplication.bas[157]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[158]  For Each c As JavaObject In connectors 
ABMApplication.bas[159]  c.RunMethod( {81} , Array(timeout)) 
ABMApplication.bas[160]  Next 
ABMApplication.bas[161]  
ABMApplication.bas[162]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[163] End Sub 
ABMApplication.bas[164]  
ABMApplication.bas[165] public Sub StartServerHTTP2(srvr As Server, srvrName As String, srvrPort As Int, SSLsvrPort As Int, SSLKeyStoreFileName As String, SSLKeyStorePassword As String, SSLKeyManagerPassword As String) 
ABMApplication.bas[166]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {82} & ABMShared.AppName, {83} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[167]  
ABMApplication.bas[168]  Dim ssl As SslConfiguration 
ABMApplication.bas[169]  ssl.Initialize 
ABMApplication.bas[170]  ssl.SetKeyStorePath(File.DirApp, SSLKeyStoreFileName) 'path to keystore file 
ABMApplication.bas[171]  ssl.KeyStorePassword = SSLKeyStorePassword 
ABMApplication.bas[172]  ssl.KeyManagerPassword = SSLKeyManagerPassword 
ABMApplication.bas[173]  srvr.SetSslConfiguration(ssl, SSLsvrPort) 
ABMApplication.bas[174]  
ABMApplication.bas[175]  ' start the server 
ABMApplication.bas[176]  srvr.Initialize(srvrName) 
ABMApplication.bas[177]  
ABMApplication.bas[178]  srvr.AddFilter( {84} , {85} , False) 
ABMApplication.bas[179]  srvr.AddWebSocket( {86} & ABMShared.AppName, {87} ) 
ABMApplication.bas[180]  For i =0 To Pages.Size - 1 
ABMApplication.bas[181]  srvr.AddWebSocket( {88} & ABMShared.AppName & {89} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[182]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[183]  srvr.AddHandler( {90} & ABMShared.AppName & {91} & Pages.Get(i) & {92} , {93} , False) 
ABMApplication.bas[184]  End If 
ABMApplication.bas[185]  Next 
ABMApplication.bas[186]  srvr.AddBackgroundWorker( {94} ) 
ABMApplication.bas[187]  srvr.Port = srvrPort 
ABMApplication.bas[188]  srvr.Http2Enabled = True 
ABMApplication.bas[189]  #If RELEASE 
ABMApplication.bas[190]  srvr.SetStaticFilesOptions(CreateMap( {95} : {96} , {97} :True, {98} :False)) 
ABMApplication.bas[191]  #Else 
ABMApplication.bas[192]  srvr.SetStaticFilesOptions(CreateMap( {99} : {100} , {101} :False, {102} :False)) 
ABMApplication.bas[193]  #End If 
ABMApplication.bas[194]  srvr.Start 
ABMApplication.bas[195]  Dim jo As JavaObject = srvr 
ABMApplication.bas[196]  Dim connectors() As Object = jo.GetFieldJO( {103} ).RunMethod( {104} , Null) 
ABMApplication.bas[197]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[198]  For Each c As JavaObject In connectors 
ABMApplication.bas[199]  c.RunMethod( {105} , Array(timeout)) 
ABMApplication.bas[200]  Next 
ABMApplication.bas[201]  
ABMApplication.bas[202]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[203] End Sub 
ABMApplication.bas[204]  
ABMApplication.bas[205] public Sub BuildTheme() 
ABMApplication.bas[206]  ' start with the base theme defined in ABMShared 
ABMApplication.bas[207]  theme.Initialize( {106} ) 
ABMApplication.bas[208]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMApplication.bas[209]  
ABMApplication.bas[210]  ' add additional themes specific for this page 
ABMApplication.bas[211]  
ABMApplication.bas[212] End Sub 
ABMApplication.bas[213]  
ABMApplication.bas[214] public Sub BuildPage() 
ABMApplication.bas[215]  ' initialize the theme 
ABMApplication.bas[216]  BuildTheme 
ABMApplication.bas[217]  
ABMApplication.bas[218]  ' initialize this page using our theme 
ABMApplication.bas[219]  AppPage.InitializeWithTheme(ABMShared.AppName, {107} & ABMShared.AppName, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMApplication.bas[220]  AppPage.ShowLoader=True 
ABMApplication.bas[221]  AppPage.ShowLoaderType= ABM.LOADER_TYPE_MANUAL ' NEW 
ABMApplication.bas[222]  AppPage.PageTitle = {108} 
ABMApplication.bas[223]  AppPage.PageDescription = {109} 
ABMApplication.bas[224]  AppPage.PageHTMLName = {110} 
ABMApplication.bas[225]  AppPage.PageKeywords = {111} 
ABMApplication.bas[226]  AppPage.PageSiteMapPriority = {112} 
ABMApplication.bas[227]  AppPage.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
ABMApplication.bas[228]  AppPage.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
ABMApplication.bas[229]  
ABMApplication.bas[230]  ' create the page grid 
ABMApplication.bas[231]  AppPage.AddRows(1,True, {113} ).AddCells12(1, {114} ) 
ABMApplication.bas[232]  AppPage.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[233]  
ABMApplication.bas[234]  
ABMApplication.bas[235] End Sub 
ABMApplication.bas[236]  
ABMApplication.bas[237] Public Sub ConnectPage() 
ABMApplication.bas[238]  ' add a modal sheet template to enter contact information 
ABMApplication.bas[239]  AppPage.AddModalSheetTemplate(ConnectLoginSheet) 
ABMApplication.bas[240]  
ABMApplication.bas[241]  ' add a error box template if the name is not entered 
ABMApplication.bas[242]  AppPage.AddModalSheetTemplate(ConnectWrongInputModalSheet) 
ABMApplication.bas[243]  
ABMApplication.bas[244]  AppPage.Refresh ' IMPORTANT 
ABMApplication.bas[245]  
ABMApplication.bas[246]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ABMApplication.bas[247]  AppPage.FinishedLoading 'IMPORTANT 
ABMApplication.bas[248]  
ABMApplication.bas[249]  AppPage.RestoreNavigationBarPosition 
ABMApplication.bas[250] End Sub 
ABMApplication.bas[251]  
ABMApplication.bas[252] Sub msbtn1_Clicked(Target As String) 
ABMApplication.bas[253]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {115} ) 
ABMApplication.bas[254]  Dim inp1 As ABMInput = mymodal.Content.Component( {116} ) 
ABMApplication.bas[255]  Dim inp2 As ABMInput = mymodal.Content.Component( {117} ) 
ABMApplication.bas[256]  ' here check the login a page against your login database 
ABMApplication.bas[257]  If inp1.Text <> {118} Or inp2.Text <> {119} Then 
ABMApplication.bas[258]  AppPage.ShowModalSheet( {120} ) 
ABMApplication.bas[259]  Return 
ABMApplication.bas[260]  End If 
ABMApplication.bas[261]  ws.Session.SetAttribute( {121} , {122} ) 
ABMApplication.bas[262]  ws.Session.SetAttribute( {123} , inp1.Text) 
ABMApplication.bas[263]  ws.Session.SetAttribute( {124} , {125} ) 
ABMApplication.bas[264]  ABMShared.NavigateToPage(ws, ABMPageId, {126} & InitialPage) 
ABMApplication.bas[265] End Sub 
ABMApplication.bas[266]  
ABMApplication.bas[267] Sub inp2_EnterPressed(value As String) 
ABMApplication.bas[268]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {127} ) 
ABMApplication.bas[269]  Dim inp1 As ABMInput = mymodal.Content.Component( {128} ) 
ABMApplication.bas[270]  Dim inp2 As ABMInput = mymodal.Content.Component( {129} ) 
ABMApplication.bas[271]  ' here check the login a page against your login database 
ABMApplication.bas[272]  If inp1.Text <> {130} Or inp2.Text <> {131} Then 
ABMApplication.bas[273]  AppPage.ShowModalSheet( {132} ) 
ABMApplication.bas[274]  Return 
ABMApplication.bas[275]  End If 
ABMApplication.bas[276]  ws.Session.SetAttribute( {133} , {134} ) 
ABMApplication.bas[277]  ws.Session.SetAttribute( {135} , inp1.Text) 
ABMApplication.bas[278]  ws.Session.SetAttribute( {136} , {137} ) 
ABMApplication.bas[279]  ABMShared.NavigateToPage(ws, ABMPageId, {138} & InitialPage) 
ABMApplication.bas[280] End Sub 
ABMApplication.bas[281]  
ABMApplication.bas[282] Sub ConnectLoginSheet() As ABMModalSheet 
ABMApplication.bas[283]  Dim myModal As ABMModalSheet 
ABMApplication.bas[284]  myModal.Initialize(AppPage, {139} , False, False, {140} ) 
ABMApplication.bas[285]  myModal.Content.UseTheme( {141} ) 
ABMApplication.bas[286]  myModal.Footer.UseTheme( {142} ) 
ABMApplication.bas[287]  myModal.IsDismissible = False 
ABMApplication.bas[288]  
ABMApplication.bas[289]  ' create the grid for the content 
ABMApplication.bas[290]  myModal.Content.AddRows(3,True, {143} ).AddCells12(1, {144} ) 
ABMApplication.bas[291]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[292]  
ABMApplication.bas[293]  ' create the grid for the footer 
ABMApplication.bas[294]  ' we add a row without the default 20px padding so we need to use AddRowsM(). If we do not use this method, a scrollbar will appear to the sheet. 
ABMApplication.bas[295]  myModal.Footer.AddRowsM(1,True,0,0, {145} ).AddCellsOS(1,9,9,9,3,3,3, {146} ) 
ABMApplication.bas[296]  myModal.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[297]  ' add paragraph 
ABMApplication.bas[298]  myModal.Content.Cell(1,1).AddComponent(ABMShared.BuildParagraph(AppPage, {147} , {148} ) ) 
ABMApplication.bas[299]  
ABMApplication.bas[300]  ' create the input fields for the content 
ABMApplication.bas[301]  Dim inp1 As ABMInput 
ABMApplication.bas[302]  inp1.Initialize(AppPage, {149} , ABM.INPUT_TEXT, {150} , False, {151} ) 
ABMApplication.bas[303]  myModal.Content.Cell(2,1).AddComponent(inp1) 
ABMApplication.bas[304]  
ABMApplication.bas[305]  Dim inp2 As ABMInput 
ABMApplication.bas[306]  inp2.Initialize(AppPage, {152} , ABM.INPUT_PASSWORD, {153} , False, {154} ) 
ABMApplication.bas[307]  myModal.Content.Cell(2,1).AddComponent(inp2) 
ABMApplication.bas[308]  
ABMApplication.bas[309]  ' via social network 
ABMApplication.bas[310]  Dim sOAuth As ABMSocialOAuth 
ABMApplication.bas[311]  sOAuth.Initialize(AppPage, {155} ) 
ABMApplication.bas[312]  sOAuth.AddFacebookButton( {156} , {157} , {158} ) 
ABMApplication.bas[313]  'sOAuth.AddFacebookButton( {159} , {160} , {161} ) 
ABMApplication.bas[314]  sOAuth.AddTwitterButton( {162} , {163} , {164} ) 
ABMApplication.bas[315]  sOAuth.AddGooglePlusButton( {165} , {166} ) 
ABMApplication.bas[316]  sOAuth.AddLinkedInButton( {167} , {168} ) 
ABMApplication.bas[317]  sOAuth.AddWindowsLiveButton( {169} , {170} , {171} ) 
ABMApplication.bas[318]  sOAuth.AddFourSquareButton( {172} , {173} , {174} ) 
ABMApplication.bas[319]  sOAuth.AddInstagramButton( {175} , {176} , {177} ) 
ABMApplication.bas[320]  sOAuth.AddSoundCloudButton( {178} , {179} , {180} ) 
ABMApplication.bas[321]  sOAuth.AddYahooButton( {181} , {182} , {183} ) 
ABMApplication.bas[322]  
ABMApplication.bas[323]  myModal.Content.Cell(3,1).AddComponent(sOAuth) 
ABMApplication.bas[324]  
ABMApplication.bas[325]  ' create the button for the footer 
ABMApplication.bas[326]  Dim msbtn1 As ABMButton 
ABMApplication.bas[327]  msbtn1.InitializeFlat(AppPage, {184} , {185} , {186} , {187} , {188} ) 
ABMApplication.bas[328]  myModal.Footer.Cell(1,1).AddComponent(msbtn1) 
ABMApplication.bas[329]  
ABMApplication.bas[330]  Return myModal 
ABMApplication.bas[331] End Sub 
ABMApplication.bas[332]  
ABMApplication.bas[333] Sub ConnectWrongInputModalSheet() As ABMModalSheet 
ABMApplication.bas[334]  Dim myModalError As ABMModalSheet 
ABMApplication.bas[335]  myModalError.Initialize(AppPage, {189} , False, False, {190} ) 
ABMApplication.bas[336]  myModalError.Content.UseTheme( {191} ) 
ABMApplication.bas[337]  myModalError.Footer.UseTheme( {192} ) 
ABMApplication.bas[338]  myModalError.IsDismissible = True 
ABMApplication.bas[339]  
ABMApplication.bas[340]  ' create the grid for the content 
ABMApplication.bas[341]  myModalError.Content.AddRows(1,True, {193} ).AddCells12(1, {194} ) 
ABMApplication.bas[342]  myModalError.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[343]  
ABMApplication.bas[344]  Dim lbl1 As ABMLabel 
ABMApplication.bas[345]  lbl1.Initialize(AppPage, {195} , {196} ,ABM.SIZE_PARAGRAPH, False, {197} ) 
ABMApplication.bas[346]  myModalError.Content.Cell(1,1).AddComponent(lbl1) 
ABMApplication.bas[347]  
ABMApplication.bas[348]  Return myModalError 
ABMApplication.bas[349] End Sub 
ABMApplication.bas[350]  
ABMApplication.bas[351] ' clicked on the navigation bar 
ABMApplication.bas[352] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMApplication.bas[353]  AppPage.SaveNavigationBarPosition 
ABMApplication.bas[354] End Sub 
ABMApplication.bas[355]  
ABMApplication.bas[356] Sub Page_FileUploaded(FileName As String, success As Boolean) 
ABMApplication.bas[357]  
ABMApplication.bas[358] End Sub 
ABMApplication.bas[359]  
ABMApplication.bas[360] Sub Page_ToastClicked(ToastId As String, Action As String) 
ABMApplication.bas[361]  
ABMApplication.bas[362] End Sub 
ABMApplication.bas[363]  
ABMApplication.bas[364] Sub Page_ToastDismissed(ToastId As String) 
ABMApplication.bas[365]  
ABMApplication.bas[366] End Sub 
ABMApplication.bas[367]  
ABMApplication.bas[368] Sub Page_Authenticated(Params As Map) 
ABMApplication.bas[369]  Log( {198} & Params.Get( {199} )) 
ABMApplication.bas[370]  
ABMApplication.bas[371]  ws.Session.SetAttribute( {200} , Params.Get( {201} )) 
ABMApplication.bas[372]  ws.Session.SetAttribute( {202} , Params.Get( {203} )) 
ABMApplication.bas[373]  ws.Session.SetAttribute( {204} , {205} ) 
ABMApplication.bas[374]  ABMShared.NavigateToPage(ws, ABMPageId, {206} & InitialPage) 
ABMApplication.bas[375] End Sub 
Analysing: ABMCacheScavenger.bas
ABMCacheScavenger.bas[0] ﻿Type=Class 
ABMCacheScavenger.bas[0] Version=4.7 
ABMCacheScavenger.bas[0] ModulesStructureVersion=1 
ABMCacheScavenger.bas[0] B4J=true 
ABMCacheScavenger.bas[0] @EndOfDesignText@ 
ABMCacheScavenger.bas[1] 'CacheScavenger 
ABMCacheScavenger.bas[2] Sub Class_Globals 
ABMCacheScavenger.bas[3]  Private scavengeTimer As Timer 
ABMCacheScavenger.bas[4]  Private ABM As ABMaterial 
ABMCacheScavenger.bas[5] End Sub 
ABMCacheScavenger.bas[6]  
ABMCacheScavenger.bas[7] Public Sub Initialize 
ABMCacheScavenger.bas[8]  scavengeTimer.Initialize( {0} , ABMShared.CacheScavengePeriodSeconds * 1000) 
ABMCacheScavenger.bas[9]  scavengeTimer.Enabled = True 
ABMCacheScavenger.bas[10]  StartMessageLoop '<- don't forget! 
ABMCacheScavenger.bas[11] End Sub 
ABMCacheScavenger.bas[12]  
ABMCacheScavenger.bas[13] Sub ScavengeTimer_Tick 
ABMCacheScavenger.bas[14]  'do the work required 
ABMCacheScavenger.bas[15]  ABM.ScavengeCache(ABMShared.CachedPages) 
ABMCacheScavenger.bas[16] End Sub 
Analysing: ABMPageTemplate.bas
ABMPageTemplate.bas[0] ﻿Type=Class 
ABMPageTemplate.bas[0] Version=4.7 
ABMPageTemplate.bas[0] ModulesStructureVersion=1 
ABMPageTemplate.bas[0] B4J=true 
ABMPageTemplate.bas[0] @EndOfDesignText@ 
ABMPageTemplate.bas[1] 'Class module 
ABMPageTemplate.bas[2] Sub Class_Globals 
ABMPageTemplate.bas[3]  Private ws As WebSocket 'ignore 
ABMPageTemplate.bas[4]  ' will hold our page information 
ABMPageTemplate.bas[5]  Public page As ABMPage 
ABMPageTemplate.bas[6]  ' page theme 
ABMPageTemplate.bas[7]  Private theme As ABMTheme 
ABMPageTemplate.bas[8]  ' to access the constants 
ABMPageTemplate.bas[9]  Private ABM As ABMaterial 'ignore 
ABMPageTemplate.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ABMPageTemplate.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
ABMPageTemplate.bas[12]  ' will hold the unique browsers window id 
ABMPageTemplate.bas[13]  Private ABMPageId As String = {1} 
ABMPageTemplate.bas[14]  
ABMPageTemplate.bas[15]  ' your own variables 
ABMPageTemplate.bas[16]  
ABMPageTemplate.bas[17] End Sub 
ABMPageTemplate.bas[18]  
ABMPageTemplate.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
ABMPageTemplate.bas[20] Public Sub Initialize 
ABMPageTemplate.bas[21]  ' build the local structure IMPORTANT! 
ABMPageTemplate.bas[22]  BuildPage 
ABMPageTemplate.bas[23] End Sub 
ABMPageTemplate.bas[24]  
ABMPageTemplate.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMPageTemplate.bas[26]  Log( {2} ) 
ABMPageTemplate.bas[27]  ws = WebSocket1 
ABMPageTemplate.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ABMPageTemplate.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ABMPageTemplate.bas[30]  
ABMPageTemplate.bas[31]  If ABMShared.NeedsAuthorization Then 
ABMPageTemplate.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
ABMPageTemplate.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
ABMPageTemplate.bas[34]  Return 
ABMPageTemplate.bas[35]  End If 
ABMPageTemplate.bas[36]  End If 
ABMPageTemplate.bas[37]  
ABMPageTemplate.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ABMPageTemplate.bas[39]  If page.ComesFromPageCache Then 
ABMPageTemplate.bas[40]  ' refresh the page 
ABMPageTemplate.bas[41]  page.Refresh 
ABMPageTemplate.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ABMPageTemplate.bas[43]  page.FinishedLoading 
ABMPageTemplate.bas[44]  Else 
ABMPageTemplate.bas[45]  ' Prepare the page 
ABMPageTemplate.bas[46]  page.Prepare 
ABMPageTemplate.bas[47]  ' load the dynamic content 
ABMPageTemplate.bas[48]  ConnectPage 
ABMPageTemplate.bas[49]  End If 
ABMPageTemplate.bas[50]  Log(ABMPageId) 
ABMPageTemplate.bas[51] End Sub 
ABMPageTemplate.bas[52]  
ABMPageTemplate.bas[53] Private Sub WebSocket_Disconnected 
ABMPageTemplate.bas[54]  Log( {7} ) 
ABMPageTemplate.bas[55] End Sub 
ABMPageTemplate.bas[56]  
ABMPageTemplate.bas[57] Sub Page_ParseEvent(Params As Map) 
ABMPageTemplate.bas[58]  Dim eventName As String = Params.Get( {8} ) 
ABMPageTemplate.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
ABMPageTemplate.bas[60]  If eventName = {11} Then 
ABMPageTemplate.bas[61]  Log( {12} ) 
ABMPageTemplate.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMPageTemplate.bas[63]  Return 
ABMPageTemplate.bas[64]  End If 
ABMPageTemplate.bas[65]  If SubExists(Me, eventName) Then 
ABMPageTemplate.bas[66]  Params.Remove( {13} ) 
ABMPageTemplate.bas[67]  Params.Remove( {14} ) 
ABMPageTemplate.bas[68]  Select Case Params.Size 
ABMPageTemplate.bas[69]  Case 0 
ABMPageTemplate.bas[70]  CallSub(Me, eventName) 
ABMPageTemplate.bas[71]  Case 1 
ABMPageTemplate.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMPageTemplate.bas[73]  Case 2 
ABMPageTemplate.bas[74]  If Params.get(eventParams(0)) = {15} Then 
ABMPageTemplate.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMPageTemplate.bas[76]  CallSub2(Me, eventName, PassedTables) 
ABMPageTemplate.bas[77]  Else 
ABMPageTemplate.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMPageTemplate.bas[79]  End If 
ABMPageTemplate.bas[80]  Case Else 
ABMPageTemplate.bas[81]  ' cannot be called directly, to many param 
ABMPageTemplate.bas[82]  CallSub2(Me, eventName, Params) 
ABMPageTemplate.bas[83]  End Select 
ABMPageTemplate.bas[84]  End If 
ABMPageTemplate.bas[85] End Sub 
ABMPageTemplate.bas[86]  
ABMPageTemplate.bas[87] public Sub BuildTheme() 
ABMPageTemplate.bas[88]  ' start with the base theme defined in ABMShared 
ABMPageTemplate.bas[89]  theme.Initialize( {16} ) 
ABMPageTemplate.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMPageTemplate.bas[91]  
ABMPageTemplate.bas[92]  ' add additional themes specific for this page 
ABMPageTemplate.bas[93]  
ABMPageTemplate.bas[94] End Sub 
ABMPageTemplate.bas[95]  
ABMPageTemplate.bas[96] public Sub BuildPage() 
ABMPageTemplate.bas[97]  ' initialize the theme 
ABMPageTemplate.bas[98]  BuildTheme 
ABMPageTemplate.bas[99]  
ABMPageTemplate.bas[100]  ' initialize this page using our theme 
ABMPageTemplate.bas[101]  page.InitializeWithTheme(Name, {17} & ABMShared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMPageTemplate.bas[102]  page.ShowLoader=True 
ABMPageTemplate.bas[103]  page.PageHTMLName = {19} 
ABMPageTemplate.bas[104]  page.PageTitle = {20} 
ABMPageTemplate.bas[105]  page.PageDescription = {21} 
ABMPageTemplate.bas[106]  page.PageKeywords = {22} 
ABMPageTemplate.bas[107]  page.PageSiteMapPriority = {23} 
ABMPageTemplate.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ABMPageTemplate.bas[109]  
ABMPageTemplate.bas[110]  ' adding a navigation bar 
ABMPageTemplate.bas[111]  
ABMPageTemplate.bas[112]  
ABMPageTemplate.bas[113]  ' create the page grid 
ABMPageTemplate.bas[114]  page.AddRows(1,True, {24} ).AddCells12(1, {25} ) 
ABMPageTemplate.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMPageTemplate.bas[116]  
ABMPageTemplate.bas[117]  
ABMPageTemplate.bas[118] End Sub 
ABMPageTemplate.bas[119]  
ABMPageTemplate.bas[120] public Sub ConnectPage() 
ABMPageTemplate.bas[121]  ' your stuff 
ABMPageTemplate.bas[122]  
ABMPageTemplate.bas[123]  page.Refresh ' IMPORTANT 
ABMPageTemplate.bas[124]  
ABMPageTemplate.bas[125]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ABMPageTemplate.bas[126]  page.FinishedLoading 'IMPORTANT 
ABMPageTemplate.bas[127]  
ABMPageTemplate.bas[128]  page.RestoreNavigationBarPosition 
ABMPageTemplate.bas[129] End Sub 
ABMPageTemplate.bas[130]  
ABMPageTemplate.bas[131] ' clicked on the navigation bar 
ABMPageTemplate.bas[132] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMPageTemplate.bas[133]  page.SaveNavigationBarPosition 
ABMPageTemplate.bas[134]  
ABMPageTemplate.bas[135] End Sub 
ABMPageTemplate.bas[136]  
Analysing: ABMSessionCreator.bas
ABMSessionCreator.bas[0] ﻿Type=Class 
ABMSessionCreator.bas[0] Version=4.7 
ABMSessionCreator.bas[0] ModulesStructureVersion=1 
ABMSessionCreator.bas[0] B4J=true 
ABMSessionCreator.bas[0] @EndOfDesignText@ 
ABMSessionCreator.bas[1] 'Filter class 
ABMSessionCreator.bas[2] Sub Class_Globals 
ABMSessionCreator.bas[3]  
ABMSessionCreator.bas[4] End Sub 
ABMSessionCreator.bas[5]  
ABMSessionCreator.bas[6] Public Sub Initialize 
ABMSessionCreator.bas[7]  
ABMSessionCreator.bas[8] End Sub 
ABMSessionCreator.bas[9]  
ABMSessionCreator.bas[10] 'Return True to allow the request to proceed. 
ABMSessionCreator.bas[11] Public Sub Filter(req As ServletRequest, resp As ServletResponse) As Boolean 
ABMSessionCreator.bas[12]  DateTime.DateFormat = {0} 
ABMSessionCreator.bas[13]  DateTime.TimeFormat = {1} 
ABMSessionCreator.bas[14]  
ABMSessionCreator.bas[15]  Log( {2} & DateTime.Date(DateTime.Now) & {3} & DateTime.Time(DateTime.now)) 
ABMSessionCreator.bas[16]  
ABMSessionCreator.bas[17]  req.GetSession 'a new session will be created if a session doesn't exist. 
ABMSessionCreator.bas[18]  Return True 
ABMSessionCreator.bas[19] End Sub 
Analysing: ABMUploadHandler.bas
ABMUploadHandler.bas[0] ﻿Type=Class 
ABMUploadHandler.bas[0] Version=4.7 
ABMUploadHandler.bas[0] ModulesStructureVersion=1 
ABMUploadHandler.bas[0] B4J=true 
ABMUploadHandler.bas[0] @EndOfDesignText@ 
ABMUploadHandler.bas[1] 'Handler class 
ABMUploadHandler.bas[2] Sub Class_Globals 
ABMUploadHandler.bas[3]  Dim ABM As ABMaterial 
ABMUploadHandler.bas[4] End Sub 
ABMUploadHandler.bas[5]  
ABMUploadHandler.bas[6] Public Sub Initialize 
ABMUploadHandler.bas[7]  
ABMUploadHandler.bas[8] End Sub 
ABMUploadHandler.bas[9]  
ABMUploadHandler.bas[10] Sub Handle(req As ServletRequest, resp As ServletResponse) 
ABMUploadHandler.bas[11]  'get the callback page from the session (multiple modules can use this handler) 
ABMUploadHandler.bas[12]  Dim callback As Object = req.GetSession.GetAttribute( {0} ) 
ABMUploadHandler.bas[13]  Dim downloadfolder As String = File.Combine(File.DirApp, req.GetSession.GetAttribute( {1} )) 
ABMUploadHandler.bas[14]  Dim MaxSize As Int 
ABMUploadHandler.bas[15]  Try 
ABMUploadHandler.bas[16]  MaxSize = req.GetSession.GetAttribute( {2} ) 
ABMUploadHandler.bas[17]  Catch 
ABMUploadHandler.bas[18]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[19]  Return 
ABMUploadHandler.bas[20]  End Try 
ABMUploadHandler.bas[21]  Dim data As Map 
ABMUploadHandler.bas[22]  Dim fileName As String 
ABMUploadHandler.bas[23]  Dim tmpFileName As String 
ABMUploadHandler.bas[24]  
ABMUploadHandler.bas[25]  Try 
ABMUploadHandler.bas[26]  data = req.GetMultipartData(downloadfolder, MaxSize) 
ABMUploadHandler.bas[27]  Dim filePart As Part = data.Get( {3} ) 
ABMUploadHandler.bas[28]  If filePart.IsInitialized Then 
ABMUploadHandler.bas[29]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[30]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[31]  If ABM.HandleUpload(downloadfolder, tmpFileName, fileName) Then 
ABMUploadHandler.bas[32]  If SubExists(callback, {4} ) Then 
ABMUploadHandler.bas[33]  CallSubDelayed3(callback, {5} , fileName, True) 
ABMUploadHandler.bas[34]  End If 
ABMUploadHandler.bas[35]  Else 
ABMUploadHandler.bas[36]  resp.SendError(500, {6} ) 
ABMUploadHandler.bas[37]  'If SubExists(callback, {7} ) Then 
ABMUploadHandler.bas[38]  ' CallSubDelayed3(callback, {8} , fileName, False) 
ABMUploadHandler.bas[39]  'End If 
ABMUploadHandler.bas[40]  End If 
ABMUploadHandler.bas[41]  Else ' try image 
ABMUploadHandler.bas[42]  Dim filePart As Part = data.Get( {9} ) 
ABMUploadHandler.bas[43]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[44]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[45]  If ABM.HandleUpload(downloadfolder, tmpFileName, fileName) Then 
ABMUploadHandler.bas[46]  If SubExists(callback, {10} ) Then 
ABMUploadHandler.bas[47]  CallSubDelayed3(callback, {11} , fileName, True) 
ABMUploadHandler.bas[48]  End If 
ABMUploadHandler.bas[49]  Else 
ABMUploadHandler.bas[50]  If SubExists(callback, {12} ) Then 
ABMUploadHandler.bas[51]  CallSubDelayed3(callback, {13} , fileName, False) 
ABMUploadHandler.bas[52]  End If 
ABMUploadHandler.bas[53]  End If 
ABMUploadHandler.bas[54]  End If 
ABMUploadHandler.bas[55]  
ABMUploadHandler.bas[56]  Catch 
ABMUploadHandler.bas[57]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[58]  If SubExists(callback, {14} ) Then 
ABMUploadHandler.bas[59]  CallSubDelayed3(callback, {15} , LastException.Message , False) 
ABMUploadHandler.bas[60]  End If 
ABMUploadHandler.bas[61]  End Try 
ABMUploadHandler.bas[62] End Sub 
Analysing: AboutPage.bas
AboutPage.bas[0] ﻿Type=Class 
AboutPage.bas[0] Version=4.7 
AboutPage.bas[0] ModulesStructureVersion=1 
AboutPage.bas[0] B4J=true 
AboutPage.bas[0] @EndOfDesignText@ 
AboutPage.bas[1] 'Class module 
AboutPage.bas[2] Sub Class_Globals 
AboutPage.bas[3]  Private ws As WebSocket 'ignore 
AboutPage.bas[4]  ' will hold our page information 
AboutPage.bas[5]  Public page As ABMPage 
AboutPage.bas[6]  ' page theme 
AboutPage.bas[7]  Private theme As ABMTheme 
AboutPage.bas[8]  ' to access the constants 
AboutPage.bas[9]  Private ABM As ABMaterial 'ignore 
AboutPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
AboutPage.bas[11]  Public Name As String = {1} 
AboutPage.bas[12]  Private ABMPageId As String = {2} 
AboutPage.bas[13]  
AboutPage.bas[14]  ' your own variables 
AboutPage.bas[15]  Dim myToastId As Int 
AboutPage.bas[16] End Sub 
AboutPage.bas[17]  
AboutPage.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
AboutPage.bas[19] Public Sub Initialize 
AboutPage.bas[20]  ' build the local structure IMPORTANT! 
AboutPage.bas[21]  
AboutPage.bas[22]  BuildPage 
AboutPage.bas[23]  
AboutPage.bas[24] End Sub 
AboutPage.bas[25]  
AboutPage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
AboutPage.bas[27]  Log( {3} ) 
AboutPage.bas[28]  ws = WebSocket1 
AboutPage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
AboutPage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
AboutPage.bas[31]  
AboutPage.bas[32]  If ABMShared.NeedsAuthorization Then 
AboutPage.bas[33]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
AboutPage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
AboutPage.bas[35]  Return 
AboutPage.bas[36]  End If 
AboutPage.bas[37]  End If 
AboutPage.bas[38]  
AboutPage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
AboutPage.bas[40]  If page.ComesFromPageCache Then 
AboutPage.bas[41]  ' refresh the page 
AboutPage.bas[42]  page.Refresh 
AboutPage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
AboutPage.bas[44]  page.FinishedLoading 
AboutPage.bas[45]  Else 
AboutPage.bas[46]  ' Prepare the page 
AboutPage.bas[47]  page.Prepare 
AboutPage.bas[48]  ' load the dynamic content 
AboutPage.bas[49]  ConnectPage 
AboutPage.bas[50]  End If 
AboutPage.bas[51]  Log(ABMPageId) 
AboutPage.bas[52] End Sub 
AboutPage.bas[53]  
AboutPage.bas[54] Private Sub WebSocket_Disconnected 
AboutPage.bas[55]  Log( {8} ) 
AboutPage.bas[56] End Sub 
AboutPage.bas[57]  
AboutPage.bas[58] Sub Page_ParseEvent(Params As Map) 
AboutPage.bas[59]  Dim eventName As String = Params.Get( {9} ) 
AboutPage.bas[60]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
AboutPage.bas[61]  If eventName = {12} Then 
AboutPage.bas[62]  Log( {13} ) 
AboutPage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
AboutPage.bas[64]  Return 
AboutPage.bas[65]  End If 
AboutPage.bas[66]  If SubExists(Me, eventName) Then 
AboutPage.bas[67]  Params.Remove( {14} ) 
AboutPage.bas[68]  Params.Remove( {15} ) 
AboutPage.bas[69]  Select Case Params.Size 
AboutPage.bas[70]  Case 0 
AboutPage.bas[71]  CallSub(Me, eventName) 
AboutPage.bas[72]  Case 1 
AboutPage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
AboutPage.bas[74]  Case 2 
AboutPage.bas[75]  If Params.get(eventParams(0)) = {16} Then 
AboutPage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
AboutPage.bas[77]  CallSub2(Me, eventName, PassedTables) 
AboutPage.bas[78]  Else 
AboutPage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
AboutPage.bas[80]  End If 
AboutPage.bas[81]  Case Else 
AboutPage.bas[82]  ' cannot be called directly, to many param 
AboutPage.bas[83]  CallSub2(Me, eventName, Params) 
AboutPage.bas[84]  End Select 
AboutPage.bas[85]  End If 
AboutPage.bas[86] End Sub 
AboutPage.bas[87]  
AboutPage.bas[88] public Sub BuildTheme() 
AboutPage.bas[89]  ' start with the base theme defined in ABMShared 
AboutPage.bas[90]  theme.Initialize( {17} ) 
AboutPage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
AboutPage.bas[92]  
AboutPage.bas[93]  ' add additional themes specific for this page 
AboutPage.bas[94]  
AboutPage.bas[95]  ' the page theme, we override the default one 
AboutPage.bas[96]  theme.Page.BackColor = ABM.COLOR_GREY 
AboutPage.bas[97]  theme.Page.BackColorIntensity = ABM.INTENSITY_LIGHTEN5 
AboutPage.bas[98]  
AboutPage.bas[99]  theme.AddImageSliderTheme( {18} ) 
AboutPage.bas[100]  theme.ImageSlider( {19} ).Interval = 3000 
AboutPage.bas[101]  theme.ImageSlider( {20} ).ZDepth = ABM.ZDEPTH_1 
AboutPage.bas[102]  theme.ImageSlider( {21} ).ActiveBulletColor= ABM.COLOR_LIGHTBLUE 
AboutPage.bas[103]  theme.ImageSlider( {22} ).InactiveBulletColor = ABM.COLOR_BLUEGREY 
AboutPage.bas[104]  theme.ImageSlider( {23} ).InactiveBulletColorIntensity = ABM.INTENSITY_LIGHTEN4 
AboutPage.bas[105] End Sub 
AboutPage.bas[106]  
AboutPage.bas[107] public Sub BuildPage() 
AboutPage.bas[108]  ' initialize the theme 
AboutPage.bas[109]  BuildTheme 
AboutPage.bas[110]  
AboutPage.bas[111]  ' initialize this page using our theme 
AboutPage.bas[112]  page.InitializeWithTheme(Name, {24} & ABMShared.AppName & {25} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
AboutPage.bas[113]  page.ShowLoader=True 
AboutPage.bas[114]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
AboutPage.bas[115]  page.PageTitle = {26} 
AboutPage.bas[116]  page.PageDescription = {27} 
AboutPage.bas[117]  page.PageHTMLName = {28} 
AboutPage.bas[118]  page.PageKeywords = {29} 
AboutPage.bas[119]  page.PageSiteMapPriority = {30} 
AboutPage.bas[120]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
AboutPage.bas[121]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
AboutPage.bas[122]  page.ShowConnectedIndicator = True 
AboutPage.bas[123]  
AboutPage.bas[124]  ABMShared.BuildNavigationBar(page, {31} , {32} , {33} , {34} , {35} ) 
AboutPage.bas[125]  
AboutPage.bas[126]  ' create the page grid 
AboutPage.bas[127]  page.AddRows(3,True, {36} ).AddCells12(1, {37} ) 
AboutPage.bas[128]  page.AddRows(1,True, {38} ).AddCellsOS(1,0,0,0,12,3,3, {39} ).AddCellsOS(1,0,1,1,12,3,3, {40} ).AddCellsOS(1,0,1,1,12,3,3, {41} ) 
AboutPage.bas[129]  page.AddRows(7,True, {42} ).AddCells12(1, {43} ) 
AboutPage.bas[130]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
AboutPage.bas[131]  
AboutPage.bas[132]  ABMShared.BuildFooter(page) 
AboutPage.bas[133] End Sub 
AboutPage.bas[134]  
AboutPage.bas[135] public Sub ConnectPage() 
AboutPage.bas[136]  'NEW 
AboutPage.bas[137]  ABMShared.ConnectNavigationBar(page) 
AboutPage.bas[138]  
AboutPage.bas[139] ' ' add header 
AboutPage.bas[140]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {44} , {45} )) 
AboutPage.bas[141] ' ' add paragraph 
AboutPage.bas[142]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} )) 
AboutPage.bas[143]  
AboutPage.bas[144]  ' create slider 
AboutPage.bas[145]  Dim slider As ABMImageSlider 
AboutPage.bas[146]  slider.Initialize(page, {48} , {49} ) 
AboutPage.bas[147]  
AboutPage.bas[148]  ' add images 
AboutPage.bas[149]  slider.AddSlideImage( {50} , {51} , {52} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[150]  slider.AddSlideImage( {53} , {54} , {55} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[151]  slider.AddSlideImage( {56} , {57} , {58} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[152]  slider.AddSlideImage( {59} , {60} , {61} , ABM.IMAGESLIDER_CENTER) 
AboutPage.bas[153]  slider.AddSlideImage( {62} , {63} , {64} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[154]  slider.AddSlideImage( {65} , {66} , {67} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[155]  slider.AddSlideImage( {68} , {69} , {70} , ABM.IMAGESLIDER_RIGHT) 
AboutPage.bas[156]  slider.AddSlideImage( {71} , {72} , {73} , ABM.IMAGESLIDER_CENTER) 
AboutPage.bas[157]  
AboutPage.bas[158]  page.Cell(2,1).AddComponent(slider) 
AboutPage.bas[159]  
AboutPage.bas[160]  ' add paragraph 
AboutPage.bas[161]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {74} , {75} )) 
AboutPage.bas[162]  ' add paragraph 
AboutPage.bas[163]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {76} , {77} )) 
AboutPage.bas[164]  
AboutPage.bas[165]  ' add the images 
AboutPage.bas[166]  page.Cell(4,1).AddComponent(ABMShared.BuildImage(page, {78} , {79} ,1, {80} )) 
AboutPage.bas[167]  page.Cell(4,2).AddComponent(ABMShared.BuildImage(page, {81} , {82} ,1, {83} )) 
AboutPage.bas[168]  page.Cell(4,3).AddComponent(ABMShared.BuildImage(page, {84} , {85} ,1, {86} )) 
AboutPage.bas[169]  
AboutPage.bas[170]  ' add header 
AboutPage.bas[171]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {87} , {88} )) 
AboutPage.bas[172]  ' add paragraph 
AboutPage.bas[173]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {89} , {90} )) 
AboutPage.bas[174]  ' add paragraph 
AboutPage.bas[175]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {91} , {92} )) 
AboutPage.bas[176]  ' add paragraph 
AboutPage.bas[177]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {93} , {94} )) 
AboutPage.bas[178]  
AboutPage.bas[179]  Dim img As ABMImage 
AboutPage.bas[180]  img.Initialize(page, {95} , {96} , 1) 
AboutPage.bas[181]  page.Cell(6,1).AddComponent(img) 
AboutPage.bas[182]  
AboutPage.bas[183]  Dim donButton As DonateButton 
AboutPage.bas[184]  donButton.Initialize(page, {97} ) 
AboutPage.bas[185]  page.Cell(6,1).AddComponent(donButton.ABMComp) 
AboutPage.bas[186]  
AboutPage.bas[187]  ' also add the components to the footer 
AboutPage.bas[188]  ABMShared.ConnectFooter(page) 
AboutPage.bas[189]  
AboutPage.bas[190]  page.Refresh ' IMPORTANT! 
AboutPage.bas[191]  
AboutPage.bas[192]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
AboutPage.bas[193]  page.FinishedLoading 'IMPORTANT 
AboutPage.bas[194]  
AboutPage.bas[195]  myToastId = myToastId + 1 
AboutPage.bas[196]  page.ShowToast( {98} & myToastId, {99} , {100} & ABM.Version & {101} , 5000) 
AboutPage.bas[197]  
AboutPage.bas[198]  page.RestoreNavigationBarPosition 
AboutPage.bas[199]  
AboutPage.bas[200] ' Dim script As String = {0} ( {102} ).animate({ scrollTop: $('#${img.ID}').offset().top }, 1000);"$ 
AboutPage.bas[201] ' page.ws.Eval(script, Null) 
AboutPage.bas[202] ' page.ws.Flush 
AboutPage.bas[203] End Sub 
AboutPage.bas[204]  
AboutPage.bas[205] ' clicked on the navigation bar 
AboutPage.bas[206] Sub Page_NavigationbarClicked(Action As String, Value As String) 
AboutPage.bas[207]  page.SaveNavigationBarPosition 
AboutPage.bas[208]  If Action = {103} Then Return 
AboutPage.bas[209]  If Action = {104} Then 
AboutPage.bas[210]  myToastId = myToastId + 1 
AboutPage.bas[211]  page.ShowToast( {105} & myToastId, {106} , {107} , 5000) 
AboutPage.bas[212]  Return 
AboutPage.bas[213]  End If 
AboutPage.bas[214]  If Action = {108} Then 
AboutPage.bas[215]  ABMShared.LogOff(page) 
AboutPage.bas[216]  Return 
AboutPage.bas[217]  End If 
AboutPage.bas[218]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
AboutPage.bas[219] End Sub 
AboutPage.bas[220]  
AboutPage.bas[221] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
AboutPage.bas[222]  page.ws.Session.SetAttribute( {109} , {110} ) 
AboutPage.bas[223]  page.ws.Session.SetAttribute( {111} , {112} ) 
AboutPage.bas[224]  page.ws.Session.SetAttribute( {113} , {114} ) 
AboutPage.bas[225]  ABMShared.NavigateToPage(ws, ABMPageId, {115} ) 
AboutPage.bas[226] End Sub 
AboutPage.bas[227]  
Analysing: CompActionButtonPage.bas
CompActionButtonPage.bas[0] ﻿Type=Class 
CompActionButtonPage.bas[0] Version=4.7 
CompActionButtonPage.bas[0] ModulesStructureVersion=1 
CompActionButtonPage.bas[0] B4J=true 
CompActionButtonPage.bas[0] @EndOfDesignText@ 
CompActionButtonPage.bas[1] 'Class module 
CompActionButtonPage.bas[2] Sub Class_Globals 
CompActionButtonPage.bas[3]  Private ws As WebSocket 'ignore 
CompActionButtonPage.bas[4]  ' will hold our page information 
CompActionButtonPage.bas[5]  Public page As ABMPage 
CompActionButtonPage.bas[6]  ' page theme 
CompActionButtonPage.bas[7]  Private theme As ABMTheme 
CompActionButtonPage.bas[8]  ' to access the constants 
CompActionButtonPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompActionButtonPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompActionButtonPage.bas[11]  Public Name As String = {0} 
CompActionButtonPage.bas[12]  ' will hold the unique browsers window id 
CompActionButtonPage.bas[13]  Private ABMPageId As String = {1} 
CompActionButtonPage.bas[14]  
CompActionButtonPage.bas[15]  ' your own variables 
CompActionButtonPage.bas[16]  Dim myToastId As Int 
CompActionButtonPage.bas[17] End Sub 
CompActionButtonPage.bas[18]  
CompActionButtonPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompActionButtonPage.bas[20] Public Sub Initialize 
CompActionButtonPage.bas[21]  ' build the local structure IMPORTANT! 
CompActionButtonPage.bas[22]  BuildPage 
CompActionButtonPage.bas[23] End Sub 
CompActionButtonPage.bas[24]  
CompActionButtonPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompActionButtonPage.bas[26]  Log( {2} ) 
CompActionButtonPage.bas[27]  ws = WebSocket1 
CompActionButtonPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompActionButtonPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompActionButtonPage.bas[30]  
CompActionButtonPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompActionButtonPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompActionButtonPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompActionButtonPage.bas[34]  Return 
CompActionButtonPage.bas[35]  End If 
CompActionButtonPage.bas[36]  End If 
CompActionButtonPage.bas[37]  
CompActionButtonPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompActionButtonPage.bas[39]  If page.ComesFromPageCache Then 
CompActionButtonPage.bas[40]  ' refresh the page 
CompActionButtonPage.bas[41]  page.Refresh 
CompActionButtonPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompActionButtonPage.bas[43]  page.FinishedLoading 
CompActionButtonPage.bas[44]  Else 
CompActionButtonPage.bas[45]  ' Prepare the page 
CompActionButtonPage.bas[46]  page.Prepare 
CompActionButtonPage.bas[47]  ' load the dynamic content 
CompActionButtonPage.bas[48]  ConnectPage 
CompActionButtonPage.bas[49]  End If 
CompActionButtonPage.bas[50]  Log(ABMPageId) 
CompActionButtonPage.bas[51] End Sub 
CompActionButtonPage.bas[52]  
CompActionButtonPage.bas[53] Private Sub WebSocket_Disconnected 
CompActionButtonPage.bas[54]  Log( {7} ) 
CompActionButtonPage.bas[55] End Sub 
CompActionButtonPage.bas[56]  
CompActionButtonPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompActionButtonPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompActionButtonPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompActionButtonPage.bas[60]  If eventName = {11} Then 
CompActionButtonPage.bas[61]  Log( {12} ) 
CompActionButtonPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompActionButtonPage.bas[63]  Return 
CompActionButtonPage.bas[64]  End If 
CompActionButtonPage.bas[65]  If SubExists(Me, eventName) Then 
CompActionButtonPage.bas[66]  Params.Remove( {13} ) 
CompActionButtonPage.bas[67]  Params.Remove( {14} ) 
CompActionButtonPage.bas[68]  Select Case Params.Size 
CompActionButtonPage.bas[69]  Case 0 
CompActionButtonPage.bas[70]  CallSub(Me, eventName) 
CompActionButtonPage.bas[71]  Case 1 
CompActionButtonPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompActionButtonPage.bas[73]  Case 2 
CompActionButtonPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompActionButtonPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompActionButtonPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompActionButtonPage.bas[77]  Else 
CompActionButtonPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompActionButtonPage.bas[79]  End If 
CompActionButtonPage.bas[80]  Case Else 
CompActionButtonPage.bas[81]  ' cannot be called directly, to many param 
CompActionButtonPage.bas[82]  CallSub2(Me, eventName, Params) 
CompActionButtonPage.bas[83]  End Select 
CompActionButtonPage.bas[84]  End If 
CompActionButtonPage.bas[85] End Sub 
CompActionButtonPage.bas[86]  
CompActionButtonPage.bas[87] public Sub BuildTheme() 
CompActionButtonPage.bas[88]  ' start with the base theme defined in ABMShared 
CompActionButtonPage.bas[89]  theme.Initialize( {16} ) 
CompActionButtonPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompActionButtonPage.bas[91]  
CompActionButtonPage.bas[92]  ' add additional themes specific for this page 
CompActionButtonPage.bas[93]  theme.AddButtonTheme( {17} ) 
CompActionButtonPage.bas[94]  theme.Button( {18} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompActionButtonPage.bas[95]  
CompActionButtonPage.bas[96]  theme.AddButtonTheme( {19} ) 
CompActionButtonPage.bas[97]  theme.Button( {20} ).BackColor = ABM.COLOR_RED 
CompActionButtonPage.bas[98]  
CompActionButtonPage.bas[99]  theme.AddButtonTheme( {21} ) 
CompActionButtonPage.bas[100]  theme.Button( {22} ).BackColor = ABM.COLOR_GREEN 
CompActionButtonPage.bas[101]  
CompActionButtonPage.bas[102]  theme.AddButtonTheme( {23} ) 
CompActionButtonPage.bas[103]  theme.Button( {24} ).BackColor = ABM.COLOR_YELLOW 
CompActionButtonPage.bas[104]  
CompActionButtonPage.bas[105]  theme.AddCardTheme( {25} ) 
CompActionButtonPage.bas[106]  theme.Card( {26} ).TitleForeColor = ABM.COLOR_WHITE 
CompActionButtonPage.bas[107] End Sub 
CompActionButtonPage.bas[108]  
CompActionButtonPage.bas[109] public Sub BuildPage() 
CompActionButtonPage.bas[110]  ' initialize the theme 
CompActionButtonPage.bas[111]  BuildTheme 
CompActionButtonPage.bas[112]  
CompActionButtonPage.bas[113]  ' initialize this page using our theme 
CompActionButtonPage.bas[114]  page.InitializeWithTheme(Name, {27} & ABMshared.AppName & {28} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompActionButtonPage.bas[115]  page.ShowLoader=True 
CompActionButtonPage.bas[116]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompActionButtonPage.bas[117]  page.PageTitle = {29} 
CompActionButtonPage.bas[118]  page.PageDescription = {30} 
CompActionButtonPage.bas[119]  page.PageHTMLName = {31} 
CompActionButtonPage.bas[120]  page.PageKeywords = {32} 
CompActionButtonPage.bas[121]  page.PageSiteMapPriority = {33} 
CompActionButtonPage.bas[122]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompActionButtonPage.bas[123]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompActionButtonPage.bas[124]  
CompActionButtonPage.bas[125]  ABMShared.BuildNavigationBar(page, {34} , {35} , {36} , {37} , {38} ) 
CompActionButtonPage.bas[126]  
CompActionButtonPage.bas[127]  ' create the page grid 
CompActionButtonPage.bas[128]  page.AddRows(3,True, {39} ).AddCells12(1, {40} ) 
CompActionButtonPage.bas[129]  page.AddRows(1,True, {41} ).AddCellsOS(1,0,0,0,12,8,6, {42} ) 
CompActionButtonPage.bas[130]  page.AddRows(1,True, {43} ).AddCells12(1, {44} ) 
CompActionButtonPage.bas[131]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompActionButtonPage.bas[132]  
CompActionButtonPage.bas[133]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompActionButtonPage.bas[134]  'page.NeedsCodeLabel = True 
CompActionButtonPage.bas[135]  
CompActionButtonPage.bas[136]  ABMShared.BuildFooter(page) 
CompActionButtonPage.bas[137] End Sub 
CompActionButtonPage.bas[138]  
CompActionButtonPage.bas[139] public Sub ConnectPage() 
CompActionButtonPage.bas[140]  'NEW 
CompActionButtonPage.bas[141]  ABMShared.ConnectNavigationBar(page) 
CompActionButtonPage.bas[142]  
CompActionButtonPage.bas[143]  Dim acb1 As ABMActionButton 
CompActionButtonPage.bas[144]  acb1.Initialize(page, {45} , {46} , {47} , {48} ) 
CompActionButtonPage.bas[145]  acb1.MainButton.size = ABM.BUTTONSIZE_LARGE 
CompActionButtonPage.bas[146]  
CompActionButtonPage.bas[147]  ' the sub buttons 
CompActionButtonPage.bas[148]  Dim btn1 As ABMButton 
CompActionButtonPage.bas[149]  btn1.InitializeFloating(page, {49} , {50} , {51} ) 
CompActionButtonPage.bas[150]  acb1.AddMenuButton(btn1) 
CompActionButtonPage.bas[151]  Dim btn2 As ABMButton 
CompActionButtonPage.bas[152]  btn2.InitializeFloating(page, {52} , {53} , {54} ) 
CompActionButtonPage.bas[153]  acb1.AddMenuButton(btn2) 
CompActionButtonPage.bas[154]  Dim btn3 As ABMButton 
CompActionButtonPage.bas[155]  btn3.InitializeFloating(page, {55} , {56} , {57} ) 
CompActionButtonPage.bas[156]  acb1.AddMenuButton(btn3) 
CompActionButtonPage.bas[157]  
CompActionButtonPage.bas[158]  ' add to page 
CompActionButtonPage.bas[159]  page.AddActionButton(acb1) 
CompActionButtonPage.bas[160]  
CompActionButtonPage.bas[161]  ' add paragraph 
CompActionButtonPage.bas[162]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {58} , {59} ) ) 
CompActionButtonPage.bas[163]  ' add a header label 
CompActionButtonPage.bas[164]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {60} , {61} )) 
CompActionButtonPage.bas[165]  ' add paragraph 
CompActionButtonPage.bas[166]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {62} , {63} ) ) 
CompActionButtonPage.bas[167]  
CompActionButtonPage.bas[168]  ' code block 
CompActionButtonPage.bas[169]  Dim code As StringBuilder 
CompActionButtonPage.bas[170]  code.Initialize 
CompActionButtonPage.bas[171]  code.Append( {64} ).Append(CRLF) 
CompActionButtonPage.bas[172]  code.Append( {65} ).Append(CRLF) 
CompActionButtonPage.bas[173]  code.Append( {169} ).Append(CRLF) 
CompActionButtonPage.bas[174]  code.Append( {74} ).Append(CRLF) 
CompActionButtonPage.bas[175]  code.Append( {75} ).Append(CRLF) 
CompActionButtonPage.bas[176]  code.Append( {76} ).Append(CRLF) 
CompActionButtonPage.bas[177]  code.Append( {77} ).Append(CRLF) 
CompActionButtonPage.bas[178]  code.Append( {175} ).Append(CRLF) 
CompActionButtonPage.bas[179]  code.Append( {85} ).Append(CRLF) 
CompActionButtonPage.bas[180]  code.Append( {86} ).Append(CRLF) 
CompActionButtonPage.bas[181]  code.Append( {181} ).Append(CRLF) 
CompActionButtonPage.bas[182]  code.Append( {94} ).Append(CRLF) 
CompActionButtonPage.bas[183]  code.Append( {95} ).Append(CRLF) 
CompActionButtonPage.bas[184]  code.Append( {187} ).Append(CRLF) 
CompActionButtonPage.bas[185]  code.Append( {103} ).Append(CRLF) 
CompActionButtonPage.bas[186]  code.Append( {104} ).Append(CRLF) 
CompActionButtonPage.bas[187]  code.Append( {105} ).Append(CRLF) 
CompActionButtonPage.bas[188]  code.Append( {106} ).Append(CRLF) 
CompActionButtonPage.bas[189]  
CompActionButtonPage.bas[190]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlock(page, {107} , code)) 
CompActionButtonPage.bas[191]  
CompActionButtonPage.bas[192]  ' add a header label 
CompActionButtonPage.bas[193]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {108} , {109} )) 
CompActionButtonPage.bas[194]  ' add paragraph 
CompActionButtonPage.bas[195]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {110} , {111} ) ) 
CompActionButtonPage.bas[196]  
CompActionButtonPage.bas[197]  ' image card 
CompActionButtonPage.bas[198]  Dim card2 As ABMCard 
CompActionButtonPage.bas[199]  card2.InitializeAsCard(page, {112} , {113} , {114} , ABM.CARD_NOTSPECIFIED, {115} ) 
CompActionButtonPage.bas[200]  card2.Image = {116} 
CompActionButtonPage.bas[201]  card2.AddAction( {117} ) 
CompActionButtonPage.bas[202]  page.Cell(4,1).AddComponent(card2) 
CompActionButtonPage.bas[203]  
CompActionButtonPage.bas[204]  ' create the action button 
CompActionButtonPage.bas[205]  Dim acb2 As ABMActionButton 
CompActionButtonPage.bas[206]  acb2.Initialize(page, {118} , {119} , {120} , {121} ) 
CompActionButtonPage.bas[207]  
CompActionButtonPage.bas[208]  ' the sub buttons 
CompActionButtonPage.bas[209]  Dim btn4 As ABMButton 
CompActionButtonPage.bas[210]  btn4.InitializeFloating(page, {122} , {123} , {124} ) 
CompActionButtonPage.bas[211]  acb2.AddMenuButton(btn4) 
CompActionButtonPage.bas[212]  Dim btn5 As ABMButton 
CompActionButtonPage.bas[213]  btn5.InitializeFloating(page, {125} , {126} , {127} ) 
CompActionButtonPage.bas[214]  acb2.AddMenuButton(btn5) 
CompActionButtonPage.bas[215]  
CompActionButtonPage.bas[216]  ' add to cell 
CompActionButtonPage.bas[217]  page.Cell(4,1).AddComponent(acb2) 
CompActionButtonPage.bas[218]  
CompActionButtonPage.bas[219]  ' add paragraph 
CompActionButtonPage.bas[220]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {128} , {129} ) ) 
CompActionButtonPage.bas[221]  
CompActionButtonPage.bas[222]  ' code block 
CompActionButtonPage.bas[223]  Dim code2 As StringBuilder 
CompActionButtonPage.bas[224]  code2.Initialize 
CompActionButtonPage.bas[225]  code2.Append( {193} ).Append(CRLF) 
CompActionButtonPage.bas[226]  code2.Append( {137} ).Append(CRLF) 
CompActionButtonPage.bas[227]  code2.Append( {138} ).Append(CRLF) 
CompActionButtonPage.bas[228]  
CompActionButtonPage.bas[229]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlock(page, {139} , code2)) 
CompActionButtonPage.bas[230]  
CompActionButtonPage.bas[231]  ' also add the components to the footer 
CompActionButtonPage.bas[232]  ABMShared.ConnectFooter(page) 
CompActionButtonPage.bas[233]  
CompActionButtonPage.bas[234]  page.Refresh ' IMPORTANT! 
CompActionButtonPage.bas[235]  
CompActionButtonPage.bas[236]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompActionButtonPage.bas[237]  page.FinishedLoading 'IMPORTANT 
CompActionButtonPage.bas[238]  
CompActionButtonPage.bas[239]  page.RestoreNavigationBarPosition 
CompActionButtonPage.bas[240] End Sub 
CompActionButtonPage.bas[241]  
CompActionButtonPage.bas[242] ' clicked on the navigation bar 
CompActionButtonPage.bas[243] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompActionButtonPage.bas[244]  page.SaveNavigationBarPosition 
CompActionButtonPage.bas[245]  If Action = {140} Then Return 
CompActionButtonPage.bas[246]  If Action = {141} Then 
CompActionButtonPage.bas[247]  myToastId = myToastId + 1 
CompActionButtonPage.bas[248]  page.ShowToast( {142} & myToastId, {143} , {144} , 5000) 
CompActionButtonPage.bas[249]  Return 
CompActionButtonPage.bas[250]  End If 
CompActionButtonPage.bas[251]  If Action = {145} Then 
CompActionButtonPage.bas[252]  ABMShared.LogOff(page) 
CompActionButtonPage.bas[253]  Return 
CompActionButtonPage.bas[254]  End If 
CompActionButtonPage.bas[255]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompActionButtonPage.bas[256] End Sub 
CompActionButtonPage.bas[257]  
CompActionButtonPage.bas[258] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompActionButtonPage.bas[259]  page.ws.Session.SetAttribute( {146} , {147} ) 
CompActionButtonPage.bas[260]  page.ws.Session.SetAttribute( {148} , {149} ) 
CompActionButtonPage.bas[261]  page.ws.Session.SetAttribute( {150} , {151} ) 
CompActionButtonPage.bas[262]  ABMShared.NavigateToPage(ws, ABMPageId, {152} ) 
CompActionButtonPage.bas[263] End Sub 
CompActionButtonPage.bas[264]  
CompActionButtonPage.bas[265] Sub acb1_Clicked(Target As String, SubTarget As String) 
CompActionButtonPage.bas[266]  If SubTarget= {153} Then 
CompActionButtonPage.bas[267]  Log( {154} ) 
CompActionButtonPage.bas[268]  Return 
CompActionButtonPage.bas[269]  End If 
CompActionButtonPage.bas[270]  Dim myTexts, myReturns As List 
CompActionButtonPage.bas[271]  myTexts.Initialize 
CompActionButtonPage.bas[272]  myReturns.Initialize 
CompActionButtonPage.bas[273]  myToastId = myToastId + 1 
CompActionButtonPage.bas[274]  page.ShowToast( {155} & myToastId, {156} , {157} & SubTarget, 5000) 
CompActionButtonPage.bas[275]  Return 
CompActionButtonPage.bas[276] End Sub 
CompActionButtonPage.bas[277]  
CompActionButtonPage.bas[278] Sub acb2_Clicked(Target As String, SubTarget As String) 
CompActionButtonPage.bas[279]  If SubTarget= {158} Then 
CompActionButtonPage.bas[280]  Log( {159} ) 
CompActionButtonPage.bas[281]  Return 
CompActionButtonPage.bas[282]  End If 
CompActionButtonPage.bas[283]  Dim myTexts, myReturns As List 
CompActionButtonPage.bas[284]  myTexts.Initialize 
CompActionButtonPage.bas[285]  myReturns.Initialize 
CompActionButtonPage.bas[286]  myToastId = myToastId + 1 
CompActionButtonPage.bas[287]  page.ShowToast( {160} & myToastId, {161} , {162} & SubTarget, 5000) 
CompActionButtonPage.bas[288]  Return 
CompActionButtonPage.bas[289] End Sub 
Analysing: CompAudioPlayerPage.bas
CompAudioPlayerPage.bas[0] ﻿Type=Class 
CompAudioPlayerPage.bas[0] Version=4.7 
CompAudioPlayerPage.bas[0] ModulesStructureVersion=1 
CompAudioPlayerPage.bas[0] B4J=true 
CompAudioPlayerPage.bas[0] @EndOfDesignText@ 
CompAudioPlayerPage.bas[1] 'Class module 
CompAudioPlayerPage.bas[2] Sub Class_Globals 
CompAudioPlayerPage.bas[3]  Private ws As WebSocket 'ignore 
CompAudioPlayerPage.bas[4]  ' will hold our page information 
CompAudioPlayerPage.bas[5]  Public page As ABMPage 
CompAudioPlayerPage.bas[6]  ' page theme 
CompAudioPlayerPage.bas[7]  Private theme As ABMTheme 
CompAudioPlayerPage.bas[8]  ' to access the constants 
CompAudioPlayerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompAudioPlayerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompAudioPlayerPage.bas[11]  Public Name As String = {5} 
CompAudioPlayerPage.bas[12]  ' will hold the unique browsers window id 
CompAudioPlayerPage.bas[13]  Private ABMPageId As String = {6} 
CompAudioPlayerPage.bas[14]  
CompAudioPlayerPage.bas[15]  ' your own variables 
CompAudioPlayerPage.bas[16]  Dim myToastId As Int 
CompAudioPlayerPage.bas[17] End Sub 
CompAudioPlayerPage.bas[18]  
CompAudioPlayerPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompAudioPlayerPage.bas[20] Public Sub Initialize 
CompAudioPlayerPage.bas[21]  ' build the local structure IMPORTANT! 
CompAudioPlayerPage.bas[22]  BuildPage 
CompAudioPlayerPage.bas[23] End Sub 
CompAudioPlayerPage.bas[24]  
CompAudioPlayerPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompAudioPlayerPage.bas[26]  Log( {7} ) 
CompAudioPlayerPage.bas[27]  ws = WebSocket1 
CompAudioPlayerPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompAudioPlayerPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompAudioPlayerPage.bas[30]  
CompAudioPlayerPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompAudioPlayerPage.bas[32]  If session.GetAttribute2( {8} , {9} ) = {10} Then 
CompAudioPlayerPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {11} ) 
CompAudioPlayerPage.bas[34]  Return 
CompAudioPlayerPage.bas[35]  End If 
CompAudioPlayerPage.bas[36]  End If 
CompAudioPlayerPage.bas[37]  
CompAudioPlayerPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompAudioPlayerPage.bas[39]  If page.ComesFromPageCache Then 
CompAudioPlayerPage.bas[40]  ' refresh the page 
CompAudioPlayerPage.bas[41]  page.Refresh 
CompAudioPlayerPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompAudioPlayerPage.bas[43]  page.FinishedLoading 
CompAudioPlayerPage.bas[44]  Else 
CompAudioPlayerPage.bas[45]  ' Prepare the page 
CompAudioPlayerPage.bas[46]  page.Prepare 
CompAudioPlayerPage.bas[47]  ' load the dynamic content 
CompAudioPlayerPage.bas[48]  ConnectPage 
CompAudioPlayerPage.bas[49]  End If 
CompAudioPlayerPage.bas[50]  Log(ABMPageId) 
CompAudioPlayerPage.bas[51] End Sub 
CompAudioPlayerPage.bas[52]  
CompAudioPlayerPage.bas[53] Private Sub WebSocket_Disconnected 
CompAudioPlayerPage.bas[54]  Log( {12} ) 
CompAudioPlayerPage.bas[55] End Sub 
CompAudioPlayerPage.bas[56]  
CompAudioPlayerPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompAudioPlayerPage.bas[58]  Dim eventName As String = Params.Get( {13} ) 
CompAudioPlayerPage.bas[59]  Dim eventParams() As String = Regex.Split( {14} ,Params.Get( {15} )) 
CompAudioPlayerPage.bas[60]  If eventName = {16} Then 
CompAudioPlayerPage.bas[61]  Log( {17} ) 
CompAudioPlayerPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompAudioPlayerPage.bas[63]  Return 
CompAudioPlayerPage.bas[64]  End If 
CompAudioPlayerPage.bas[65]  If SubExists(Me, eventName) Then 
CompAudioPlayerPage.bas[66]  Params.Remove( {18} ) 
CompAudioPlayerPage.bas[67]  Params.Remove( {19} ) 
CompAudioPlayerPage.bas[68]  Select Case Params.Size 
CompAudioPlayerPage.bas[69]  Case 0 
CompAudioPlayerPage.bas[70]  CallSub(Me, eventName) 
CompAudioPlayerPage.bas[71]  Case 1 
CompAudioPlayerPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompAudioPlayerPage.bas[73]  Case 2 
CompAudioPlayerPage.bas[74]  If Params.get(eventParams(0)) = {20} Then 
CompAudioPlayerPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompAudioPlayerPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompAudioPlayerPage.bas[77]  Else 
CompAudioPlayerPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompAudioPlayerPage.bas[79]  End If 
CompAudioPlayerPage.bas[80]  Case Else 
CompAudioPlayerPage.bas[81]  ' cannot be called directly, to many param 
CompAudioPlayerPage.bas[82]  CallSub2(Me, eventName, Params) 
CompAudioPlayerPage.bas[83]  End Select 
CompAudioPlayerPage.bas[84]  End If 
CompAudioPlayerPage.bas[85] End Sub 
CompAudioPlayerPage.bas[86]  
CompAudioPlayerPage.bas[87] public Sub BuildTheme() 
CompAudioPlayerPage.bas[88]  ' start with the base theme defined in ABMShared 
CompAudioPlayerPage.bas[89]  theme.Initialize( {21} ) 
CompAudioPlayerPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompAudioPlayerPage.bas[91]  
CompAudioPlayerPage.bas[92]  ' add additional themes specific for this page 
CompAudioPlayerPage.bas[93]  
CompAudioPlayerPage.bas[94] End Sub 
CompAudioPlayerPage.bas[95]  
CompAudioPlayerPage.bas[96] public Sub BuildPage() 
CompAudioPlayerPage.bas[97]  ' initialize the theme 
CompAudioPlayerPage.bas[98]  BuildTheme 
CompAudioPlayerPage.bas[99]  
CompAudioPlayerPage.bas[100]  ' initialize this page using our theme 
CompAudioPlayerPage.bas[101]  page.InitializeWithTheme(Name, {22} & ABMshared.AppName & {23} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompAudioPlayerPage.bas[102]  page.ShowLoader=True 
CompAudioPlayerPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompAudioPlayerPage.bas[104]  page.PageTitle = {24} 
CompAudioPlayerPage.bas[105]  page.PageDescription = {25} 
CompAudioPlayerPage.bas[106]  page.PageHTMLName = {26} 
CompAudioPlayerPage.bas[107]  page.PageKeywords = {27} 
CompAudioPlayerPage.bas[108]  page.PageSiteMapPriority = {28} 
CompAudioPlayerPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompAudioPlayerPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompAudioPlayerPage.bas[111]  
CompAudioPlayerPage.bas[112]  ABMShared.BuildNavigationBar(page, {29} , {30} , {31} , {32} , {33} ) 
CompAudioPlayerPage.bas[113]  
CompAudioPlayerPage.bas[114]  ' create the page grid 
CompAudioPlayerPage.bas[115]  page.AddRows(8,True, {34} ).AddCells12(1, {35} ) 
CompAudioPlayerPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompAudioPlayerPage.bas[117]  
CompAudioPlayerPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompAudioPlayerPage.bas[119]  'page.NeedsCodeLabel = True 
CompAudioPlayerPage.bas[120]  
CompAudioPlayerPage.bas[121]  ABMShared.BuildFooter(page) 
CompAudioPlayerPage.bas[122] End Sub 
CompAudioPlayerPage.bas[123]  
CompAudioPlayerPage.bas[124] public Sub ConnectPage() 
CompAudioPlayerPage.bas[125]  'NEW 
CompAudioPlayerPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompAudioPlayerPage.bas[127]  
CompAudioPlayerPage.bas[128]  ' add paragraph 
CompAudioPlayerPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {36} , {37} )) 
CompAudioPlayerPage.bas[130]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} )) 
CompAudioPlayerPage.bas[131]  ' add header 
CompAudioPlayerPage.bas[132]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {40} , {41} )) 
CompAudioPlayerPage.bas[133]  ' add paragraph 
CompAudioPlayerPage.bas[134]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} )) 
CompAudioPlayerPage.bas[135]  
CompAudioPlayerPage.bas[136]  Dim player1 As ABMAudioPlayer 
CompAudioPlayerPage.bas[137]  player1.Initialize(page, {44} , True, True, False, {45} ) 
CompAudioPlayerPage.bas[138]  page.Cell(2,1).AddComponent(player1) 
CompAudioPlayerPage.bas[139]  
CompAudioPlayerPage.bas[140]  Dim song As ABMAudioPlayerSong 
CompAudioPlayerPage.bas[141]  song.Initialize( {46} ) 
CompAudioPlayerPage.bas[142]  song.ImageUrl = {47} 
CompAudioPlayerPage.bas[143]  song.Author = {48} 
CompAudioPlayerPage.bas[144]  song.Title = {49} 
CompAudioPlayerPage.bas[145]  
CompAudioPlayerPage.bas[146]  player1.LoadSingleSong(song) 
CompAudioPlayerPage.bas[147]  
CompAudioPlayerPage.bas[148]  Dim code1 As String = {0} 
CompAudioPlayerPage.bas[159]  
CompAudioPlayerPage.bas[160]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {50} , code1)) 
CompAudioPlayerPage.bas[161]  
CompAudioPlayerPage.bas[162]  ' add header 
CompAudioPlayerPage.bas[163]  page.Cell(4,1).AddComponent(ABMShared.BuildHeader(page, {51} , {52} )) 
CompAudioPlayerPage.bas[164]  ' add paragraph 
CompAudioPlayerPage.bas[165]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {53} , {54} )) 
CompAudioPlayerPage.bas[166]  
CompAudioPlayerPage.bas[167]  Dim player2 As ABMAudioPlayer 
CompAudioPlayerPage.bas[168]  player2.Initialize(page, {55} , False, True, False, {56} ) 
CompAudioPlayerPage.bas[169]  page.Cell(5,1).AddComponent(player2) 
CompAudioPlayerPage.bas[170]  
CompAudioPlayerPage.bas[171]  Dim playlist As List 
CompAudioPlayerPage.bas[172]  playlist.Initialize 
CompAudioPlayerPage.bas[173]  playlist.Add(loadSong( {57} )) 
CompAudioPlayerPage.bas[174]  playlist.Add(loadSong( {58} )) 
CompAudioPlayerPage.bas[175]  playlist.Add(loadSong( {59} )) 
CompAudioPlayerPage.bas[176]  playlist.Add(loadSong( {60} )) 
CompAudioPlayerPage.bas[177]  playlist.Add(loadSong( {61} )) 
CompAudioPlayerPage.bas[178]  playlist.Add(loadSong( {62} )) 
CompAudioPlayerPage.bas[179]  playlist.Add(loadSong( {63} )) 
CompAudioPlayerPage.bas[180]  playlist.Add(loadSong( {64} )) 
CompAudioPlayerPage.bas[181]  playlist.Add(loadSong( {65} )) 
CompAudioPlayerPage.bas[182]  playlist.Add(loadSong( {66} )) 
CompAudioPlayerPage.bas[183]  
CompAudioPlayerPage.bas[184]  player2.LoadPlaylist(playlist) 
CompAudioPlayerPage.bas[185]  
CompAudioPlayerPage.bas[186]  Dim Code2 As String = {1} 
CompAudioPlayerPage.bas[204]  
CompAudioPlayerPage.bas[205]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {67} , Code2)) 
CompAudioPlayerPage.bas[206]  
CompAudioPlayerPage.bas[207]  Dim Code3 As String = {2} 
CompAudioPlayerPage.bas[215]  
CompAudioPlayerPage.bas[216]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {68} , Code3)) 
CompAudioPlayerPage.bas[217]  
CompAudioPlayerPage.bas[218]  
CompAudioPlayerPage.bas[219]  ' add header 
CompAudioPlayerPage.bas[220]  page.Cell(7,1).AddComponent(ABMShared.BuildHeader(page, {69} , {70} )) 
CompAudioPlayerPage.bas[221]  ' add paragraph 
CompAudioPlayerPage.bas[222]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {71} , {72} )) 
CompAudioPlayerPage.bas[223]  
CompAudioPlayerPage.bas[224]  Dim Code4 As String = {3} 
CompAudioPlayerPage.bas[227]  
CompAudioPlayerPage.bas[228]  page.Cell(8,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {73} , Code4)) 
CompAudioPlayerPage.bas[229]  
CompAudioPlayerPage.bas[230]  Dim Code5 As String = {4} 
CompAudioPlayerPage.bas[271]  
CompAudioPlayerPage.bas[272]  page.Cell(8,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {74} , Code5)) 
CompAudioPlayerPage.bas[273]  
CompAudioPlayerPage.bas[274]  ' also add the components to the footer 
CompAudioPlayerPage.bas[275]  ABMShared.ConnectFooter(page) 
CompAudioPlayerPage.bas[276]  
CompAudioPlayerPage.bas[277]  page.Refresh ' IMPORTANT 
CompAudioPlayerPage.bas[278]  
CompAudioPlayerPage.bas[279]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompAudioPlayerPage.bas[280]  page.FinishedLoading 'IMPORTANT 
CompAudioPlayerPage.bas[281]  
CompAudioPlayerPage.bas[282]  page.RestoreNavigationBarPosition 
CompAudioPlayerPage.bas[283] End Sub 
CompAudioPlayerPage.bas[284]  
CompAudioPlayerPage.bas[285] ' clicked on the navigation bar 
CompAudioPlayerPage.bas[286] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompAudioPlayerPage.bas[287]  page.SaveNavigationBarPosition 
CompAudioPlayerPage.bas[288]  If Action = {75} Then Return 
CompAudioPlayerPage.bas[289]  If Action = {76} Then 
CompAudioPlayerPage.bas[290]  myToastId = myToastId + 1 
CompAudioPlayerPage.bas[291]  page.ShowToast( {77} & myToastId, {78} , {79} , 5000) 
CompAudioPlayerPage.bas[292]  Log(ws.Session.GetAttribute( {80} )) 
CompAudioPlayerPage.bas[293]  Return 
CompAudioPlayerPage.bas[294]  End If 
CompAudioPlayerPage.bas[295]  If Action = {81} Then 
CompAudioPlayerPage.bas[296]  ABMShared.LogOff(page) 
CompAudioPlayerPage.bas[297]  Return 
CompAudioPlayerPage.bas[298]  End If 
CompAudioPlayerPage.bas[299]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompAudioPlayerPage.bas[300] End Sub 
CompAudioPlayerPage.bas[301]  
CompAudioPlayerPage.bas[302] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompAudioPlayerPage.bas[303]  page.ws.Session.SetAttribute( {82} , {83} ) 
CompAudioPlayerPage.bas[304]  page.ws.Session.SetAttribute( {84} , {85} ) 
CompAudioPlayerPage.bas[305]  page.ws.Session.SetAttribute( {86} , {87} ) 
CompAudioPlayerPage.bas[306]  ABMShared.NavigateToPage(ws, ABMPageId, {88} ) 
CompAudioPlayerPage.bas[307] End Sub 
CompAudioPlayerPage.bas[308]  
CompAudioPlayerPage.bas[309] Sub loadSong(Title As String) As ABMAudioPlayerSong 
CompAudioPlayerPage.bas[310]  Dim song As ABMAudioPlayerSong 
CompAudioPlayerPage.bas[311]  song.Initialize( {89} & Title & {90} ) 
CompAudioPlayerPage.bas[312]  song.ImageUrl = {91} 
CompAudioPlayerPage.bas[313]  song.Author = {92} 
CompAudioPlayerPage.bas[314]  song.Title = Title 
CompAudioPlayerPage.bas[315]  Return song 
CompAudioPlayerPage.bas[316] End Sub 
CompAudioPlayerPage.bas[317]  
CompAudioPlayerPage.bas[318] Sub LoadLyrics() As List 'ignore 
CompAudioPlayerPage.bas[319]  Dim l As List 
CompAudioPlayerPage.bas[320]  l.Initialize 
CompAudioPlayerPage.bas[321]  
CompAudioPlayerPage.bas[322]  l.Add( {93} ) 
CompAudioPlayerPage.bas[323]  l.Add( {94} ) 
CompAudioPlayerPage.bas[324]  l.Add( {95} ) 
CompAudioPlayerPage.bas[325]  l.Add( {96} ) 
CompAudioPlayerPage.bas[326]  l.Add( {97} ) 
CompAudioPlayerPage.bas[327]  l.Add( {98} ) 
CompAudioPlayerPage.bas[328]  l.Add( {99} ) 
CompAudioPlayerPage.bas[329]  l.Add( {100} ) 
CompAudioPlayerPage.bas[330]  l.Add( {101} ) 
CompAudioPlayerPage.bas[331]  l.Add( {102} ) 
CompAudioPlayerPage.bas[332]  l.Add( {103} ) 
CompAudioPlayerPage.bas[333]  l.Add( {104} ) 
CompAudioPlayerPage.bas[334]  l.Add( {105} ) 
CompAudioPlayerPage.bas[335]  l.Add( {106} ) 
CompAudioPlayerPage.bas[336]  l.Add( {107} ) 
CompAudioPlayerPage.bas[337]  l.Add( {108} ) 
CompAudioPlayerPage.bas[338]  l.Add( {109} ) 
CompAudioPlayerPage.bas[339]  l.Add( {110} ) 
CompAudioPlayerPage.bas[340]  l.Add( {111} ) 
CompAudioPlayerPage.bas[341]  l.Add( {112} ) 
CompAudioPlayerPage.bas[342]  l.Add( {113} ) 
CompAudioPlayerPage.bas[343]  l.Add( {114} ) 
CompAudioPlayerPage.bas[344]  l.Add( {115} ) 
CompAudioPlayerPage.bas[345]  l.Add( {116} ) 
CompAudioPlayerPage.bas[346]  l.Add( {117} ) 
CompAudioPlayerPage.bas[347]  l.Add( {118} ) 
CompAudioPlayerPage.bas[348]  l.Add( {119} ) 
CompAudioPlayerPage.bas[349]  l.Add( {120} ) 
CompAudioPlayerPage.bas[350]  l.Add( {121} ) 
CompAudioPlayerPage.bas[351]  l.Add( {122} ) 
CompAudioPlayerPage.bas[352]  l.Add( {123} ) 
CompAudioPlayerPage.bas[353]  l.Add( {124} ) 
CompAudioPlayerPage.bas[354]  l.Add( {125} ) 
CompAudioPlayerPage.bas[355]  l.Add( {126} ) 
CompAudioPlayerPage.bas[356]  
CompAudioPlayerPage.bas[357]  Return l 
CompAudioPlayerPage.bas[358] End Sub 
Analysing: CompBadgePage.bas
CompBadgePage.bas[0] ﻿Type=Class 
CompBadgePage.bas[0] Version=4.7 
CompBadgePage.bas[0] ModulesStructureVersion=1 
CompBadgePage.bas[0] B4J=true 
CompBadgePage.bas[0] @EndOfDesignText@ 
CompBadgePage.bas[1] 'Class module 
CompBadgePage.bas[2] Sub Class_Globals 
CompBadgePage.bas[3]  Private ws As WebSocket 'ignore 
CompBadgePage.bas[4]  ' will hold our page information 
CompBadgePage.bas[5]  Public page As ABMPage 
CompBadgePage.bas[6]  ' page theme 
CompBadgePage.bas[7]  Private theme As ABMTheme 
CompBadgePage.bas[8]  ' to access the constants 
CompBadgePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompBadgePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompBadgePage.bas[11]  Public Name As String = {0} 
CompBadgePage.bas[12]  ' will hold the unique browsers window id 
CompBadgePage.bas[13]  Private ABMPageId As String = {1} 
CompBadgePage.bas[14]  
CompBadgePage.bas[15]  ' your own variables 
CompBadgePage.bas[16]  Dim myToastId As Int 
CompBadgePage.bas[17]  Dim NewMsg As Int 
CompBadgePage.bas[18] End Sub 
CompBadgePage.bas[19]  
CompBadgePage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompBadgePage.bas[21] Public Sub Initialize 
CompBadgePage.bas[22]  ' build the local structure IMPORTANT! 
CompBadgePage.bas[23]  BuildPage 
CompBadgePage.bas[24] End Sub 
CompBadgePage.bas[25]  
CompBadgePage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompBadgePage.bas[27]  Log( {2} ) 
CompBadgePage.bas[28]  ws = WebSocket1 
CompBadgePage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompBadgePage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompBadgePage.bas[31]  
CompBadgePage.bas[32]  If ABMShared.NeedsAuthorization Then 
CompBadgePage.bas[33]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompBadgePage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompBadgePage.bas[35]  Return 
CompBadgePage.bas[36]  End If 
CompBadgePage.bas[37]  End If 
CompBadgePage.bas[38]  
CompBadgePage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompBadgePage.bas[40]  If page.ComesFromPageCache Then 
CompBadgePage.bas[41]  ' refresh the page 
CompBadgePage.bas[42]  page.Refresh 
CompBadgePage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompBadgePage.bas[44]  page.FinishedLoading 
CompBadgePage.bas[45]  Else 
CompBadgePage.bas[46]  ' Prepare the page 
CompBadgePage.bas[47]  page.Prepare 
CompBadgePage.bas[48]  ' load the dynamic content 
CompBadgePage.bas[49]  ConnectPage 
CompBadgePage.bas[50]  End If 
CompBadgePage.bas[51]  Log(ABMPageId) 
CompBadgePage.bas[52] End Sub 
CompBadgePage.bas[53]  
CompBadgePage.bas[54] Private Sub WebSocket_Disconnected 
CompBadgePage.bas[55]  Log( {7} ) 
CompBadgePage.bas[56] End Sub 
CompBadgePage.bas[57]  
CompBadgePage.bas[58] Sub Page_ParseEvent(Params As Map) 
CompBadgePage.bas[59]  Dim eventName As String = Params.Get( {8} ) 
CompBadgePage.bas[60]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompBadgePage.bas[61]  If eventName = {11} Then 
CompBadgePage.bas[62]  Log( {12} ) 
CompBadgePage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompBadgePage.bas[64]  Return 
CompBadgePage.bas[65]  End If 
CompBadgePage.bas[66]  If SubExists(Me, eventName) Then 
CompBadgePage.bas[67]  Params.Remove( {13} ) 
CompBadgePage.bas[68]  Params.Remove( {14} ) 
CompBadgePage.bas[69]  Select Case Params.Size 
CompBadgePage.bas[70]  Case 0 
CompBadgePage.bas[71]  CallSub(Me, eventName) 
CompBadgePage.bas[72]  Case 1 
CompBadgePage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompBadgePage.bas[74]  Case 2 
CompBadgePage.bas[75]  If Params.get(eventParams(0)) = {15} Then 
CompBadgePage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompBadgePage.bas[77]  CallSub2(Me, eventName, PassedTables) 
CompBadgePage.bas[78]  Else 
CompBadgePage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompBadgePage.bas[80]  End If 
CompBadgePage.bas[81]  Case Else 
CompBadgePage.bas[82]  ' cannot be called directly, to many param 
CompBadgePage.bas[83]  CallSub2(Me, eventName, Params) 
CompBadgePage.bas[84]  End Select 
CompBadgePage.bas[85]  End If 
CompBadgePage.bas[86] End Sub 
CompBadgePage.bas[87]  
CompBadgePage.bas[88] public Sub BuildTheme() 
CompBadgePage.bas[89]  ' start with the base theme defined in ABMShared 
CompBadgePage.bas[90]  theme.Initialize( {16} ) 
CompBadgePage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
CompBadgePage.bas[92]  
CompBadgePage.bas[93]  ' add additional themes specific for this page 
CompBadgePage.bas[94]  ' bluegray button 
CompBadgePage.bas[95]  theme.AddButtonTheme( {17} ) 
CompBadgePage.bas[96]  theme.Button( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompBadgePage.bas[97]  theme.Button( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompBadgePage.bas[98] End Sub 
CompBadgePage.bas[99]  
CompBadgePage.bas[100] public Sub BuildPage() 
CompBadgePage.bas[101]  ' initialize the theme 
CompBadgePage.bas[102]  BuildTheme 
CompBadgePage.bas[103]  
CompBadgePage.bas[104]  ' initialize this page using our theme 
CompBadgePage.bas[105]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompBadgePage.bas[106]  page.ShowLoader=True 
CompBadgePage.bas[107]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompBadgePage.bas[108]  page.PageTitle = {22} 
CompBadgePage.bas[109]  page.PageDescription = {23} 
CompBadgePage.bas[110]  page.PageHTMLName = {24} 
CompBadgePage.bas[111]  page.PageKeywords = {25} 
CompBadgePage.bas[112]  page.PageSiteMapPriority = {26} 
CompBadgePage.bas[113]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompBadgePage.bas[114]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompBadgePage.bas[115]  
CompBadgePage.bas[116]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompBadgePage.bas[117]  
CompBadgePage.bas[118]  ' create the page grid 
CompBadgePage.bas[119]  page.AddRows(9,True, {32} ).AddCells12(1, {33} ) 
CompBadgePage.bas[120]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompBadgePage.bas[121]  
CompBadgePage.bas[122]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompBadgePage.bas[123]  'page.NeedsCodeLabel = True 
CompBadgePage.bas[124]  
CompBadgePage.bas[125]  ABMShared.BuildFooter(page) 
CompBadgePage.bas[126] End Sub 
CompBadgePage.bas[127]  
CompBadgePage.bas[128] public Sub ConnectPage() 
CompBadgePage.bas[129]  'NEW 
CompBadgePage.bas[130]  ABMShared.ConnectNavigationBar(page) 
CompBadgePage.bas[131]  
CompBadgePage.bas[132]  ' add paragraph 
CompBadgePage.bas[133]  page.cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} ) ) 
CompBadgePage.bas[134]  
CompBadgePage.bas[135]  ' create list 
CompBadgePage.bas[136]  Dim list1 As ABMList 
CompBadgePage.bas[137]  list1.Initialize(page, {36} , ABM.COLLAPSE_ACCORDION, {37} ) 
CompBadgePage.bas[138]  
CompBadgePage.bas[139]  ' add items 
CompBadgePage.bas[140]  list1.AddItem( {38} , BuildItem( {39} , {40} , {41} , False)) 
CompBadgePage.bas[141]  list1.AddItem( {42} , BuildItem( {43} , {44} , {45} , True)) 
CompBadgePage.bas[142]  list1.AddItem( {46} , BuildItem( {47} , {48} , {49} , False)) 
CompBadgePage.bas[143]  list1.AddItem( {50} , BuildItem( {51} , {52} , {53} , False)) 
CompBadgePage.bas[144]  
CompBadgePage.bas[145]  page.Cell(2,1).AddComponent(list1) 
CompBadgePage.bas[146]  
CompBadgePage.bas[147]  ' add paragraph 
CompBadgePage.bas[148]  page.cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} ) ) 
CompBadgePage.bas[149]  
CompBadgePage.bas[150]  ' add buttons 
CompBadgePage.bas[151]  Dim btn1 As ABMButton 
CompBadgePage.bas[152]  btn1.InitializeRaised(page, {56} , {57} , {58} , {59} , {60} ) 
CompBadgePage.bas[153]  page.Cell(4,1).AddComponent(btn1) 
CompBadgePage.bas[154]  
CompBadgePage.bas[155]  ' add codeblock 
CompBadgePage.bas[156]  Dim code1 As StringBuilder 
CompBadgePage.bas[157]  code1.Initialize 
CompBadgePage.bas[158]  code1.Append( {61} ).Append(CRLF) 
CompBadgePage.bas[159]  code1.Append( {62} ).Append(CRLF) 
CompBadgePage.bas[160]  code1.Append( {202} ).Append(CRLF) 
CompBadgePage.bas[161]  code1.Append( {68} ).Append(CRLF) 
CompBadgePage.bas[162]  code1.Append( {69} ).Append(CRLF) 
CompBadgePage.bas[163]  code1.Append( {210} ).Append(CRLF) 
CompBadgePage.bas[164]  code1.Append( {218} ).Append(CRLF) 
CompBadgePage.bas[165]  code1.Append( {226} ).Append(CRLF) 
CompBadgePage.bas[166]  code1.Append( {234} ).Append(CRLF) 
CompBadgePage.bas[167]  
CompBadgePage.bas[168]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlock(page, {106} , code1)) 
CompBadgePage.bas[169]  
CompBadgePage.bas[170]  ' add codeblock 
CompBadgePage.bas[171]  Dim code2 As StringBuilder 
CompBadgePage.bas[172]  code2.Initialize 
CompBadgePage.bas[173]  code2.Append( {107} ).Append(CRLF) 
CompBadgePage.bas[174]  code2.Append( {108} ).Append(CRLF) 
CompBadgePage.bas[175]  code2.Append( {235} ).Append(CRLF) 
CompBadgePage.bas[176]  code2.Append( {238} ).Append(CRLF) 
CompBadgePage.bas[177]  code2.Append( {115} ).Append(CRLF) 
CompBadgePage.bas[178]  code2.Append( {116} ).Append(CRLF) 
CompBadgePage.bas[179]  code2.Append( {117} ).Append(CRLF) 
CompBadgePage.bas[180]  code2.Append( {242} ).Append(CRLF) 
CompBadgePage.bas[181]  code2.Append( {123} ).Append(CRLF) 
CompBadgePage.bas[182]  code2.Append( {124} ).Append(CRLF) 
CompBadgePage.bas[183]  code2.Append( {125} ).Append(CRLF) 
CompBadgePage.bas[184]  code2.Append( {246} ).Append(CRLF) 
CompBadgePage.bas[185]  code2.Append( {131} ).Append(CRLF) 
CompBadgePage.bas[186]  code2.Append( {132} ).Append(CRLF) 
CompBadgePage.bas[187]  code2.Append( {133} ).Append(CRLF) 
CompBadgePage.bas[188]  code2.Append( {134} ).Append(CRLF) 
CompBadgePage.bas[189]  
CompBadgePage.bas[190]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {135} , code2)) 
CompBadgePage.bas[191]  
CompBadgePage.bas[192]  ' add paragraph 
CompBadgePage.bas[193]  page.cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {136} , {137} ) ) 
CompBadgePage.bas[194]  
CompBadgePage.bas[195]  ' add codeblock 
CompBadgePage.bas[196]  Dim code3 As StringBuilder 
CompBadgePage.bas[197]  code3.Initialize 
CompBadgePage.bas[198]  code3.Append( {138} ).Append(CRLF) 
CompBadgePage.bas[199]  code3.Append( {139} ).Append(CRLF) 
CompBadgePage.bas[200]  code3.Append( {248} ).Append(CRLF) 
CompBadgePage.bas[201]  code3.Append( {143} ).Append(CRLF) 
CompBadgePage.bas[202]  code3.Append( {144} ).Append(CRLF) 
CompBadgePage.bas[203]  code3.Append( {145} ).Append(CRLF) 
CompBadgePage.bas[204]  code3.Append( {250} ).Append(CRLF) 
CompBadgePage.bas[205]  code3.Append( {149} ).Append(CRLF) 
CompBadgePage.bas[206]  code3.Append( {150} ).Append(CRLF) 
CompBadgePage.bas[207]  code3.Append( {151} ).Append(CRLF) 
CompBadgePage.bas[208]  code3.Append( {152} ).Append(CRLF) 
CompBadgePage.bas[209]  
CompBadgePage.bas[210]  page.Cell(8,1).AddComponent(ABMShared.BuildCodeBlock(page, {153} , code3)) 
CompBadgePage.bas[211]  
CompBadgePage.bas[212]  ' add codeblock 
CompBadgePage.bas[213]  Dim code4 As StringBuilder 
CompBadgePage.bas[214]  code4.Initialize 
CompBadgePage.bas[215]  code4.Append( {154} ).Append(CRLF) 
CompBadgePage.bas[216]  code4.Append( {155} ).Append(CRLF) 
CompBadgePage.bas[217]  code4.Append( {252} ).Append(CRLF) 
CompBadgePage.bas[218]  code4.Append( {159} ).Append(CRLF) 
CompBadgePage.bas[219]  code4.Append( {254} ).Append(CRLF) 
CompBadgePage.bas[220]  code4.Append( {163} ).Append(CRLF) 
CompBadgePage.bas[221]  code4.Append( {256} ).Append(CRLF) 
CompBadgePage.bas[222]  code4.Append( {167} ).Append(CRLF) 
CompBadgePage.bas[223]  code4.Append( {168} ).Append(CRLF) 
CompBadgePage.bas[224]  code4.Append( {169} ).Append(CRLF) 
CompBadgePage.bas[225]  code4.Append( {170} ).Append(CRLF) 
CompBadgePage.bas[226]  code4.Append( {171} ).Append(CRLF) 
CompBadgePage.bas[227]  
CompBadgePage.bas[228]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {172} , code4)) 
CompBadgePage.bas[229]  
CompBadgePage.bas[230]  ' also add the components to the footer 
CompBadgePage.bas[231]  ABMShared.ConnectFooter(page) 
CompBadgePage.bas[232]  
CompBadgePage.bas[233]  page.Refresh ' IMPORTANT 
CompBadgePage.bas[234]  
CompBadgePage.bas[235]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompBadgePage.bas[236]  page.FinishedLoading 'IMPORTANT 
CompBadgePage.bas[237]  
CompBadgePage.bas[238]  page.RestoreNavigationBarPosition 
CompBadgePage.bas[239] End Sub 
CompBadgePage.bas[240]  
CompBadgePage.bas[241] Sub BuildItem(id As String, text As String, messages As String, isnew As Boolean) As ABMContainer 
CompBadgePage.bas[242]  Dim ItemCont As ABMContainer 
CompBadgePage.bas[243]  ItemCont.Initialize(page, id, {173} ) 
CompBadgePage.bas[244]  ItemCont.AddRowsM(1,False,0,0, {174} ).AddCellsOSMP(1,0,0,0,10,10,10,6,0,0,0, {175} ).AddCellsOSMP(1,0,0,0,2,2,2,6,0,0,0, {176} ) 
CompBadgePage.bas[245]  ItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompBadgePage.bas[246]  
CompBadgePage.bas[247]  Dim lbl As ABMLabel 
CompBadgePage.bas[248]  lbl.Initialize(page, id & {177} , text, ABM.SIZE_PARAGRAPH, False, {178} ) 
CompBadgePage.bas[249]  ItemCont.Cell(1,1).AddComponent(lbl) 
CompBadgePage.bas[250]  
CompBadgePage.bas[251]  Dim badge As ABMBadge 
CompBadgePage.bas[252]  badge.Initialize(page, id & {179} , messages, isnew, {180} ) 
CompBadgePage.bas[253]  ItemCont.Cell(1,2).AddComponent(badge) 
CompBadgePage.bas[254]  
CompBadgePage.bas[255]  Return ItemCont 
CompBadgePage.bas[256] End Sub 
CompBadgePage.bas[257]  
CompBadgePage.bas[258] ' clicked on the navigation bar 
CompBadgePage.bas[259] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompBadgePage.bas[260]  page.SaveNavigationBarPosition 
CompBadgePage.bas[261]  If Action = {181} Then Return 
CompBadgePage.bas[262]  If Action = {182} Then 
CompBadgePage.bas[263]  myToastId = myToastId + 1 
CompBadgePage.bas[264]  page.ShowToast( {183} & myToastId, {184} , {185} , 5000) 
CompBadgePage.bas[265]  Return 
CompBadgePage.bas[266]  End If 
CompBadgePage.bas[267]  If Action = {186} Then 
CompBadgePage.bas[268]  ABMShared.LogOff(page) 
CompBadgePage.bas[269]  Return 
CompBadgePage.bas[270]  End If 
CompBadgePage.bas[271]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompBadgePage.bas[272] End Sub 
CompBadgePage.bas[273]  
CompBadgePage.bas[274] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompBadgePage.bas[275]  page.ws.Session.SetAttribute( {187} , {188} ) 
CompBadgePage.bas[276]  page.ws.Session.SetAttribute( {189} , {190} ) 
CompBadgePage.bas[277]  page.ws.Session.SetAttribute( {191} , {192} ) 
CompBadgePage.bas[278]  ABMShared.NavigateToPage(ws, ABMPageId, {193} ) 
CompBadgePage.bas[279] End Sub 
CompBadgePage.bas[280]  
CompBadgePage.bas[281] Sub btn1_Clicked(Target As String) 
CompBadgePage.bas[282]  ' get the list component from the page 
CompBadgePage.bas[283]  Dim list1 As ABMList = page.Component( {194} ) 
CompBadgePage.bas[284]  ' get the third item (brother) 
CompBadgePage.bas[285]  Dim cont As ABMContainer = list1.Item( {195} ) 
CompBadgePage.bas[286]  ' get the badge control 
CompBadgePage.bas[287]  Dim badge As ABMBadge = cont.Component( {196} ) 
CompBadgePage.bas[288]  badge.IsNew = True 
CompBadgePage.bas[289]  NewMsg = NewMsg + 1 
CompBadgePage.bas[290]  badge.Text = NewMsg 
CompBadgePage.bas[291]  badge.Refresh ' IMPORTANT 
CompBadgePage.bas[292] End Sub 
CompBadgePage.bas[293]  
CompBadgePage.bas[294] Sub list1_Clicked(ItemId As String) 
CompBadgePage.bas[295]  ' get the list component from the page 
CompBadgePage.bas[296]  Dim list1 As ABMList = page.Component( {197} ) 
CompBadgePage.bas[297]  ' get the item 
CompBadgePage.bas[298]  Dim cont As ABMContainer = list1.Item(ItemId) 
CompBadgePage.bas[299]  ' get the badge control 
CompBadgePage.bas[300]  Dim badge As ABMBadge = cont.Component(ItemId & {198} ) 
CompBadgePage.bas[301]  badge.IsNew = False 
CompBadgePage.bas[302]  
CompBadgePage.bas[303]  badge.Refresh ' IMPORTANT 
CompBadgePage.bas[304] End Sub 
Analysing: CompButtonPage.bas
CompButtonPage.bas[0] ﻿Type=Class 
CompButtonPage.bas[0] Version=4.7 
CompButtonPage.bas[0] ModulesStructureVersion=1 
CompButtonPage.bas[0] B4J=true 
CompButtonPage.bas[0] @EndOfDesignText@ 
CompButtonPage.bas[1] 'Class module 
CompButtonPage.bas[2] Sub Class_Globals 
CompButtonPage.bas[3]  Private ws As WebSocket 'ignore 
CompButtonPage.bas[4]  ' will hold our page information 
CompButtonPage.bas[5]  Public page As ABMPage 
CompButtonPage.bas[6]  ' page theme 
CompButtonPage.bas[7]  Private theme As ABMTheme 
CompButtonPage.bas[8]  ' to access the constants 
CompButtonPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompButtonPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompButtonPage.bas[11]  Public Name As String = {0} 
CompButtonPage.bas[12]  ' will hold the unique browsers window id 
CompButtonPage.bas[13]  Private ABMPageId As String = {1} 
CompButtonPage.bas[14]  
CompButtonPage.bas[15]  ' your own variables 
CompButtonPage.bas[16]  Dim myToastId As Int 
CompButtonPage.bas[17] End Sub 
CompButtonPage.bas[18]  
CompButtonPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompButtonPage.bas[20] Public Sub Initialize 
CompButtonPage.bas[21]  ' build the local structure IMPORTANT! 
CompButtonPage.bas[22]  BuildPage 
CompButtonPage.bas[23] End Sub 
CompButtonPage.bas[24]  
CompButtonPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompButtonPage.bas[26]  Log( {2} ) 
CompButtonPage.bas[27]  ws = WebSocket1 
CompButtonPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompButtonPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompButtonPage.bas[30]  
CompButtonPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompButtonPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompButtonPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompButtonPage.bas[34]  Return 
CompButtonPage.bas[35]  End If 
CompButtonPage.bas[36]  End If 
CompButtonPage.bas[37]  
CompButtonPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompButtonPage.bas[39]  If page.ComesFromPageCache Then 
CompButtonPage.bas[40]  ' refresh the page 
CompButtonPage.bas[41]  page.Refresh 
CompButtonPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompButtonPage.bas[43]  page.FinishedLoading 
CompButtonPage.bas[44]  Else 
CompButtonPage.bas[45]  ' Prepare the page 
CompButtonPage.bas[46]  page.Prepare 
CompButtonPage.bas[47]  ' load the dynamic content 
CompButtonPage.bas[48]  ConnectPage 
CompButtonPage.bas[49]  End If 
CompButtonPage.bas[50]  Log(ABMPageId) 
CompButtonPage.bas[51] End Sub 
CompButtonPage.bas[52]  
CompButtonPage.bas[53] Private Sub WebSocket_Disconnected 
CompButtonPage.bas[54]  Log( {7} ) 
CompButtonPage.bas[55] End Sub 
CompButtonPage.bas[56]  
CompButtonPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompButtonPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompButtonPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompButtonPage.bas[60]  If eventName = {11} Then 
CompButtonPage.bas[61]  Log( {12} ) 
CompButtonPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompButtonPage.bas[63]  Return 
CompButtonPage.bas[64]  End If 
CompButtonPage.bas[65]  If SubExists(Me, eventName) Then 
CompButtonPage.bas[66]  Params.Remove( {13} ) 
CompButtonPage.bas[67]  Params.Remove( {14} ) 
CompButtonPage.bas[68]  Select Case Params.Size 
CompButtonPage.bas[69]  Case 0 
CompButtonPage.bas[70]  CallSub(Me, eventName) 
CompButtonPage.bas[71]  Case 1 
CompButtonPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompButtonPage.bas[73]  Case 2 
CompButtonPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompButtonPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompButtonPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompButtonPage.bas[77]  Else 
CompButtonPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompButtonPage.bas[79]  End If 
CompButtonPage.bas[80]  Case Else 
CompButtonPage.bas[81]  ' cannot be called directly, to many param 
CompButtonPage.bas[82]  CallSub2(Me, eventName, Params) 
CompButtonPage.bas[83]  End Select 
CompButtonPage.bas[84]  End If 
CompButtonPage.bas[85] End Sub 
CompButtonPage.bas[86]  
CompButtonPage.bas[87] public Sub BuildTheme() 
CompButtonPage.bas[88]  ' start with the base theme defined in ABMShared 
CompButtonPage.bas[89]  theme.Initialize( {16} ) 
CompButtonPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompButtonPage.bas[91]  
CompButtonPage.bas[92]  ' add additional themes specific for this page 
CompButtonPage.bas[93]  
CompButtonPage.bas[94]  ' toast theme 
CompButtonPage.bas[95]  theme.AddToastTheme( {17} ) 
CompButtonPage.bas[96]  theme.Toast( {18} ).BackColor = ABM.COLOR_GREEN 
CompButtonPage.bas[97]  theme.Toast( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN2 
CompButtonPage.bas[98]  
CompButtonPage.bas[99]  ' bluegray button 
CompButtonPage.bas[100]  theme.AddButtonTheme( {20} ) 
CompButtonPage.bas[101]  theme.Button( {21} ).BackColor = ABM.COLOR_BLUEGREY 
CompButtonPage.bas[102]  theme.Button( {22} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompButtonPage.bas[103]  
CompButtonPage.bas[104]  ' darkred button 
CompButtonPage.bas[105]  theme.AddButtonTheme( {23} ) 
CompButtonPage.bas[106]  theme.Button( {24} ).BackColor = ABM.COLOR_RED 
CompButtonPage.bas[107]  theme.Button( {25} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompButtonPage.bas[108]  
CompButtonPage.bas[109]  ' transparent button 
CompButtonPage.bas[110]  theme.AddButtonTheme( {26} ) 
CompButtonPage.bas[111]  theme.Button( {27} ).BackColor = ABM.COLOR_TRANSPARENT 
CompButtonPage.bas[112]  
CompButtonPage.bas[113]  ' darkgreen button 
CompButtonPage.bas[114]  theme.AddButtonTheme( {28} ) 
CompButtonPage.bas[115]  theme.Button( {29} ).BackColor = ABM.COLOR_GREEN 
CompButtonPage.bas[116]  theme.Button( {30} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompButtonPage.bas[117]  
CompButtonPage.bas[118]  ' modal sheet 
CompButtonPage.bas[119]  theme.AddContainerTheme( {31} ) 
CompButtonPage.bas[120]  theme.Container( {32} ).BackColor = ABM.COLOR_WHITE 
CompButtonPage.bas[121] End Sub 
CompButtonPage.bas[122]  
CompButtonPage.bas[123] public Sub BuildPage() 
CompButtonPage.bas[124]  ' initialize the theme 
CompButtonPage.bas[125]  BuildTheme 
CompButtonPage.bas[126]  
CompButtonPage.bas[127]  ' initialize this page using our theme 
CompButtonPage.bas[128]  page.InitializeWithTheme(Name, {33} & ABMshared.AppName & {34} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompButtonPage.bas[129]  page.ShowLoader=True 
CompButtonPage.bas[130]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompButtonPage.bas[131]  page.PageTitle = {35} 
CompButtonPage.bas[132]  page.PageDescription = {36} 
CompButtonPage.bas[133]  page.PageHTMLName = {37} 
CompButtonPage.bas[134]  page.PageKeywords = {38} 
CompButtonPage.bas[135]  page.PageSiteMapPriority = {39} 
CompButtonPage.bas[136]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompButtonPage.bas[137]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompButtonPage.bas[138]  
CompButtonPage.bas[139]  ABMShared.BuildNavigationBar(page, {40} , {41} , {42} , {43} , {44} ) 
CompButtonPage.bas[140]  
CompButtonPage.bas[141]  ' create the page grid 
CompButtonPage.bas[142]  page.AddRows(1,True, {45} ).AddCells12(1, {46} ) 
CompButtonPage.bas[143]  page.AddRows(1,True, {47} ).AddCellsOS(1,0,0,0,12,9,10, {48} ) 
CompButtonPage.bas[144]  page.AddRows(13,True, {49} ).AddCells12(1, {50} ) 
CompButtonPage.bas[145]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompButtonPage.bas[146]  
CompButtonPage.bas[147]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompButtonPage.bas[148]  'page.NeedsCodeLabel = True 
CompButtonPage.bas[149]  
CompButtonPage.bas[150]  page.AddFXToast( {51} , 0, {52} , {53} , {54} , 5000) 
CompButtonPage.bas[151]  
CompButtonPage.bas[152]  ABMShared.BuildFooter(page) 
CompButtonPage.bas[153] End Sub 
CompButtonPage.bas[154]  
CompButtonPage.bas[155] Sub ConnectPage() 
CompButtonPage.bas[156]  'NEW 
CompButtonPage.bas[157]  ABMShared.ConnectNavigationBar(page) 
CompButtonPage.bas[158]  
CompButtonPage.bas[159]  ' add paragraph 
CompButtonPage.bas[160]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {55} , {56} ) ) 
CompButtonPage.bas[161]  ' add a header label 
CompButtonPage.bas[162]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {57} , {58} )) 
CompButtonPage.bas[163]  
CompButtonPage.bas[164]  ' add buttons 
CompButtonPage.bas[165]  Dim btn1 As ABMButton 
CompButtonPage.bas[166]  btn1.InitializeRaised(page, {59} , {60} , ABM.ICONALIGN_LEFT, {61} , {62} ) 
CompButtonPage.bas[167]  page.Cell(2,1).AddComponent(btn1) 
CompButtonPage.bas[168]  
CompButtonPage.bas[169]  Dim btn2 As ABMButton 
CompButtonPage.bas[170]  btn2.InitializeRaised(page, {63} , {64} , ABM.ICONALIGN_LEFT, {65} , {66} ) 
CompButtonPage.bas[171]  page.Cell(2,1).AddComponent(btn2) 
CompButtonPage.bas[172]  
CompButtonPage.bas[173]  Dim btn3 As ABMButton 
CompButtonPage.bas[174]  btn3.InitializeRaised(page, {67} , {68} , ABM.ICONALIGN_RIGHT, {69} , {70} ) 
CompButtonPage.bas[175]  page.Cell(2,1).AddComponent(btn3) 
CompButtonPage.bas[176]  
CompButtonPage.bas[177]  ' add codeblock 
CompButtonPage.bas[178]  Dim code As StringBuilder 
CompButtonPage.bas[179]  code.Initialize 
CompButtonPage.bas[180]  code.Append( {71} ).Append(CRLF) 
CompButtonPage.bas[181]  code.Append( {264} ).Append(CRLF) 
CompButtonPage.bas[182]  code.Append( {83} ).Append(CRLF) 
CompButtonPage.bas[183]  code.Append( {84} ).Append(CRLF) 
CompButtonPage.bas[184]  code.Append( {85} ).Append(CRLF) 
CompButtonPage.bas[185]  code.Append( {272} ).Append(CRLF) 
CompButtonPage.bas[186]  code.Append( {95} ).Append(CRLF) 
CompButtonPage.bas[187]  code.Append( {96} ).Append(CRLF) 
CompButtonPage.bas[188]  code.Append( {97} ).Append(CRLF) 
CompButtonPage.bas[189]  code.Append( {280} ).Append(CRLF) 
CompButtonPage.bas[190]  code.Append( {107} ).Append(CRLF) 
CompButtonPage.bas[191]  
CompButtonPage.bas[192]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {108} , code)) 
CompButtonPage.bas[193]  
CompButtonPage.bas[194]  ' add a header label 
CompButtonPage.bas[195]  page.Cell(4,1).AddComponent(ABMShared.BuildHeader(page, {109} , {110} )) 
CompButtonPage.bas[196]  
CompButtonPage.bas[197]  Dim btn4 As ABMButton 
CompButtonPage.bas[198]  btn4.Initializefloating(page, {111} , {112} , {113} ) 
CompButtonPage.bas[199]  btn4.size = ABM.BUTTONSIZE_LARGE 
CompButtonPage.bas[200]  page.Cell(5,1).AddComponent(btn4) 
CompButtonPage.bas[201]  
CompButtonPage.bas[202]  ' add codeblock 
CompButtonPage.bas[203]  Dim code2 As StringBuilder 
CompButtonPage.bas[204]  code2.Initialize 
CompButtonPage.bas[205]  code2.Append( {114} ).Append(CRLF) 
CompButtonPage.bas[206]  code2.Append( {286} ).Append(CRLF) 
CompButtonPage.bas[207]  code2.Append( {122} ).Append(CRLF) 
CompButtonPage.bas[208]  code2.Append( {123} ).Append(CRLF) 
CompButtonPage.bas[209]  
CompButtonPage.bas[210]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {124} , code2)) 
CompButtonPage.bas[211]  
CompButtonPage.bas[212]  ' add a header label 
CompButtonPage.bas[213]  page.Cell(7,1).AddComponent(ABMShared.BuildHeader(page, {125} , {126} )) 
CompButtonPage.bas[214]  
CompButtonPage.bas[215]  Dim btn5 As ABMButton 
CompButtonPage.bas[216]  btn5.InitializeFlat(page, {127} , {128} , {129} , {130} , {131} ) 
CompButtonPage.bas[217]  page.Cell(8,1).AddComponent(btn5) 
CompButtonPage.bas[218]  
CompButtonPage.bas[219]  ' add codeblock 
CompButtonPage.bas[220]  Dim code3 As StringBuilder 
CompButtonPage.bas[221]  code3.Initialize 
CompButtonPage.bas[222]  code3.Append( {132} ).Append(CRLF) 
CompButtonPage.bas[223]  code3.Append( {296} ).Append(CRLF) 
CompButtonPage.bas[224]  code3.Append( {298} ).Append(CRLF) 
CompButtonPage.bas[225]  
CompButtonPage.bas[226]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {147} , code3)) 
CompButtonPage.bas[227]  
CompButtonPage.bas[228]  ' add a header label 
CompButtonPage.bas[229]  page.Cell(10,1).AddComponent(ABMShared.BuildHeader(page, {148} , {149} )) 
CompButtonPage.bas[230]  ' add paragraph 
CompButtonPage.bas[231]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {150} , {151} ) ) 
CompButtonPage.bas[232]  
CompButtonPage.bas[233]  Dim btn6 As ABMButton 
CompButtonPage.bas[234]  btn6.InitializeRaised(page, {152} , {153} , ABM.ICONALIGN_RIGHT, {154} , {155} ) 
CompButtonPage.bas[235]  btn6.size = ABM.BUTTONSIZE_SMALL 
CompButtonPage.bas[236]  page.Cell(11,1).AddComponent(btn6) 
CompButtonPage.bas[237]  
CompButtonPage.bas[238]  Dim btn6b As ABMButton 
CompButtonPage.bas[239]  btn6b.InitializeRaised(page, {156} , {157} , ABM.ICONALIGN_RIGHT, {158} , {159} ) 
CompButtonPage.bas[240]  btn6b.size = ABM.BUTTONSIZE_NORMAL 
CompButtonPage.bas[241]  page.Cell(11,1).AddComponent(btn6b) 
CompButtonPage.bas[242]  
CompButtonPage.bas[243]  Dim btn6c As ABMButton 
CompButtonPage.bas[244]  btn6c.InitializeRaised(page, {160} , {161} , ABM.ICONALIGN_RIGHT, {162} , {163} ) 
CompButtonPage.bas[245]  btn6c.size = ABM.BUTTONSIZE_LARGE 
CompButtonPage.bas[246]  page.Cell(11,1).AddComponent(btn6c) 
CompButtonPage.bas[247]  
CompButtonPage.bas[248]  ' add codeblock 
CompButtonPage.bas[249]  Dim code4 As StringBuilder 
CompButtonPage.bas[250]  code4.Initialize 
CompButtonPage.bas[251]  code4.Append( {164} ).Append(CRLF) 
CompButtonPage.bas[252]  code4.Append( {306} ).Append(CRLF) 
CompButtonPage.bas[253]  code4.Append( {174} ).Append(CRLF) 
CompButtonPage.bas[254]  code4.Append( {175} ).Append(CRLF) 
CompButtonPage.bas[255]  
CompButtonPage.bas[256]  page.Cell(12,1).AddComponent(ABMShared.BuildCodeBlock(page, {176} , code4)) 
CompButtonPage.bas[257]  
CompButtonPage.bas[258]  ' add a header label 
CompButtonPage.bas[259]  page.Cell(13,1).AddComponent(ABMShared.BuildHeader(page, {177} , {178} )) 
CompButtonPage.bas[260]  ' add paragraph 
CompButtonPage.bas[261]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {179} , {180} ) ) 
CompButtonPage.bas[262]  
CompButtonPage.bas[263]  Dim btn7 As ABMButton 
CompButtonPage.bas[264]  btn7.InitializeRaised(page, {181} , {182} , ABM.ICONALIGN_RIGHT, {183} , {184} ) 
CompButtonPage.bas[265]  btn7.size = ABM.BUTTONSIZE_LARGE 
CompButtonPage.bas[266]  btn7.Enabled = False 
CompButtonPage.bas[267]  page.Cell(14,1).AddComponent(btn7) 
CompButtonPage.bas[268]  
CompButtonPage.bas[269]  ' add codeblock 
CompButtonPage.bas[270]  Dim code5 As StringBuilder 
CompButtonPage.bas[271]  code5.Initialize 
CompButtonPage.bas[272]  code5.Append( {185} ).Append(CRLF) 
CompButtonPage.bas[273]  code5.Append( {314} ).Append(CRLF) 
CompButtonPage.bas[274]  code5.Append( {195} ).Append(CRLF) 
CompButtonPage.bas[275]  code5.Append( {196} ).Append(CRLF) 
CompButtonPage.bas[276]  code5.Append( {197} ).Append(CRLF) 
CompButtonPage.bas[277]  
CompButtonPage.bas[278]  page.Cell(15,1).AddComponent(ABMShared.BuildCodeBlock(page, {198} , code5)) 
CompButtonPage.bas[279]  
CompButtonPage.bas[280]  ' add a popup window 
CompButtonPage.bas[281]  page.AddModalSheetTemplate(ConnectModal) 
CompButtonPage.bas[282]  
CompButtonPage.bas[283]  ' also add the components to the footer 
CompButtonPage.bas[284]  ABMShared.ConnectFooter(page) 
CompButtonPage.bas[285]  
CompButtonPage.bas[286]  page.Refresh ' IMPORTANT 
CompButtonPage.bas[287]  
CompButtonPage.bas[288]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompButtonPage.bas[289]  page.FinishedLoading 'IMPORTANT 
CompButtonPage.bas[290]  
CompButtonPage.bas[291]  page.RestoreNavigationBarPosition 
CompButtonPage.bas[292] End Sub 
CompButtonPage.bas[293]  
CompButtonPage.bas[294] Sub ConnectModal() As ABMModalSheet 
CompButtonPage.bas[295]  Dim myModal As ABMModalSheet 
CompButtonPage.bas[296]  myModal.Initialize(page, {199} , False, False, {200} ) 
CompButtonPage.bas[297]  myModal.Content.UseTheme( {201} ) 
CompButtonPage.bas[298]  myModal.Footer.UseTheme( {202} ) 
CompButtonPage.bas[299]  myModal.IsDismissible = True 
CompButtonPage.bas[300]  
CompButtonPage.bas[301]  myModal.Content.AddRows(1, True, {203} ).AddCells12(1, {204} ) 
CompButtonPage.bas[302]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompButtonPage.bas[303]  
CompButtonPage.bas[304]  Dim lbl1 As ABMLabel 
CompButtonPage.bas[305]  lbl1.Initialize(page, {205} , {206} ,ABM.SIZE_PARAGRAPH, False, {207} ) 
CompButtonPage.bas[306]  myModal.Content.Cell(1,1).AddComponent(lbl1) 
CompButtonPage.bas[307]  
CompButtonPage.bas[308]  Return myModal 
CompButtonPage.bas[309] End Sub 
CompButtonPage.bas[310]  
CompButtonPage.bas[311] ' clicked on the navigation bar 
CompButtonPage.bas[312] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompButtonPage.bas[313]  page.SaveNavigationBarPosition 
CompButtonPage.bas[314]  If Action = {208} Then Return 
CompButtonPage.bas[315]  If Action = {209} Then 
CompButtonPage.bas[316]  myToastId = myToastId + 1 
CompButtonPage.bas[317]  page.ShowToast( {210} & myToastId, {211} , {212} , 5000) 
CompButtonPage.bas[318]  Return 
CompButtonPage.bas[319]  End If 
CompButtonPage.bas[320]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompButtonPage.bas[321] End Sub 
CompButtonPage.bas[322]  
CompButtonPage.bas[323] Sub btn1_Clicked(Target As String) 
CompButtonPage.bas[324]  Dim myTexts, myReturns As List 
CompButtonPage.bas[325]  myTexts.Initialize 
CompButtonPage.bas[326]  myTexts.Add( {213} ) 
CompButtonPage.bas[327]  myReturns.Initialize 
CompButtonPage.bas[328]  myReturns.Add( {214} ) 
CompButtonPage.bas[329]  myToastId = myToastId + 1 
CompButtonPage.bas[330]  page.ShowToastWithReturns( {215} & myToastId, {216} , {217} & myToastId & {218} , 5000, myTexts, myReturns) 
CompButtonPage.bas[331] End Sub 
CompButtonPage.bas[332]  
CompButtonPage.bas[333] Sub btn2_Clicked(Target As String) 
CompButtonPage.bas[334]  Dim myTexts, myReturns As List 
CompButtonPage.bas[335]  myTexts.Initialize 
CompButtonPage.bas[336]  myTexts.Add( {219} ) 
CompButtonPage.bas[337]  myReturns.Initialize 
CompButtonPage.bas[338]  myReturns.Add( {220} ) 
CompButtonPage.bas[339]  myToastId = myToastId + 1 
CompButtonPage.bas[340]  page.ShowToastWithReturns( {221} & myToastId, {222} , {223} & myToastId & {224} , 5000, myTexts, myReturns) 
CompButtonPage.bas[341] End Sub 
CompButtonPage.bas[342]  
CompButtonPage.bas[343] Sub btn3_Clicked(Target As String) 
CompButtonPage.bas[344]  Dim myTexts, myReturns As List 
CompButtonPage.bas[345]  myTexts.Initialize 
CompButtonPage.bas[346]  myTexts.Add( {225} ) 
CompButtonPage.bas[347]  myReturns.Initialize 
CompButtonPage.bas[348]  myReturns.Add( {226} ) 
CompButtonPage.bas[349]  myToastId = myToastId + 1 
CompButtonPage.bas[350]  page.ShowToastWithReturns( {227} & myToastId, {228} , {229} & myToastId & {230} , 5000, myTexts, myReturns) 
CompButtonPage.bas[351] End Sub 
CompButtonPage.bas[352]  
CompButtonPage.bas[353] Sub Page_ToastClicked(ToastId As String, Action As String) 
CompButtonPage.bas[354]  Log( {231} & ToastId & {232} & Action) 
CompButtonPage.bas[355]  page.DismissToast(ToastId) 
CompButtonPage.bas[356] End Sub 
CompButtonPage.bas[357]  
CompButtonPage.bas[358] Sub Page_ToastDismissed(ToastId As String) 
CompButtonPage.bas[359]  Log( {233} & ToastId & {234} ) 
CompButtonPage.bas[360] End Sub 
CompButtonPage.bas[361]  
CompButtonPage.bas[362] Sub btn4_Clicked(Target As String) 
CompButtonPage.bas[363]  Dim mymodal As ABMModalSheet = page.ModalSheet( {235} ) 
CompButtonPage.bas[364]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {236} ) 
CompButtonPage.bas[365]  myModalLbl.Text = {237} 
CompButtonPage.bas[366]  page.ShowModalSheet( {238} ) 
CompButtonPage.bas[367] End Sub 
CompButtonPage.bas[368]  
CompButtonPage.bas[369] Sub btn5_Clicked(Target As String) 
CompButtonPage.bas[370]  Dim mymodal As ABMModalSheet = page.ModalSheet( {239} ) 
CompButtonPage.bas[371]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {240} ) 
CompButtonPage.bas[372]  myModalLbl.Text = {241} 
CompButtonPage.bas[373]  page.ShowModalSheet( {242} ) 
CompButtonPage.bas[374] End Sub 
CompButtonPage.bas[375]  
CompButtonPage.bas[376] Sub btn6_Clicked(Target As String) 
CompButtonPage.bas[377]  Dim mymodal As ABMModalSheet = page.ModalSheet( {243} ) 
CompButtonPage.bas[378]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {244} ) 
CompButtonPage.bas[379]  myModalLbl.Text = {245} 
CompButtonPage.bas[380]  page.ShowModalSheet( {246} ) 
CompButtonPage.bas[381] End Sub 
CompButtonPage.bas[382]  
CompButtonPage.bas[383] Sub btn6b_Clicked(Target As String) 
CompButtonPage.bas[384]  Dim mymodal As ABMModalSheet = page.ModalSheet( {247} ) 
CompButtonPage.bas[385]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {248} ) 
CompButtonPage.bas[386]  myModalLbl.Text = {249} 
CompButtonPage.bas[387]  page.ShowModalSheet( {250} ) 
CompButtonPage.bas[388] End Sub 
CompButtonPage.bas[389]  
CompButtonPage.bas[390] Sub btn6c_Clicked(Target As String) 
CompButtonPage.bas[391]  Dim mymodal As ABMModalSheet = page.ModalSheet( {251} ) 
CompButtonPage.bas[392]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {252} ) 
CompButtonPage.bas[393]  myModalLbl.Text = {253} 
CompButtonPage.bas[394]  page.ShowModalSheet( {254} ) 
CompButtonPage.bas[395] End Sub 
Analysing: CompCalendarPage.bas
CompCalendarPage.bas[0] ﻿Type=Class 
CompCalendarPage.bas[0] Version=4.7 
CompCalendarPage.bas[0] ModulesStructureVersion=1 
CompCalendarPage.bas[0] B4J=true 
CompCalendarPage.bas[0] @EndOfDesignText@ 
CompCalendarPage.bas[1] 'Class module 
CompCalendarPage.bas[2] Sub Class_Globals 
CompCalendarPage.bas[3]  Private ws As WebSocket 'ignore 
CompCalendarPage.bas[4]  ' will hold our page information 
CompCalendarPage.bas[5]  Public page As ABMPage 
CompCalendarPage.bas[6]  ' page theme 
CompCalendarPage.bas[7]  Private theme As ABMTheme 
CompCalendarPage.bas[8]  ' to access the constants 
CompCalendarPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCalendarPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCalendarPage.bas[11]  Public Name As String = {0} 
CompCalendarPage.bas[12]  ' will hold the unique browsers window id 
CompCalendarPage.bas[13]  Private ABMPageId As String = {1} 
CompCalendarPage.bas[14]  
CompCalendarPage.bas[15]  ' your own variables 
CompCalendarPage.bas[16]  Dim myToastId As Int 
CompCalendarPage.bas[17]  Dim evID As Int 
CompCalendarPage.bas[18] End Sub 
CompCalendarPage.bas[19]  
CompCalendarPage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompCalendarPage.bas[21] Public Sub Initialize 
CompCalendarPage.bas[22]  ' build the local structure IMPORTANT! 
CompCalendarPage.bas[23]  BuildPage 
CompCalendarPage.bas[24] End Sub 
CompCalendarPage.bas[25]  
CompCalendarPage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCalendarPage.bas[27]  Log( {2} ) 
CompCalendarPage.bas[28]  ws = WebSocket1 
CompCalendarPage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCalendarPage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCalendarPage.bas[31]  
CompCalendarPage.bas[32]  If ABMShared.NeedsAuthorization Then 
CompCalendarPage.bas[33]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompCalendarPage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompCalendarPage.bas[35]  Return 
CompCalendarPage.bas[36]  End If 
CompCalendarPage.bas[37]  End If 
CompCalendarPage.bas[38]  
CompCalendarPage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCalendarPage.bas[40]  If page.ComesFromPageCache Then 
CompCalendarPage.bas[41]  ' refresh the page 
CompCalendarPage.bas[42]  page.Refresh 
CompCalendarPage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCalendarPage.bas[44]  page.FinishedLoading 
CompCalendarPage.bas[45]  Else 
CompCalendarPage.bas[46]  ' Prepare the page 
CompCalendarPage.bas[47]  page.Prepare 
CompCalendarPage.bas[48]  ' load the dynamic content 
CompCalendarPage.bas[49]  ConnectPage 
CompCalendarPage.bas[50]  End If 
CompCalendarPage.bas[51]  Log(ABMPageId) 
CompCalendarPage.bas[52]  
CompCalendarPage.bas[53] End Sub 
CompCalendarPage.bas[54]  
CompCalendarPage.bas[55] Private Sub WebSocket_Disconnected 
CompCalendarPage.bas[56]  Log( {7} ) 
CompCalendarPage.bas[57] End Sub 
CompCalendarPage.bas[58]  
CompCalendarPage.bas[59] Sub Page_ParseEvent(Params As Map) 
CompCalendarPage.bas[60]  Dim eventName As String = Params.Get( {8} ) 
CompCalendarPage.bas[61]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompCalendarPage.bas[62]  If eventName = {11} Then 
CompCalendarPage.bas[63]  Log( {12} ) 
CompCalendarPage.bas[64]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCalendarPage.bas[65]  Return 
CompCalendarPage.bas[66]  End If 
CompCalendarPage.bas[67]  If SubExists(Me, eventName) Then 
CompCalendarPage.bas[68]  Params.Remove( {13} ) 
CompCalendarPage.bas[69]  Params.Remove( {14} ) 
CompCalendarPage.bas[70]  Select Case Params.Size 
CompCalendarPage.bas[71]  Case 0 
CompCalendarPage.bas[72]  CallSub(Me, eventName) 
CompCalendarPage.bas[73]  Case 1 
CompCalendarPage.bas[74]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCalendarPage.bas[75]  Case 2 
CompCalendarPage.bas[76]  If Params.get(eventParams(0)) = {15} Then 
CompCalendarPage.bas[77]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCalendarPage.bas[78]  CallSub2(Me, eventName, PassedTables) 
CompCalendarPage.bas[79]  Else 
CompCalendarPage.bas[80]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCalendarPage.bas[81]  End If 
CompCalendarPage.bas[82]  Case Else 
CompCalendarPage.bas[83]  ' cannot be called directly, to many param 
CompCalendarPage.bas[84]  CallSub2(Me, eventName, Params) 
CompCalendarPage.bas[85]  End Select 
CompCalendarPage.bas[86]  End If 
CompCalendarPage.bas[87] End Sub 
CompCalendarPage.bas[88]  
CompCalendarPage.bas[89] public Sub BuildTheme() 
CompCalendarPage.bas[90]  ' start with the base theme defined in ABMShared 
CompCalendarPage.bas[91]  theme.Initialize( {16} ) 
CompCalendarPage.bas[92]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCalendarPage.bas[93]  
CompCalendarPage.bas[94]  ' add additional themes specific for this page 
CompCalendarPage.bas[95]  
CompCalendarPage.bas[96] End Sub 
CompCalendarPage.bas[97]  
CompCalendarPage.bas[98] public Sub BuildPage() 
CompCalendarPage.bas[99]  ' initialize the theme 
CompCalendarPage.bas[100]  BuildTheme 
CompCalendarPage.bas[101]  
CompCalendarPage.bas[102]  ' initialize this page using our theme 
CompCalendarPage.bas[103]  page.InitializeWithTheme(Name, {17} & ABMshared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCalendarPage.bas[104]  page.ShowLoader=True 
CompCalendarPage.bas[105]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCalendarPage.bas[106]  page.PageTitle = {19} 
CompCalendarPage.bas[107]  page.PageDescription = {20} 
CompCalendarPage.bas[108]  page.PageHTMLName = {21} 
CompCalendarPage.bas[109]  page.PageKeywords = {22} 
CompCalendarPage.bas[110]  page.PageSiteMapPriority = {23} 
CompCalendarPage.bas[111]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCalendarPage.bas[112]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCalendarPage.bas[113]  
CompCalendarPage.bas[114]  ABMShared.BuildNavigationBar(page, {24} , {25} , {26} , {27} , {28} ) 
CompCalendarPage.bas[115]  
CompCalendarPage.bas[116]  ' create the page grid 
CompCalendarPage.bas[117]  page.AddRows(5,True, {29} ).AddCells12(1, {30} ) 
CompCalendarPage.bas[118]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCalendarPage.bas[119]  
CompCalendarPage.bas[120]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompCalendarPage.bas[121]  'page.NeedsCodeLabel = True 
CompCalendarPage.bas[122]  
CompCalendarPage.bas[123]  ABMShared.BuildFooter(page) 
CompCalendarPage.bas[124] End Sub 
CompCalendarPage.bas[125]  
CompCalendarPage.bas[126] public Sub ConnectPage() 
CompCalendarPage.bas[127]  'NEW 
CompCalendarPage.bas[128]  ABMShared.ConnectNavigationBar(page) 
CompCalendarPage.bas[129]  
CompCalendarPage.bas[130]  ' add paragraph 
CompCalendarPage.bas[131]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {31} , {32} ) ) 
CompCalendarPage.bas[132]  
CompCalendarPage.bas[133]  ' NOTE id MUST be 'calendar' (lowercase) + a number! IMPORTANT 
CompCalendarPage.bas[134]  ' NOTE You cannot use AddArrayComponent() and cannot be added to a control that is an ArrayComponent! IMPORTANT 
CompCalendarPage.bas[135]  Dim cal1 As ABMCalendar 
CompCalendarPage.bas[136]  cal1.Initialize(page, {33} , {34} , ABM.FIRSTDAYOFWEEK_MONDAY, {35} , ABM.CALENDAR_DEFAULTVIEW_WEEK, {36} ) 
CompCalendarPage.bas[137]  cal1.Editable = True 
CompCalendarPage.bas[138]  cal1.MinTime = {37} 
CompCalendarPage.bas[139]  cal1.MaxTime = {38} 
CompCalendarPage.bas[140]  page.Cell(2,1).AddComponent(cal1) 
CompCalendarPage.bas[141]  
CompCalendarPage.bas[142]  ' also add the components to the footer 
CompCalendarPage.bas[143]  ABMShared.ConnectFooter(page) 
CompCalendarPage.bas[144]  
CompCalendarPage.bas[145]  page.Refresh ' IMPORTANT 
CompCalendarPage.bas[146]  
CompCalendarPage.bas[147]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCalendarPage.bas[148]  page.FinishedLoading 'IMPORTANT 
CompCalendarPage.bas[149]  
CompCalendarPage.bas[150]  page.RestoreNavigationBarPosition 
CompCalendarPage.bas[151] End Sub 
CompCalendarPage.bas[152]  
CompCalendarPage.bas[153] ' clicked on the navigation bar 
CompCalendarPage.bas[154] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCalendarPage.bas[155]  page.SaveNavigationBarPosition 
CompCalendarPage.bas[156]  If Action = {39} Then Return 
CompCalendarPage.bas[157]  If Action = {40} Then 
CompCalendarPage.bas[158]  myToastId = myToastId + 1 
CompCalendarPage.bas[159]  page.ShowToast( {41} & myToastId, {42} , {43} , 5000) 
CompCalendarPage.bas[160]  Return 
CompCalendarPage.bas[161]  End If 
CompCalendarPage.bas[162]  If Action = {44} Then 
CompCalendarPage.bas[163]  ABMShared.LogOff(page) 
CompCalendarPage.bas[164]  Return 
CompCalendarPage.bas[165]  End If 
CompCalendarPage.bas[166]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCalendarPage.bas[167] End Sub 
CompCalendarPage.bas[168]  
CompCalendarPage.bas[169] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCalendarPage.bas[170]  page.ws.Session.SetAttribute( {45} , {46} ) 
CompCalendarPage.bas[171]  page.ws.Session.SetAttribute( {47} , {48} ) 
CompCalendarPage.bas[172]  page.ws.Session.SetAttribute( {49} , {50} ) 
CompCalendarPage.bas[173]  ABMShared.NavigateToPage(ws, ABMPageId, {51} ) 
CompCalendarPage.bas[174] End Sub 
CompCalendarPage.bas[175]  
CompCalendarPage.bas[176] Sub calendar1_DayClicked(date As String) 
CompCalendarPage.bas[177]  Log( {52} & date) 
CompCalendarPage.bas[178]  Dim cal1 As ABMCalendar = page.Component( {53} ) 
CompCalendarPage.bas[179]  cal1.GotoDate( {54} ) 
CompCalendarPage.bas[180] End Sub 
CompCalendarPage.bas[181]  
CompCalendarPage.bas[182] Sub calendar1_FetchData(dateStart As String, dateEnd As String) 
CompCalendarPage.bas[183]  Log( {55} & dateStart & {56} & dateEnd) 
CompCalendarPage.bas[184]  Dim FromDate As Long = ABMShared.String2Date(dateStart) 
CompCalendarPage.bas[185]  
CompCalendarPage.bas[186]  evID=0 
CompCalendarPage.bas[187]  
CompCalendarPage.bas[188]  Dim cols As List 
CompCalendarPage.bas[189]  cols.Initialize2(Array As String(ABM.COLOR_DEEPORANGE, ABM.COLOR_LIGHTBLUE, ABM.COLOR_GREEN, ABM.COLOR_RED, ABM.COLOR_BLACK)) 
CompCalendarPage.bas[190]  
CompCalendarPage.bas[191]  Dim eventList As List 
CompCalendarPage.bas[192]  eventList.Initialize 
CompCalendarPage.bas[193]  
CompCalendarPage.bas[194]  ' add some random events 
CompCalendarPage.bas[195]  For i = 0 To 15 
CompCalendarPage.bas[196]  Dim ev As ABMCalendarEvent 
CompCalendarPage.bas[197]  Dim per As Period 
CompCalendarPage.bas[198]  per.Initialize 
CompCalendarPage.bas[199]  per.Days = Rnd(0,7) 
CompCalendarPage.bas[200]  Dim newDate As Long = DateUtils.AddPeriod(FromDate,per) 
CompCalendarPage.bas[201]  evID=evID+1 
CompCalendarPage.bas[202]  Dim Begin As String 
CompCalendarPage.bas[203]  If Rnd(1,10) < 2 Then ' make some alldays 
CompCalendarPage.bas[204]  Begin = ABMShared.Date2String(newDate, False) 
CompCalendarPage.bas[205]  ev.Initialize( {57} & evID, {58} & evID, Begin) 
CompCalendarPage.bas[206]  ev.AllDay=True 
CompCalendarPage.bas[207]  ' set a color IMPORTANT! 
CompCalendarPage.bas[208]  ev.BackgroundColor = cols.Get(Rnd(0,5)) 
CompCalendarPage.bas[209]  Else ' make some normal ones 
CompCalendarPage.bas[210]  per.Days = 0 
CompCalendarPage.bas[211]  per.Hours = Rnd(9,18) 
CompCalendarPage.bas[212]  newDate = DateUtils.AddPeriod(newDate,per) 
CompCalendarPage.bas[213]  Begin = ABMShared.Date2String(newDate, True) 
CompCalendarPage.bas[214]  ev.Initialize( {59} & evID, {60} & evID, Begin) 
CompCalendarPage.bas[215]  ' set a color IMPORTANT! 
CompCalendarPage.bas[216]  ev.BackgroundColor = cols.Get(Rnd(0,5)) 
CompCalendarPage.bas[217]  per.Hours = Rnd(1,4) 
CompCalendarPage.bas[218]  newDate = DateUtils.AddPeriod(newDate,per) 
CompCalendarPage.bas[219]  ev.EndTime = ABMShared.Date2String(newDate, True) 
CompCalendarPage.bas[220]  End If 
CompCalendarPage.bas[221]  
CompCalendarPage.bas[222]  eventList.Add(ev) 
CompCalendarPage.bas[223]  Next 
CompCalendarPage.bas[224]  
CompCalendarPage.bas[225]  Dim cal1 As ABMCalendar = page.Component( {61} ) 
CompCalendarPage.bas[226]  Log(cal1.GetTitle) 
CompCalendarPage.bas[227]  cal1.SetEvents(eventList) 
CompCalendarPage.bas[228]  cal1.Refresh ' IMPORTANT 
CompCalendarPage.bas[229] End Sub 
CompCalendarPage.bas[230]  
CompCalendarPage.bas[231] Sub calendar1_EventClicked(eventId As String) 
CompCalendarPage.bas[232]  Log( {62} & eventId) 
CompCalendarPage.bas[233] End Sub 
CompCalendarPage.bas[234]  
CompCalendarPage.bas[235] ' has more than 2 params (case sensitive!): 
CompCalendarPage.bas[236] ' params.get( {63} ) 
CompCalendarPage.bas[237] ' params.get( {64} ) 
CompCalendarPage.bas[238] ' params.get( {65} ) 
CompCalendarPage.bas[239] Sub calendar1_EventStartChanged(params As Map) 
CompCalendarPage.bas[240]  Log( {66} & params.Get( {67} ) & {68} & params.Get( {69} ) & {70} & params.Get( {71} )) 
CompCalendarPage.bas[241] End Sub 
CompCalendarPage.bas[242]  
CompCalendarPage.bas[243] Sub calendar1_EventEndChanged(eventId As String, NewEnd As String) 
CompCalendarPage.bas[244]  Log( {72} & eventId & {73} & NewEnd) 
CompCalendarPage.bas[245] End Sub 
Analysing: CompCanvasPage.bas
CompCanvasPage.bas[0] ﻿Type=Class 
CompCanvasPage.bas[0] Version=4.7 
CompCanvasPage.bas[0] ModulesStructureVersion=1 
CompCanvasPage.bas[0] B4J=true 
CompCanvasPage.bas[0] @EndOfDesignText@ 
CompCanvasPage.bas[1] 'Class module 
CompCanvasPage.bas[2] Sub Class_Globals 
CompCanvasPage.bas[3]  Private ws As WebSocket 'ignore 
CompCanvasPage.bas[4]  ' will hold our page information 
CompCanvasPage.bas[5]  Public page As ABMPage 
CompCanvasPage.bas[6]  ' page theme 
CompCanvasPage.bas[7]  Private theme As ABMTheme 
CompCanvasPage.bas[8]  ' to access the constants 
CompCanvasPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCanvasPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCanvasPage.bas[11]  Public Name As String = {0} 
CompCanvasPage.bas[12]  Private ABMPageId As String = {1} 
CompCanvasPage.bas[13]  
CompCanvasPage.bas[14]  ' your own variables 
CompCanvasPage.bas[15]  Dim myToastId As Int 
CompCanvasPage.bas[16]  Dim kyleTeller As Int 
CompCanvasPage.bas[17] End Sub 
CompCanvasPage.bas[18]  
CompCanvasPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompCanvasPage.bas[20] Public Sub Initialize 
CompCanvasPage.bas[21]  ' build the local structure IMPORTANT! 
CompCanvasPage.bas[22]  BuildPage 
CompCanvasPage.bas[23] End Sub 
CompCanvasPage.bas[24]  
CompCanvasPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCanvasPage.bas[26]  Log( {2} ) 
CompCanvasPage.bas[27]  ws = WebSocket1 
CompCanvasPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCanvasPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCanvasPage.bas[30]  
CompCanvasPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompCanvasPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompCanvasPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompCanvasPage.bas[34]  Return 
CompCanvasPage.bas[35]  End If 
CompCanvasPage.bas[36]  End If 
CompCanvasPage.bas[37]  
CompCanvasPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCanvasPage.bas[39]  If page.ComesFromPageCache Then 
CompCanvasPage.bas[40]  ' refresh the page 
CompCanvasPage.bas[41]  page.Refresh 
CompCanvasPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCanvasPage.bas[43]  page.FinishedLoading 
CompCanvasPage.bas[44]  Else 
CompCanvasPage.bas[45]  ' Prepare the page 
CompCanvasPage.bas[46]  page.Prepare 
CompCanvasPage.bas[47]  ' load the dynamic content 
CompCanvasPage.bas[48]  ConnectPage 
CompCanvasPage.bas[49]  End If 
CompCanvasPage.bas[50]  Log(ABMPageId) 
CompCanvasPage.bas[51] End Sub 
CompCanvasPage.bas[52]  
CompCanvasPage.bas[53] Private Sub WebSocket_Disconnected 
CompCanvasPage.bas[54]  Log( {7} ) 
CompCanvasPage.bas[55] End Sub 
CompCanvasPage.bas[56]  
CompCanvasPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompCanvasPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompCanvasPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompCanvasPage.bas[60]  If eventName = {11} Then 
CompCanvasPage.bas[61]  Log( {12} ) 
CompCanvasPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCanvasPage.bas[63]  Return 
CompCanvasPage.bas[64]  End If 
CompCanvasPage.bas[65]  If SubExists(Me, eventName) Then 
CompCanvasPage.bas[66]  Params.Remove( {13} ) 
CompCanvasPage.bas[67]  Params.Remove( {14} ) 
CompCanvasPage.bas[68]  Select Case Params.Size 
CompCanvasPage.bas[69]  Case 0 
CompCanvasPage.bas[70]  CallSub(Me, eventName) 
CompCanvasPage.bas[71]  Case 1 
CompCanvasPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCanvasPage.bas[73]  Case 2 
CompCanvasPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompCanvasPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCanvasPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompCanvasPage.bas[77]  Else 
CompCanvasPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCanvasPage.bas[79]  End If 
CompCanvasPage.bas[80]  Case Else 
CompCanvasPage.bas[81]  ' cannot be called directly, to many param 
CompCanvasPage.bas[82]  CallSub2(Me, eventName, Params) 
CompCanvasPage.bas[83]  End Select 
CompCanvasPage.bas[84]  End If 
CompCanvasPage.bas[85] End Sub 
CompCanvasPage.bas[86]  
CompCanvasPage.bas[87] public Sub BuildTheme() 
CompCanvasPage.bas[88]  ' start with the base theme defined in ABMShared 
CompCanvasPage.bas[89]  theme.Initialize( {16} ) 
CompCanvasPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCanvasPage.bas[91]  
CompCanvasPage.bas[92]  ' add additional themes specific for this page 
CompCanvasPage.bas[93]  ' bluegray button 
CompCanvasPage.bas[94]  theme.AddButtonTheme( {17} ) 
CompCanvasPage.bas[95]  theme.Button( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompCanvasPage.bas[96]  theme.Button( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompCanvasPage.bas[97] End Sub 
CompCanvasPage.bas[98]  
CompCanvasPage.bas[99] public Sub BuildPage() 
CompCanvasPage.bas[100]  ' initialize the theme 
CompCanvasPage.bas[101]  BuildTheme 
CompCanvasPage.bas[102]  
CompCanvasPage.bas[103]  ' initialize this page using our theme 
CompCanvasPage.bas[104]  page.InitializeWithTheme(Name, {20} & ABMShared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCanvasPage.bas[105]  page.ShowLoader=True 
CompCanvasPage.bas[106]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCanvasPage.bas[107]  page.PageTitle = {22} 
CompCanvasPage.bas[108]  page.PageDescription = {23} 
CompCanvasPage.bas[109]  page.PageHTMLName = {24} 
CompCanvasPage.bas[110]  page.PageKeywords = {25} 
CompCanvasPage.bas[111]  page.PageSiteMapPriority = {26} 
CompCanvasPage.bas[112]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCanvasPage.bas[113]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCanvasPage.bas[114]  
CompCanvasPage.bas[115]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompCanvasPage.bas[116]  
CompCanvasPage.bas[117]  ' create the page grid 
CompCanvasPage.bas[118]  page.AddRows(11,True, {32} ).AddCells12(1, {33} ) 
CompCanvasPage.bas[119]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCanvasPage.bas[120]  
CompCanvasPage.bas[121]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompCanvasPage.bas[122]  'page.NeedsCodeLabel = True 
CompCanvasPage.bas[123]  
CompCanvasPage.bas[124]  ' load images we will need in the canvases, needs to be done in BuildPage as they are pre-loaded 
CompCanvasPage.bas[125]  page.AddCanvasImage( {34} , {35} ) 
CompCanvasPage.bas[126]  page.AddCanvasImage( {36} , {37} ) 
CompCanvasPage.bas[127]  page.AddCanvasImage( {38} , {39} ) 
CompCanvasPage.bas[128]  page.AddCanvasImage( {40} , {41} ) 
CompCanvasPage.bas[129]  
CompCanvasPage.bas[130]  ABMShared.BuildFooter(page) 
CompCanvasPage.bas[131] End Sub 
CompCanvasPage.bas[132]  
CompCanvasPage.bas[133] Sub ConnectPage() 
CompCanvasPage.bas[134]  'NEW 
CompCanvasPage.bas[135]  ABMShared.ConnectNavigationBar(page) 
CompCanvasPage.bas[136]  
CompCanvasPage.bas[137]  ' add paragraph 
CompCanvasPage.bas[138]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} ) ) 
CompCanvasPage.bas[139]  
CompCanvasPage.bas[140]  ' create canvas 
CompCanvasPage.bas[141]  Dim canvas1 As ABMCanvas 
CompCanvasPage.bas[142]  canvas1.Initialize(page, {44} , ABM.COLOR_BLACK, ABM.INTENSITY_NORMAL,1024,569, True) 
CompCanvasPage.bas[143]  
CompCanvasPage.bas[144]  ' create background 
CompCanvasPage.bas[145]  Dim bg As ABMCanvasObject 
CompCanvasPage.bas[146]  bg.InitializeAsRectangle(page, {45} ,0,0,1024,569,False) 
CompCanvasPage.bas[147]  bg.drawImage( {46} , 0,0) 
CompCanvasPage.bas[148]  canvas1.AddObject(bg) 
CompCanvasPage.bas[149]  
CompCanvasPage.bas[150]  page.Cell(2,1).AddComponent(canvas1) 
CompCanvasPage.bas[151]  
CompCanvasPage.bas[152]  Dim btn As ABMButton 
CompCanvasPage.bas[153]  btn.InitializeRaised(page, {47} , {48} , {49} , {50} , {51} ) 
CompCanvasPage.bas[154]  page.Cell(3,1).AddComponent(btn) 
CompCanvasPage.bas[155]  
CompCanvasPage.bas[156]  ' add codeblock 
CompCanvasPage.bas[157]  Dim code1 As StringBuilder 
CompCanvasPage.bas[158]  code1.Initialize 
CompCanvasPage.bas[159]  code1.Append( {52} ).Append(CRLF) 
CompCanvasPage.bas[160]  code1.Append( {368} ).Append(CRLF) 
CompCanvasPage.bas[161]  code1.Append( {372} ).Append(CRLF) 
CompCanvasPage.bas[162]  code1.Append( {376} ).Append(CRLF) 
CompCanvasPage.bas[163]  code1.Append( {68} ).Append(CRLF) 
CompCanvasPage.bas[164]  code1.Append( {69} ).Append(CRLF) 
CompCanvasPage.bas[165]  code1.Append( {70} ).Append(CRLF) 
CompCanvasPage.bas[166]  code1.Append( {378} ).Append(CRLF) 
CompCanvasPage.bas[167]  code1.Append( {74} ).Append(CRLF) 
CompCanvasPage.bas[168]  code1.Append( {75} ).Append(CRLF) 
CompCanvasPage.bas[169]  code1.Append( {76} ).Append(CRLF) 
CompCanvasPage.bas[170]  code1.Append( {380} ).Append(CRLF) 
CompCanvasPage.bas[171]  code1.Append( {382} ).Append(CRLF) 
CompCanvasPage.bas[172]  code1.Append( {83} ).Append(CRLF) 
CompCanvasPage.bas[173]  
CompCanvasPage.bas[174]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {84} , code1)) 
CompCanvasPage.bas[175]  
CompCanvasPage.bas[176]  ' add codeblock 
CompCanvasPage.bas[177]  Dim code2 As StringBuilder 
CompCanvasPage.bas[178]  code2.Initialize 
CompCanvasPage.bas[179]  code2.Append( {85} ).Append(CRLF) 
CompCanvasPage.bas[180]  code2.Append( {384} ).Append(CRLF) 
CompCanvasPage.bas[181]  code2.Append( {89} ).Append(CRLF) 
CompCanvasPage.bas[182]  code2.Append( {90} ).Append(CRLF) 
CompCanvasPage.bas[183]  code2.Append( {91} ).Append(CRLF) 
CompCanvasPage.bas[184]  code2.Append( {92} ).Append(CRLF) 
CompCanvasPage.bas[185]  code2.Append( {386} ).Append(CRLF) 
CompCanvasPage.bas[186]  code2.Append( {388} ).Append(CRLF) 
CompCanvasPage.bas[187]  code2.Append( {99} ).Append(CRLF) 
CompCanvasPage.bas[188]  code2.Append( {100} ).Append(CRLF) 
CompCanvasPage.bas[189]  code2.Append( {101} ).Append(CRLF) 
CompCanvasPage.bas[190]  code2.Append( {102} ).Append(CRLF) 
CompCanvasPage.bas[191]  code2.Append( {103} ).Append(CRLF) 
CompCanvasPage.bas[192]  code2.Append( {104} ).Append(CRLF) 
CompCanvasPage.bas[193]  code2.Append( {105} ).Append(CRLF) 
CompCanvasPage.bas[194]  code2.Append( {390} ).Append(CRLF) 
CompCanvasPage.bas[195]  code2.Append( {109} ).Append(CRLF) 
CompCanvasPage.bas[196]  code2.Append( {110} ).Append(CRLF) 
CompCanvasPage.bas[197]  code2.Append( {111} ).Append(CRLF) 
CompCanvasPage.bas[198]  code2.Append( {112} ).Append(CRLF) 
CompCanvasPage.bas[199]  code2.Append( {113} ).Append(CRLF) 
CompCanvasPage.bas[200]  code2.Append( {392} ).Append(CRLF) 
CompCanvasPage.bas[201]  code2.Append( {117} ).Append(CRLF) 
CompCanvasPage.bas[202]  code2.Append( {394} ).Append(CRLF) 
CompCanvasPage.bas[203]  code2.Append( {121} ).Append(CRLF) 
CompCanvasPage.bas[204]  code2.Append( {122} ).Append(CRLF) 
CompCanvasPage.bas[205]  code2.Append( {123} ).Append(CRLF) 
CompCanvasPage.bas[206]  code2.Append( {124} ).Append(CRLF) 
CompCanvasPage.bas[207]  code2.Append( {396} ).Append(CRLF) 
CompCanvasPage.bas[208]  code2.Append( {128} ).Append(CRLF) 
CompCanvasPage.bas[209]  code2.Append( {398} ).Append(CRLF) 
CompCanvasPage.bas[210]  code2.Append( {132} ).Append(CRLF) 
CompCanvasPage.bas[211]  code2.Append( {133} ).Append(CRLF) 
CompCanvasPage.bas[212]  code2.Append( {134} ).Append(CRLF) 
CompCanvasPage.bas[213]  code2.Append( {135} ).Append(CRLF) 
CompCanvasPage.bas[214]  code2.Append( {406} ).Append(CRLF) 
CompCanvasPage.bas[215]  code2.Append( {145} ).Append(CRLF) 
CompCanvasPage.bas[216]  
CompCanvasPage.bas[217]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {146} , code2)) 
CompCanvasPage.bas[218]  
CompCanvasPage.bas[219]  ' add paragraph 
CompCanvasPage.bas[220]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {147} , {148} ) ) 
CompCanvasPage.bas[221]  
CompCanvasPage.bas[222]  ' the clock canvas 
CompCanvasPage.bas[223]  Dim canvas2 As ABMCanvas 
CompCanvasPage.bas[224]  canvas2.Initialize(page, {149} , ABM.COLOR_BLACK, ABM.INTENSITY_NORMAL, 300,300, False) 
CompCanvasPage.bas[225]  
CompCanvasPage.bas[226]  Dim clock As ABMCanvasObject = BuildClock 
CompCanvasPage.bas[227]  canvas2.AddObject(clock) 
CompCanvasPage.bas[228]  
CompCanvasPage.bas[229]  page.Cell(6,1).AddComponent(canvas2) 
CompCanvasPage.bas[230]  
CompCanvasPage.bas[231]  ' add codeblock 
CompCanvasPage.bas[232]  Dim code3 As StringBuilder 
CompCanvasPage.bas[233]  code3.Initialize 
CompCanvasPage.bas[234]  code3.Append( {150} ).Append(CRLF) 
CompCanvasPage.bas[235]  code3.Append( {151} ).Append(CRLF) 
CompCanvasPage.bas[236]  code3.Append( {408} ).Append(CRLF) 
CompCanvasPage.bas[237]  code3.Append( {155} ).Append(CRLF) 
CompCanvasPage.bas[238]  code3.Append( {156} ).Append(CRLF) 
CompCanvasPage.bas[239]  code3.Append( {157} ).Append(CRLF) 
CompCanvasPage.bas[240]  code3.Append( {158} ).Append(CRLF) 
CompCanvasPage.bas[241]  code3.Append( {159} ).Append(CRLF) 
CompCanvasPage.bas[242]  
CompCanvasPage.bas[243]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlock(page, {160} , code3)) 
CompCanvasPage.bas[244]  
CompCanvasPage.bas[245]  ' add codeblock 
CompCanvasPage.bas[246]  Dim code4 As StringBuilder 
CompCanvasPage.bas[247]  code4.Initialize 
CompCanvasPage.bas[248]  code4.Append( {161} ).Append(CRLF) 
CompCanvasPage.bas[249]  code4.Append( {162} ).Append(CRLF) 
CompCanvasPage.bas[250]  code4.Append( {163} ).Append(CRLF) 
CompCanvasPage.bas[251]  code4.Append( {164} ).Append(CRLF) 
CompCanvasPage.bas[252]  code4.Append( {165} ).Append(CRLF) 
CompCanvasPage.bas[253]  code4.Append( {410} ).Append(CRLF) 
CompCanvasPage.bas[254]  code4.Append( {169} ).Append(CRLF) 
CompCanvasPage.bas[255]  code4.Append( {170} ).Append(CRLF) 
CompCanvasPage.bas[256]  code4.Append( {171} ).Append(CRLF) 
CompCanvasPage.bas[257]  code4.Append( {172} ).Append(CRLF) 
CompCanvasPage.bas[258]  code4.Append( {173} ).Append(CRLF) 
CompCanvasPage.bas[259]  code4.Append( {174} ).Append(CRLF) 
CompCanvasPage.bas[260]  code4.Append( {175} ).Append(CRLF) 
CompCanvasPage.bas[261]  code4.Append( {412} ).Append(CRLF) 
CompCanvasPage.bas[262]  code4.Append( {179} ).Append(CRLF) 
CompCanvasPage.bas[263]  code4.Append( {418} ).Append(CRLF) 
CompCanvasPage.bas[264]  code4.Append( {187} ).Append(CRLF) 
CompCanvasPage.bas[265]  code4.Append( {188} ).Append(CRLF) 
CompCanvasPage.bas[266]  code4.Append( {189} ).Append(CRLF) 
CompCanvasPage.bas[267]  code4.Append( {190} ).Append(CRLF) 
CompCanvasPage.bas[268]  code4.Append( {191} ).Append(CRLF) 
CompCanvasPage.bas[269]  code4.Append( {420} ).Append(CRLF) 
CompCanvasPage.bas[270]  code4.Append( {195} ).Append(CRLF) 
CompCanvasPage.bas[271]  code4.Append( {196} ).Append(CRLF) 
CompCanvasPage.bas[272]  code4.Append( {197} ).Append(CRLF) 
CompCanvasPage.bas[273]  code4.Append( {422} ).Append(CRLF) 
CompCanvasPage.bas[274]  code4.Append( {201} ).Append(CRLF) 
CompCanvasPage.bas[275]  code4.Append( {202} ).Append(CRLF) 
CompCanvasPage.bas[276]  code4.Append( {203} ).Append(CRLF) 
CompCanvasPage.bas[277]  code4.Append( {204} ).Append(CRLF) 
CompCanvasPage.bas[278]  code4.Append( {205} ).Append(CRLF) 
CompCanvasPage.bas[279]  code4.Append( {206} ).Append(CRLF) 
CompCanvasPage.bas[280]  code4.Append( {207} ).Append(CRLF) 
CompCanvasPage.bas[281]  code4.Append( {208} ).Append(CRLF) 
CompCanvasPage.bas[282]  code4.Append( {424} ).Append(CRLF) 
CompCanvasPage.bas[283]  code4.Append( {212} ).Append(CRLF) 
CompCanvasPage.bas[284]  code4.Append( {213} ).Append(CRLF) 
CompCanvasPage.bas[285]  code4.Append( {214} ).Append(CRLF) 
CompCanvasPage.bas[286]  code4.Append( {215} ).Append(CRLF) 
CompCanvasPage.bas[287]  code4.Append( {216} ).Append(CRLF) 
CompCanvasPage.bas[288]  code4.Append( {217} ).Append(CRLF) 
CompCanvasPage.bas[289]  code4.Append( {218} ).Append(CRLF) 
CompCanvasPage.bas[290]  code4.Append( {219} ).Append(CRLF) 
CompCanvasPage.bas[291]  code4.Append( {220} ).Append(CRLF) 
CompCanvasPage.bas[292]  code4.Append( {221} ).Append(CRLF) 
CompCanvasPage.bas[293]  code4.Append( {222} ).Append(CRLF) 
CompCanvasPage.bas[294]  code4.Append( {223} ).Append(CRLF) 
CompCanvasPage.bas[295]  code4.Append( {224} ).Append(CRLF) 
CompCanvasPage.bas[296]  code4.Append( {225} ).Append(CRLF) 
CompCanvasPage.bas[297]  code4.Append( {226} ).Append(CRLF) 
CompCanvasPage.bas[298]  code4.Append( {227} ).Append(CRLF) 
CompCanvasPage.bas[299]  code4.Append( {228} ).Append(CRLF) 
CompCanvasPage.bas[300]  code4.Append( {229} ).Append(CRLF) 
CompCanvasPage.bas[301]  code4.Append( {230} ).Append(CRLF) 
CompCanvasPage.bas[302]  code4.Append( {231} ).Append(CRLF) 
CompCanvasPage.bas[303]  code4.Append( {232} ).Append(CRLF) 
CompCanvasPage.bas[304]  code4.Append( {233} ).Append(CRLF) 
CompCanvasPage.bas[305]  code4.Append( {234} ).Append(CRLF) 
CompCanvasPage.bas[306]  code4.Append( {235} ).Append(CRLF) 
CompCanvasPage.bas[307]  code4.Append( {236} ).Append(CRLF) 
CompCanvasPage.bas[308]  code4.Append( {237} ).Append(CRLF) 
CompCanvasPage.bas[309]  code4.Append( {238} ).Append(CRLF) 
CompCanvasPage.bas[310]  code4.Append( {239} ).Append(CRLF) 
CompCanvasPage.bas[311]  code4.Append( {240} ).Append(CRLF) 
CompCanvasPage.bas[312]  code4.Append( {241} ).Append(CRLF) 
CompCanvasPage.bas[313]  
CompCanvasPage.bas[314]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlock(page, {242} , code4)) 
CompCanvasPage.bas[315]  
CompCanvasPage.bas[316]  ' add paragraph 
CompCanvasPage.bas[317]  page.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {243} , {244} ) ) 
CompCanvasPage.bas[318]  
CompCanvasPage.bas[319]  ' the control canvas 
CompCanvasPage.bas[320]  Dim canvas3 As ABMCanvas 
CompCanvasPage.bas[321]  canvas3.Initialize(page, {245} , ABM.COLOR_TRANSPARENT, ABM.INTENSITY_NORMAL, 1024,100, True) 
CompCanvasPage.bas[322]  
CompCanvasPage.bas[323]  Dim controlBar As ABMCanvasObject = BuildControlBar 
CompCanvasPage.bas[324]  canvas3.AddObject(controlBar) 
CompCanvasPage.bas[325]  
CompCanvasPage.bas[326]  Dim controlCircle As ABMCanvasObject = BuildControlCircle 
CompCanvasPage.bas[327]  canvas3.AddObject(controlCircle) 
CompCanvasPage.bas[328]  
CompCanvasPage.bas[329]  page.Cell(9,1).AddComponent(canvas3) 
CompCanvasPage.bas[330]  
CompCanvasPage.bas[331]  ' add codeblock 
CompCanvasPage.bas[332]  Dim code5 As StringBuilder 
CompCanvasPage.bas[333]  code5.Initialize 
CompCanvasPage.bas[334]  code5.Append( {246} ).Append(CRLF) 
CompCanvasPage.bas[335]  code5.Append( {247} ).Append(CRLF) 
CompCanvasPage.bas[336]  code5.Append( {426} ).Append(CRLF) 
CompCanvasPage.bas[337]  code5.Append( {251} ).Append(CRLF) 
CompCanvasPage.bas[338]  code5.Append( {252} ).Append(CRLF) 
CompCanvasPage.bas[339]  code5.Append( {253} ).Append(CRLF) 
CompCanvasPage.bas[340]  code5.Append( {254} ).Append(CRLF) 
CompCanvasPage.bas[341]  code5.Append( {255} ).Append(CRLF) 
CompCanvasPage.bas[342]  code5.Append( {256} ).Append(CRLF) 
CompCanvasPage.bas[343]  
CompCanvasPage.bas[344]  page.Cell(10,1).AddComponent(ABMShared.BuildCodeBlock(page, {257} , code5)) 
CompCanvasPage.bas[345]  
CompCanvasPage.bas[346]  ' add codeblock 
CompCanvasPage.bas[347]  Dim code6 As StringBuilder 
CompCanvasPage.bas[348]  code6.Initialize 
CompCanvasPage.bas[349]  code6.Append( {258} ).Append(CRLF) 
CompCanvasPage.bas[350]  code6.Append( {259} ).Append(CRLF) 
CompCanvasPage.bas[351]  code6.Append( {260} ).Append(CRLF) 
CompCanvasPage.bas[352]  code6.Append( {428} ).Append(CRLF) 
CompCanvasPage.bas[353]  code6.Append( {264} ).Append(CRLF) 
CompCanvasPage.bas[354]  code6.Append( {265} ).Append(CRLF) 
CompCanvasPage.bas[355]  code6.Append( {266} ).Append(CRLF) 
CompCanvasPage.bas[356]  code6.Append( {430} ).Append(CRLF) 
CompCanvasPage.bas[357]  code6.Append( {270} ).Append(CRLF) 
CompCanvasPage.bas[358]  code6.Append( {271} ).Append(CRLF) 
CompCanvasPage.bas[359]  code6.Append( {272} ).Append(CRLF) 
CompCanvasPage.bas[360]  code6.Append( {273} ).Append(CRLF) 
CompCanvasPage.bas[361]  code6.Append( {274} ).Append(CRLF) 
CompCanvasPage.bas[362]  code6.Append( {275} ).Append(CRLF) 
CompCanvasPage.bas[363]  code6.Append( {276} ).Append(CRLF) 
CompCanvasPage.bas[364]  code6.Append( {277} ).Append(CRLF) 
CompCanvasPage.bas[365]  code6.Append( {432} ).Append(CRLF) 
CompCanvasPage.bas[366]  code6.Append( {281} ).Append(CRLF) 
CompCanvasPage.bas[367]  code6.Append( {282} ).Append(CRLF) 
CompCanvasPage.bas[368]  code6.Append( {283} ).Append(CRLF) 
CompCanvasPage.bas[369]  code6.Append( {284} ).Append(CRLF) 
CompCanvasPage.bas[370]  code6.Append( {285} ).Append(CRLF) 
CompCanvasPage.bas[371]  code6.Append( {434} ).Append(CRLF) 
CompCanvasPage.bas[372]  code6.Append( {289} ).Append(CRLF) 
CompCanvasPage.bas[373]  code6.Append( {290} ).Append(CRLF) 
CompCanvasPage.bas[374]  code6.Append( {291} ).Append(CRLF) 
CompCanvasPage.bas[375]  code6.Append( {436} ).Append(CRLF) 
CompCanvasPage.bas[376]  code6.Append( {295} ).Append(CRLF) 
CompCanvasPage.bas[377]  code6.Append( {296} ).Append(CRLF) 
CompCanvasPage.bas[378]  code6.Append( {297} ).Append(CRLF) 
CompCanvasPage.bas[379]  code6.Append( {298} ).Append(CRLF) 
CompCanvasPage.bas[380]  code6.Append( {299} ).Append(CRLF) 
CompCanvasPage.bas[381]  code6.Append( {300} ).Append(CRLF) 
CompCanvasPage.bas[382]  code6.Append( {301} ).Append(CRLF) 
CompCanvasPage.bas[383]  code6.Append( {438} ).Append(CRLF) 
CompCanvasPage.bas[384]  code6.Append( {305} ).Append(CRLF) 
CompCanvasPage.bas[385]  code6.Append( {306} ).Append(CRLF) 
CompCanvasPage.bas[386]  code6.Append( {307} ).Append(CRLF) 
CompCanvasPage.bas[387]  code6.Append( {308} ).Append(CRLF) 
CompCanvasPage.bas[388]  code6.Append( {309} ).Append(CRLF) 
CompCanvasPage.bas[389]  code6.Append( {310} ).Append(CRLF) 
CompCanvasPage.bas[390]  code6.Append( {444} ).Append(CRLF) 
CompCanvasPage.bas[391]  code6.Append( {318} ).Append(CRLF) 
CompCanvasPage.bas[392]  code6.Append( {319} ).Append(CRLF) 
CompCanvasPage.bas[393]  
CompCanvasPage.bas[394]  page.Cell(11,1).AddComponent(ABMShared.BuildCodeBlock(page, {320} , code6)) 
CompCanvasPage.bas[395]  
CompCanvasPage.bas[396]  ' also add the components to the footer 
CompCanvasPage.bas[397]  ABMShared.ConnectFooter(page) 
CompCanvasPage.bas[398]  
CompCanvasPage.bas[399]  page.Refresh ' IMPORTANT 
CompCanvasPage.bas[400]  
CompCanvasPage.bas[401]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCanvasPage.bas[402]  page.FinishedLoading 'IMPORTANT 
CompCanvasPage.bas[403]  
CompCanvasPage.bas[404]  page.RestoreNavigationBarPosition 
CompCanvasPage.bas[405] End Sub 
CompCanvasPage.bas[406]  
CompCanvasPage.bas[407] ' clicked on the navigation bar 
CompCanvasPage.bas[408] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCanvasPage.bas[409]  page.SaveNavigationBarPosition 
CompCanvasPage.bas[410]  If Action = {321} Then Return 
CompCanvasPage.bas[411]  If Action = {322} Then 
CompCanvasPage.bas[412]  myToastId = myToastId + 1 
CompCanvasPage.bas[413]  page.ShowToast( {323} & myToastId, {324} , {325} , 5000) 
CompCanvasPage.bas[414]  Return 
CompCanvasPage.bas[415]  End If 
CompCanvasPage.bas[416]  If Action = {326} Then 
CompCanvasPage.bas[417]  ABMShared.LogOff(page) 
CompCanvasPage.bas[418]  Return 
CompCanvasPage.bas[419]  End If 
CompCanvasPage.bas[420]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCanvasPage.bas[421] End Sub 
CompCanvasPage.bas[422]  
CompCanvasPage.bas[423] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCanvasPage.bas[424]  page.ws.Session.SetAttribute( {327} , {328} ) 
CompCanvasPage.bas[425]  page.ws.Session.SetAttribute( {329} , {330} ) 
CompCanvasPage.bas[426]  page.ws.Session.SetAttribute( {331} , {332} ) 
CompCanvasPage.bas[427]  ABMShared.NavigateToPage(ws, ABMPageId, {333} ) 
CompCanvasPage.bas[428] End Sub 
CompCanvasPage.bas[429]  
CompCanvasPage.bas[430] Sub btn_Clicked(Target As String) 
CompCanvasPage.bas[431]  Dim canvas1 As ABMCanvas = page.Component( {334} ) 
CompCanvasPage.bas[432]  Dim Kyle As ABMCanvasObject 
CompCanvasPage.bas[433]  Dim x As Int = Rnd(0,1024-109) 
CompCanvasPage.bas[434]  Dim y As Int = Rnd(0,569-136) 
CompCanvasPage.bas[435]  kyleTeller=kyleTeller+1 
CompCanvasPage.bas[436]  Kyle.InitializeAsRectangle(page, {335} & kyleTeller, x, y, 109,136, True) 
CompCanvasPage.bas[437]  Kyle.drawImage( {336} , 0,0) 
CompCanvasPage.bas[438]  canvas1.AddObject(Kyle) 
CompCanvasPage.bas[439]  canvas1.refresh ' IMPORTANT 
CompCanvasPage.bas[440] End Sub 
CompCanvasPage.bas[441]  
CompCanvasPage.bas[442] Sub canvas1_ObjectUp(objectId As String) 
CompCanvasPage.bas[443]  myToastId = myToastId + 1 
CompCanvasPage.bas[444]  
CompCanvasPage.bas[445]  Dim ChangedTo As String 
CompCanvasPage.bas[446]  
CompCanvasPage.bas[447]  Dim canvas1 As ABMCanvas = page.Component( {337} ) 
CompCanvasPage.bas[448]  Dim Kyle As ABMCanvasObject = canvas1.GetObject(objectId) 
CompCanvasPage.bas[449]  If Kyle.Width = 109 Then 
CompCanvasPage.bas[450]  ' changing the size to the new picture 
CompCanvasPage.bas[451]  Kyle.SetSize(98,129) 
CompCanvasPage.bas[452]  Kyle.Clear 
CompCanvasPage.bas[453]  Kyle.drawImage( {338} ,0,0) 
CompCanvasPage.bas[454]  Kyle.Refresh ' IMPORTANT 
CompCanvasPage.bas[455]  ChangedTo = {339} 
CompCanvasPage.bas[456]  Else 
CompCanvasPage.bas[457]  ' changing the size to the new picture 
CompCanvasPage.bas[458]  Kyle.SetSize(109,136) 
CompCanvasPage.bas[459]  Kyle.Clear 
CompCanvasPage.bas[460]  Kyle.drawImage( {340} ,0,0) 
CompCanvasPage.bas[461]  Kyle.Refresh ' IMPORTANT 
CompCanvasPage.bas[462]  ChangedTo = {341} 
CompCanvasPage.bas[463]  End If 
CompCanvasPage.bas[464]  
CompCanvasPage.bas[465]  canvas1.Refresh ' IMPORTANT! 
CompCanvasPage.bas[466]  
CompCanvasPage.bas[467]  page.ShowToast( {342} & myToastId, {343} , objectId & {344} & ChangedTo & {345} , 5000) 
CompCanvasPage.bas[468] End Sub 
CompCanvasPage.bas[469]  
CompCanvasPage.bas[470] Sub canvas1_CanvasDown(x As Int, y As Int) 
CompCanvasPage.bas[471]  Log( {346} & x & {347} & y) 
CompCanvasPage.bas[472] End Sub 
CompCanvasPage.bas[473]  
CompCanvasPage.bas[474] ' check out the tutorial on W3Schools.com: http://www.w3schools.com/canvas/canvas_clock.asp 
CompCanvasPage.bas[475] Sub BuildClock() As ABMCanvasObject 
CompCanvasPage.bas[476]  Dim clock As ABMCanvasObject 
CompCanvasPage.bas[477]  Dim Radius As Double = 150 
CompCanvasPage.bas[478]  
CompCanvasPage.bas[479]  clock.InitializeAsRectangle(page, {348} , 0,0,300,300, True) 
CompCanvasPage.bas[480]  
CompCanvasPage.bas[481]  Radius = Radius * 0.9 
CompCanvasPage.bas[482]  
CompCanvasPage.bas[483]  ' draw face 
CompCanvasPage.bas[484]  clock.translate(150,150) 
CompCanvasPage.bas[485]  clock.beginPath 
CompCanvasPage.bas[486]  clock.arc(0,0,Radius, 0, 2*cPI) 
CompCanvasPage.bas[487]  clock.fillStyleColor( {349} ) 
CompCanvasPage.bas[488]  clock.fill 
CompCanvasPage.bas[489]  clock.strokeStyleRadialGradient(0,0,Radius*0.95,0,0,Radius*1.05, Array As Double(0,0.5,1), Array As String( {350} , {351} , {352} )) 
CompCanvasPage.bas[490]  clock.lineWidth(Radius*0.1) 
CompCanvasPage.bas[491]  clock.stroke() 
CompCanvasPage.bas[492]  
CompCanvasPage.bas[493]  clock.beginPath 
CompCanvasPage.bas[494]  clock.arc(0, 0, Radius*0.1, 0, 2*cPI) 
CompCanvasPage.bas[495]  clock.fillStyleColor( {353} ) 
CompCanvasPage.bas[496]  clock.fill 
CompCanvasPage.bas[497]  
CompCanvasPage.bas[498]  'draw numbers 
CompCanvasPage.bas[499]  clock.font( {354} , Radius*0.15) 
CompCanvasPage.bas[500]  clock.textBaseline(ABM.CANVAS_TEXTBASELINE_MIDDLE) 
CompCanvasPage.bas[501]  clock.textAlign(ABM.CANVAS_TEXTALIGN_CENTER) 
CompCanvasPage.bas[502]  Dim ang As Double 
CompCanvasPage.bas[503]  For num = 1 To 12 
CompCanvasPage.bas[504]  ang = num * cPI / 6 
CompCanvasPage.bas[505]  clock.rotate(ang) 
CompCanvasPage.bas[506]  clock.translate(0, -Radius*0.85) 
CompCanvasPage.bas[507]  clock.rotate(-ang) 
CompCanvasPage.bas[508]  clock.fillText( {355} & num, 0, 0) 
CompCanvasPage.bas[509]  clock.rotate(ang) 
CompCanvasPage.bas[510]  clock.translate(0, Radius*0.85) 
CompCanvasPage.bas[511]  clock.rotate(-ang) 
CompCanvasPage.bas[512]  Next 
CompCanvasPage.bas[513]  
CompCanvasPage.bas[514]  ' draw time 
CompCanvasPage.bas[515]  Dim hour As Double = DateTime.GetHour(DateTime.Now) 
CompCanvasPage.bas[516]  Dim minute As Double = DateTime.GetMinute(DateTime.Now) 
CompCanvasPage.bas[517]  Dim second As Double = DateTime.GetSecond(DateTime.Now) 
CompCanvasPage.bas[518]  hour = hour Mod 12 
CompCanvasPage.bas[519]  hour = (hour*cPI/6)+(minute*cPI/(6*60))+(second*cPI/(360*60)) 
CompCanvasPage.bas[520]  BuildHand(clock, hour, Radius*0.5, Radius*0.07) 
CompCanvasPage.bas[521]  minute=(minute*cPI/30)+(second*cPI/(30*60)) 
CompCanvasPage.bas[522]  BuildHand(clock, minute, Radius*0.8, Radius*0.07) 
CompCanvasPage.bas[523]  second=(second*cPI/30) 
CompCanvasPage.bas[524]  BuildHand(clock, second, Radius*0.9, Radius*0.02) 
CompCanvasPage.bas[525]  
CompCanvasPage.bas[526]  Return clock 
CompCanvasPage.bas[527] End Sub 
CompCanvasPage.bas[528]  
CompCanvasPage.bas[529] Sub BuildHand(clock As ABMCanvasObject, pos As Int, length As Double, width As Double) 
CompCanvasPage.bas[530]  clock.beginPath 
CompCanvasPage.bas[531]  clock.lineWidth(width) 
CompCanvasPage.bas[532]  clock.lineCap(ABM.CANVAS_LINECAP_ROUND) 
CompCanvasPage.bas[533]  clock.moveTo(0,0) 
CompCanvasPage.bas[534]  clock.rotate(pos) 
CompCanvasPage.bas[535]  clock.lineTo(0, -length) 
CompCanvasPage.bas[536]  clock.stroke 
CompCanvasPage.bas[537]  clock.rotate(-pos) 
CompCanvasPage.bas[538] End Sub 
CompCanvasPage.bas[539]  
CompCanvasPage.bas[540] Sub BuildControlBar() As ABMCanvasObject 
CompCanvasPage.bas[541]  Dim cont As ABMCanvasObject 
CompCanvasPage.bas[542]  cont.InitializeAsRectangle(page, {356} , 0,0,1024,100,False) 
CompCanvasPage.bas[543]  cont.beginPath 
CompCanvasPage.bas[544]  cont.lineWidth(5) 
CompCanvasPage.bas[545]  cont.lineCap(ABM.CANVAS_LINECAP_ROUND) 
CompCanvasPage.bas[546]  cont.strokeStyleColor( {357} ) 
CompCanvasPage.bas[547]  cont.moveTo(20,47) 
CompCanvasPage.bas[548]  cont.lineTo(1004,47) 
CompCanvasPage.bas[549]  cont.stroke 
CompCanvasPage.bas[550]  Return cont 
CompCanvasPage.bas[551] End Sub 
CompCanvasPage.bas[552]  
CompCanvasPage.bas[553] Sub BuildControlCircle() As ABMCanvasObject 
CompCanvasPage.bas[554]  Dim cont As ABMCanvasObject 
CompCanvasPage.bas[555]  cont.InitializeAsCircle(page, {358} , 50,48,40, True) 
CompCanvasPage.bas[556]  ' here we restrict the movement of the control so it only can me moved on the X-Axis 
CompCanvasPage.bas[557]  cont.SetDragZone(50,48,924,1) 
CompCanvasPage.bas[558]  
CompCanvasPage.bas[559]  cont.beginPath 
CompCanvasPage.bas[560]  cont.arc(0,0,40, 0, 2*cPI) 
CompCanvasPage.bas[561]  cont.fillStyleColor( {359} ) 
CompCanvasPage.bas[562]  cont.fill 
CompCanvasPage.bas[563]  cont.save 
CompCanvasPage.bas[564]  cont.translate(-40,-40) 
CompCanvasPage.bas[565]  cont.drawImage3( {360} , 0,0,147,135,5,5, 70,64) 
CompCanvasPage.bas[566]  cont.closePath 
CompCanvasPage.bas[567]  cont.restore 
CompCanvasPage.bas[568]  Return cont 
CompCanvasPage.bas[569] End Sub 
CompCanvasPage.bas[570]  
CompCanvasPage.bas[571] Sub canvas3_ObjectUp(objectId As String) 
CompCanvasPage.bas[572]  ' calculate value from position 
CompCanvasPage.bas[573]  Dim canvas1 As ABMCanvas = page.Component( {361} ) 
CompCanvasPage.bas[574]  Dim Eric As ABMCanvasObject = canvas1.GetObject(objectId) 
CompCanvasPage.bas[575]  Dim Pos As ABMPoint = Eric.GetPosition 
CompCanvasPage.bas[576]  If Pos <> Null Then 
CompCanvasPage.bas[577]  ' map to 0 to 100: (our position - the dragzone left)/(dragzone width)*100 
CompCanvasPage.bas[578]  Dim value As Int = (Pos.x-50)/924*100 
CompCanvasPage.bas[579]  myToastId = myToastId + 1 
CompCanvasPage.bas[580]  page.ShowToast( {362} & myToastId, {363} , {364} & value, 5000) 
CompCanvasPage.bas[581]  End If 
CompCanvasPage.bas[582] End Sub 
CompCanvasPage.bas[583]  
Analysing: CompCardPage.bas
CompCardPage.bas[0] ﻿Type=Class 
CompCardPage.bas[0] Version=4.7 
CompCardPage.bas[0] ModulesStructureVersion=1 
CompCardPage.bas[0] B4J=true 
CompCardPage.bas[0] @EndOfDesignText@ 
CompCardPage.bas[1] 'Class module 
CompCardPage.bas[2] Sub Class_Globals 
CompCardPage.bas[3]  Private ws As WebSocket 'ignore 
CompCardPage.bas[4]  ' will hold our page information 
CompCardPage.bas[5]  Public page As ABMPage 
CompCardPage.bas[6]  ' page theme 
CompCardPage.bas[7]  Private theme As ABMTheme 
CompCardPage.bas[8]  ' to access the constants 
CompCardPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCardPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCardPage.bas[11]  Public Name As String = {0} 
CompCardPage.bas[12]  ' will hold the unique browsers window id 
CompCardPage.bas[13]  Private ABMPageId As String = {1} 
CompCardPage.bas[14]  
CompCardPage.bas[15]  ' your own variables 
CompCardPage.bas[16]  Dim myToastId As Int 
CompCardPage.bas[17] End Sub 
CompCardPage.bas[18]  
CompCardPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompCardPage.bas[20] Public Sub Initialize 
CompCardPage.bas[21]  ' build the local structure IMPORTANT! 
CompCardPage.bas[22]  BuildPage 
CompCardPage.bas[23] End Sub 
CompCardPage.bas[24]  
CompCardPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCardPage.bas[26]  Log( {2} ) 
CompCardPage.bas[27]  ws = WebSocket1 
CompCardPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCardPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCardPage.bas[30]  
CompCardPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompCardPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompCardPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompCardPage.bas[34]  Return 
CompCardPage.bas[35]  End If 
CompCardPage.bas[36]  End If 
CompCardPage.bas[37]  
CompCardPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCardPage.bas[39]  If page.ComesFromPageCache Then 
CompCardPage.bas[40]  ' refresh the page 
CompCardPage.bas[41]  page.Refresh 
CompCardPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCardPage.bas[43]  page.FinishedLoading 
CompCardPage.bas[44]  Else 
CompCardPage.bas[45]  ' Prepare the page 
CompCardPage.bas[46]  page.Prepare 
CompCardPage.bas[47]  ' load the dynamic content 
CompCardPage.bas[48]  ConnectPage 
CompCardPage.bas[49]  End If 
CompCardPage.bas[50]  Log(ABMPageId) 
CompCardPage.bas[51] End Sub 
CompCardPage.bas[52]  
CompCardPage.bas[53] Private Sub WebSocket_Disconnected 
CompCardPage.bas[54]  Log( {7} ) 
CompCardPage.bas[55] End Sub 
CompCardPage.bas[56]  
CompCardPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompCardPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompCardPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompCardPage.bas[60]  If eventName = {11} Then 
CompCardPage.bas[61]  Log( {12} ) 
CompCardPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCardPage.bas[63]  Return 
CompCardPage.bas[64]  End If 
CompCardPage.bas[65]  If SubExists(Me, eventName) Then 
CompCardPage.bas[66]  Params.Remove( {13} ) 
CompCardPage.bas[67]  Params.Remove( {14} ) 
CompCardPage.bas[68]  Select Case Params.Size 
CompCardPage.bas[69]  Case 0 
CompCardPage.bas[70]  CallSub(Me, eventName) 
CompCardPage.bas[71]  Case 1 
CompCardPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCardPage.bas[73]  Case 2 
CompCardPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompCardPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCardPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompCardPage.bas[77]  Else 
CompCardPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCardPage.bas[79]  End If 
CompCardPage.bas[80]  Case Else 
CompCardPage.bas[81]  ' cannot be called directly, to many param 
CompCardPage.bas[82]  CallSub2(Me, eventName, Params) 
CompCardPage.bas[83]  End Select 
CompCardPage.bas[84]  End If 
CompCardPage.bas[85] End Sub 
CompCardPage.bas[86]  
CompCardPage.bas[87] public Sub BuildTheme() 
CompCardPage.bas[88]  ' start with the base theme defined in ABMShared 
CompCardPage.bas[89]  theme.Initialize( {16} ) 
CompCardPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCardPage.bas[91]  
CompCardPage.bas[92]  ' add additional themes specific for this page 
CompCardPage.bas[93]  
CompCardPage.bas[94]  ' card themes 
CompCardPage.bas[95]  theme.AddCardTheme( {17} ) 
CompCardPage.bas[96]  theme.Card( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompCardPage.bas[97]  theme.Card( {19} ).TitleForeColor = ABM.COLOR_WHITE 
CompCardPage.bas[98]  theme.Card( {20} ).ContentForeColor = ABM.COLOR_WHITE 
CompCardPage.bas[99]  theme.Card( {21} ).ActionForeColor = ABM.COLOR_ORANGE 
CompCardPage.bas[100]  
CompCardPage.bas[101]  theme.AddCardTheme( {22} ) 
CompCardPage.bas[102]  theme.Card( {23} ).TitleForeColor = ABM.COLOR_WHITE 
CompCardPage.bas[103]  
CompCardPage.bas[104]  theme.AddCardTheme( {24} ) 
CompCardPage.bas[105]  theme.Card( {25} ).ContentForeColor = ABM.COLOR_WHITE 
CompCardPage.bas[106]  theme.Card( {26} ).BackColor = ABM.COLOR_RED 
CompCardPage.bas[107] End Sub 
CompCardPage.bas[108]  
CompCardPage.bas[109] public Sub BuildPage() 
CompCardPage.bas[110]  ' initialize the theme 
CompCardPage.bas[111]  BuildTheme 
CompCardPage.bas[112]  
CompCardPage.bas[113]  ' initialize this page using our theme 
CompCardPage.bas[114]  page.InitializeWithTheme(Name, {27} & ABMshared.AppName & {28} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCardPage.bas[115]  page.ShowLoader=True 
CompCardPage.bas[116]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCardPage.bas[117]  page.PageTitle = {29} 
CompCardPage.bas[118]  page.PageDescription = {30} 
CompCardPage.bas[119]  page.PageHTMLName = {31} 
CompCardPage.bas[120]  page.PageKeywords = {32} 
CompCardPage.bas[121]  page.PageSiteMapPriority = {33} 
CompCardPage.bas[122]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCardPage.bas[123]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCardPage.bas[124]  
CompCardPage.bas[125]  ABMShared.BuildNavigationBar(page, {34} , {35} , {36} , {37} , {38} ) 
CompCardPage.bas[126]  
CompCardPage.bas[127]  ' create the page grid 
CompCardPage.bas[128]  page.AddRows(1,True, {39} ).AddCells12(1, {40} ) 
CompCardPage.bas[129]  page.AddRows(1,True, {41} ).AddCellsOS(1,0,0,0,12,6,6, {42} ) 
CompCardPage.bas[130]  page.AddRows(2,True, {43} ).AddCells12(1, {44} ) 
CompCardPage.bas[131]  page.AddRows(1,True, {45} ).AddCellsOS(1,0,0,0,12,7,7, {46} ) 
CompCardPage.bas[132]  page.AddRows(2,True, {47} ).AddCells12(1, {48} ) 
CompCardPage.bas[133]  page.AddRows(1,True, {49} ).AddCellsOS(1,0,0,0,12,7,7, {50} ) 
CompCardPage.bas[134]  page.AddRows(2,True, {51} ).AddCells12(1, {52} ) 
CompCardPage.bas[135]  page.AddRows(1,True, {53} ).AddCellsOS(1,0,0,0,12,6,6, {54} ) 
CompCardPage.bas[136]  page.AddRows(1,True, {55} ).AddCells12(1, {56} ) 
CompCardPage.bas[137]  page.AddRows(1,True, {57} ).AddCellsOS(1,0,0,0,12,7,7, {58} ) 
CompCardPage.bas[138]  page.AddRows(1,True, {59} ).AddCells12(1, {60} ) 
CompCardPage.bas[139]  page.AddRows(1,True, {61} ).AddCellsOS(1,0,0,0,12,8,8, {62} ) 
CompCardPage.bas[140]  page.AddRows(1,True, {63} ).AddCells12(1, {64} ) 
CompCardPage.bas[141]  page.AddRows(1,True, {65} ).AddCellsOS(1,0,0,0,12,6,6, {66} ) 
CompCardPage.bas[142]  page.AddRows(1,True, {67} ).AddCells12(1, {68} ) 
CompCardPage.bas[143]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCardPage.bas[144]  
CompCardPage.bas[145]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompCardPage.bas[146]  'page.NeedsCodeLabel = True 
CompCardPage.bas[147]  
CompCardPage.bas[148]  ABMShared.BuildFooter(page) 
CompCardPage.bas[149] End Sub 
CompCardPage.bas[150]  
CompCardPage.bas[151] Sub ConnectPage() 
CompCardPage.bas[152]  'NEW 
CompCardPage.bas[153]  ABMShared.ConnectNavigationBar(page) 
CompCardPage.bas[154]  
CompCardPage.bas[155]  ' add paragraph 
CompCardPage.bas[156]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {69} , {70} ) ) 
CompCardPage.bas[157]  
CompCardPage.bas[158]  ' add a header label 
CompCardPage.bas[159]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {71} , {72} )) 
CompCardPage.bas[160]  
CompCardPage.bas[161]  ' basic card 
CompCardPage.bas[162]  Dim card1 As ABMCard 
CompCardPage.bas[163]  card1.InitializeAsCard(page, {73} , {74} , {75} , ABM.CARD_NOTSPECIFIED, {76} ) 
CompCardPage.bas[164]  card1.AddAction( {77} ) 
CompCardPage.bas[165]  card1.AddAction( {78} ) 
CompCardPage.bas[166]  page.Cell(2,1).AddComponent(card1) 
CompCardPage.bas[167]  
CompCardPage.bas[168]  ' add codeblock 
CompCardPage.bas[169]  Dim code As StringBuilder 
CompCardPage.bas[170]  code.Initialize 
CompCardPage.bas[171]  code.Append( {79} ).Append(CRLF) 
CompCardPage.bas[172]  code.Append( {313} ).Append(CRLF) 
CompCardPage.bas[173]  code.Append( {315} ).Append(CRLF) 
CompCardPage.bas[174]  code.Append( {317} ).Append(CRLF) 
CompCardPage.bas[175]  code.Append( {95} ).Append(CRLF) 
CompCardPage.bas[176]  
CompCardPage.bas[177]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {96} , code)) 
CompCardPage.bas[178]  
CompCardPage.bas[179]  ' add a header label 
CompCardPage.bas[180]  page.Cell(4,1).AddComponent(ABMShared.BuildHeader(page, {97} , {98} )) 
CompCardPage.bas[181]  
CompCardPage.bas[182]  ' add paragraph 
CompCardPage.bas[183]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {99} , {100} ) ) 
CompCardPage.bas[184]  
CompCardPage.bas[185]  ' image card 
CompCardPage.bas[186]  Dim card2 As ABMCard 
CompCardPage.bas[187]  card2.InitializeAsCard(page, {101} , {102} , {103} , ABM.CARD_NOTSPECIFIED, {104} ) 
CompCardPage.bas[188]  card2.Image = {105} 
CompCardPage.bas[189]  card2.AddAction( {106} ) 
CompCardPage.bas[190]  page.Cell(5,1).AddComponent(card2) 
CompCardPage.bas[191]  
CompCardPage.bas[192]  ' add codeblock 
CompCardPage.bas[193]  Dim code2 As StringBuilder 
CompCardPage.bas[194]  code2.Initialize 
CompCardPage.bas[195]  code2.Append( {107} ).Append(CRLF) 
CompCardPage.bas[196]  code2.Append( {325} ).Append(CRLF) 
CompCardPage.bas[197]  code2.Append( {327} ).Append(CRLF) 
CompCardPage.bas[198]  code2.Append( {329} ).Append(CRLF) 
CompCardPage.bas[199]  code2.Append( {123} ).Append(CRLF) 
CompCardPage.bas[200]  
CompCardPage.bas[201]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {124} , code2)) 
CompCardPage.bas[202]  
CompCardPage.bas[203]  ' add a header label 
CompCardPage.bas[204]  page.Cell(7,1).AddComponent(ABMShared.BuildHeader(page, {125} , {126} )) 
CompCardPage.bas[205]  
CompCardPage.bas[206]  ' add paragraph 
CompCardPage.bas[207]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {127} , {128} ) ) 
CompCardPage.bas[208]  
CompCardPage.bas[209]  ' image card 
CompCardPage.bas[210]  Dim card3 As ABMCard 
CompCardPage.bas[211]  card3.InitializeAsCard(page, {129} , {130} , {131} , ABM.CARD_NOTSPECIFIED, {132} ) 
CompCardPage.bas[212]  card3.Image = {133} 
CompCardPage.bas[213]  card3.IsReveal = True 
CompCardPage.bas[214]  card3.AddAction( {134} ) 
CompCardPage.bas[215]  page.Cell(8,1).AddComponent(card3) 
CompCardPage.bas[216]  
CompCardPage.bas[217]  ' add codeblock 
CompCardPage.bas[218]  Dim code3 As StringBuilder 
CompCardPage.bas[219]  code3.Initialize 
CompCardPage.bas[220]  code3.Append( {135} ).Append(CRLF) 
CompCardPage.bas[221]  code3.Append( {337} ).Append(CRLF) 
CompCardPage.bas[222]  code3.Append( {339} ).Append(CRLF) 
CompCardPage.bas[223]  code3.Append( {148} ).Append(CRLF) 
CompCardPage.bas[224]  code3.Append( {341} ).Append(CRLF) 
CompCardPage.bas[225]  code3.Append( {152} ).Append(CRLF) 
CompCardPage.bas[226]  
CompCardPage.bas[227]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {153} , code3)) 
CompCardPage.bas[228]  
CompCardPage.bas[229]  ' add a header label 
CompCardPage.bas[230]  page.Cell(10,1).AddComponent(ABMShared.BuildHeader(page, {154} , {155} )) 
CompCardPage.bas[231]  
CompCardPage.bas[232]  ' add paragraph 
CompCardPage.bas[233]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {156} , {157} ) ) 
CompCardPage.bas[234]  
CompCardPage.bas[235]  ' add a sub header label 
CompCardPage.bas[236]  page.Cell(10,1).AddComponent(ABMShared.BuildSubHeader(page, {158} , {159} )) 
CompCardPage.bas[237]  
CompCardPage.bas[238]  ' add paragraph 
CompCardPage.bas[239]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {160} , {161} ) ) 
CompCardPage.bas[240]  
CompCardPage.bas[241]  ' image card 
CompCardPage.bas[242]  Dim card4 As ABMCard 
CompCardPage.bas[243]  card4.InitializeAsCard(page, {162} , {163} , {164} , ABM.CARD_SMALL, {165} ) 
CompCardPage.bas[244]  card4.Image = {166} 
CompCardPage.bas[245]  card4.AddAction( {167} ) 
CompCardPage.bas[246]  card4.AddAction( {168} ) 
CompCardPage.bas[247]  page.Cell(11,1).AddComponent(card4) 
CompCardPage.bas[248]  
CompCardPage.bas[249]  ' add a sub header label 
CompCardPage.bas[250]  page.Cell(12,1).AddComponent(ABMShared.BuildSubHeader(page, {169} , {170} )) 
CompCardPage.bas[251]  
CompCardPage.bas[252]  ' add paragraph 
CompCardPage.bas[253]  page.Cell(12,1).AddComponent(ABMShared.BuildParagraph(page, {171} , {172} ) ) 
CompCardPage.bas[254]  
CompCardPage.bas[255]  ' image card 
CompCardPage.bas[256]  Dim card5 As ABMCard 
CompCardPage.bas[257]  card5.InitializeAsCard(page, {173} , {174} , {175} , ABM.CARD_MEDIUM, {176} ) 
CompCardPage.bas[258]  card5.Image = {177} 
CompCardPage.bas[259]  card5.AddAction( {178} ) 
CompCardPage.bas[260]  card5.AddAction( {179} ) 
CompCardPage.bas[261]  page.Cell(13,1).AddComponent(card5) 
CompCardPage.bas[262]  
CompCardPage.bas[263]  ' add a sub header label 
CompCardPage.bas[264]  page.Cell(14,1).AddComponent(ABMShared.BuildSubHeader(page, {180} , {181} )) 
CompCardPage.bas[265]  
CompCardPage.bas[266]  ' add paragraph 
CompCardPage.bas[267]  page.Cell(14,1).AddComponent(ABMShared.BuildParagraph(page, {182} , {183} ) ) 
CompCardPage.bas[268]  
CompCardPage.bas[269]  ' image card 
CompCardPage.bas[270]  Dim card6 As ABMCard 
CompCardPage.bas[271]  card6.InitializeAsCard(page, {184} , {185} , {186} , ABM.CARD_LARGE, {187} ) 
CompCardPage.bas[272]  card6.Image = {188} 
CompCardPage.bas[273]  card6.AddAction( {189} ) 
CompCardPage.bas[274]  card6.AddAction( {190} ) 
CompCardPage.bas[275]  page.Cell(15,1).AddComponent(card6) 
CompCardPage.bas[276]  
CompCardPage.bas[277]  ' add a header label 
CompCardPage.bas[278]  page.Cell(16,1).AddComponent(ABMShared.BuildHeader(page, {191} , {192} )) 
CompCardPage.bas[279]  
CompCardPage.bas[280]  ' add paragraph 
CompCardPage.bas[281]  page.Cell(16,1).AddComponent(ABMShared.BuildParagraph(page, {193} , {194} ) ) 
CompCardPage.bas[282]  
CompCardPage.bas[283]  ' image card 
CompCardPage.bas[284]  Dim card7 As ABMCard 
CompCardPage.bas[285]  card7.InitializeAsPanel(page, {195} , {196} , {197} ) 
CompCardPage.bas[286]  page.Cell(17,1).AddComponent(card7) 
CompCardPage.bas[287]  
CompCardPage.bas[288]  ' add codeblock 
CompCardPage.bas[289]  Dim code4 As StringBuilder 
CompCardPage.bas[290]  code4.Initialize 
CompCardPage.bas[291]  code4.Append( {198} ).Append(CRLF) 
CompCardPage.bas[292]  code4.Append( {347} ).Append(CRLF) 
CompCardPage.bas[293]  code4.Append( {206} ).Append(CRLF) 
CompCardPage.bas[294]  
CompCardPage.bas[295]  page.Cell(18,1).AddComponent(ABMShared.BuildCodeBlock(page, {207} , code4)) 
CompCardPage.bas[296]  
CompCardPage.bas[297]  ' also add the components to the footer 
CompCardPage.bas[298]  ABMShared.ConnectFooter(page) 
CompCardPage.bas[299]  
CompCardPage.bas[300]  page.Refresh ' IMPORTANT 
CompCardPage.bas[301]  
CompCardPage.bas[302]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCardPage.bas[303]  page.FinishedLoading 'IMPORTANT 
CompCardPage.bas[304]  
CompCardPage.bas[305]  page.RestoreNavigationBarPosition 
CompCardPage.bas[306] End Sub 
CompCardPage.bas[307]  
CompCardPage.bas[308] ' clicked on the navigation bar 
CompCardPage.bas[309] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCardPage.bas[310]  page.SaveNavigationBarPosition 
CompCardPage.bas[311]  If Action = {208} Then Return 
CompCardPage.bas[312]  If Action = {209} Then 
CompCardPage.bas[313]  myToastId = myToastId + 1 
CompCardPage.bas[314]  page.ShowToast( {210} & myToastId, {211} , {212} , 5000) 
CompCardPage.bas[315]  Return 
CompCardPage.bas[316]  End If 
CompCardPage.bas[317]  If Action = {213} Then 
CompCardPage.bas[318]  ABMShared.LogOff(page) 
CompCardPage.bas[319]  Return 
CompCardPage.bas[320]  End If 
CompCardPage.bas[321]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCardPage.bas[322] End Sub 
CompCardPage.bas[323]  
CompCardPage.bas[324] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCardPage.bas[325]  page.ws.Session.SetAttribute( {214} , {215} ) 
CompCardPage.bas[326]  page.ws.Session.SetAttribute( {216} , {217} ) 
CompCardPage.bas[327]  page.ws.Session.SetAttribute( {218} , {219} ) 
CompCardPage.bas[328]  ABMShared.NavigateToPage(ws, ABMPageId, {220} ) 
CompCardPage.bas[329] End Sub 
CompCardPage.bas[330]  
CompCardPage.bas[331] Sub card1_LinkClicked(Card As String, Action As String) 
CompCardPage.bas[332]  myToastId = myToastId + 1 
CompCardPage.bas[333]  page.ShowToast( {221} & myToastId, {222} , {223} & Action & {224} , 5000) 
CompCardPage.bas[334] End Sub 
CompCardPage.bas[335]  
CompCardPage.bas[336] ' example of containers in containers (question of Gabino) 
CompCardPage.bas[337]  
CompCardPage.bas[338] ''Class module 
CompCardPage.bas[339] 'Sub Class_Globals 
CompCardPage.bas[340] ' Private ws As WebSocket 'ignore 
CompCardPage.bas[341] ' ' will hold our page information 
CompCardPage.bas[342] ' Public page As ABMPage 
CompCardPage.bas[343] ' ' page theme 
CompCardPage.bas[344] ' Private theme As ABMTheme 
CompCardPage.bas[345] ' ' to access the constants 
CompCardPage.bas[346] ' Private ABM As ABMaterial 'ignore 
CompCardPage.bas[347] ' ' name of the page, must be the same as the class name (case sensitive!) 
CompCardPage.bas[348] ' Public Name As String = {225} 
CompCardPage.bas[349] ' will hold the unique browsers window id 
CompCardPage.bas[350] ' Private ABMPageId As String = {226} 
CompCardPage.bas[351] ' 
CompCardPage.bas[352] ' ' your own variables 
CompCardPage.bas[353] ' 
CompCardPage.bas[354] ' Dim MyToastId As Int 
CompCardPage.bas[355] ' 
CompCardPage.bas[356] ' Dim NColumnas As Int = 1 
CompCardPage.bas[357] ' Dim Pasada As Int = 1 
CompCardPage.bas[358] ' Dim NRegistros As Int = 0 
CompCardPage.bas[359] ' 
CompCardPage.bas[360] 'End Sub 
CompCardPage.bas[361] ' 
CompCardPage.bas[362] ''Initializes the object. You can add parameters to this method if needed. 
CompCardPage.bas[363] 'Public Sub Initialize 
CompCardPage.bas[364] ' ' build the local structure IMPORTANT! 
CompCardPage.bas[365] ' BuildPage 
CompCardPage.bas[366] 'End Sub 
CompCardPage.bas[367] ' 
CompCardPage.bas[368] 'Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCardPage.bas[369] ' Log( {227} ) 
CompCardPage.bas[370] ' ws = WebSocket1 
CompCardPage.bas[371] ' ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCardPage.bas[372] ' Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCardPage.bas[373] ' 
CompCardPage.bas[374] ' If ABMShared.NeedsAuthorization Then 
CompCardPage.bas[375] ' If session.GetAttribute2( {228} , {229} ) = {230} Then 
CompCardPage.bas[376] ' ABMShared.NavigateToPage(ws, ABMPageId, {231} ) 
CompCardPage.bas[377] ' Return 
CompCardPage.bas[378] ' End If 
CompCardPage.bas[379] ' End If 
CompCardPage.bas[380] ' 
CompCardPage.bas[381] ' ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCardPage.bas[382] ' If page.ComesFromPageCache Then 
CompCardPage.bas[383] ' ' refresh the page 
CompCardPage.bas[384] ' page.Refresh 
CompCardPage.bas[385] ' ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCardPage.bas[386] ' page.FinishedLoading 
CompCardPage.bas[387] ' Else 
CompCardPage.bas[388] ' ' Prepare the page 
CompCardPage.bas[389] ' page.Prepare 
CompCardPage.bas[390] ' ' load the dynamic content 
CompCardPage.bas[391] ' ConnectPage 
CompCardPage.bas[392] ' End If 
CompCardPage.bas[393] ' Log(ABMPageId) 
CompCardPage.bas[394] 'End Sub 
CompCardPage.bas[395] ' 
CompCardPage.bas[396] 'Private Sub WebSocket_Disconnected 
CompCardPage.bas[397] ' Log( {232} ) 
CompCardPage.bas[398] 'End Sub 
CompCardPage.bas[399] ' 
CompCardPage.bas[400] 'Sub Page_ParseEvent(Params As Map) 
CompCardPage.bas[401] ' Dim eventName As String = Params.Get( {233} ) 
CompCardPage.bas[402] ' Dim eventParams() As String = Regex.Split( {234} ,Params.Get( {235} )) 
CompCardPage.bas[403] ' If eventName = {236} Then 
CompCardPage.bas[404] ' Log( {237} ) 
CompCardPage.bas[405] ' ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCardPage.bas[406] ' Return 
CompCardPage.bas[407] ' End If 
CompCardPage.bas[408] ' If SubExists(Me, eventName) Then 
CompCardPage.bas[409] ' Params.Remove( {238} ) 
CompCardPage.bas[410] ' Params.Remove( {239} ) 
CompCardPage.bas[411] ' Select Case Params.Size 
CompCardPage.bas[412] ' Case 0 
CompCardPage.bas[413] ' CallSub(Me, eventName) 
CompCardPage.bas[414] ' Case 1 
CompCardPage.bas[415] ' CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCardPage.bas[416] ' Case 2 
CompCardPage.bas[417] ' If Params.get(eventParams(0)) = {240} Then 
CompCardPage.bas[418] ' Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCardPage.bas[419] ' CallSub2(Me, eventName, PassedTables) 
CompCardPage.bas[420] ' Else 
CompCardPage.bas[421] ' CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCardPage.bas[422] ' End If 
CompCardPage.bas[423] ' Case Else 
CompCardPage.bas[424] ' ' cannot be called directly, to many param 
CompCardPage.bas[425] ' CallSub2(Me, eventName, Params) 
CompCardPage.bas[426] ' End Select 
CompCardPage.bas[427] ' End If 
CompCardPage.bas[428] 'End Sub 
CompCardPage.bas[429] ' 
CompCardPage.bas[430] 'public Sub BuildTheme() 
CompCardPage.bas[431] ' ' start with the base theme defined in ABMShared 
CompCardPage.bas[432] ' theme.Initialize( {241} ) 
CompCardPage.bas[433] ' theme.AddABMTheme(ABMShared.MyTheme) 
CompCardPage.bas[434] ' 
CompCardPage.bas[435] ' ' add additional themes specific for this page 
CompCardPage.bas[436] ' 
CompCardPage.bas[437] 'End Sub 
CompCardPage.bas[438] ' 
CompCardPage.bas[439] 'public Sub BuildPage() 
CompCardPage.bas[440] ' ' initialize the theme 
CompCardPage.bas[441] ' BuildTheme 
CompCardPage.bas[442] ' 
CompCardPage.bas[443] ' ' Para que muestre las cuadrículas 
CompCardPage.bas[444] ' ' page.ShowGridInfo = True 
CompCardPage.bas[445] ' 
CompCardPage.bas[446] ' ' initialize this page using our theme 
CompCardPage.bas[447] ' page.InitializeWithTheme(Name, {242} & AppName & {243} & Name, False, theme) 
CompCardPage.bas[448] ' page.ShowLoader=True 
CompCardPage.bas[449] ' page.PageTitle = {244} 
CompCardPage.bas[450] ' page.PageDescription = {245} 
CompCardPage.bas[451] ' page.PageHTMLName = {246} 
CompCardPage.bas[452] ' page.PageKeywords = {247} 
CompCardPage.bas[453] ' page.PageSiteMapPriority = {248} 
CompCardPage.bas[454] ' page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCardPage.bas[455] ' page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCardPage.bas[456] ' page.NeedsCards=True 
CompCardPage.bas[457] ' 
CompCardPage.bas[458] ' ABMShared.BuildNavigationBar(page, {249} , {250} , {251} , {252} , {253} ) 
CompCardPage.bas[459] ' 
CompCardPage.bas[460] ' ' create the page grid 
CompCardPage.bas[461] ' page.AddRows(2,True, {254} ).AddCells12(1, {255} ) 
CompCardPage.bas[462] ' page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCardPage.bas[463] ' 
CompCardPage.bas[464] ' ' add paragraph 
CompCardPage.bas[465] ' page.Cell(1,1).AddComponent(ABMShared.BuildParagraphBQ(page, {256} , {257} ) ) 
CompCardPage.bas[466] ' 
CompCardPage.bas[467] ' Dim BtnPulsado As ABMButton 
CompCardPage.bas[468] ' BtnPulsado.InitializeRaised(page, {258} , {259} , {260} , {261} , {262} ) 
CompCardPage.bas[469] ' page.Cell(1,1).AddComponent(BtnPulsado) 
CompCardPage.bas[470] ' 
CompCardPage.bas[471] ' Dim Cont1 As ABMContainer 
CompCardPage.bas[472] ' Cont1.Initialize(page, {263} , {264} ) 
CompCardPage.bas[473] ' Cont1.AddRows(1, True, {265} ).AddCellsOS(1,0,0,0,12,12,12, {266} ) 
CompCardPage.bas[474] ' Cont1.BuildGrid ' IMPORTANT 
CompCardPage.bas[475] ' page.Cell(2,1).AddComponent(Cont1) 
CompCardPage.bas[476] ' 
CompCardPage.bas[477] 'End Sub 
CompCardPage.bas[478] ' 
CompCardPage.bas[479] '' clicked on the navigation bar 
CompCardPage.bas[480] 'Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCardPage.bas[481] ' page.SaveNavigationBarPosition 
CompCardPage.bas[482] ' If Action = {267} Then Return 
CompCardPage.bas[483] ' If Action = {268} Then 
CompCardPage.bas[484] ' MyToastId = MyToastId + 1 
CompCardPage.bas[485] ' page.ShowToast( {269} & MyToastId, {270} , {271} , 5000) 
CompCardPage.bas[486] ' Return 
CompCardPage.bas[487] ' End If 
CompCardPage.bas[488] ' ABMShared.NavigateToPage(ws, Value) 
CompCardPage.bas[489] 'End Sub 
CompCardPage.bas[490] ' 
CompCardPage.bas[491] ' 
CompCardPage.bas[492] 'Sub BtnPulsado_Clicked(ItemId As String) 
CompCardPage.bas[493] ' Dim ContAux As ABMContainer 
CompCardPage.bas[494] ' Dim Cont1 As ABMContainer 
CompCardPage.bas[495] ' If MyToastId = 0 Then 
CompCardPage.bas[496] ' Cont1 = page.Component( {272} ) 
CompCardPage.bas[497] ' ContAux.Initialize(page, {273} & Pasada, {274} ) 
CompCardPage.bas[498] ' ContAux.AddRowsM(1, True, 0, 0, {275} ).AddCellsOS(NColumnas, 0, 0, 0, 12/NColumnas, 12/NColumnas, 12/NColumnas, {276} ) 
CompCardPage.bas[499] ' ContAux.BuildGrid 
CompCardPage.bas[500] ' Cont1.Cell(1,1).AddComponent(ContAux) 
CompCardPage.bas[501] ' Else 
CompCardPage.bas[502] ' Cont1 = page.Component( {277} ) 
CompCardPage.bas[503] ' ContAux = Cont1.Component( {278} & Pasada) 
CompCardPage.bas[504] ' End If 
CompCardPage.bas[505] ' 
CompCardPage.bas[506] ' MyToastId = MyToastId + 1 
CompCardPage.bas[507] ' NRegistros = NRegistros + 1 
CompCardPage.bas[508] ' 
CompCardPage.bas[509] ' ws.Session.SetAttribute( {279} , NRegistros) 
CompCardPage.bas[510] ' 
CompCardPage.bas[511] ' ' add a new container ContWithCard (with card, button and texts) to the container contAux 
CompCardPage.bas[512] ' ' note we use AddComponent, so we can give it a full name: {280} & NRegistros 
CompCardPage.bas[513] ' ContAux.Cell(1, MyToastId).AddComponent(BuildContainerWithCard( {281} & NRegistros)) 
CompCardPage.bas[514] ' 
CompCardPage.bas[515] ' ' this refresh should be sufficient 
CompCardPage.bas[516] ' Cont1.Refresh 
CompCardPage.bas[517] ' If MyToastId = NColumnas Then 
CompCardPage.bas[518] ' MyToastId = 0 
CompCardPage.bas[519] ' Pasada = Pasada + 1 
CompCardPage.bas[520] ' 
CompCardPage.bas[521] ' If Pasada = 5 Then Pasada = 6 
CompCardPage.bas[522] ' If Pasada = 7 Then Pasada = 12 
CompCardPage.bas[523] ' NColumnas = Pasada 
CompCardPage.bas[524] ' End If 
CompCardPage.bas[525] 'End Sub 
CompCardPage.bas[526] ' 
CompCardPage.bas[527] 'Sub BuildContainerWithCard(id As String) As ABMContainer 
CompCardPage.bas[528] ' Dim ContainerAux As ABMContainer 
CompCardPage.bas[529] ' ContainerAux.Initialize(page, id, {282} ) 
CompCardPage.bas[530] ' ContainerAux.AddRows(1, True, {283} ).AddCellsOS(1,0,0,0,11,11,11, {284} ).AddCellsOS(1,0,0,0,1,1,1, {285} ) 
CompCardPage.bas[531] ' ContainerAux.AddRows(3, True, {286} ).AddCellsOS(3,0,0,0,4,4,4, {287} ) 
CompCardPage.bas[532] ' ContainerAux.BuildGrid 
CompCardPage.bas[533] ' 
CompCardPage.bas[534] ' ' We want to get the events of the card in one method as an array: Card_LinkClicked() so we use AddArrayComponent 
CompCardPage.bas[535] ' ' Note if we use AddArrayComponent, we do not use a prefix for the 'id', just NRegistros 
CompCardPage.bas[536] ' ' In the Card_LinkClicked(card,action) event we will receive Card + NRegistros in the card Param so we know on what has been clicked. 
CompCardPage.bas[537] ' ContainerAux.Cell(1,1).AddArrayComponent(BuildCard(NRegistros, {288} , {289} & NRegistros), {290} ) 
CompCardPage.bas[538] ' 
CompCardPage.bas[539] ' Dim BtnTarjeta As ABMButton 
CompCardPage.bas[540] ' BtnTarjeta.InitializeFloating(page, NRegistros, {291} , {292} ) 
CompCardPage.bas[541] ' ' We want to get the events of the button in one method as an array: "BtnTarjeta_Clicked() so we use AddArrayComponent 
CompCardPage.bas[542] ' ' Note if we use AddArrayComponent, we do not use a prefix for the 'id', just NRegistros 
CompCardPage.bas[543] ' ' In the BtnTarjeta_Clicked(Target) event we will receive BtnTarjeta + NRegistros in the Target Param so we know on what has been clicked. 
CompCardPage.bas[544] ' ContainerAux.Cell(1, 2).AddArrayComponent(BtnTarjeta, {293} ) 
CompCardPage.bas[545] ' 
CompCardPage.bas[546] ' ' just in case we want to change the texts later, I've added them also with AddArrayComponent so they are unique for sure. 
CompCardPage.bas[547] ' ContainerAux.Cell(2, 1).AddArrayComponent(ABMShared.BuildParagraph(page, NRegistros, {294} & id & {295} ), {296} ) 
CompCardPage.bas[548] ' ContainerAux.Cell(2, 2).AddArrayComponent(ABMShared.BuildParagraph(page, NRegistros, {297} & id & {298} &id), {299} ) 
CompCardPage.bas[549] ' ContainerAux.Cell(2, 3).AddArrayComponent(ABMShared.BuildParagraph(page, NRegistros, {300} & id), {301} ) 
CompCardPage.bas[550] ' 
CompCardPage.bas[551] ' Return ContainerAux 
CompCardPage.bas[552] 'End Sub 
CompCardPage.bas[553] ' 
CompCardPage.bas[554] 'Sub BuildCard(id As String, image As String, title As String) As ABMCard 
CompCardPage.bas[555] ' ' image card 
CompCardPage.bas[556] ' Dim card4 As ABMCard 
CompCardPage.bas[557] ' card4.InitializeAsCard(page, id, title, {302} , ABM.CARD_NOTSPECIFIED, {303} ) 
CompCardPage.bas[558] ' card4.Image = image 
CompCardPage.bas[559] ' card4.AddAction( {304} ) 
CompCardPage.bas[560] ' Return card4 
CompCardPage.bas[561] 'End Sub 
CompCardPage.bas[562] ' 
CompCardPage.bas[563] '' card was added as an array component, so we need just prefix_LinkClicked 
CompCardPage.bas[564] 'Sub card_LinkClicked(Card As String, Action As String) 
CompCardPage.bas[565] ' Log(Card & {305} & Action) ' we get something like card1, card2, card3... in the card param 
CompCardPage.bas[566] 'End Sub 
CompCardPage.bas[567] ' 
CompCardPage.bas[568] '' btntarjeta was added as an array component, so we need just prefix_Clicked 
CompCardPage.bas[569] 'Sub btntarjeta_clicked(Target As String) 
CompCardPage.bas[570] ' Log(Target) ' we get something like btntarjeta1, btntarjeta2, btntarjeta3... in the target param 
CompCardPage.bas[571] 'End Sub 
CompCardPage.bas[572] ' 
CompCardPage.bas[573] 'Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompCardPage.bas[574] ' 
CompCardPage.bas[575] 'End Sub 
CompCardPage.bas[576] ' 
CompCardPage.bas[577] 'Sub Page_ToastClicked(ToastId As String, Action As String) 
CompCardPage.bas[578] ' 
CompCardPage.bas[579] 'End Sub 
CompCardPage.bas[580] ' 
CompCardPage.bas[581] 'Sub Page_ToastDismissed(ToastId As String) 
CompCardPage.bas[582] ' 
CompCardPage.bas[583] 'End Sub 
CompCardPage.bas[584]  
CompCardPage.bas[585]  
CompCardPage.bas[586]  
Analysing: CompChartPage.bas
CompChartPage.bas[0] ﻿Type=Class 
CompChartPage.bas[0] Version=4.7 
CompChartPage.bas[0] ModulesStructureVersion=1 
CompChartPage.bas[0] B4J=true 
CompChartPage.bas[0] @EndOfDesignText@ 
CompChartPage.bas[1] 'Class module 
CompChartPage.bas[2] Sub Class_Globals 
CompChartPage.bas[3]  Private ws As WebSocket 'ignore 
CompChartPage.bas[4]  ' will hold our page information 
CompChartPage.bas[5]  Public page As ABMPage 
CompChartPage.bas[6]  ' page theme 
CompChartPage.bas[7]  Private theme As ABMTheme 
CompChartPage.bas[8]  ' to access the constants 
CompChartPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompChartPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompChartPage.bas[11]  Public Name As String = {1} 
CompChartPage.bas[12]  ' will hold the unique browsers window id 
CompChartPage.bas[13]  Private ABMPageId As String = {2} 
CompChartPage.bas[14]  
CompChartPage.bas[15]  ' your own variables 
CompChartPage.bas[16]  Dim myToastId As Int 
CompChartPage.bas[17]  Dim CurrentValues As List 
CompChartPage.bas[18]  Dim CurrentLabels As List 
CompChartPage.bas[19]  Dim TemperatureTimer As Timer 
CompChartPage.bas[20]  
CompChartPage.bas[21]  Dim ATest As TestClassForAlain 'ignore 
CompChartPage.bas[22] End Sub 
CompChartPage.bas[23]  
CompChartPage.bas[24] 'Initializes the object. You can add parameters to this method if needed. 
CompChartPage.bas[25] Public Sub Initialize 
CompChartPage.bas[26]  ' build the local structure IMPORTANT! 
CompChartPage.bas[27]  CurrentLabels.Initialize 
CompChartPage.bas[28]  CurrentValues.Initialize 
CompChartPage.bas[29]  
CompChartPage.bas[30]  BuildPage 
CompChartPage.bas[31] End Sub 
CompChartPage.bas[32]  
CompChartPage.bas[33] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompChartPage.bas[34]  Log( {3} ) 
CompChartPage.bas[35]  ws = WebSocket1 
CompChartPage.bas[36]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompChartPage.bas[37]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompChartPage.bas[38]  
CompChartPage.bas[39]  If ABMShared.NeedsAuthorization Then 
CompChartPage.bas[40]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompChartPage.bas[41]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompChartPage.bas[42]  Return 
CompChartPage.bas[43]  End If 
CompChartPage.bas[44]  End If 
CompChartPage.bas[45]  
CompChartPage.bas[46]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompChartPage.bas[47]  If page.ComesFromPageCache Then 
CompChartPage.bas[48]  ' refresh the page 
CompChartPage.bas[49]  page.Refresh 
CompChartPage.bas[50]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChartPage.bas[51]  page.FinishedLoading 
CompChartPage.bas[52]  Else 
CompChartPage.bas[53]  ' Prepare the page 
CompChartPage.bas[54]  page.Prepare 
CompChartPage.bas[55]  ' load the dynamic content 
CompChartPage.bas[56]  ConnectPage 
CompChartPage.bas[57]  End If 
CompChartPage.bas[58]  Log(ABMPageId) 
CompChartPage.bas[59]  
CompChartPage.bas[60]  TemperatureTimer.Initialize( {8} , 1000) 
CompChartPage.bas[61]  TemperatureTimer.Enabled = True 
CompChartPage.bas[62] End Sub 
CompChartPage.bas[63]  
CompChartPage.bas[64] Private Sub WebSocket_Disconnected 
CompChartPage.bas[65]  TemperatureTimer.Enabled = False 
CompChartPage.bas[66]  Log( {9} ) 
CompChartPage.bas[67] End Sub 
CompChartPage.bas[68]  
CompChartPage.bas[69] Sub Page_ParseEvent(Params As Map) 
CompChartPage.bas[70]  Dim eventName As String = Params.Get( {10} ) 
CompChartPage.bas[71]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompChartPage.bas[72]  If eventName = {13} Then 
CompChartPage.bas[73]  Log( {14} ) 
CompChartPage.bas[74]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompChartPage.bas[75]  Return 
CompChartPage.bas[76]  End If 
CompChartPage.bas[77]  If SubExists(Me, eventName) Then 
CompChartPage.bas[78]  Params.Remove( {15} ) 
CompChartPage.bas[79]  Params.Remove( {16} ) 
CompChartPage.bas[80]  Select Case Params.Size 
CompChartPage.bas[81]  Case 0 
CompChartPage.bas[82]  CallSub(Me, eventName) 
CompChartPage.bas[83]  Case 1 
CompChartPage.bas[84]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompChartPage.bas[85]  Case 2 
CompChartPage.bas[86]  If Params.get(eventParams(0)) = {17} Then 
CompChartPage.bas[87]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompChartPage.bas[88]  CallSub2(Me, eventName, PassedTables) 
CompChartPage.bas[89]  Else 
CompChartPage.bas[90]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompChartPage.bas[91]  End If 
CompChartPage.bas[92]  Case Else 
CompChartPage.bas[93]  ' cannot be called directly, to many param 
CompChartPage.bas[94]  CallSub2(Me, eventName, Params) 
CompChartPage.bas[95]  End Select 
CompChartPage.bas[96]  End If 
CompChartPage.bas[97] End Sub 
CompChartPage.bas[98]  
CompChartPage.bas[99] public Sub BuildTheme() 
CompChartPage.bas[100]  ' start with the base theme defined in ABMShared 
CompChartPage.bas[101]  theme.Initialize( {18} ) 
CompChartPage.bas[102]  theme.AddABMTheme(ABMShared.MyTheme) 
CompChartPage.bas[103]  
CompChartPage.bas[104]  ' add additional themes specific for this page 
CompChartPage.bas[105]  theme.AddChartTheme( {19} ) 
CompChartPage.bas[106]  theme.Chart( {20} ).Serie(ABM.CHART_SERIEINDEX_C).LinePointStrokeWidthPx=8 
CompChartPage.bas[107]  theme.Chart( {21} ).Serie(ABM.CHART_SERIEINDEX_C).LineStrokeWidthPx=5 
CompChartPage.bas[108]  
CompChartPage.bas[109]  theme.AddChartTheme( {22} ) 
CompChartPage.bas[110]  theme.Chart( {23} ).ZDepth = ABM.ZDEPTH_1 
CompChartPage.bas[111]  theme.Chart( {24} ).BackColor = ABM.COLOR_WHITE 
CompChartPage.bas[112]  
CompChartPage.bas[113]  theme.AddChartTheme( {25} ) 
CompChartPage.bas[114]  theme.Chart( {26} ).ZDepth = ABM.ZDEPTH_1 
CompChartPage.bas[115]  theme.Chart( {27} ).BackColor = ABM.COLOR_WHITE 
CompChartPage.bas[116]  theme.Chart( {28} ).Serie(ABM.CHART_SERIEINDEX_A).BarStrokeWidthPx = 25 
CompChartPage.bas[117]  theme.Chart( {29} ).Serie(ABM.CHART_SERIEINDEX_A).Color = ABM.COLOR_AMBER 
CompChartPage.bas[118]  theme.Chart( {30} ).Serie(ABM.CHART_SERIEINDEX_B).BarStrokeWidthPx = 25 
CompChartPage.bas[119]  theme.Chart( {31} ).Serie(ABM.CHART_SERIEINDEX_B).Color = ABM.COLOR_ORANGE 
CompChartPage.bas[120]  
CompChartPage.bas[121]  theme.AddChartTheme( {32} ) 
CompChartPage.bas[122]  theme.Chart( {33} ).LabelColor = ABM.COLOR_WHITE 
CompChartPage.bas[123]  
CompChartPage.bas[124] End Sub 
CompChartPage.bas[125]  
CompChartPage.bas[126] public Sub BuildPage() 
CompChartPage.bas[127]  ' initialize the theme 
CompChartPage.bas[128]  BuildTheme 
CompChartPage.bas[129]  
CompChartPage.bas[130]  ' initialize this page using our theme 
CompChartPage.bas[131]  page.InitializeWithTheme(Name, {34} & ABMshared.AppName & {35} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompChartPage.bas[132]  page.ShowLoader=True 
CompChartPage.bas[133]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompChartPage.bas[134]  page.PageTitle = {36} 
CompChartPage.bas[135]  page.PageDescription = {37} 
CompChartPage.bas[136]  page.PageHTMLName = {38} 
CompChartPage.bas[137]  page.PageKeywords = {39} 
CompChartPage.bas[138]  page.PageSiteMapPriority = {40} 
CompChartPage.bas[139]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompChartPage.bas[140]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompChartPage.bas[141]  page.ShowConnectedIndicator = True 
CompChartPage.bas[142]  
CompChartPage.bas[143]  ' we are using a plugin for chartist. Make sure the js is in the www/js/ and the css in the www/css/ folder! 
CompChartPage.bas[144]  page.AddExtraJavaScriptFile( {41} ) 
CompChartPage.bas[145]  page.AddExtraJavaScriptFile( {42} ) 
CompChartPage.bas[146]  page.AddExtraJavaScriptFile( {43} ) 
CompChartPage.bas[147]  page.AddExtraJavaScriptFile( {44} ) 
CompChartPage.bas[148]  page.AddExtraCSSFile( {45} ) 
CompChartPage.bas[149]  page.AddExtraJavaScriptFile( {46} ) 
CompChartPage.bas[150]  
CompChartPage.bas[151]  ABMShared.BuildNavigationBar(page, {47} , {48} , {49} , {50} , {51} ) 
CompChartPage.bas[152]  
CompChartPage.bas[153]  ' create the page grid 
CompChartPage.bas[154]  page.AddRows(9,True, {52} ).AddCells12(1, {53} ) 
CompChartPage.bas[155]  page.AddRows(1,True, {54} ).AddCellsOS(2,1,1,1,8,4,4, {55} ) 
CompChartPage.bas[156]  page.AddRows(2,True, {56} ).AddCells12(1, {57} ) 
CompChartPage.bas[157]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompChartPage.bas[158]  
CompChartPage.bas[159]  ABMShared.BuildFooter(page) 
CompChartPage.bas[160] End Sub 
CompChartPage.bas[161]  
CompChartPage.bas[162] Sub ConnectPage() 
CompChartPage.bas[163]  'NEW 
CompChartPage.bas[164]  ABMShared.ConnectNavigationBar(page) 
CompChartPage.bas[165]  
CompChartPage.bas[166]  
CompChartPage.bas[167]  ' using the new cellR() methods (R stands for Relative). First param is the number of rows to move relative to the the previous CellR() call. 
CompChartPage.bas[168]  ' Starts at 1! So here me do not have to move any rows 
CompChartPage.bas[169]  ' add paragraph 
CompChartPage.bas[170]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {58} , {59} ) ) 
CompChartPage.bas[171]  ' add paragraph 
CompChartPage.bas[172]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {60} , {61} ) ) 
CompChartPage.bas[173]  ' add header 
CompChartPage.bas[174]  page.CellR(0,1).AddComponent(ABMShared.BuildHeader(page, {62} , {63} )) 
CompChartPage.bas[175]  ' add paragraph 
CompChartPage.bas[176]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {64} , {65} ) ) 
CompChartPage.bas[177]  
CompChartPage.bas[178]  
CompChartPage.bas[179]  ' create a line chart 
CompChartPage.bas[180]  Dim chart1 As ABMChart 
CompChartPage.bas[181]  chart1.Initialize(page, {66} , ABM.CHART_TYPELINE, ABM.CHART_RATIO_GOLDENSECTION, {67} ) 
CompChartPage.bas[182]  
CompChartPage.bas[183]  ' add the labels 
CompChartPage.bas[184]  chart1.AddLabels(Array As String( {68} , {69} , {70} , {71} , {72} , {73} , {74} )) 
CompChartPage.bas[185]  ' set some options 
CompChartPage.bas[186]  chart1.OptionsLine.FullWidth=True 
CompChartPage.bas[187]  chart1.OptionsLine.ChartPaddingRight=60 ' because we set fullwidth, we have to adjust so the final label also fits 
CompChartPage.bas[188]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).LineSmooth = ABM.CHART_LINESMOOTH_NONE 
CompChartPage.bas[189]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[190]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).ShowArea = True 
CompChartPage.bas[191]  chart1.AddPluginDefinition( {75} ) 
CompChartPage.bas[192]  
CompChartPage.bas[193]  ' add some series 
CompChartPage.bas[194]  Dim SerieA As ABMChartSerie 
CompChartPage.bas[195]  SerieA.InitializeForLine(ABM.CHART_SERIEINDEX_A) 
CompChartPage.bas[196]  SerieA.SetValues(Array As Int(30,50,70,80,ABM.CHART_NULLVALUE,140,170)) 
CompChartPage.bas[197]  chart1.AddSerie(SerieA) 
CompChartPage.bas[198]  
CompChartPage.bas[199]  Dim SerieC As ABMChartSerie 
CompChartPage.bas[200]  SerieC.InitializeForLine(ABM.CHART_SERIEINDEX_C) 
CompChartPage.bas[201]  SerieC.SetValues(Array As Int(100,120,180,150,190,100,70)) 
CompChartPage.bas[202]  chart1.AddSerie(SerieC) 
CompChartPage.bas[203]  
CompChartPage.bas[204]  ' add the chart to the cell 
CompChartPage.bas[205]  ' move one row , first param = 1 
CompChartPage.bas[206]  page.CellR(1,1).AddComponent(chart1) 
CompChartPage.bas[207]  
CompChartPage.bas[208]  ' add paragraph 
CompChartPage.bas[209]  ' move one row , first param = 1 
CompChartPage.bas[210]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {76} , {77} ) ) 
CompChartPage.bas[211]  
CompChartPage.bas[212]  ' create a line chart 
CompChartPage.bas[213]  Dim chart2 As ABMChart 
CompChartPage.bas[214]  chart2.Initialize(page, {78} , ABM.CHART_TYPELINE, ABM.CHART_RATIO_GOLDENSECTION, {79} ) 
CompChartPage.bas[215]  ' set some options 
CompChartPage.bas[216]  chart2.OptionsLine.ChartPaddingBottom = 30 
CompChartPage.bas[217]  chart2.OptionsLine.ChartPaddingTop = 30 
CompChartPage.bas[218]  chart2.OptionsLine.ChartPaddingRight = 130 
CompChartPage.bas[219]  chart2.OptionsLine.AxisYLow=-3 ' must be set if you use 'Chartist.AutoScaleAxis' as type 
CompChartPage.bas[220]  chart2.OptionsLine.AxisYHigh=3 ' must be set if you use 'Chartist.AutoScaleAxis' as type 
CompChartPage.bas[221]  chart2.OptionsLine.AxisYOnlyInteger=True 
CompChartPage.bas[222]  chart2.OptionsLine.AxisYAxisType = {80} ' must be set if you want to use the zoom plugin 
CompChartPage.bas[223]  chart2.OptionsLine.AxisXLow=10 ' must be set if you use 'Chartist.AutoScaleAxis' as type 
CompChartPage.bas[224]  chart2.OptionsLine.AxisXHigh=80 ' must be set if you use 'Chartist.AutoScaleAxis' as type 
CompChartPage.bas[225]  chart2.OptionsLine.AxisXAxisType = {81} ' must be set if you want to use the zoom plugin 
CompChartPage.bas[226]  chart2.OptionsLine.AxisXOnlyInteger=True 
CompChartPage.bas[227]  chart2.OptionsLine.FullWidth=True 
CompChartPage.bas[228]  chart2.OptionsLine.AxisXShowGrid = True 
CompChartPage.bas[229]  chart2.OptionsLine.AxisXShowLabel = True 
CompChartPage.bas[230]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[231]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).ShowArea = True 
CompChartPage.bas[232]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).ShowLine = False 
CompChartPage.bas[233]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).ShowPoint = False 
CompChartPage.bas[234]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_B).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[235]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_B).ShowArea = True 
CompChartPage.bas[236]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_B).ShowLine = False 
CompChartPage.bas[237]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_B).ShowPoint = False 
CompChartPage.bas[238]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[239]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).ShowArea = True 
CompChartPage.bas[240]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).ShowLine = False 
CompChartPage.bas[241]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).ShowPoint = False 
CompChartPage.bas[242]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_D).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[243]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_D).ShowArea = True 
CompChartPage.bas[244]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_D).ShowLine = True 
CompChartPage.bas[245]  chart2.OptionsLine.Serie(ABM.CHART_SERIEINDEX_D).ShowPoint = True ' we want to use the ctPointLabels plugin so we need to show the points 
CompChartPage.bas[246]  chart2.AddPluginDefinition( {0} ) 
CompChartPage.bas[267]  chart2.AddPluginDefinition( {82} ) ' you must set the names here! 
CompChartPage.bas[268]  chart2.AddPluginDefinition( {83} ) 
CompChartPage.bas[269]  chart2.AddPluginDefinition( {84} ) ' cannot be changed, must be like this 
CompChartPage.bas[270]  
CompChartPage.bas[271]  ' add some series 
CompChartPage.bas[272]  Dim Serie2A As ABMChartSerie 
CompChartPage.bas[273]  Serie2A.InitializeForLine(ABM.CHART_SERIEINDEX_A) 
CompChartPage.bas[274]  Serie2A.Name = {85} 
CompChartPage.bas[275]  Serie2A.SetValuesXY(Array As Int(10,20,30,40,50,60,70,80), Array As Int(1,2,3,1,-2,0,1,0)) 
CompChartPage.bas[276]  chart2.AddSerie(Serie2A) 
CompChartPage.bas[277]  
CompChartPage.bas[278]  Dim Serie2B As ABMChartSerie 
CompChartPage.bas[279]  Serie2B.InitializeForLine(ABM.CHART_SERIEINDEX_B) 
CompChartPage.bas[280]  Serie2B.Name = {86} 
CompChartPage.bas[281]  Serie2B.SetValuesXY(Array As Int(10,20,30,40,50,60,70,80), Array As Int(-2,-1,-2,-1,-2.5,-1,-2,-1)) 
CompChartPage.bas[282]  chart2.AddSerie(Serie2B) 
CompChartPage.bas[283]  
CompChartPage.bas[284]  Dim Serie2C As ABMChartSerie 
CompChartPage.bas[285]  Serie2C.InitializeforLine(ABM.CHART_SERIEINDEX_C) 
CompChartPage.bas[286]  Serie2C.Name = {87} 
CompChartPage.bas[287]  Serie2C.SetValuesXY(Array As Int(10,20,30,40,50,60,70,80), Array As Int(0,0,0,1,2,2.5,2.,1)) 
CompChartPage.bas[288]  chart2.AddSerie(Serie2C) 
CompChartPage.bas[289]  
CompChartPage.bas[290]  Dim Serie2D As ABMChartSerie 
CompChartPage.bas[291]  Serie2D.InitializeforLine(ABM.CHART_SERIEINDEX_D) 
CompChartPage.bas[292]  Serie2D.Name = {88} 
CompChartPage.bas[293]  Serie2D.SetValuesXY(Array As Int(10,20,30,40,50,60,70,80), Array As Int(2.5, 2, 1, 0.5, 1, 0.5, -1, -2.5)) 
CompChartPage.bas[294]  chart2.AddSerie(Serie2D) 
CompChartPage.bas[295]  
CompChartPage.bas[296]  ' add the chart to the cell 
CompChartPage.bas[297]  ' move one row , first param = 1 
CompChartPage.bas[298]  page.CellR(1,1).AddComponent(chart2) 
CompChartPage.bas[299]  
CompChartPage.bas[300]  Dim btn1 As ABMButton 
CompChartPage.bas[301]  btn1.InitializeFlat(page, {89} , {90} , {91} , {92} , {93} ) 
CompChartPage.bas[302]  page.CellR(0,1).AddComponent(btn1) 
CompChartPage.bas[303]  
CompChartPage.bas[304]  ' add header 
CompChartPage.bas[305]  ' move one row , first param = 1 
CompChartPage.bas[306]  page.CellR(1,1).AddComponent(ABMShared.BuildHeader(page, {94} , {95} )) 
CompChartPage.bas[307]  ' add paragraph 
CompChartPage.bas[308]  ' stay on the same row, first param = 0 
CompChartPage.bas[309]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {96} , {97} ) ) 
CompChartPage.bas[310]  
CompChartPage.bas[311]  
CompChartPage.bas[312]  ' create a bar chart 
CompChartPage.bas[313]  Dim chart3 As ABMChart 
CompChartPage.bas[314]  chart3.Initialize(page, {98} , ABM.CHART_TYPEBAR, ABM.CHART_RATIO_GOLDENSECTION, {99} ) 
CompChartPage.bas[315]  ' set some options 
CompChartPage.bas[316]  chart3.OptionsBar.AxisYOnlyInteger=True 
CompChartPage.bas[317]  chart3.OptionsBar.ChartPaddingRight=60 
CompChartPage.bas[318]  
CompChartPage.bas[319]  ' add the labels 
CompChartPage.bas[320]  chart3.AddLabels(Array As String( {100} , {101} , {102} , {103} , {104} , {105} , {106} )) 
CompChartPage.bas[321]  
CompChartPage.bas[322]  ' add some series 
CompChartPage.bas[323]  Dim Serie3A As ABMChartSerie 
CompChartPage.bas[324]  Serie3A.InitializeForBar 
CompChartPage.bas[325]  Serie3A.SetValues(Array As Int(30,50,70,80,100,140,170)) 
CompChartPage.bas[326]  chart3.AddSerie(Serie3A) 
CompChartPage.bas[327]  
CompChartPage.bas[328]  Dim Serie3B As ABMChartSerie 
CompChartPage.bas[329]  Serie3B.InitializeForBar 
CompChartPage.bas[330]  Serie3B.SetValues(Array As Int(100,120,180,150,190,100,70)) 
CompChartPage.bas[331]  chart3.AddSerie(Serie3B) 
CompChartPage.bas[332]  
CompChartPage.bas[333]  ' add the chart to the cell 
CompChartPage.bas[334]  ' move one row , first param = 1 
CompChartPage.bas[335]  page.CellR(1,1).AddComponent(chart3) 
CompChartPage.bas[336]  
CompChartPage.bas[337]  ' add paragraph 
CompChartPage.bas[338]  ' move one row , first param = 1 
CompChartPage.bas[339]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {107} , {108} ) ) 
CompChartPage.bas[340]  
CompChartPage.bas[341]  ' create a bar chart 
CompChartPage.bas[342]  Dim chart4 As ABMChart 
CompChartPage.bas[343]  chart4.Initialize(page, {109} , ABM.CHART_TYPEBAR, ABM.CHART_RATIO_GOLDENSECTION, {110} ) 
CompChartPage.bas[344]  ' set some options 
CompChartPage.bas[345]  chart4.OptionsBar.AxisXOnlyInteger=True 
CompChartPage.bas[346]  chart4.OptionsBar.StackBars = True 
CompChartPage.bas[347]  chart4.OptionsBar.HorizontalBars = True 
CompChartPage.bas[348]  chart4.OptionsBar.ChartPaddingRight=60 
CompChartPage.bas[349]  
CompChartPage.bas[350]  ' add the labels 
CompChartPage.bas[351]  chart4.AddLabels(Array As String( {111} , {112} , {113} , {114} , {115} , {116} , {117} )) 
CompChartPage.bas[352]  
CompChartPage.bas[353]  ' add some series 
CompChartPage.bas[354]  Dim Serie4A As ABMChartSerie 
CompChartPage.bas[355]  Serie4A.InitializeForBar 
CompChartPage.bas[356]  Serie4A.SetValues(Array As Int(30,50,70,80,100,140,170)) 
CompChartPage.bas[357]  chart4.AddSerie(Serie4A) 
CompChartPage.bas[358]  
CompChartPage.bas[359]  Dim Serie4B As ABMChartSerie 
CompChartPage.bas[360]  Serie4B.InitializeForBar 
CompChartPage.bas[361]  Serie4B.SetValues(Array As Int(100,120,180,150,190,100,70)) 
CompChartPage.bas[362]  chart4.AddSerie(Serie4B) 
CompChartPage.bas[363]  
CompChartPage.bas[364]  ' add the chart to the cell 
CompChartPage.bas[365]  ' move one row , first param = 1 
CompChartPage.bas[366]  page.CellR(1,1).AddComponent(chart4) 
CompChartPage.bas[367]  
CompChartPage.bas[368]  ' add header 
CompChartPage.bas[369]  ' move one row , first param = 1 
CompChartPage.bas[370]  page.CellR(1,1).AddComponent(ABMShared.BuildHeader(page, {118} , {119} )) 
CompChartPage.bas[371]  ' add paragraph 
CompChartPage.bas[372]  ' stay in the same row, first param = 0 
CompChartPage.bas[373]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {120} , {121} ) ) 
CompChartPage.bas[374]  
CompChartPage.bas[375]  ' create a pie chart 
CompChartPage.bas[376]  Dim chart5 As ABMChart 
CompChartPage.bas[377]  chart5.Initialize(page, {122} , ABM.CHART_TYPEPIE, ABM.CHART_RATIO_SQUARE, {123} ) 
CompChartPage.bas[378]  ' Something special, Label interpolation. the value will transformed into a percentage format (This is Javascript!) 
CompChartPage.bas[379]  Dim SumValues As Int = 30+50+70+80+100+140+170 
CompChartPage.bas[380]  chart5.OptionsPie.LabelInterpolation = {124} & SumValues & {125} 
CompChartPage.bas[381]  
CompChartPage.bas[382]  ' we do not add labels, as they will be generated them through the LabelInterpolation function we just declared! 
CompChartPage.bas[383]  
CompChartPage.bas[384]  ' add ONE serie 
CompChartPage.bas[385]  Dim Serie5A As ABMChartSerie 
CompChartPage.bas[386]  Serie5A.InitializeForPie 
CompChartPage.bas[387]  Serie5A.SetValues(Array As Int(30,50,70,80,100,140,170)) 
CompChartPage.bas[388]  chart5.AddSerie(Serie5A) 
CompChartPage.bas[389]  
CompChartPage.bas[390]  ' add the chart to the cell 
CompChartPage.bas[391]  ' move one row , first param = 1 
CompChartPage.bas[392]  page.CellR(1,1).AddComponent(chart5) 
CompChartPage.bas[393]  
CompChartPage.bas[394]  ' create a donut/gauge chart 
CompChartPage.bas[395]  Dim chart6 As ABMChart 
CompChartPage.bas[396]  chart6.Initialize(page, {126} , ABM.CHART_TYPEPIE, ABM.CHART_RATIO_SQUARE, {127} ) 
CompChartPage.bas[397]  chart6.OptionsPie.IsDonut = True 
CompChartPage.bas[398]  chart6.OptionsPie.DonutWidth = 80 
CompChartPage.bas[399]  chart6.OptionsPie.StartAngle = 270 
CompChartPage.bas[400]  chart6.OptionsPie.Total = 200 
CompChartPage.bas[401]  ' Something special, Label interpolation. the value will transformed into a percentage format (This is Javascript!) 
CompChartPage.bas[402]  Dim SumValues As Int = 20+10+30+40 
CompChartPage.bas[403]  chart6.OptionsPie.LabelInterpolation = {128} & SumValues & {129} 
CompChartPage.bas[404]  
CompChartPage.bas[405]  ' we do not add labels, as they will be generated them through the LabelInterpolation function we just declared! 
CompChartPage.bas[406]  
CompChartPage.bas[407]  ' add ONE serie 
CompChartPage.bas[408]  Dim Serie6A As ABMChartSerie 
CompChartPage.bas[409]  Serie6A.InitializeForPie 
CompChartPage.bas[410]  Serie6A.SetValues(Array As Int(20,10,30,40)) 
CompChartPage.bas[411]  chart6.AddSerie(Serie6A) 
CompChartPage.bas[412]  
CompChartPage.bas[413]  ' add the chart to the cell 
CompChartPage.bas[414]  ' stay in the same row , first param = 0 
CompChartPage.bas[415]  page.CellR(0,2).AddComponent(chart6) 
CompChartPage.bas[416]  
CompChartPage.bas[417]  ' add header 
CompChartPage.bas[418]  ' move one row , first param = 1 
CompChartPage.bas[419]  page.CellR(1,1).AddComponent(ABMShared.BuildHeader(page, {130} , {131} )) 
CompChartPage.bas[420]  ' add paragraph 
CompChartPage.bas[421]  ' stay in the same row, first param = 0 
CompChartPage.bas[422]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {132} , {133} ) ) 
CompChartPage.bas[423]  
CompChartPage.bas[424]  ' create a line chart 
CompChartPage.bas[425]  Dim chart7 As ABMChart 
CompChartPage.bas[426]  chart7.Initialize(page, {134} , ABM.CHART_TYPELINE, ABM.CHART_RATIO_GOLDENSECTION, {135} ) 
CompChartPage.bas[427]  ' set some options 
CompChartPage.bas[428]  chart7.OptionsLine.FixedHeightPx = 300 
CompChartPage.bas[429]  chart7.OptionsLine.AxisYLow=-10 
CompChartPage.bas[430]  chart7.OptionsLine.AxisYHigh=10 
CompChartPage.bas[431]  chart7.OptionsLine.AxisYOnlyInteger=True 
CompChartPage.bas[432]  chart7.OptionsLine.FullWidth=True 
CompChartPage.bas[433]  chart7.OptionsLine.ChartPaddingRight=60 ' because we set fullwidth, we have to adjust so the final label also fits 
CompChartPage.bas[434]  chart7.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompChartPage.bas[435]  chart7.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).ShowPoint=False 
CompChartPage.bas[436]  ' add the labels 
CompChartPage.bas[437]  CurrentLabels.addAll(Array As String( {136} , {137} , {138} , {139} , {140} , {141} , {142} , {143} , {144} , {145} )) 
CompChartPage.bas[438]  chart7.AddLabels(CurrentLabels) 
CompChartPage.bas[439]  
CompChartPage.bas[440]  ' add some series 
CompChartPage.bas[441]  CurrentValues.AddAll(Array As Int(0,0,0,0,0,0,0,0,0,0)) 
CompChartPage.bas[442]  Dim Serie7A As ABMChartSerie 
CompChartPage.bas[443]  Serie7A.InitializeForBar 
CompChartPage.bas[444]  Serie7A.SetValues(CurrentValues) 
CompChartPage.bas[445]  chart7.AddSerie(Serie7A) 
CompChartPage.bas[446]  
CompChartPage.bas[447]  ' add the chart to the cell 
CompChartPage.bas[448]  ' move one row , first param = 1 
CompChartPage.bas[449]  page.CellR(1,1).AddComponent(chart7) 
CompChartPage.bas[450]  
CompChartPage.bas[451]  ' also add the components to the footer 
CompChartPage.bas[452]  ABMShared.ConnectFooter(page) 
CompChartPage.bas[453]  
CompChartPage.bas[454]  page.Refresh ' IMPORTANT 
CompChartPage.bas[455]  
CompChartPage.bas[456]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChartPage.bas[457]  page.FinishedLoading 'IMPORTANT 
CompChartPage.bas[458]  
CompChartPage.bas[459]  page.RestoreNavigationBarPosition 
CompChartPage.bas[460] End Sub 
CompChartPage.bas[461]  
CompChartPage.bas[462] Sub btn1_Clicked(Target As String) 
CompChartPage.bas[463]  Dim chart2 As ABMChart = page.Component( {146} ) 
CompChartPage.bas[464]  chart2.ResetZoom 
CompChartPage.bas[465] End Sub 
CompChartPage.bas[466]  
CompChartPage.bas[467] ' clicked on the navigation bar 
CompChartPage.bas[468] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompChartPage.bas[469]  page.SaveNavigationBarPosition 
CompChartPage.bas[470]  If Action = {147} Then Return 
CompChartPage.bas[471]  If Action = {148} Then 
CompChartPage.bas[472]  myToastId = myToastId + 1 
CompChartPage.bas[473]  page.ShowToast( {149} & myToastId, {150} , {151} , 5000) 
CompChartPage.bas[474]  Return 
CompChartPage.bas[475]  End If 
CompChartPage.bas[476]  If Action = {152} Then 
CompChartPage.bas[477]  ABMShared.LogOff(page) 
CompChartPage.bas[478]  Return 
CompChartPage.bas[479]  End If 
CompChartPage.bas[480]  ABMShared.NavigateToPage(ws,ABMPageId, Value) 
CompChartPage.bas[481] End Sub 
CompChartPage.bas[482]  
CompChartPage.bas[483] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompChartPage.bas[484]  page.ws.Session.SetAttribute( {153} , {154} ) 
CompChartPage.bas[485]  page.ws.Session.SetAttribute( {155} , {156} ) 
CompChartPage.bas[486]  page.ws.Session.SetAttribute( {157} , {158} ) 
CompChartPage.bas[487]  ABMShared.NavigateToPage(ws,ABMPageId, {159} ) 
CompChartPage.bas[488] End Sub 
CompChartPage.bas[489]  
CompChartPage.bas[490] Sub TemperatureTimer_Tick 
CompChartPage.bas[491]  Dim chart7 As ABMChart = page.Component( {160} ) 
CompChartPage.bas[492]  If chart7 <> Null Then 
CompChartPage.bas[493]  CurrentLabels.RemoveAt(0) 
CompChartPage.bas[494]  CurrentValues.RemoveAt(0) 
CompChartPage.bas[495]  Dim newValue As Int = Rnd(-10,11) 
CompChartPage.bas[496]  CurrentValues.Add(newValue) 
CompChartPage.bas[497]  CurrentLabels.Add( {161} & newValue) 
CompChartPage.bas[498]  chart7.SetLabels(CurrentLabels) 
CompChartPage.bas[499]  chart7.GetSerie(ABM.CHART_SERIEINDEX_A).SetValues(CurrentValues) 
CompChartPage.bas[500]  chart7.Refresh 
CompChartPage.bas[501]  End If 
CompChartPage.bas[502] End Sub 
Analysing: CompChatPage.bas
CompChatPage.bas[0] ﻿Type=Class 
CompChatPage.bas[0] Version=4.7 
CompChatPage.bas[0] ModulesStructureVersion=1 
CompChatPage.bas[0] B4J=true 
CompChatPage.bas[0] @EndOfDesignText@ 
CompChatPage.bas[1] 'Class module 
CompChatPage.bas[2] Sub Class_Globals 
CompChatPage.bas[3]  Private ws As WebSocket 'ignore 
CompChatPage.bas[4]  ' will hold our page information 
CompChatPage.bas[5]  Public page As ABMPage 
CompChatPage.bas[6]  ' page theme 
CompChatPage.bas[7]  Private theme As ABMTheme 
CompChatPage.bas[8]  ' to access the constants 
CompChatPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompChatPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompChatPage.bas[11]  Public Name As String = {1} 
CompChatPage.bas[12]  Private ABMPageId As String = {2} 
CompChatPage.bas[13]  
CompChatPage.bas[14]  ' your own variables 
CompChatPage.bas[15]  Dim myToastId As Int 
CompChatPage.bas[16]  
CompChatPage.bas[17]  Dim Origin As String = {3} 
CompChatPage.bas[18] End Sub 
CompChatPage.bas[19]  
CompChatPage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompChatPage.bas[21] Public Sub Initialize 
CompChatPage.bas[22]  ' build the local structure IMPORTANT! 
CompChatPage.bas[23]  BuildPage 
CompChatPage.bas[24] End Sub 
CompChatPage.bas[25]  
CompChatPage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompChatPage.bas[27]  Log( {4} ) 
CompChatPage.bas[28]  ws = WebSocket1 
CompChatPage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompChatPage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompChatPage.bas[31]  
CompChatPage.bas[32]  If ABMShared.NeedsAuthorization Then 
CompChatPage.bas[33]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompChatPage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompChatPage.bas[35]  Return 
CompChatPage.bas[36]  End If 
CompChatPage.bas[37]  End If 
CompChatPage.bas[38]  
CompChatPage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompChatPage.bas[40]  If page.ComesFromPageCache Then 
CompChatPage.bas[41]  ' refresh the page 
CompChatPage.bas[42]  page.Refresh 
CompChatPage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChatPage.bas[44]  page.FinishedLoading 
CompChatPage.bas[45]  Else 
CompChatPage.bas[46]  ' Prepare the page 
CompChatPage.bas[47]  page.Prepare 
CompChatPage.bas[48]  ' load the dynamic content 
CompChatPage.bas[49]  ConnectPage 
CompChatPage.bas[50]  End If 
CompChatPage.bas[51]  Log(ABMPageId) 
CompChatPage.bas[52] End Sub 
CompChatPage.bas[53]  
CompChatPage.bas[54] Private Sub WebSocket_Disconnected 
CompChatPage.bas[55]  Log( {9} ) 
CompChatPage.bas[56] End Sub 
CompChatPage.bas[57]  
CompChatPage.bas[58] Sub Page_ParseEvent(Params As Map) 
CompChatPage.bas[59]  Dim eventName As String = Params.Get( {10} ) 
CompChatPage.bas[60]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompChatPage.bas[61]  If eventName = {13} Then 
CompChatPage.bas[62]  Log( {14} ) 
CompChatPage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompChatPage.bas[64]  Return 
CompChatPage.bas[65]  End If 
CompChatPage.bas[66]  If SubExists(Me, eventName) Then 
CompChatPage.bas[67]  Params.Remove( {15} ) 
CompChatPage.bas[68]  Params.Remove( {16} ) 
CompChatPage.bas[69]  Select Case Params.Size 
CompChatPage.bas[70]  Case 0 
CompChatPage.bas[71]  CallSub(Me, eventName) 
CompChatPage.bas[72]  Case 1 
CompChatPage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompChatPage.bas[74]  Case 2 
CompChatPage.bas[75]  If Params.get(eventParams(0)) = {17} Then 
CompChatPage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompChatPage.bas[77]  CallSub2(Me, eventName, PassedTables) 
CompChatPage.bas[78]  Else 
CompChatPage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompChatPage.bas[80]  End If 
CompChatPage.bas[81]  Case Else 
CompChatPage.bas[82]  ' cannot be called directly, to many param 
CompChatPage.bas[83]  CallSub2(Me, eventName, Params) 
CompChatPage.bas[84]  End Select 
CompChatPage.bas[85]  End If 
CompChatPage.bas[86] End Sub 
CompChatPage.bas[87]  
CompChatPage.bas[88] public Sub BuildTheme() 
CompChatPage.bas[89]  ' start with the base theme defined in ABMShared 
CompChatPage.bas[90]  theme.Initialize( {18} ) 
CompChatPage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
CompChatPage.bas[92]  
CompChatPage.bas[93]  ' add additional themes specific for this page 
CompChatPage.bas[94] End Sub 
CompChatPage.bas[95]  
CompChatPage.bas[96] public Sub BuildPage() 
CompChatPage.bas[97]  ' initialize the theme 
CompChatPage.bas[98]  BuildTheme 
CompChatPage.bas[99]  
CompChatPage.bas[100]  ' initialize this page using our theme 
CompChatPage.bas[101]  page.InitializeWithTheme(Name, {19} & ABMShared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompChatPage.bas[102]  page.ShowLoader=True 
CompChatPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompChatPage.bas[104]  page.PageTitle = {21} 
CompChatPage.bas[105]  page.PageDescription = {22} 
CompChatPage.bas[106]  page.PageHTMLName = {23} 
CompChatPage.bas[107]  page.PageKeywords = {24} 
CompChatPage.bas[108]  page.PageSiteMapPriority = {25} 
CompChatPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompChatPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompChatPage.bas[111]  
CompChatPage.bas[112]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompChatPage.bas[113]  
CompChatPage.bas[114]  ' create the page grid 
CompChatPage.bas[115]  page.AddRows(6,True, {31} ).AddCells12(1, {32} ) 
CompChatPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompChatPage.bas[117]  
CompChatPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompChatPage.bas[119]  'page.NeedsCodeLabel = True 
CompChatPage.bas[120]  
CompChatPage.bas[121]  ABMShared.BuildFooter(page) 
CompChatPage.bas[122] End Sub 
CompChatPage.bas[123]  
CompChatPage.bas[124] Sub ConnectPage() 
CompChatPage.bas[125]  'NEW 
CompChatPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompChatPage.bas[127]  
CompChatPage.bas[128]  ' add paragraph 
CompChatPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} ) ) 
CompChatPage.bas[130]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} )) 
CompChatPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} )) 
CompChatPage.bas[132]  
CompChatPage.bas[133]  ' add codeblock 
CompChatPage.bas[134]  Dim code As String 
CompChatPage.bas[135]  code = {0} 
CompChatPage.bas[138]  
CompChatPage.bas[139]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {39} , code)) 
CompChatPage.bas[140]  
CompChatPage.bas[141]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompChatPage.bas[142]  
CompChatPage.bas[143]  Dim video1 As ABMVideo 
CompChatPage.bas[144]  video1.InitializeYoutube(page, {42} , {43} , Origin, True, False, True,100) 
CompChatPage.bas[145]  page.Cell(4,1).AddComponent(video1) 
CompChatPage.bas[146]  
CompChatPage.bas[147]  ' also add the components to the footer 
CompChatPage.bas[148]  ABMShared.ConnectFooter(page) 
CompChatPage.bas[149]  
CompChatPage.bas[150]  page.Refresh ' IMPORTANT 
CompChatPage.bas[151]  
CompChatPage.bas[152]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChatPage.bas[153]  page.FinishedLoading 'IMPORTANT 
CompChatPage.bas[154]  
CompChatPage.bas[155]  page.RestoreNavigationBarPosition 
CompChatPage.bas[156] End Sub 
CompChatPage.bas[157]  
CompChatPage.bas[158] ' clicked on the navigation bar 
CompChatPage.bas[159] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompChatPage.bas[160]  page.SaveNavigationBarPosition 
CompChatPage.bas[161]  If Action = {44} Then Return 
CompChatPage.bas[162]  If Action = {45} Then 
CompChatPage.bas[163]  myToastId = myToastId + 1 
CompChatPage.bas[164]  page.ShowToast( {46} & myToastId, {47} , {48} , 5000) 
CompChatPage.bas[165]  Return 
CompChatPage.bas[166]  End If 
CompChatPage.bas[167]  If Action = {49} Then 
CompChatPage.bas[168]  ABMShared.LogOff(page) 
CompChatPage.bas[169]  Return 
CompChatPage.bas[170]  End If 
CompChatPage.bas[171]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompChatPage.bas[172] End Sub 
CompChatPage.bas[173]  
CompChatPage.bas[174] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompChatPage.bas[175]  page.ws.Session.SetAttribute( {50} , {51} ) 
CompChatPage.bas[176]  page.ws.Session.SetAttribute( {52} , {53} ) 
CompChatPage.bas[177]  page.ws.Session.SetAttribute( {54} , {55} ) 
CompChatPage.bas[178]  ABMShared.NavigateToPage(ws, ABMPageId, {56} ) 
CompChatPage.bas[179] End Sub 
Analysing: CompCheckboxPage.bas
CompCheckboxPage.bas[0] ﻿Type=Class 
CompCheckboxPage.bas[0] Version=4.7 
CompCheckboxPage.bas[0] ModulesStructureVersion=1 
CompCheckboxPage.bas[0] B4J=true 
CompCheckboxPage.bas[0] @EndOfDesignText@ 
CompCheckboxPage.bas[1] 'Class module 
CompCheckboxPage.bas[2] Sub Class_Globals 
CompCheckboxPage.bas[3]  Private ws As WebSocket 'ignore 
CompCheckboxPage.bas[4]  ' will hold our page information 
CompCheckboxPage.bas[5]  Public page As ABMPage 
CompCheckboxPage.bas[6]  ' page theme 
CompCheckboxPage.bas[7]  Private theme As ABMTheme 
CompCheckboxPage.bas[8]  ' to access the constants 
CompCheckboxPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCheckboxPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCheckboxPage.bas[11]  Public Name As String = {0} 
CompCheckboxPage.bas[12]  ' will hold the unique browsers window id 
CompCheckboxPage.bas[13]  Private ABMPageId As String = {1} 
CompCheckboxPage.bas[14]  
CompCheckboxPage.bas[15]  ' your own variables 
CompCheckboxPage.bas[16]  Dim myToastId As Int 
CompCheckboxPage.bas[17] End Sub 
CompCheckboxPage.bas[18]  
CompCheckboxPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompCheckboxPage.bas[20] Public Sub Initialize 
CompCheckboxPage.bas[21]  ' build the local structure IMPORTANT! 
CompCheckboxPage.bas[22]  BuildPage 
CompCheckboxPage.bas[23] End Sub 
CompCheckboxPage.bas[24]  
CompCheckboxPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCheckboxPage.bas[26]  Log( {2} ) 
CompCheckboxPage.bas[27]  ws = WebSocket1 
CompCheckboxPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCheckboxPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCheckboxPage.bas[30]  
CompCheckboxPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompCheckboxPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompCheckboxPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompCheckboxPage.bas[34]  Return 
CompCheckboxPage.bas[35]  End If 
CompCheckboxPage.bas[36]  End If 
CompCheckboxPage.bas[37]  
CompCheckboxPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCheckboxPage.bas[39]  If page.ComesFromPageCache Then 
CompCheckboxPage.bas[40]  ' refresh the page 
CompCheckboxPage.bas[41]  page.Refresh 
CompCheckboxPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCheckboxPage.bas[43]  page.FinishedLoading 
CompCheckboxPage.bas[44]  Else 
CompCheckboxPage.bas[45]  ' Prepare the page 
CompCheckboxPage.bas[46]  page.Prepare 
CompCheckboxPage.bas[47]  ' load the dynamic content 
CompCheckboxPage.bas[48]  ConnectPage 
CompCheckboxPage.bas[49]  End If 
CompCheckboxPage.bas[50]  Log(ABMPageId) 
CompCheckboxPage.bas[51] End Sub 
CompCheckboxPage.bas[52]  
CompCheckboxPage.bas[53] Private Sub WebSocket_Disconnected 
CompCheckboxPage.bas[54]  Log( {7} ) 
CompCheckboxPage.bas[55] End Sub 
CompCheckboxPage.bas[56]  
CompCheckboxPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompCheckboxPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompCheckboxPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompCheckboxPage.bas[60]  If eventName = {11} Then 
CompCheckboxPage.bas[61]  Log( {12} ) 
CompCheckboxPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCheckboxPage.bas[63]  Return 
CompCheckboxPage.bas[64]  End If 
CompCheckboxPage.bas[65]  If SubExists(Me, eventName) Then 
CompCheckboxPage.bas[66]  Params.Remove( {13} ) 
CompCheckboxPage.bas[67]  Params.Remove( {14} ) 
CompCheckboxPage.bas[68]  Select Case Params.Size 
CompCheckboxPage.bas[69]  Case 0 
CompCheckboxPage.bas[70]  CallSub(Me, eventName) 
CompCheckboxPage.bas[71]  Case 1 
CompCheckboxPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCheckboxPage.bas[73]  Case 2 
CompCheckboxPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompCheckboxPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCheckboxPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompCheckboxPage.bas[77]  Else 
CompCheckboxPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCheckboxPage.bas[79]  End If 
CompCheckboxPage.bas[80]  Case Else 
CompCheckboxPage.bas[81]  ' cannot be called directly, to many param 
CompCheckboxPage.bas[82]  CallSub2(Me, eventName, Params) 
CompCheckboxPage.bas[83]  End Select 
CompCheckboxPage.bas[84]  End If 
CompCheckboxPage.bas[85] End Sub 
CompCheckboxPage.bas[86]  
CompCheckboxPage.bas[87] public Sub BuildTheme() 
CompCheckboxPage.bas[88]  ' start with the base theme defined in ABMShared 
CompCheckboxPage.bas[89]  theme.Initialize( {16} ) 
CompCheckboxPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCheckboxPage.bas[91]  
CompCheckboxPage.bas[92]  ' add additional themes specific for this page 
CompCheckboxPage.bas[93]  
CompCheckboxPage.bas[94] End Sub 
CompCheckboxPage.bas[95]  
CompCheckboxPage.bas[96] public Sub BuildPage() 
CompCheckboxPage.bas[97]  ' initialize the theme 
CompCheckboxPage.bas[98]  BuildTheme 
CompCheckboxPage.bas[99]  
CompCheckboxPage.bas[100]  ' initialize this page using our theme 
CompCheckboxPage.bas[101]  page.InitializeWithTheme(Name, {17} & ABMshared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCheckboxPage.bas[102]  page.ShowLoader=True 
CompCheckboxPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCheckboxPage.bas[104]  page.PageTitle = {19} 
CompCheckboxPage.bas[105]  page.PageDescription = {20} 
CompCheckboxPage.bas[106]  page.PageHTMLName = {21} 
CompCheckboxPage.bas[107]  page.PageKeywords = {22} 
CompCheckboxPage.bas[108]  page.PageSiteMapPriority = {23} 
CompCheckboxPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCheckboxPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCheckboxPage.bas[111]  
CompCheckboxPage.bas[112]  ABMShared.BuildNavigationBar(page, {24} , {25} , {26} , {27} , {28} ) 
CompCheckboxPage.bas[113]  
CompCheckboxPage.bas[114]  ' create the page grid 
CompCheckboxPage.bas[115]  page.AddRows(7,True, {29} ).AddCells12(1, {30} ) 
CompCheckboxPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCheckboxPage.bas[117]  
CompCheckboxPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompCheckboxPage.bas[119]  'page.NeedsCodeLabel = True 
CompCheckboxPage.bas[120]  
CompCheckboxPage.bas[121]  ABMShared.BuildFooter(page) 
CompCheckboxPage.bas[122] End Sub 
CompCheckboxPage.bas[123]  
CompCheckboxPage.bas[124] Sub ConnectPage() 
CompCheckboxPage.bas[125]  'NEW 
CompCheckboxPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompCheckboxPage.bas[127]  
CompCheckboxPage.bas[128]  ' add paragraph 
CompCheckboxPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {31} , {32} ) ) 
CompCheckboxPage.bas[130]  
CompCheckboxPage.bas[131]  ' create checkboxes 
CompCheckboxPage.bas[132]  Dim chk1 As ABMCheckbox 
CompCheckboxPage.bas[133]  chk1.Initialize(page, {33} , {34} , False, {35} ) 
CompCheckboxPage.bas[134]  page.Cell(2,1).AddComponent(chk1) 
CompCheckboxPage.bas[135]  
CompCheckboxPage.bas[136]  Dim chk2 As ABMCheckbox 
CompCheckboxPage.bas[137]  chk2.Initialize(page, {36} , {37} , True, {38} ) 
CompCheckboxPage.bas[138]  page.Cell(3,1).AddComponent(chk2) 
CompCheckboxPage.bas[139]  
CompCheckboxPage.bas[140]  Dim chk3 As ABMCheckbox 
CompCheckboxPage.bas[141]  chk3.Initialize(page, {39} , {40} , True, {41} ) 
CompCheckboxPage.bas[142]  chk3.Enabled = False 
CompCheckboxPage.bas[143]  page.Cell(4,1).AddComponent(chk3) 
CompCheckboxPage.bas[144]  
CompCheckboxPage.bas[145]  Dim chk4 As ABMCheckbox 
CompCheckboxPage.bas[146]  chk4.Initialize(page, {42} , {43} , True, {44} ) 
CompCheckboxPage.bas[147]  chk4.IsFilled = True 
CompCheckboxPage.bas[148]  page.Cell(5,1).AddComponent(chk4) 
CompCheckboxPage.bas[149]  
CompCheckboxPage.bas[150]  ' add codeblock 
CompCheckboxPage.bas[151]  Dim code As StringBuilder 
CompCheckboxPage.bas[152]  code.Initialize 
CompCheckboxPage.bas[153]  code.Append( {45} ).Append(CRLF) 
CompCheckboxPage.bas[154]  code.Append( {46} ).Append(CRLF) 
CompCheckboxPage.bas[155]  code.Append( {139} ).Append(CRLF) 
CompCheckboxPage.bas[156]  code.Append( {54} ).Append(CRLF) 
CompCheckboxPage.bas[157]  code.Append( {55} ).Append(CRLF) 
CompCheckboxPage.bas[158]  code.Append( {56} ).Append(CRLF) 
CompCheckboxPage.bas[159]  code.Append( {145} ).Append(CRLF) 
CompCheckboxPage.bas[160]  code.Append( {64} ).Append(CRLF) 
CompCheckboxPage.bas[161]  code.Append( {65} ).Append(CRLF) 
CompCheckboxPage.bas[162]  code.Append( {66} ).Append(CRLF) 
CompCheckboxPage.bas[163]  code.Append( {151} ).Append(CRLF) 
CompCheckboxPage.bas[164]  code.Append( {74} ).Append(CRLF) 
CompCheckboxPage.bas[165]  code.Append( {75} ).Append(CRLF) 
CompCheckboxPage.bas[166]  code.Append( {76} ).Append(CRLF) 
CompCheckboxPage.bas[167]  code.Append( {77} ).Append(CRLF) 
CompCheckboxPage.bas[168]  code.Append( {157} ).Append(CRLF) 
CompCheckboxPage.bas[169]  code.Append( {85} ).Append(CRLF) 
CompCheckboxPage.bas[170]  code.Append( {86} ).Append(CRLF) 
CompCheckboxPage.bas[171]  
CompCheckboxPage.bas[172]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {87} , code)) 
CompCheckboxPage.bas[173]  
CompCheckboxPage.bas[174]  ' add codeblock 
CompCheckboxPage.bas[175]  Dim code2 As StringBuilder 
CompCheckboxPage.bas[176]  code2.Initialize 
CompCheckboxPage.bas[177]  code2.Append( {88} ).Append(CRLF) 
CompCheckboxPage.bas[178]  code2.Append( {89} ).Append(CRLF) 
CompCheckboxPage.bas[179]  code2.Append( {159} ).Append(CRLF) 
CompCheckboxPage.bas[180]  code2.Append( {93} ).Append(CRLF) 
CompCheckboxPage.bas[181]  code2.Append( {161} ).Append(CRLF) 
CompCheckboxPage.bas[182]  code2.Append( {97} ).Append(CRLF) 
CompCheckboxPage.bas[183]  code2.Append( {163} ).Append(CRLF) 
CompCheckboxPage.bas[184]  code2.Append( {101} ).Append(CRLF) 
CompCheckboxPage.bas[185]  code2.Append( {102} ).Append(CRLF) 
CompCheckboxPage.bas[186]  code2.Append( {103} ).Append(CRLF) 
CompCheckboxPage.bas[187]  code2.Append( {104} ).Append(CRLF) 
CompCheckboxPage.bas[188]  code2.Append( {105} ).Append(CRLF) 
CompCheckboxPage.bas[189]  code2.Append( {169} ).Append(CRLF) 
CompCheckboxPage.bas[190]  code2.Append( {113} ).Append(CRLF) 
CompCheckboxPage.bas[191]  
CompCheckboxPage.bas[192]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlock(page, {114} , code2)) 
CompCheckboxPage.bas[193]  
CompCheckboxPage.bas[194]  ' also add the components to the footer 
CompCheckboxPage.bas[195]  ABMShared.ConnectFooter(page) 
CompCheckboxPage.bas[196]  
CompCheckboxPage.bas[197]  page.Refresh ' IMPORTANT 
CompCheckboxPage.bas[198]  
CompCheckboxPage.bas[199]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCheckboxPage.bas[200]  page.FinishedLoading 'IMPORTANT 
CompCheckboxPage.bas[201]  
CompCheckboxPage.bas[202]  page.RestoreNavigationBarPosition 
CompCheckboxPage.bas[203] End Sub 
CompCheckboxPage.bas[204]  
CompCheckboxPage.bas[205] ' clicked on the navigation bar 
CompCheckboxPage.bas[206] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCheckboxPage.bas[207]  page.SaveNavigationBarPosition 
CompCheckboxPage.bas[208]  If Action = {115} Then Return 
CompCheckboxPage.bas[209]  If Action = {116} Then 
CompCheckboxPage.bas[210]  myToastId = myToastId + 1 
CompCheckboxPage.bas[211]  page.ShowToast( {117} & myToastId, {118} , {119} , 5000) 
CompCheckboxPage.bas[212]  Return 
CompCheckboxPage.bas[213]  End If 
CompCheckboxPage.bas[214]  If Action = {120} Then 
CompCheckboxPage.bas[215]  ABMShared.LogOff(page) 
CompCheckboxPage.bas[216]  Return 
CompCheckboxPage.bas[217]  End If 
CompCheckboxPage.bas[218]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCheckboxPage.bas[219] End Sub 
CompCheckboxPage.bas[220]  
CompCheckboxPage.bas[221] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCheckboxPage.bas[222]  page.ws.Session.SetAttribute( {121} , {122} ) 
CompCheckboxPage.bas[223]  page.ws.Session.SetAttribute( {123} , {124} ) 
CompCheckboxPage.bas[224]  page.ws.Session.SetAttribute( {125} , {126} ) 
CompCheckboxPage.bas[225]  ABMShared.NavigateToPage(ws, ABMPageId, {127} ) 
CompCheckboxPage.bas[226] End Sub 
CompCheckboxPage.bas[227]  
CompCheckboxPage.bas[228] Sub chk1_Clicked(Target As String) 
CompCheckboxPage.bas[229]  Dim checked As String 
CompCheckboxPage.bas[230]  Dim chk1 As ABMCheckbox = page.Component( {128} ) 
CompCheckboxPage.bas[231]  If chk1.State Then 
CompCheckboxPage.bas[232]  checked= {129} 
CompCheckboxPage.bas[233]  Else 
CompCheckboxPage.bas[234]  checked= {130} 
CompCheckboxPage.bas[235]  End If 
CompCheckboxPage.bas[236]  myToastId = myToastId + 1 
CompCheckboxPage.bas[237]  page.ShowToast( {131} & myToastId, {132} , {133} & checked, 5000) 
CompCheckboxPage.bas[238] End Sub 
Analysing: CompChipPage.bas
CompChipPage.bas[0] ﻿Type=Class 
CompChipPage.bas[0] Version=4.7 
CompChipPage.bas[0] ModulesStructureVersion=1 
CompChipPage.bas[0] B4J=true 
CompChipPage.bas[0] @EndOfDesignText@ 
CompChipPage.bas[1] 'Class module 
CompChipPage.bas[2] Sub Class_Globals 
CompChipPage.bas[3]  Private ws As WebSocket 'ignore 
CompChipPage.bas[4]  ' will hold our page information 
CompChipPage.bas[5]  Public page As ABMPage 
CompChipPage.bas[6]  ' page theme 
CompChipPage.bas[7]  Private theme As ABMTheme 
CompChipPage.bas[8]  ' to access the constants 
CompChipPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompChipPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompChipPage.bas[11]  Public Name As String = {0} 
CompChipPage.bas[12]  ' will hold the unique browsers window id 
CompChipPage.bas[13]  Private ABMPageId As String = {1} 
CompChipPage.bas[14]  
CompChipPage.bas[15]  ' your own variables 
CompChipPage.bas[16]  Dim myToastId As Int 
CompChipPage.bas[17] End Sub 
CompChipPage.bas[18]  
CompChipPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompChipPage.bas[20] Public Sub Initialize 
CompChipPage.bas[21]  ' build the local structure IMPORTANT! 
CompChipPage.bas[22]  BuildPage 
CompChipPage.bas[23] End Sub 
CompChipPage.bas[24]  
CompChipPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompChipPage.bas[26]  Log( {2} ) 
CompChipPage.bas[27]  ws = WebSocket1 
CompChipPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompChipPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompChipPage.bas[30]  
CompChipPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompChipPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompChipPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompChipPage.bas[34]  Return 
CompChipPage.bas[35]  End If 
CompChipPage.bas[36]  End If 
CompChipPage.bas[37]  
CompChipPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompChipPage.bas[39]  If page.ComesFromPageCache Then 
CompChipPage.bas[40]  ' refresh the page 
CompChipPage.bas[41]  page.Refresh 
CompChipPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChipPage.bas[43]  page.FinishedLoading 
CompChipPage.bas[44]  Else 
CompChipPage.bas[45]  ' Prepare the page 
CompChipPage.bas[46]  page.Prepare 
CompChipPage.bas[47]  ' load the dynamic content 
CompChipPage.bas[48]  ConnectPage 
CompChipPage.bas[49]  End If 
CompChipPage.bas[50]  Log(ABMPageId) 
CompChipPage.bas[51] End Sub 
CompChipPage.bas[52]  
CompChipPage.bas[53] Private Sub WebSocket_Disconnected 
CompChipPage.bas[54]  Log( {7} ) 
CompChipPage.bas[55] End Sub 
CompChipPage.bas[56]  
CompChipPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompChipPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompChipPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompChipPage.bas[60]  If eventName = {11} Then 
CompChipPage.bas[61]  Log( {12} ) 
CompChipPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompChipPage.bas[63]  Return 
CompChipPage.bas[64]  End If 
CompChipPage.bas[65]  If SubExists(Me, eventName) Then 
CompChipPage.bas[66]  Params.Remove( {13} ) 
CompChipPage.bas[67]  Params.Remove( {14} ) 
CompChipPage.bas[68]  Select Case Params.Size 
CompChipPage.bas[69]  Case 0 
CompChipPage.bas[70]  CallSub(Me, eventName) 
CompChipPage.bas[71]  Case 1 
CompChipPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompChipPage.bas[73]  Case 2 
CompChipPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompChipPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompChipPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompChipPage.bas[77]  Else 
CompChipPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompChipPage.bas[79]  End If 
CompChipPage.bas[80]  Case Else 
CompChipPage.bas[81]  ' cannot be called directly, to many param 
CompChipPage.bas[82]  CallSub2(Me, eventName, Params) 
CompChipPage.bas[83]  End Select 
CompChipPage.bas[84]  End If 
CompChipPage.bas[85] End Sub 
CompChipPage.bas[86]  
CompChipPage.bas[87] public Sub BuildTheme() 
CompChipPage.bas[88]  ' start with the base theme defined in ABMShared 
CompChipPage.bas[89]  theme.Initialize( {16} ) 
CompChipPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompChipPage.bas[91]  
CompChipPage.bas[92]  ' add additional themes specific for this page 
CompChipPage.bas[93]  ' toast theme 
CompChipPage.bas[94]  theme.AddToastTheme( {17} ) 
CompChipPage.bas[95]  theme.Toast( {18} ).BackColor = ABM.COLOR_GREEN 
CompChipPage.bas[96]  theme.Toast( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN2 
CompChipPage.bas[97]  
CompChipPage.bas[98]  ' bluegray button 
CompChipPage.bas[99]  theme.AddButtonTheme( {20} ) 
CompChipPage.bas[100]  theme.Button( {21} ).BackColor = ABM.COLOR_BLUEGREY 
CompChipPage.bas[101]  theme.Button( {22} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompChipPage.bas[102] End Sub 
CompChipPage.bas[103]  
CompChipPage.bas[104] public Sub BuildPage() 
CompChipPage.bas[105]  ' initialize the theme 
CompChipPage.bas[106]  BuildTheme 
CompChipPage.bas[107]  
CompChipPage.bas[108]  ' initialize this page using our theme 
CompChipPage.bas[109]  page.InitializeWithTheme(Name, {23} & ABMshared.AppName & {24} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompChipPage.bas[110]  page.ShowLoader=True 
CompChipPage.bas[111]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompChipPage.bas[112]  page.PageTitle = {25} 
CompChipPage.bas[113]  page.PageDescription = {26} 
CompChipPage.bas[114]  page.PageHTMLName = {27} 
CompChipPage.bas[115]  page.PageKeywords = {28} 
CompChipPage.bas[116]  page.PageSiteMapPriority = {29} 
CompChipPage.bas[117]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompChipPage.bas[118]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompChipPage.bas[119]  
CompChipPage.bas[120]  ABMShared.BuildNavigationBar(page, {30} , {31} , {32} , {33} , {34} ) 
CompChipPage.bas[121]  
CompChipPage.bas[122]  ' create the page grid 
CompChipPage.bas[123]  page.AddRows(11,True, {35} ).AddCells12(1, {36} ) 
CompChipPage.bas[124]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompChipPage.bas[125]  
CompChipPage.bas[126]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompChipPage.bas[127]  'page.NeedsCodeLabel = True 
CompChipPage.bas[128]  
CompChipPage.bas[129]  ABMShared.BuildFooter(page) 
CompChipPage.bas[130] End Sub 
CompChipPage.bas[131]  
CompChipPage.bas[132] Sub ConnectPage() 
CompChipPage.bas[133]  'NEW 
CompChipPage.bas[134]  ABMShared.ConnectNavigationBar(page) 
CompChipPage.bas[135]  
CompChipPage.bas[136]  ' add paragraph 
CompChipPage.bas[137]  page.cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} ) ) 
CompChipPage.bas[138]  
CompChipPage.bas[139]  ' create the chips 
CompChipPage.bas[140]  Dim ch1 As ABMChip 
CompChipPage.bas[141]  ch1.Initialize(page, {39} , {40} , False, {41} ) 
CompChipPage.bas[142]  page.Cell(2,1).AddComponent(ch1) 
CompChipPage.bas[143]  
CompChipPage.bas[144]  Dim ch2 As ABMChip 
CompChipPage.bas[145]  ch2.Initialize(page, {42} , {43} , False, {44} ) 
CompChipPage.bas[146]  page.Cell(2,1).AddComponent(ch2) 
CompChipPage.bas[147]  
CompChipPage.bas[148]  ' add codeblock 
CompChipPage.bas[149]  Dim code1 As StringBuilder 
CompChipPage.bas[150]  code1.Initialize 
CompChipPage.bas[151]  code1.Append( {45} ).Append(CRLF) 
CompChipPage.bas[152]  code1.Append( {46} ).Append(CRLF) 
CompChipPage.bas[153]  code1.Append( {249} ).Append(CRLF) 
CompChipPage.bas[154]  code1.Append( {54} ).Append(CRLF) 
CompChipPage.bas[155]  code1.Append( {55} ).Append(CRLF) 
CompChipPage.bas[156]  code1.Append( {56} ).Append(CRLF) 
CompChipPage.bas[157]  code1.Append( {255} ).Append(CRLF) 
CompChipPage.bas[158]  code1.Append( {64} ).Append(CRLF) 
CompChipPage.bas[159]  
CompChipPage.bas[160]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {65} , code1)) 
CompChipPage.bas[161]  
CompChipPage.bas[162]  
CompChipPage.bas[163]  ' add paragraph 
CompChipPage.bas[164]  page.cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {66} , {67} ) ) 
CompChipPage.bas[165]  
CompChipPage.bas[166]  ' create the chips 
CompChipPage.bas[167]  Dim ch3 As ABMChip 
CompChipPage.bas[168]  ch3.Initialize(page, {68} , {69} , False, {70} ) 
CompChipPage.bas[169]  ch3.Image = {71} 
CompChipPage.bas[170]  page.Cell(5,1).AddComponent(ch3) 
CompChipPage.bas[171]  
CompChipPage.bas[172]  Dim ch4 As ABMChip 
CompChipPage.bas[173]  ch4.Initialize(page, {72} , {73} , False, {74} ) 
CompChipPage.bas[174]  ch4.Image = {75} 
CompChipPage.bas[175]  page.Cell(5,1).AddComponent(ch4) 
CompChipPage.bas[176]  
CompChipPage.bas[177]  ' add codeblock 
CompChipPage.bas[178]  Dim code2 As StringBuilder 
CompChipPage.bas[179]  code2.Initialize 
CompChipPage.bas[180]  code2.Append( {76} ).Append(CRLF) 
CompChipPage.bas[181]  code2.Append( {77} ).Append(CRLF) 
CompChipPage.bas[182]  code2.Append( {261} ).Append(CRLF) 
CompChipPage.bas[183]  code2.Append( {263} ).Append(CRLF) 
CompChipPage.bas[184]  code2.Append( {88} ).Append(CRLF) 
CompChipPage.bas[185]  code2.Append( {89} ).Append(CRLF) 
CompChipPage.bas[186]  code2.Append( {90} ).Append(CRLF) 
CompChipPage.bas[187]  code2.Append( {269} ).Append(CRLF) 
CompChipPage.bas[188]  code2.Append( {271} ).Append(CRLF) 
CompChipPage.bas[189]  code2.Append( {101} ).Append(CRLF) 
CompChipPage.bas[190]  
CompChipPage.bas[191]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {102} , code2)) 
CompChipPage.bas[192]  
CompChipPage.bas[193]  
CompChipPage.bas[194]  ' add paragraph 
CompChipPage.bas[195]  page.cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {103} , {104} ) ) 
CompChipPage.bas[196]  
CompChipPage.bas[197]  ' create the chips 
CompChipPage.bas[198]  ' This time as array so we can catch the events in one method. 
CompChipPage.bas[199]  ' good practice is using giving the 'Array' components just the numeric part of the ID. 
CompChipPage.bas[200]  ' That way you can use the Event name as you would any other event. 
CompChipPage.bas[201]  ' e.g. here: 'mycheck' is the ArrayName, and '5', '6', '7', '8' are the IDs. 
CompChipPage.bas[202]  ' Now we can use mycheck_Clicked() and use the target to get our individual component 
CompChipPage.bas[203]  Dim ch5 As ABMChip 
CompChipPage.bas[204]  ch5.Initialize(page, {105} , {106} , False, {107} ) 
CompChipPage.bas[205]  ch5.Image = {108} 
CompChipPage.bas[206]  page.Cell(8,1).AddArrayComponent(ch5, {109} ) 
CompChipPage.bas[207]  
CompChipPage.bas[208]  Dim ch6 As ABMChip 
CompChipPage.bas[209]  ch6.Initialize(page, {110} , {111} , False, {112} ) 
CompChipPage.bas[210]  ch6.Image = {113} 
CompChipPage.bas[211]  page.Cell(8,1).AddArrayComponent(ch6, {114} ) 
CompChipPage.bas[212]  
CompChipPage.bas[213]  Dim ch7 As ABMChip 
CompChipPage.bas[214]  ch7.Initialize(page, {115} , {116} , True, {117} ) 
CompChipPage.bas[215]  ch7.Image = {118} 
CompChipPage.bas[216]  page.Cell(8,1).AddArrayComponent(ch7, {119} ) 
CompChipPage.bas[217]  
CompChipPage.bas[218]  Dim ch8 As ABMChip 
CompChipPage.bas[219]  ch8.Initialize(page, {120} , {121} , True, {122} ) 
CompChipPage.bas[220]  ch8.Image = {123} 
CompChipPage.bas[221]  page.Cell(8,1).AddArrayComponent(ch8, {124} ) 
CompChipPage.bas[222]  
CompChipPage.bas[223]  ' add codeblock 
CompChipPage.bas[224]  Dim code3 As StringBuilder 
CompChipPage.bas[225]  code3.Initialize 
CompChipPage.bas[226]  code3.Append( {125} ).Append(CRLF) 
CompChipPage.bas[227]  code3.Append( {126} ).Append(CRLF) 
CompChipPage.bas[228]  code3.Append( {127} ).Append(CRLF) 
CompChipPage.bas[229]  code3.Append( {128} ).Append(CRLF) 
CompChipPage.bas[230]  code3.Append( {129} ).Append(CRLF) 
CompChipPage.bas[231]  code3.Append( {130} ).Append(CRLF) 
CompChipPage.bas[232]  code3.Append( {131} ).Append(CRLF) 
CompChipPage.bas[233]  code3.Append( {277} ).Append(CRLF) 
CompChipPage.bas[234]  code3.Append( {279} ).Append(CRLF) 
CompChipPage.bas[235]  code3.Append( {281} ).Append(CRLF) 
CompChipPage.bas[236]  code3.Append( {145} ).Append(CRLF) 
CompChipPage.bas[237]  code3.Append( {146} ).Append(CRLF) 
CompChipPage.bas[238]  code3.Append( {287} ).Append(CRLF) 
CompChipPage.bas[239]  code3.Append( {289} ).Append(CRLF) 
CompChipPage.bas[240]  code3.Append( {291} ).Append(CRLF) 
CompChipPage.bas[241]  code3.Append( {160} ).Append(CRLF) 
CompChipPage.bas[242]  code3.Append( {161} ).Append(CRLF) 
CompChipPage.bas[243]  code3.Append( {297} ).Append(CRLF) 
CompChipPage.bas[244]  code3.Append( {299} ).Append(CRLF) 
CompChipPage.bas[245]  code3.Append( {301} ).Append(CRLF) 
CompChipPage.bas[246]  code3.Append( {175} ).Append(CRLF) 
CompChipPage.bas[247]  code3.Append( {176} ).Append(CRLF) 
CompChipPage.bas[248]  code3.Append( {307} ).Append(CRLF) 
CompChipPage.bas[249]  code3.Append( {309} ).Append(CRLF) 
CompChipPage.bas[250]  code3.Append( {311} ).Append(CRLF) 
CompChipPage.bas[251]  
CompChipPage.bas[252]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {190} , code3)) 
CompChipPage.bas[253]  
CompChipPage.bas[254]  ' add paragraph 
CompChipPage.bas[255]  page.cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {191} , {192} ) ) 
CompChipPage.bas[256]  
CompChipPage.bas[257]  ' add codeblock 
CompChipPage.bas[258]  Dim code4 As StringBuilder 
CompChipPage.bas[259]  code4.Initialize 
CompChipPage.bas[260]  code4.Append( {193} ).Append(CRLF) 
CompChipPage.bas[261]  code4.Append( {194} ).Append(CRLF) 
CompChipPage.bas[262]  code4.Append( {195} ).Append(CRLF) 
CompChipPage.bas[263]  code4.Append( {196} ).Append(CRLF) 
CompChipPage.bas[264]  code4.Append( {197} ).Append(CRLF) 
CompChipPage.bas[265]  code4.Append( {198} ).Append(CRLF) 
CompChipPage.bas[266]  code4.Append( {199} ).Append(CRLF) 
CompChipPage.bas[267]  code4.Append( {317} ).Append(CRLF) 
CompChipPage.bas[268]  code4.Append( {207} ).Append(CRLF) 
CompChipPage.bas[269]  code4.Append( {208} ).Append(CRLF) 
CompChipPage.bas[270]  code4.Append( {209} ).Append(CRLF) 
CompChipPage.bas[271]  code4.Append( {210} ).Append(CRLF) 
CompChipPage.bas[272]  code4.Append( {211} ).Append(CRLF) 
CompChipPage.bas[273]  code4.Append( {212} ).Append(CRLF) 
CompChipPage.bas[274]  code4.Append( {213} ).Append(CRLF) 
CompChipPage.bas[275]  code4.Append( {214} ).Append(CRLF) 
CompChipPage.bas[276]  code4.Append( {215} ).Append(CRLF) 
CompChipPage.bas[277]  code4.Append( {323} ).Append(CRLF) 
CompChipPage.bas[278]  code4.Append( {223} ).Append(CRLF) 
CompChipPage.bas[279]  
CompChipPage.bas[280]  page.Cell(11,1).AddComponent(ABMShared.BuildCodeBlock(page, {224} , code4)) 
CompChipPage.bas[281]  
CompChipPage.bas[282]  ' also add the components to the footer 
CompChipPage.bas[283]  ABMShared.ConnectFooter(page) 
CompChipPage.bas[284]  
CompChipPage.bas[285]  page.Refresh ' IMPORTANT 
CompChipPage.bas[286]  
CompChipPage.bas[287]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChipPage.bas[288]  page.FinishedLoading 'IMPORTANT 
CompChipPage.bas[289]  
CompChipPage.bas[290]  page.RestoreNavigationBarPosition 
CompChipPage.bas[291] End Sub 
CompChipPage.bas[292]  
CompChipPage.bas[293] ' clicked on the navigation bar 
CompChipPage.bas[294] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompChipPage.bas[295]  page.SaveNavigationBarPosition 
CompChipPage.bas[296]  If Action = {225} Then Return 
CompChipPage.bas[297]  If Action = {226} Then 
CompChipPage.bas[298]  myToastId = myToastId + 1 
CompChipPage.bas[299]  page.ShowToast( {227} & myToastId, {228} , {229} , 5000) 
CompChipPage.bas[300]  Return 
CompChipPage.bas[301]  End If 
CompChipPage.bas[302]  If Action = {230} Then 
CompChipPage.bas[303]  ABMShared.LogOff(page) 
CompChipPage.bas[304]  Return 
CompChipPage.bas[305]  End If 
CompChipPage.bas[306]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompChipPage.bas[307] End Sub 
CompChipPage.bas[308]  
CompChipPage.bas[309] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompChipPage.bas[310]  page.ws.Session.SetAttribute( {231} , {232} ) 
CompChipPage.bas[311]  page.ws.Session.SetAttribute( {233} , {234} ) 
CompChipPage.bas[312]  page.ws.Session.SetAttribute( {235} , {236} ) 
CompChipPage.bas[313]  ABMShared.NavigateToPage(ws, ABMPageId, {237} ) 
CompChipPage.bas[314] End Sub 
CompChipPage.bas[315]  
CompChipPage.bas[316] Sub mycheck_Clicked(Target As String) 
CompChipPage.bas[317]  Log(Target) 
CompChipPage.bas[318]  Dim chip As ABMChip = page.Component(Target) 
CompChipPage.bas[319]  Dim title As String = chip.Text 
CompChipPage.bas[320]  myToastId = myToastId + 1 
CompChipPage.bas[321]  page.ShowToast( {238} & myToastId, {239} , {240} & title, 5000) 
CompChipPage.bas[322]  
CompChipPage.bas[323] End Sub 
CompChipPage.bas[324]  
CompChipPage.bas[325]  
CompChipPage.bas[326]  
CompChipPage.bas[327] Sub mycheck_Closed(Target As String) 
CompChipPage.bas[328]  Dim chip As ABMChip = page.Component(Target) 
CompChipPage.bas[329]  Dim title As String = chip.Text 
CompChipPage.bas[330]  myToastId = myToastId + 1 
CompChipPage.bas[331]  page.ShowToast( {241} & myToastId, {242} , {243} & title, 5000) 
CompChipPage.bas[332] End Sub 
CompChipPage.bas[333]  
Analysing: CompChronologyPage.bas
CompChronologyPage.bas[0] ﻿Type=Class 
CompChronologyPage.bas[0] Version=4.7 
CompChronologyPage.bas[0] ModulesStructureVersion=1 
CompChronologyPage.bas[0] B4J=true 
CompChronologyPage.bas[0] @EndOfDesignText@ 
CompChronologyPage.bas[1] 'Class module 
CompChronologyPage.bas[2] Sub Class_Globals 
CompChronologyPage.bas[3]  Private ws As WebSocket 'ignore 
CompChronologyPage.bas[4]  ' will hold our page information 
CompChronologyPage.bas[5]  Public page As ABMPage 
CompChronologyPage.bas[6]  ' page theme 
CompChronologyPage.bas[7]  Private theme As ABMTheme 
CompChronologyPage.bas[8]  ' to access the constants 
CompChronologyPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompChronologyPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompChronologyPage.bas[11]  Public Name As String = {1} 
CompChronologyPage.bas[12]  ' will hold the unique browsers window id 
CompChronologyPage.bas[13]  Private ABMPageId As String = {2} 
CompChronologyPage.bas[14]  
CompChronologyPage.bas[15]  ' your own variables 
CompChronologyPage.bas[16]  Dim myToastId As Int 
CompChronologyPage.bas[17]  
CompChronologyPage.bas[18]  'Dim testo1 As ABMCanvasObject 
CompChronologyPage.bas[19]  'Dim imgfrec As ABMCanvasObject 
CompChronologyPage.bas[20] End Sub 
CompChronologyPage.bas[21]  
CompChronologyPage.bas[22] 'Initializes the object. You can add parameters to this method if needed. 
CompChronologyPage.bas[23] Public Sub Initialize 
CompChronologyPage.bas[24]  ' build the local structure IMPORTANT! 
CompChronologyPage.bas[25]  
CompChronologyPage.bas[26]  BuildPage 
CompChronologyPage.bas[27]  
CompChronologyPage.bas[28] End Sub 
CompChronologyPage.bas[29]  
CompChronologyPage.bas[30] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompChronologyPage.bas[31]  Log( {3} ) 
CompChronologyPage.bas[32]  ws = WebSocket1 
CompChronologyPage.bas[33]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompChronologyPage.bas[34]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompChronologyPage.bas[35]  
CompChronologyPage.bas[36]  If ABMShared.NeedsAuthorization Then 
CompChronologyPage.bas[37]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompChronologyPage.bas[38]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompChronologyPage.bas[39]  Return 
CompChronologyPage.bas[40]  End If 
CompChronologyPage.bas[41]  End If 
CompChronologyPage.bas[42]  
CompChronologyPage.bas[43]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompChronologyPage.bas[44]  If page.ComesFromPageCache Then 
CompChronologyPage.bas[45]  ' refresh the page 
CompChronologyPage.bas[46]  page.Refresh 
CompChronologyPage.bas[47]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChronologyPage.bas[48]  page.FinishedLoading 
CompChronologyPage.bas[49]  Else 
CompChronologyPage.bas[50]  ' Prepare the page 
CompChronologyPage.bas[51]  page.Prepare 
CompChronologyPage.bas[52]  ' load the dynamic content 
CompChronologyPage.bas[53]  ConnectPage 
CompChronologyPage.bas[54]  End If 
CompChronologyPage.bas[55]  Log(ABMPageId) 
CompChronologyPage.bas[56] End Sub 
CompChronologyPage.bas[57]  
CompChronologyPage.bas[58] Private Sub WebSocket_Disconnected 
CompChronologyPage.bas[59]  Log( {8} ) 
CompChronologyPage.bas[60] End Sub 
CompChronologyPage.bas[61]  
CompChronologyPage.bas[62] Sub Page_ParseEvent(Params As Map) 
CompChronologyPage.bas[63]  Dim eventName As String = Params.Get( {9} ) 
CompChronologyPage.bas[64]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompChronologyPage.bas[65]  If eventName = {12} Then 
CompChronologyPage.bas[66]  Log( {13} ) 
CompChronologyPage.bas[67]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompChronologyPage.bas[68]  Return 
CompChronologyPage.bas[69]  End If 
CompChronologyPage.bas[70]  If SubExists(Me, eventName) Then 
CompChronologyPage.bas[71]  Params.Remove( {14} ) 
CompChronologyPage.bas[72]  Params.Remove( {15} ) 
CompChronologyPage.bas[73]  Select Case Params.Size 
CompChronologyPage.bas[74]  Case 0 
CompChronologyPage.bas[75]  CallSub(Me, eventName) 
CompChronologyPage.bas[76]  Case 1 
CompChronologyPage.bas[77]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompChronologyPage.bas[78]  Case 2 
CompChronologyPage.bas[79]  If Params.get(eventParams(0)) = {16} Then 
CompChronologyPage.bas[80]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompChronologyPage.bas[81]  CallSub2(Me, eventName, PassedTables) 
CompChronologyPage.bas[82]  Else 
CompChronologyPage.bas[83]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompChronologyPage.bas[84]  End If 
CompChronologyPage.bas[85]  Case Else 
CompChronologyPage.bas[86]  ' cannot be called directly, to many param 
CompChronologyPage.bas[87]  CallSub2(Me, eventName, Params) 
CompChronologyPage.bas[88]  End Select 
CompChronologyPage.bas[89]  End If 
CompChronologyPage.bas[90] End Sub 
CompChronologyPage.bas[91]  
CompChronologyPage.bas[92] public Sub BuildTheme() 
CompChronologyPage.bas[93]  ' start with the base theme defined in ABMShared 
CompChronologyPage.bas[94]  theme.Initialize( {17} ) 
CompChronologyPage.bas[95]  theme.AddABMTheme(ABMShared.MyTheme) 
CompChronologyPage.bas[96]  
CompChronologyPage.bas[97]  ' add additional themes specific for this page 
CompChronologyPage.bas[98]  
CompChronologyPage.bas[99]  
CompChronologyPage.bas[100]  theme.AddCardTheme( {18} ) 
CompChronologyPage.bas[101]  theme.Card( {19} ).TitleForeColor = ABM.COLOR_WHITE 
CompChronologyPage.bas[102]  
CompChronologyPage.bas[103]  theme.AddChronologyList( {20} ) 
CompChronologyPage.bas[104]  theme.ChronologyList( {21} ).AddChronologyBadgeTheme( {22} ) 
CompChronologyPage.bas[105]  theme.ChronologyList( {23} ).ChronologyBadge( {24} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompChronologyPage.bas[106]  theme.ChronologyList( {25} ).ChronologyBadge( {26} ).ColorizePointer = True 
CompChronologyPage.bas[107]  theme.ChronologyList( {27} ).ChronologyBadge( {28} ).IconName = {29} 
CompChronologyPage.bas[108]  
CompChronologyPage.bas[109]  theme.ChronologyList( {30} ).AddChronologyBadgeTheme( {31} ) 
CompChronologyPage.bas[110]  theme.ChronologyList( {32} ).ChronologyBadge( {33} ).BackColor = ABM.COLOR_RED 
CompChronologyPage.bas[111]  theme.ChronologyList( {34} ).ChronologyBadge( {35} ).ColorizePointer = True 
CompChronologyPage.bas[112]  theme.ChronologyList( {36} ).ChronologyBadge( {37} ).IconName = {38} 
CompChronologyPage.bas[113]  
CompChronologyPage.bas[114]  theme.ChronologyList( {39} ).AddChronologyBadgeTheme( {40} ) 
CompChronologyPage.bas[115]  theme.ChronologyList( {41} ).ChronologyBadge( {42} ).BackColor = ABM.COLOR_GREEN 
CompChronologyPage.bas[116]  theme.ChronologyList( {43} ).ChronologyBadge( {44} ).ColorizePointer = True 
CompChronologyPage.bas[117]  theme.ChronologyList( {45} ).ChronologyBadge( {46} ).IconName = {47} 
CompChronologyPage.bas[118]  
CompChronologyPage.bas[119]  theme.ChronologyList( {48} ).AddChronologyBadgeTheme( {49} ) 
CompChronologyPage.bas[120]  theme.ChronologyList( {50} ).ChronologyBadge( {51} ).BackColor = ABM.COLOR_BLACK 
CompChronologyPage.bas[121]  theme.ChronologyList( {52} ).ChronologyBadge( {53} ).ColorizePointer = True 
CompChronologyPage.bas[122]  theme.ChronologyList( {54} ).ChronologyBadge( {55} ).IconName = {56} 
CompChronologyPage.bas[123]  
CompChronologyPage.bas[124]  theme.AddRowTheme( {57} ) 
CompChronologyPage.bas[125]  theme.Row( {58} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompChronologyPage.bas[126]  theme.AddRowTheme( {59} ) 
CompChronologyPage.bas[127]  theme.Row( {60} ).BackColor = ABM.COLOR_GREEN 
CompChronologyPage.bas[128]  theme.AddRowTheme( {61} ) 
CompChronologyPage.bas[129]  theme.Row( {62} ).BackColor = ABM.COLOR_RED 
CompChronologyPage.bas[130]  theme.AddRowTheme( {63} ) 
CompChronologyPage.bas[131]  theme.Row( {64} ).BackColor = ABM.COLOR_BLACK 
CompChronologyPage.bas[132]  
CompChronologyPage.bas[133]  ' add additional themes specific for this page 
CompChronologyPage.bas[134]  theme.AddTableTheme( {65} ) 
CompChronologyPage.bas[135]  theme.Table( {66} ).ZDepth = ABM.ZDEPTH_1 
CompChronologyPage.bas[136]  
CompChronologyPage.bas[137]  theme.Table( {67} ).AddCellTheme( {68} ) 
CompChronologyPage.bas[138]  theme.Table( {69} ).Cell( {70} ).BackColor = ABM.COLOR_BLACK 
CompChronologyPage.bas[139]  theme.Table( {71} ).Cell( {72} ).ForeColor = ABM.COLOR_WHITE 
CompChronologyPage.bas[140]  
CompChronologyPage.bas[141]  theme.Table( {73} ).AddCellTheme( {74} ) 
CompChronologyPage.bas[142]  theme.Table( {75} ).Cell( {76} ).BackColor = ABM.COLOR_BLACK 
CompChronologyPage.bas[143]  theme.Table( {77} ).Cell( {78} ).ForeColor = ABM.COLOR_WHITE 
CompChronologyPage.bas[144]  theme.Table( {79} ).Cell( {80} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompChronologyPage.bas[145]  
CompChronologyPage.bas[146]  theme.Table( {81} ).AddCellTheme( {82} ) 
CompChronologyPage.bas[147]  theme.Table( {83} ).Cell( {84} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
CompChronologyPage.bas[148]  theme.Table( {85} ).Cell( {86} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
CompChronologyPage.bas[149]  
CompChronologyPage.bas[150]  theme.Table( {87} ).AddCellTheme( {88} ) 
CompChronologyPage.bas[151]  theme.Table( {89} ).Cell( {90} ).BackColor = ABM.COLOR_GREEN 
CompChronologyPage.bas[152]  theme.Table( {91} ).Cell( {92} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompChronologyPage.bas[153]  theme.Table( {93} ).Cell( {94} ).ActiveBackColor = ABM.COLOR_GREEN 
CompChronologyPage.bas[154]  theme.Table( {95} ).Cell( {96} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompChronologyPage.bas[155]  theme.Table( {97} ).Cell( {98} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompChronologyPage.bas[156]  
CompChronologyPage.bas[157]  theme.Table( {99} ).AddCellTheme( {100} ) 
CompChronologyPage.bas[158]  theme.Table( {101} ).Cell( {102} ).BackColor = ABM.COLOR_RED 
CompChronologyPage.bas[159]  theme.Table( {103} ).Cell( {104} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompChronologyPage.bas[160]  theme.Table( {105} ).Cell( {106} ).ActiveBackColor = ABM.COLOR_RED 
CompChronologyPage.bas[161]  theme.Table( {107} ).Cell( {108} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompChronologyPage.bas[162]  theme.Table( {109} ).Cell( {110} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompChronologyPage.bas[163]  
CompChronologyPage.bas[164]  theme.Table( {111} ).AddCellTheme( {112} ) 
CompChronologyPage.bas[165]  theme.Table( {113} ).Cell( {114} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
CompChronologyPage.bas[166]  
CompChronologyPage.bas[167]  theme.AddLabelTheme( {115} ) 
CompChronologyPage.bas[168]  theme.Label( {116} ).ForeColor = ABM.COLOR_WHITE 
CompChronologyPage.bas[169]  
CompChronologyPage.bas[170] End Sub 
CompChronologyPage.bas[171]  
CompChronologyPage.bas[172] public Sub BuildPage() 
CompChronologyPage.bas[173]  ' initialize the theme 
CompChronologyPage.bas[174]  BuildTheme 
CompChronologyPage.bas[175]  
CompChronologyPage.bas[176]  ' initialize this page using our theme 
CompChronologyPage.bas[177]  page.InitializeWithTheme(Name, {117} & ABMshared.AppName & {118} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompChronologyPage.bas[178]  page.ShowLoader=True 
CompChronologyPage.bas[179]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompChronologyPage.bas[180]  page.PageTitle = {119} 
CompChronologyPage.bas[181]  page.PageDescription = {120} 
CompChronologyPage.bas[182]  page.PageHTMLName = {121} 
CompChronologyPage.bas[183]  page.PageKeywords = {122} 
CompChronologyPage.bas[184]  page.PageSiteMapPriority = {123} 
CompChronologyPage.bas[185]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompChronologyPage.bas[186]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompChronologyPage.bas[187]  
CompChronologyPage.bas[188]  ABMShared.BuildNavigationBar(page, {124} , {125} , {126} , {127} , {128} ) 
CompChronologyPage.bas[189]  
CompChronologyPage.bas[190]  ' create the page grid 
CompChronologyPage.bas[191]  page.AddRows(3,True, {129} ).AddCells12(1, {130} ) 
CompChronologyPage.bas[192]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompChronologyPage.bas[193]  
CompChronologyPage.bas[194]  ABMShared.BuildFooter(page) 
CompChronologyPage.bas[195] End Sub 
CompChronologyPage.bas[196]  
CompChronologyPage.bas[197] public Sub ConnectPage() 
CompChronologyPage.bas[198]  'NEW 
CompChronologyPage.bas[199]  ABMShared.ConnectNavigationBar(page) 
CompChronologyPage.bas[200]  
CompChronologyPage.bas[201] ' ' add paragraph 
CompChronologyPage.bas[202]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {131} , {132} )) 
CompChronologyPage.bas[203]  
CompChronologyPage.bas[204]  ' chronolist test 
CompChronologyPage.bas[205]  Dim chrono As ABMChronologyList 
CompChronologyPage.bas[206]  chrono.Initialize(page, {133} , {134} ) 
CompChronologyPage.bas[207]  chrono.AddSlide( {135} , BuildFiche(1, {136} , {137} , {138} ), {139} ) 
CompChronologyPage.bas[208]  chrono.AddSlide( {140} , BuildFiche(2, {141} , {142} , {143} ), {144} ) 
CompChronologyPage.bas[209]  chrono.AddSlide( {145} , BuildFiche(3, {146} , {147} , {148} ), {149} ) 
CompChronologyPage.bas[210]  chrono.AddSlide( {150} , BuildFiche(4, {151} , {152} , {153} ), {154} ) 
CompChronologyPage.bas[211]  chrono.AddSlide( {155} , BuildFiche(5, {156} , {157} , {158} ), {159} ) 
CompChronologyPage.bas[212]  chrono.AddSlide( {160} , BuildFiche(6, {161} , {162} , {163} ), {164} ) 
CompChronologyPage.bas[213]  chrono.AddSlide( {165} , BuildFiche(7, {166} , {167} , {168} ), {169} ) 
CompChronologyPage.bas[214]  chrono.AddSlide( {170} , BuildFiche(8, {171} , {172} , {173} ), {174} ) 
CompChronologyPage.bas[215]  chrono.AddSlide( {175} , BuildFiche(9, {176} , {177} , {178} ), {179} ) 
CompChronologyPage.bas[216]  chrono.AddSlide( {180} , BuildFiche(10, {181} , {182} , {183} ), {184} ) 
CompChronologyPage.bas[217]  chrono.AddSlide( {185} , BuildFiche(11, {186} , {187} , {188} ), {189} ) 
CompChronologyPage.bas[218]  page.Cell(2,1).AddComponent(chrono) 
CompChronologyPage.bas[219]  
CompChronologyPage.bas[220]  ' also add the components to the footer 
CompChronologyPage.bas[221]  ABMShared.ConnectFooter(page) 
CompChronologyPage.bas[222]  
CompChronologyPage.bas[223]  page.Refresh ' IMPORTANT! 
CompChronologyPage.bas[224]  
CompChronologyPage.bas[225]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompChronologyPage.bas[226]  page.FinishedLoading 'IMPORTANT 
CompChronologyPage.bas[227]  
CompChronologyPage.bas[228]  page.RestoreNavigationBarPosition 
CompChronologyPage.bas[229] End Sub 
CompChronologyPage.bas[230]  
CompChronologyPage.bas[231] Sub BuildFiche(id As String, Title As String, pic As String, themeName As String) As ABMContainer 
CompChronologyPage.bas[232]  Dim Fiche As ABMContainer 
CompChronologyPage.bas[233]  Fiche.Initialize(page, {190} & id, {191} ) 
CompChronologyPage.bas[234]  
CompChronologyPage.bas[235]  Fiche.AddRowsM(1, False,0,0, themeName).AddCellsOSMP(1,0,0,0,12,12,12,0,12,10,10, {192} ) 
CompChronologyPage.bas[236]  If themeName = {193} Then 
CompChronologyPage.bas[237]  Fiche.AddRowsM(1, False,0,0, {194} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {195} ) 
CompChronologyPage.bas[238]  Else 
CompChronologyPage.bas[239]  Fiche.AddRowsM(1, True,0,0, {196} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {197} ) 
CompChronologyPage.bas[240]  End If 
CompChronologyPage.bas[241]  If themeName = {198} Then 
CompChronologyPage.bas[242]  Fiche.AddRowsM(1, True,0,10, {199} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {200} ) 
CompChronologyPage.bas[243]  End If 
CompChronologyPage.bas[244]  
CompChronologyPage.bas[245]  Fiche.BuildGrid 
CompChronologyPage.bas[246]  If themeName = {201} Then 
CompChronologyPage.bas[247]  Fiche.Row(2).MarginLeft = {202} 
CompChronologyPage.bas[248]  Fiche.Row(2).MarginRight = {203} 
CompChronologyPage.bas[249]  End If 
CompChronologyPage.bas[250]  
CompChronologyPage.bas[251]  Fiche.Row(1).MarginLeft = {204} 
CompChronologyPage.bas[252]  Fiche.Row(1).MarginRight = {205} 
CompChronologyPage.bas[253]  
CompChronologyPage.bas[254]  Dim titLabel As ABMLabel 
CompChronologyPage.bas[255]  titLabel.Initialize(page, {206} & id, Title, ABM.SIZE_H5,False, {207} ) 
CompChronologyPage.bas[256]  Fiche.Cell(1,1).AddComponent(titLabel) 
CompChronologyPage.bas[257]  Dim titLabel2 As ABMLabel 
CompChronologyPage.bas[258]  titLabel2.Initialize(page, {208} & id, ABM.Util.words(Rnd(1,5)), ABM.SIZE_H6,False, {209} ) 
CompChronologyPage.bas[259]  Fiche.Cell(1,1).AddComponent(titLabel2) 
CompChronologyPage.bas[260]  
CompChronologyPage.bas[261]  If pic <> {210} Then 
CompChronologyPage.bas[262]  Fiche.Cell(2,1).AddComponent(ABMShared.BuildImage(page, {211} & id, pic,1, {212} )) 
CompChronologyPage.bas[263]  End If 
CompChronologyPage.bas[264]  
CompChronologyPage.bas[265]  If themeName = {213} Then 
CompChronologyPage.bas[266]  ' create a table 
CompChronologyPage.bas[267]  Dim tbl1 As ABMTable 
CompChronologyPage.bas[268]  tbl1.Initialize(page, {214} , True, False, True, {215} ) 
CompChronologyPage.bas[269]  tbl1.SetHeaders(Array As String( {216} , {217} , {218} )) 
CompChronologyPage.bas[270]  tbl1.SetHeaderThemes(Array As String( {219} , {220} , {221} )) 
CompChronologyPage.bas[271]  
CompChronologyPage.bas[272]  Dim FirstNames As List 
CompChronologyPage.bas[273]  Dim LastNames As List 
CompChronologyPage.bas[274]  
CompChronologyPage.bas[275]  FirstNames.Initialize2(Array As String( {222} , {223} , {224} , {225} , {226} , {227} , {228} , {229} , {230} , {231} )) 
CompChronologyPage.bas[276]  LastNames.Initialize2(Array As String( {232} , {233} , {234} , {235} , {236} , {237} , {238} , {239} , {240} , {241} )) 
CompChronologyPage.bas[277]  
CompChronologyPage.bas[278]  ' add some random values 
CompChronologyPage.bas[279]  For i = 0 To 9 
CompChronologyPage.bas[280]  Dim r As List 
CompChronologyPage.bas[281]  Dim rCellThemes As List 
CompChronologyPage.bas[282]  r.Initialize 
CompChronologyPage.bas[283]  rCellThemes.Initialize 
CompChronologyPage.bas[284]  r.Add(FirstNames.get(Rnd(0,9))) 
CompChronologyPage.bas[285]  rCellThemes.Add( {242} ) 
CompChronologyPage.bas[286]  r.Add(LastNames.get(Rnd(0,9))) 
CompChronologyPage.bas[287]  rCellThemes.Add( {243} ) 
CompChronologyPage.bas[288]  Dim Neg As Int = Rnd(0,100) 
CompChronologyPage.bas[289]  If Neg > 50 Then 
CompChronologyPage.bas[290]  r.Add( {244} & Rnd(1000, 15000)) 
CompChronologyPage.bas[294]  rCellThemes.Add( {245} ) 
CompChronologyPage.bas[295]  End If 
CompChronologyPage.bas[296]  tbl1.AddRow( {246} & i, r) 
CompChronologyPage.bas[297]  tbl1.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
CompChronologyPage.bas[298]  Next 
CompChronologyPage.bas[299]  
CompChronologyPage.bas[300]  tbl1.SetFooter( {247} , 12, {248} ) 
CompChronologyPage.bas[301]  
CompChronologyPage.bas[302]  Fiche.Cell(2,1).AddComponent(tbl1) 
CompChronologyPage.bas[303]  
CompChronologyPage.bas[304]  Else 
CompChronologyPage.bas[305]  Dim body As ABMLabel 
CompChronologyPage.bas[306]  body.Initialize(page, {249} & id, ABM.Util.sentences(Rnd(1,10)), ABM.SIZE_PARAGRAPH, True, {250} ) 
CompChronologyPage.bas[307]  Fiche.Cell(2,1).AddComponent(body) 
CompChronologyPage.bas[308]  End If 
CompChronologyPage.bas[309]  
CompChronologyPage.bas[310]  If themeName = {251} Then 
CompChronologyPage.bas[311]  Dim btn As ABMButton 
CompChronologyPage.bas[312]  btn.InitializeFlat(page, id, {252} , {253} , {254} , {255} ) 
CompChronologyPage.bas[313]  Fiche.Cell(3,1).AddArrayComponent(btn, {256} ) 
CompChronologyPage.bas[314]  End If 
CompChronologyPage.bas[315]  
CompChronologyPage.bas[316]  Return Fiche 
CompChronologyPage.bas[317] End Sub 
CompChronologyPage.bas[318]  
CompChronologyPage.bas[319] Sub btn_Clicked(Target As String) 
CompChronologyPage.bas[320]  Log(Target) 
CompChronologyPage.bas[321]  Dim slideNr As String = ABMShared.Mid2(Target,4) 
CompChronologyPage.bas[322]  Log(slideNr) 
CompChronologyPage.bas[323]  Dim chrono As ABMChronologyList = page.Component( {257} ) 
CompChronologyPage.bas[324]  chrono.SetSlideTheme( {258} & slideNr, {259} ) 
CompChronologyPage.bas[325]  chrono.GetSlideContainer( {260} & slideNr).Cell(3,1).RemoveAllComponents 
CompChronologyPage.bas[326]  chrono.GetSlideContainer( {261} & slideNr).Row(1).UseTheme( {262} ) 
CompChronologyPage.bas[327]  chrono.Refresh 
CompChronologyPage.bas[328] End Sub 
CompChronologyPage.bas[329]  
CompChronologyPage.bas[330] ' clicked on the navigation bar 
CompChronologyPage.bas[331] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompChronologyPage.bas[332]  page.SaveNavigationBarPosition 
CompChronologyPage.bas[333]  If Action = {263} Then Return 
CompChronologyPage.bas[334]  If Action = {264} Then 
CompChronologyPage.bas[335]  myToastId = myToastId + 1 
CompChronologyPage.bas[336]  page.ShowToast( {265} & myToastId, {266} , {267} , 5000) 
CompChronologyPage.bas[337]  Return 
CompChronologyPage.bas[338]  End If 
CompChronologyPage.bas[339]  If Action = {268} Then 
CompChronologyPage.bas[340]  ABMShared.LogOff(page) 
CompChronologyPage.bas[341]  Return 
CompChronologyPage.bas[342]  End If 
CompChronologyPage.bas[343]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompChronologyPage.bas[344] End Sub 
CompChronologyPage.bas[345]  
CompChronologyPage.bas[346] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompChronologyPage.bas[347]  page.ws.Session.SetAttribute( {269} , {270} ) 
CompChronologyPage.bas[348]  page.ws.Session.SetAttribute( {271} , {272} ) 
CompChronologyPage.bas[349]  page.ws.Session.SetAttribute( {273} , {274} ) 
CompChronologyPage.bas[350]  ABMShared.NavigateToPage(ws, ABMPageId, {275} ) 
CompChronologyPage.bas[351] End Sub 
CompChronologyPage.bas[352]  
CompChronologyPage.bas[353]  
Analysing: CompCodeLabelPage.bas
CompCodeLabelPage.bas[0] ﻿Type=Class 
CompCodeLabelPage.bas[0] Version=4.7 
CompCodeLabelPage.bas[0] ModulesStructureVersion=1 
CompCodeLabelPage.bas[0] B4J=true 
CompCodeLabelPage.bas[0] @EndOfDesignText@ 
CompCodeLabelPage.bas[1] 'Class module 
CompCodeLabelPage.bas[2] Sub Class_Globals 
CompCodeLabelPage.bas[3]  Private ws As WebSocket 'ignore 
CompCodeLabelPage.bas[4]  ' will hold our page information 
CompCodeLabelPage.bas[5]  Public page As ABMPage 
CompCodeLabelPage.bas[6]  ' page theme 
CompCodeLabelPage.bas[7]  Private theme As ABMTheme 
CompCodeLabelPage.bas[8]  ' to access the constants 
CompCodeLabelPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCodeLabelPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCodeLabelPage.bas[11]  Public Name As String = {1} 
CompCodeLabelPage.bas[12]  ' will hold the unique browsers window id 
CompCodeLabelPage.bas[13]  Private ABMPageId As String = {2} 
CompCodeLabelPage.bas[14]  
CompCodeLabelPage.bas[15]  ' your own variables 
CompCodeLabelPage.bas[16]  Dim myToastId As Int 
CompCodeLabelPage.bas[17] End Sub 
CompCodeLabelPage.bas[18]  
CompCodeLabelPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompCodeLabelPage.bas[20] Public Sub Initialize 
CompCodeLabelPage.bas[21]  ' build the local structure IMPORTANT! 
CompCodeLabelPage.bas[22]  BuildPage 
CompCodeLabelPage.bas[23] End Sub 
CompCodeLabelPage.bas[24]  
CompCodeLabelPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCodeLabelPage.bas[26]  Log( {3} ) 
CompCodeLabelPage.bas[27]  ws = WebSocket1 
CompCodeLabelPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCodeLabelPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCodeLabelPage.bas[30]  
CompCodeLabelPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompCodeLabelPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompCodeLabelPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompCodeLabelPage.bas[34]  Return 
CompCodeLabelPage.bas[35]  End If 
CompCodeLabelPage.bas[36]  End If 
CompCodeLabelPage.bas[37]  
CompCodeLabelPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCodeLabelPage.bas[39]  If page.ComesFromPageCache Then 
CompCodeLabelPage.bas[40]  ' refresh the page 
CompCodeLabelPage.bas[41]  page.Refresh 
CompCodeLabelPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCodeLabelPage.bas[43]  page.FinishedLoading 
CompCodeLabelPage.bas[44]  Else 
CompCodeLabelPage.bas[45]  ' Prepare the page 
CompCodeLabelPage.bas[46]  page.Prepare 
CompCodeLabelPage.bas[47]  ' load the dynamic content 
CompCodeLabelPage.bas[48]  ConnectPage 
CompCodeLabelPage.bas[49]  End If 
CompCodeLabelPage.bas[50]  Log(ABMPageId) 
CompCodeLabelPage.bas[51] End Sub 
CompCodeLabelPage.bas[52]  
CompCodeLabelPage.bas[53] Private Sub WebSocket_Disconnected 
CompCodeLabelPage.bas[54]  Log( {8} ) 
CompCodeLabelPage.bas[55] End Sub 
CompCodeLabelPage.bas[56]  
CompCodeLabelPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompCodeLabelPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
CompCodeLabelPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompCodeLabelPage.bas[60]  If eventName = {12} Then 
CompCodeLabelPage.bas[61]  Log( {13} ) 
CompCodeLabelPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCodeLabelPage.bas[63]  Return 
CompCodeLabelPage.bas[64]  End If 
CompCodeLabelPage.bas[65]  If SubExists(Me, eventName) Then 
CompCodeLabelPage.bas[66]  Params.Remove( {14} ) 
CompCodeLabelPage.bas[67]  Params.Remove( {15} ) 
CompCodeLabelPage.bas[68]  Select Case Params.Size 
CompCodeLabelPage.bas[69]  Case 0 
CompCodeLabelPage.bas[70]  CallSub(Me, eventName) 
CompCodeLabelPage.bas[71]  Case 1 
CompCodeLabelPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCodeLabelPage.bas[73]  Case 2 
CompCodeLabelPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompCodeLabelPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCodeLabelPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompCodeLabelPage.bas[77]  Else 
CompCodeLabelPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCodeLabelPage.bas[79]  End If 
CompCodeLabelPage.bas[80]  Case Else 
CompCodeLabelPage.bas[81]  ' cannot be called directly, to many param 
CompCodeLabelPage.bas[82]  CallSub2(Me, eventName, Params) 
CompCodeLabelPage.bas[83]  End Select 
CompCodeLabelPage.bas[84]  End If 
CompCodeLabelPage.bas[85] End Sub 
CompCodeLabelPage.bas[86]  
CompCodeLabelPage.bas[87] public Sub BuildTheme() 
CompCodeLabelPage.bas[88]  ' start with the base theme defined in ABMShared 
CompCodeLabelPage.bas[89]  theme.Initialize( {17} ) 
CompCodeLabelPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCodeLabelPage.bas[91]  
CompCodeLabelPage.bas[92]  ' add additional themes specific for this page 
CompCodeLabelPage.bas[93]  
CompCodeLabelPage.bas[94] End Sub 
CompCodeLabelPage.bas[95]  
CompCodeLabelPage.bas[96] public Sub BuildPage() 
CompCodeLabelPage.bas[97]  ' initialize the theme 
CompCodeLabelPage.bas[98]  BuildTheme 
CompCodeLabelPage.bas[99]  
CompCodeLabelPage.bas[100]  ' initialize this page using our theme 
CompCodeLabelPage.bas[101]  page.InitializeWithTheme(Name, {18} & ABMshared.AppName & {19} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCodeLabelPage.bas[102]  page.ShowLoader=True 
CompCodeLabelPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCodeLabelPage.bas[104]  page.PageTitle = {20} 
CompCodeLabelPage.bas[105]  page.PageDescription = {21} 
CompCodeLabelPage.bas[106]  page.PageHTMLName = {22} 
CompCodeLabelPage.bas[107]  page.PageKeywords = {23} 
CompCodeLabelPage.bas[108]  page.PageSiteMapPriority = {24} 
CompCodeLabelPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCodeLabelPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCodeLabelPage.bas[111]  
CompCodeLabelPage.bas[112]  ABMShared.BuildNavigationBar(page, {25} , {26} , {27} , {28} , {29} ) 
CompCodeLabelPage.bas[113]  
CompCodeLabelPage.bas[114]  ' create the page grid 
CompCodeLabelPage.bas[115]  page.AddRows(5,True, {30} ).AddCells12(1, {31} ) 
CompCodeLabelPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCodeLabelPage.bas[117]  
CompCodeLabelPage.bas[118]  ABMShared.BuildFooter(page) 
CompCodeLabelPage.bas[119] End Sub 
CompCodeLabelPage.bas[120]  
CompCodeLabelPage.bas[121] Sub ConnectPage() 
CompCodeLabelPage.bas[122]  'NEW 
CompCodeLabelPage.bas[123]  ABMShared.ConnectNavigationBar(page) 
CompCodeLabelPage.bas[124]  ' add paragraph 
CompCodeLabelPage.bas[125]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {32} , {33} ) ) 
CompCodeLabelPage.bas[126]  ' add paragraph 
CompCodeLabelPage.bas[127]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} ) ) 
CompCodeLabelPage.bas[128]  
CompCodeLabelPage.bas[129]  ' add codeblock 
CompCodeLabelPage.bas[130]  Dim code1 As StringBuilder 
CompCodeLabelPage.bas[131]  code1.Initialize 
CompCodeLabelPage.bas[132]  code1.Append( {36} ).Append(CRLF) 
CompCodeLabelPage.bas[133]  code1.Append( {37} ).Append(CRLF) 
CompCodeLabelPage.bas[134]  code1.Append( {38} ).Append(CRLF) 
CompCodeLabelPage.bas[135]  code1.Append( {81} ).Append(CRLF) 
CompCodeLabelPage.bas[136]  code1.Append( {89} ).Append(CRLF) 
CompCodeLabelPage.bas[137]  code1.Append( {91} ).Append(CRLF) 
CompCodeLabelPage.bas[138]  code1.Append( {93} ).Append(CRLF) 
CompCodeLabelPage.bas[139]  code1.Append( {95} ).Append(CRLF) 
CompCodeLabelPage.bas[140]  
CompCodeLabelPage.bas[141]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlock(page, {60} , code1)) 
CompCodeLabelPage.bas[142]  
CompCodeLabelPage.bas[143]  ' add codeblock 
CompCodeLabelPage.bas[144]  Dim code4 As StringBuilder 
CompCodeLabelPage.bas[145]  code4.Initialize 
CompCodeLabelPage.bas[146]  code4.Append( {61} ).Append(CRLF) 
CompCodeLabelPage.bas[147]  code4.Append( {62} ).Append(CRLF) 
CompCodeLabelPage.bas[151]  code4.Append( {97} ).Append(CRLF) 
CompCodeLabelPage.bas[152]  
CompCodeLabelPage.bas[153]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {66} , code4)) 
CompCodeLabelPage.bas[154]  
CompCodeLabelPage.bas[155]  ' also add the components to the footer 
CompCodeLabelPage.bas[156]  ABMShared.ConnectFooter(page) 
CompCodeLabelPage.bas[157]  
CompCodeLabelPage.bas[158]  page.Refresh ' IMPORTANT 
CompCodeLabelPage.bas[159]  
CompCodeLabelPage.bas[160]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCodeLabelPage.bas[161]  page.FinishedLoading 'IMPORTANT 
CompCodeLabelPage.bas[162]  
CompCodeLabelPage.bas[163]  page.RestoreNavigationBarPosition 
CompCodeLabelPage.bas[164] End Sub 
CompCodeLabelPage.bas[165]  
CompCodeLabelPage.bas[166] ' clicked on the navigation bar 
CompCodeLabelPage.bas[167] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCodeLabelPage.bas[168]  page.SaveNavigationBarPosition 
CompCodeLabelPage.bas[169]  If Action = {67} Then Return 
CompCodeLabelPage.bas[170]  If Action = {68} Then 
CompCodeLabelPage.bas[171]  myToastId = myToastId + 1 
CompCodeLabelPage.bas[172]  page.ShowToast( {69} & myToastId, {70} , {71} , 5000) 
CompCodeLabelPage.bas[173]  Return 
CompCodeLabelPage.bas[174]  End If 
CompCodeLabelPage.bas[175]  If Action = {72} Then 
CompCodeLabelPage.bas[176]  ABMShared.LogOff(page) 
CompCodeLabelPage.bas[177]  Return 
CompCodeLabelPage.bas[178]  End If 
CompCodeLabelPage.bas[179]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCodeLabelPage.bas[180] End Sub 
CompCodeLabelPage.bas[181]  
CompCodeLabelPage.bas[182] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCodeLabelPage.bas[183]  page.ws.Session.SetAttribute( {73} , {74} ) 
CompCodeLabelPage.bas[184]  page.ws.Session.SetAttribute( {75} , {76} ) 
CompCodeLabelPage.bas[185]  page.ws.Session.SetAttribute( {77} , {78} ) 
CompCodeLabelPage.bas[186]  ABMShared.NavigateToPage(ws, ABMPageId, {79} ) 
CompCodeLabelPage.bas[187] End Sub 
Analysing: CompComboPage.bas
CompComboPage.bas[0] ﻿Type=Class 
CompComboPage.bas[0] Version=4.7 
CompComboPage.bas[0] ModulesStructureVersion=1 
CompComboPage.bas[0] B4J=true 
CompComboPage.bas[0] @EndOfDesignText@ 
CompComboPage.bas[1] 'Class module 
CompComboPage.bas[2] Sub Class_Globals 
CompComboPage.bas[3]  Private ws As WebSocket 'ignore 
CompComboPage.bas[4]  ' will hold our page information 
CompComboPage.bas[5]  Public page As ABMPage 
CompComboPage.bas[6]  ' page theme 
CompComboPage.bas[7]  Private theme As ABMTheme 
CompComboPage.bas[8]  ' to access the constants 
CompComboPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompComboPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompComboPage.bas[11]  Public Name As String = {0} 
CompComboPage.bas[12]  ' will hold the unique browsers window id 
CompComboPage.bas[13]  Private ABMPageId As String = {1} 
CompComboPage.bas[14]  
CompComboPage.bas[15]  ' your own variables 
CompComboPage.bas[16]  Dim myToastId As Int 
CompComboPage.bas[17]  Dim combocounter As Int = 4 
CompComboPage.bas[18] End Sub 
CompComboPage.bas[19]  
CompComboPage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompComboPage.bas[21] Public Sub Initialize 
CompComboPage.bas[22]  ' build the local structure IMPORTANT! 
CompComboPage.bas[23]  BuildPage 
CompComboPage.bas[24] End Sub 
CompComboPage.bas[25]  
CompComboPage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompComboPage.bas[27]  Log( {2} ) 
CompComboPage.bas[28]  ws = WebSocket1 
CompComboPage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompComboPage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompComboPage.bas[31]  
CompComboPage.bas[32]  If ABMShared.NeedsAuthorization Then 
CompComboPage.bas[33]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompComboPage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompComboPage.bas[35]  Return 
CompComboPage.bas[36]  End If 
CompComboPage.bas[37]  End If 
CompComboPage.bas[38]  
CompComboPage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompComboPage.bas[40]  If page.ComesFromPageCache Then 
CompComboPage.bas[41]  ' refresh the page 
CompComboPage.bas[42]  page.Refresh 
CompComboPage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompComboPage.bas[44]  page.FinishedLoading 
CompComboPage.bas[45]  Else 
CompComboPage.bas[46]  ' Prepare the page 
CompComboPage.bas[47]  page.Prepare 
CompComboPage.bas[48]  ' load the dynamic content 
CompComboPage.bas[49]  ConnectPage 
CompComboPage.bas[50]  End If 
CompComboPage.bas[51]  Log(ABMPageId) 
CompComboPage.bas[52] End Sub 
CompComboPage.bas[53]  
CompComboPage.bas[54] Private Sub WebSocket_Disconnected 
CompComboPage.bas[55]  Log( {7} ) 
CompComboPage.bas[56] End Sub 
CompComboPage.bas[57]  
CompComboPage.bas[58] Sub Page_ParseEvent(Params As Map) 
CompComboPage.bas[59]  Dim eventName As String = Params.Get( {8} ) 
CompComboPage.bas[60]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompComboPage.bas[61]  If eventName = {11} Then 
CompComboPage.bas[62]  Log( {12} ) 
CompComboPage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompComboPage.bas[64]  Return 
CompComboPage.bas[65]  End If 
CompComboPage.bas[66]  If SubExists(Me, eventName) Then 
CompComboPage.bas[67]  Params.Remove( {13} ) 
CompComboPage.bas[68]  Params.Remove( {14} ) 
CompComboPage.bas[69]  Select Case Params.Size 
CompComboPage.bas[70]  Case 0 
CompComboPage.bas[71]  CallSub(Me, eventName) 
CompComboPage.bas[72]  Case 1 
CompComboPage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompComboPage.bas[74]  Case 2 
CompComboPage.bas[75]  If Params.get(eventParams(0)) = {15} Then 
CompComboPage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompComboPage.bas[77]  CallSub2(Me, eventName, PassedTables) 
CompComboPage.bas[78]  Else 
CompComboPage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompComboPage.bas[80]  End If 
CompComboPage.bas[81]  Case Else 
CompComboPage.bas[82]  ' cannot be called directly, to many param 
CompComboPage.bas[83]  CallSub2(Me, eventName, Params) 
CompComboPage.bas[84]  End Select 
CompComboPage.bas[85]  End If 
CompComboPage.bas[86] End Sub 
CompComboPage.bas[87]  
CompComboPage.bas[88] public Sub BuildTheme() 
CompComboPage.bas[89]  ' start with the base theme defined in ABMShared 
CompComboPage.bas[90]  theme.Initialize( {16} ) 
CompComboPage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
CompComboPage.bas[92]  
CompComboPage.bas[93]  ' add additional themes specific for this page 
CompComboPage.bas[94]  theme.AddLabelTheme( {17} ) 
CompComboPage.bas[95]  theme.Label( {18} ).ForeColor = ABM.COLOR_LIGHTBLUE 
CompComboPage.bas[96] End Sub 
CompComboPage.bas[97]  
CompComboPage.bas[98] public Sub BuildPage() 
CompComboPage.bas[99]  ' initialize the theme 
CompComboPage.bas[100]  BuildTheme 
CompComboPage.bas[101]  
CompComboPage.bas[102]  ' initialize this page using our theme 
CompComboPage.bas[103]  page.InitializeWithTheme(Name, {19} & ABMShared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompComboPage.bas[104]  page.ShowLoader=True 
CompComboPage.bas[105]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompComboPage.bas[106]  page.PageTitle = {21} 
CompComboPage.bas[107]  page.PageDescription = {22} 
CompComboPage.bas[108]  page.PageHTMLName = {23} 
CompComboPage.bas[109]  page.PageKeywords = {24} 
CompComboPage.bas[110]  page.PageSiteMapPriority = {25} 
CompComboPage.bas[111]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompComboPage.bas[112]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompComboPage.bas[113]  
CompComboPage.bas[114]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompComboPage.bas[115]  
CompComboPage.bas[116]  ' create the page grid 
CompComboPage.bas[117]  page.AddRows(5,True, {31} ).AddCells12(1, {32} ) 
CompComboPage.bas[118]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompComboPage.bas[119]  
CompComboPage.bas[120]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompComboPage.bas[121]  'page.NeedsCodeLabel = True 
CompComboPage.bas[122]  
CompComboPage.bas[123]  ABMShared.BuildFooter(page) 
CompComboPage.bas[124] End Sub 
CompComboPage.bas[125]  
CompComboPage.bas[126] Sub ConnectPage() 
CompComboPage.bas[127]  'NEW 
CompComboPage.bas[128]  ABMShared.ConnectNavigationBar(page) 
CompComboPage.bas[129]  
CompComboPage.bas[130]  ' add paragraph 
CompComboPage.bas[131]  page.cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} ) ) 
CompComboPage.bas[132]  
CompComboPage.bas[133]  ' create combo 
CompComboPage.bas[134]  Dim combo1 As ABMCombo 
CompComboPage.bas[135]  combo1.Initialize(page, {35} , {36} , 650, {37} ) 
CompComboPage.bas[136]  combo1.Valid = ABM.VALID_FALSE 
CompComboPage.bas[137]  combo1.PlaceHolderText = {38} 
CompComboPage.bas[138]  combo1.WrongMessage = {39} 
CompComboPage.bas[139]  combo1.IconName = {40} 
CompComboPage.bas[140]  
CompComboPage.bas[141]  ' add items 
CompComboPage.bas[142]  combo1.AddItem( {41} , {42} , BuildSimpleItem( {43} , {44} , {45} )) 
CompComboPage.bas[143]  combo1.AddItem( {46} , {47} , BuildSimpleItem( {48} , {49} , {50} )) 
CompComboPage.bas[144]  combo1.AddItem( {51} , {52} , BuildSimpleItem( {53} , {54} , {55} )) 
CompComboPage.bas[145]  combo1.AddItem( {56} , {57} , BuildSimpleItem( {58} , {59} , {60} )) 
CompComboPage.bas[146]  
CompComboPage.bas[147]  page.cell(2,1).AddComponent(combo1) 
CompComboPage.bas[148]  
CompComboPage.bas[149]  Dim btn As ABMButton 
CompComboPage.bas[150]  btn.InitializeRaised(page , {61} , {62} , {63} , {64} , {65} ) 
CompComboPage.bas[151]  page.Cell(3,1).AddComponent(btn) 
CompComboPage.bas[152]  
CompComboPage.bas[153]  
CompComboPage.bas[154]  ' add codeblock 
CompComboPage.bas[155]  Dim code As StringBuilder 
CompComboPage.bas[156]  code.Initialize 
CompComboPage.bas[157]  code.Append( {66} ).Append(CRLF) 
CompComboPage.bas[158]  code.Append( {67} ).Append(CRLF) 
CompComboPage.bas[159]  code.Append( {200} ).Append(CRLF) 
CompComboPage.bas[160]  code.Append( {202} ).Append(CRLF) 
CompComboPage.bas[161]  code.Append( {78} ).Append(CRLF) 
CompComboPage.bas[162]  code.Append( {79} ).Append(CRLF) 
CompComboPage.bas[163]  code.Append( {212} ).Append(CRLF) 
CompComboPage.bas[164]  code.Append( {222} ).Append(CRLF) 
CompComboPage.bas[165]  code.Append( {232} ).Append(CRLF) 
CompComboPage.bas[166]  code.Append( {242} ).Append(CRLF) 
CompComboPage.bas[167]  code.Append( {124} ).Append(CRLF) 
CompComboPage.bas[168]  code.Append( {125} ).Append(CRLF) 
CompComboPage.bas[169]  
CompComboPage.bas[170]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {126} , code)) 
CompComboPage.bas[171]  
CompComboPage.bas[172]  ' add paragraph 
CompComboPage.bas[173]  page.cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {127} , {128} ) ) 
CompComboPage.bas[174]  
CompComboPage.bas[175]  ' create combo 
CompComboPage.bas[176]  Dim combo2 As ABMCombo 
CompComboPage.bas[177]  combo2.Initialize(page, {129} , {130} , 650, {131} ) 
CompComboPage.bas[178]  combo2.IconName = {132} 
CompComboPage.bas[179]  
CompComboPage.bas[180]  ' add items 
CompComboPage.bas[181]  combo2.AddItem( {133} , {134} , BuildItem( {135} , {136} , {137} , {138} )) 
CompComboPage.bas[182]  combo2.AddItem( {139} , {140} , BuildItem( {141} , {142} , {143} , {144} )) 
CompComboPage.bas[183]  combo2.AddItem( {145} , {146} , BuildItem( {147} , {148} , {149} , {150} )) 
CompComboPage.bas[184]  combo2.AddItem( {151} , {152} , BuildItem( {153} , {154} , {155} , {156} )) 
CompComboPage.bas[185]  
CompComboPage.bas[186]  page.cell(5,1).AddComponent(combo2) 
CompComboPage.bas[187]  
CompComboPage.bas[188]  ' also add the components to the footer 
CompComboPage.bas[189]  ABMShared.ConnectFooter(page) 
CompComboPage.bas[190]  
CompComboPage.bas[191]  page.Refresh ' IMPORTANT 
CompComboPage.bas[192]  
CompComboPage.bas[193]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompComboPage.bas[194]  page.FinishedLoading 'IMPORTANT 
CompComboPage.bas[195]  
CompComboPage.bas[196]  page.RestoreNavigationBarPosition 
CompComboPage.bas[197] End Sub 
CompComboPage.bas[198]  
CompComboPage.bas[199] Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
CompComboPage.bas[200]  Dim lbl As ABMLabel 
CompComboPage.bas[201]  If icon <> {157} Then 
CompComboPage.bas[202]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {158} ) 
CompComboPage.bas[203]  Else 
CompComboPage.bas[204]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {159} ) 
CompComboPage.bas[205]  End If 
CompComboPage.bas[206]  lbl.VerticalAlign = True 
CompComboPage.bas[207]  lbl.IconName = icon 
CompComboPage.bas[208]  Return lbl 
CompComboPage.bas[209] End Sub 
CompComboPage.bas[210]  
CompComboPage.bas[211] Sub BuildItem(id As String, image As String, Title As String, Subtitle As String) As ABMContainer 
CompComboPage.bas[212]  Dim ItemCont As ABMContainer 
CompComboPage.bas[213]  ItemCont.Initialize(page, id, {160} ) 
CompComboPage.bas[214]  ItemCont.AddRowsM(1,False,6,0, {161} ).AddCellsOSMP(1,0,0,0,3,2,2,0,0,16,0, {162} ).AddCellsOS(1,0,0,0,9,10,10, {163} ) 
CompComboPage.bas[215]  ItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompComboPage.bas[216]  
CompComboPage.bas[217]  Dim SubItemCont As ABMContainer 
CompComboPage.bas[218]  SubItemCont.Initialize(page, id & {164} , {165} ) 
CompComboPage.bas[219]  SubItemCont.AddRowsM(1,False, 0,0, {166} ).AddCells12MP(1,-6,0,0,0, {167} ).AddCells12(1, {168} ) 
CompComboPage.bas[220]  SubItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompComboPage.bas[221]  
CompComboPage.bas[222]  ItemCont.Cell(1,2).AddComponent(SubItemCont) 
CompComboPage.bas[223]  
CompComboPage.bas[224]  Dim img As ABMImage 
CompComboPage.bas[225]  img.Initialize(page, id & {169} , image, 1) 
CompComboPage.bas[226]  img.SetFixedSize(48,48) 
CompComboPage.bas[227]  img.IsCircular = True 
CompComboPage.bas[228]  img.IsResponsive = True 
CompComboPage.bas[229]  
CompComboPage.bas[230]  ItemCont.Cell(1,1).AddComponent(img) 
CompComboPage.bas[231]  
CompComboPage.bas[232]  Dim lbl1 As ABMLabel 
CompComboPage.bas[233]  lbl1.Initialize(page, id & {170} , Title, ABM.SIZE_H6, False, {171} ) 
CompComboPage.bas[234]  lbl1.VerticalAlign = True 
CompComboPage.bas[235]  
CompComboPage.bas[236]  SubItemCont.Cell(1,1).AddComponent(lbl1) 
CompComboPage.bas[237]  
CompComboPage.bas[238]  Dim lbl2 As ABMLabel 
CompComboPage.bas[239]  lbl2.Initialize(page, id & {172} , Subtitle, ABM.SIZE_H6, False, {173} ) 
CompComboPage.bas[240]  lbl2.VerticalAlign = True 
CompComboPage.bas[241]  
CompComboPage.bas[242]  SubItemCont.Cell(1,2).AddComponent(lbl2) 
CompComboPage.bas[243]  
CompComboPage.bas[244]  Return ItemCont 
CompComboPage.bas[245] End Sub 
CompComboPage.bas[246]  
CompComboPage.bas[247] ' clicked on the navigation bar 
CompComboPage.bas[248] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompComboPage.bas[249]  page.SaveNavigationBarPosition 
CompComboPage.bas[250]  If Action = {174} Then Return 
CompComboPage.bas[251]  If Action = {175} Then 
CompComboPage.bas[252]  myToastId = myToastId + 1 
CompComboPage.bas[253]  page.ShowToast( {176} & myToastId, {177} , {178} , 5000) 
CompComboPage.bas[254]  Return 
CompComboPage.bas[255]  End If 
CompComboPage.bas[256]  If Action = {179} Then 
CompComboPage.bas[257]  ABMShared.LogOff(page) 
CompComboPage.bas[258]  Return 
CompComboPage.bas[259]  End If 
CompComboPage.bas[260]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompComboPage.bas[261] End Sub 
CompComboPage.bas[262]  
CompComboPage.bas[263] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompComboPage.bas[264]  page.ws.Session.SetAttribute( {180} , {181} ) 
CompComboPage.bas[265]  page.ws.Session.SetAttribute( {182} , {183} ) 
CompComboPage.bas[266]  page.ws.Session.SetAttribute( {184} , {185} ) 
CompComboPage.bas[267]  ABMShared.NavigateToPage(ws, ABMPageId, {186} ) 
CompComboPage.bas[268] End Sub 
CompComboPage.bas[269]  
CompComboPage.bas[270] Sub btn_Clicked(Target As String) 
CompComboPage.bas[271]  Dim combo1 As ABMCombo = page.Component( {187} ) 
CompComboPage.bas[272]  combocounter = combocounter + 1 
CompComboPage.bas[273]  combo1.AddItem( {188} & combocounter, {189} & combocounter, BuildSimpleItem( {190} & combocounter, {191} , {192} & combocounter)) 
CompComboPage.bas[274]  combo1.SetActiveItemId( {193} & combocounter) 
CompComboPage.bas[275]  combo1.Refresh 
CompComboPage.bas[276] End Sub 
CompComboPage.bas[277]  
CompComboPage.bas[278] Sub combo1_Clicked(itemId As String) 
CompComboPage.bas[279]  Log(itemId) 
CompComboPage.bas[280]  Dim combo1 As ABMCombo = page.Component( {194} ) 
CompComboPage.bas[281]  Log(combo1.GetActiveItemId) 
CompComboPage.bas[282] End Sub 
Analysing: CompCustomCompPage.bas
CompCustomCompPage.bas[0] ﻿Type=Class 
CompCustomCompPage.bas[0] Version=4.7 
CompCustomCompPage.bas[0] ModulesStructureVersion=1 
CompCustomCompPage.bas[0] B4J=true 
CompCustomCompPage.bas[0] @EndOfDesignText@ 
CompCustomCompPage.bas[1] 'Class module 
CompCustomCompPage.bas[2] Sub Class_Globals 
CompCustomCompPage.bas[3]  Private ws As WebSocket 'ignore 
CompCustomCompPage.bas[4]  ' will hold our page information 
CompCustomCompPage.bas[5]  Public page As ABMPage 
CompCustomCompPage.bas[6]  ' page theme 
CompCustomCompPage.bas[7]  Private theme As ABMTheme 
CompCustomCompPage.bas[8]  ' to access the constants 
CompCustomCompPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompCustomCompPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompCustomCompPage.bas[11]  Public Name As String = {3} 
CompCustomCompPage.bas[12]  ' will hold the unique browsers window id 
CompCustomCompPage.bas[13]  Private ABMPageId As String = {4} 
CompCustomCompPage.bas[14]  
CompCustomCompPage.bas[15]  ' your own variables 
CompCustomCompPage.bas[16]  Dim myToastId As Int 
CompCustomCompPage.bas[17] End Sub 
CompCustomCompPage.bas[18]  
CompCustomCompPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompCustomCompPage.bas[20] Public Sub Initialize 
CompCustomCompPage.bas[21]  ' build the local structure IMPORTANT! 
CompCustomCompPage.bas[22]  BuildPage 
CompCustomCompPage.bas[23] End Sub 
CompCustomCompPage.bas[24]  
CompCustomCompPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompCustomCompPage.bas[26]  Log( {5} ) 
CompCustomCompPage.bas[27]  ws = WebSocket1 
CompCustomCompPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompCustomCompPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompCustomCompPage.bas[30]  
CompCustomCompPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompCustomCompPage.bas[32]  If session.GetAttribute2( {6} , {7} ) = {8} Then 
CompCustomCompPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {9} ) 
CompCustomCompPage.bas[34]  Return 
CompCustomCompPage.bas[35]  End If 
CompCustomCompPage.bas[36]  End If 
CompCustomCompPage.bas[37]  
CompCustomCompPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompCustomCompPage.bas[39]  If page.ComesFromPageCache Then 
CompCustomCompPage.bas[40]  ' refresh the page 
CompCustomCompPage.bas[41]  page.Refresh 
CompCustomCompPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCustomCompPage.bas[43]  page.FinishedLoading 
CompCustomCompPage.bas[44]  Else 
CompCustomCompPage.bas[45]  ' Prepare the page 
CompCustomCompPage.bas[46]  page.Prepare 
CompCustomCompPage.bas[47]  ' load the dynamic content 
CompCustomCompPage.bas[48]  ConnectPage 
CompCustomCompPage.bas[49]  End If 
CompCustomCompPage.bas[50]  Log(ABMPageId) 
CompCustomCompPage.bas[51] End Sub 
CompCustomCompPage.bas[52]  
CompCustomCompPage.bas[53] Private Sub WebSocket_Disconnected 
CompCustomCompPage.bas[54]  Log( {10} ) 
CompCustomCompPage.bas[55] End Sub 
CompCustomCompPage.bas[56]  
CompCustomCompPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompCustomCompPage.bas[58]  Dim eventName As String = Params.Get( {11} ) 
CompCustomCompPage.bas[59]  Dim eventParams() As String = Regex.Split( {12} ,Params.Get( {13} )) 
CompCustomCompPage.bas[60]  If eventName = {14} Then 
CompCustomCompPage.bas[61]  Log( {15} ) 
CompCustomCompPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompCustomCompPage.bas[63]  Return 
CompCustomCompPage.bas[64]  End If 
CompCustomCompPage.bas[65]  If SubExists(Me, eventName) Then 
CompCustomCompPage.bas[66]  Params.Remove( {16} ) 
CompCustomCompPage.bas[67]  Params.Remove( {17} ) 
CompCustomCompPage.bas[68]  Select Case Params.Size 
CompCustomCompPage.bas[69]  Case 0 
CompCustomCompPage.bas[70]  CallSub(Me, eventName) 
CompCustomCompPage.bas[71]  Case 1 
CompCustomCompPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompCustomCompPage.bas[73]  Case 2 
CompCustomCompPage.bas[74]  If Params.get(eventParams(0)) = {18} Then 
CompCustomCompPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompCustomCompPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompCustomCompPage.bas[77]  Else 
CompCustomCompPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompCustomCompPage.bas[79]  End If 
CompCustomCompPage.bas[80]  Case Else 
CompCustomCompPage.bas[81]  ' cannot be called directly, to many param 
CompCustomCompPage.bas[82]  CallSub2(Me, eventName, Params) 
CompCustomCompPage.bas[83]  End Select 
CompCustomCompPage.bas[84]  End If 
CompCustomCompPage.bas[85] End Sub 
CompCustomCompPage.bas[86]  
CompCustomCompPage.bas[87] public Sub BuildTheme() 
CompCustomCompPage.bas[88]  ' start with the base theme defined in ABMShared 
CompCustomCompPage.bas[89]  theme.Initialize( {19} ) 
CompCustomCompPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompCustomCompPage.bas[91]  
CompCustomCompPage.bas[92]  ' add additional themes specific for this page 
CompCustomCompPage.bas[93]  theme.AddCellTheme( {20} ) 
CompCustomCompPage.bas[94]  theme.Cell( {21} ).Align = ABM.CELL_ALIGN_CENTER 
CompCustomCompPage.bas[95] End Sub 
CompCustomCompPage.bas[96]  
CompCustomCompPage.bas[97] public Sub BuildPage() 
CompCustomCompPage.bas[98]  ' initialize the theme 
CompCustomCompPage.bas[99]  BuildTheme 
CompCustomCompPage.bas[100]  
CompCustomCompPage.bas[101]  ' initialize this page using our theme 
CompCustomCompPage.bas[102]  page.InitializeWithTheme(Name, {22} & ABMshared.AppName & {23} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompCustomCompPage.bas[103]  page.ShowLoader=True 
CompCustomCompPage.bas[104]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompCustomCompPage.bas[105]  page.PageTitle = {24} 
CompCustomCompPage.bas[106]  page.PageDescription = {25} 
CompCustomCompPage.bas[107]  page.PageHTMLName = {26} 
CompCustomCompPage.bas[108]  page.PageKeywords = {27} 
CompCustomCompPage.bas[109]  page.PageSiteMapPriority = {28} 
CompCustomCompPage.bas[110]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompCustomCompPage.bas[111]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompCustomCompPage.bas[112]  
CompCustomCompPage.bas[113]  ABMShared.BuildNavigationBar(page, {29} , {30} , {31} , {32} , {33} ) 
CompCustomCompPage.bas[114]  
CompCustomCompPage.bas[115]  ' create the page grid 
CompCustomCompPage.bas[116]  page.AddRows(1,True, {34} ).AddCells12(1, {35} ) 
CompCustomCompPage.bas[117]  page.AddRows(1,True, {36} ).AddCells12(1, {37} ) 
CompCustomCompPage.bas[118]  page.AddRows(14,True, {38} ).AddCells12(1, {39} ) 
CompCustomCompPage.bas[119]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompCustomCompPage.bas[120]  
CompCustomCompPage.bas[121]  ' we need extra javascript files and CSSfiles, they need to be added in the BuildPage() method! 
CompCustomCompPage.bas[122]  page.AddExtraJavaScriptFile( {40} ) 
CompCustomCompPage.bas[123]  page.AddExtraJavaScriptFile( {41} ) 
CompCustomCompPage.bas[124]  page.AddExtraCSSFile( {42} ) 
CompCustomCompPage.bas[125]  
CompCustomCompPage.bas[126]  ABMShared.BuildFooter(page) 
CompCustomCompPage.bas[127] End Sub 
CompCustomCompPage.bas[128]  
CompCustomCompPage.bas[129] Sub ConnectPage() 
CompCustomCompPage.bas[130]  'NEW 
CompCustomCompPage.bas[131]  ABMShared.ConnectNavigationBar(page) 
CompCustomCompPage.bas[132]  
CompCustomCompPage.bas[133]  ' add paragraph 
CompCustomCompPage.bas[134]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {43} , {44} )) 
CompCustomCompPage.bas[135]  
CompCustomCompPage.bas[136]  Dim custSlider As CustomSlidebar 
CompCustomCompPage.bas[137]  custSlider.Initialize(page, {45} , 25) 
CompCustomCompPage.bas[138]  page.Cell(2,1).AddComponent(custSlider.ABMComp) 
CompCustomCompPage.bas[139]  
CompCustomCompPage.bas[140]  ' add paragraph 
CompCustomCompPage.bas[141]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} )) 
CompCustomCompPage.bas[142]  ' add paragraph 
CompCustomCompPage.bas[143]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {48} , {49} )) 
CompCustomCompPage.bas[144]  
CompCustomCompPage.bas[145]  Dim code1 As String = {0} 
CompCustomCompPage.bas[148]  
CompCustomCompPage.bas[149]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {50} , code1)) 
CompCustomCompPage.bas[150]  
CompCustomCompPage.bas[151]  ' add paragraph 
CompCustomCompPage.bas[152]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {51} , {52} )) 
CompCustomCompPage.bas[153]  
CompCustomCompPage.bas[154]  Dim code3 As String = {1} 
CompCustomCompPage.bas[156]  
CompCustomCompPage.bas[157]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {53} , code3)) 
CompCustomCompPage.bas[158]  
CompCustomCompPage.bas[159]  ' add paragraph 
CompCustomCompPage.bas[160]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} )) 
CompCustomCompPage.bas[161]  
CompCustomCompPage.bas[162]  Dim Headers, codes, Descriptions As List 
CompCustomCompPage.bas[163]  Headers.Initialize2(Array As String( {56} , {57} )) 
CompCustomCompPage.bas[164]  codes.Initialize2(Array As String( {58} , {59} , {60} , {61} )) 
CompCustomCompPage.bas[165]  Descriptions.Initialize2(Array As String( {62} , {63} , {64} , {65} )) 
CompCustomCompPage.bas[166]  page.Cell(8,1).AddComponent(ABMShared.BuildParamTable(page, {66} , Headers, codes, Descriptions)) 
CompCustomCompPage.bas[167]  
CompCustomCompPage.bas[168]  ' add paragraph 
CompCustomCompPage.bas[169]  page.Cell(9,1).AddComponent(ABMShared.BuildParagraph(page, {67} , {68} )) 
CompCustomCompPage.bas[170]  ' add paragraph 
CompCustomCompPage.bas[171]  page.Cell(9,1).AddComponent(ABMShared.BuildParagraph(page, {69} , {70} )) 
CompCustomCompPage.bas[172]  
CompCustomCompPage.bas[173]  Dim code2 As String = {2} 
CompCustomCompPage.bas[176]  
CompCustomCompPage.bas[177]  page.Cell(10,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {71} , code2)) 
CompCustomCompPage.bas[178]  
CompCustomCompPage.bas[179]  ' add paragraph 
CompCustomCompPage.bas[180]  page.Cell(11, 1).AddComponent(ABMShared.BuildParagraph(page, {72} , {73} )) 
CompCustomCompPage.bas[181]  
CompCustomCompPage.bas[182]  Headers.Initialize2(Array As String( {74} , {75} )) 
CompCustomCompPage.bas[183]  codes.Initialize2(Array As String( {76} , {77} , {78} , {79} , {80} , {81} , {82} , {83} , {84} , {85} , {86} )) 
CompCustomCompPage.bas[184]  Descriptions.Initialize2(Array As String( {87} , {88} , {89} , {90} , {91} , {92} , {93} , {94} , {95} , {96} , {97} )) 
CompCustomCompPage.bas[185]  page.Cell(12,1).AddComponent(ABMShared.BuildParamTable(page, {98} , Headers, codes, Descriptions)) 
CompCustomCompPage.bas[186]  
CompCustomCompPage.bas[187]  ' add paragraph 
CompCustomCompPage.bas[188]  page.Cell(13, 1).AddComponent(ABMShared.BuildParagraph(page, {99} , {100} )) 
CompCustomCompPage.bas[189]  
CompCustomCompPage.bas[190]  ' also add the components to the footer 
CompCustomCompPage.bas[191]  ABMShared.ConnectFooter(page) 
CompCustomCompPage.bas[192]  
CompCustomCompPage.bas[193]  page.Refresh ' IMPORTANT 
CompCustomCompPage.bas[194]  
CompCustomCompPage.bas[195]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompCustomCompPage.bas[196]  page.FinishedLoading 'IMPORTANT 
CompCustomCompPage.bas[197]  
CompCustomCompPage.bas[198]  page.RestoreNavigationBarPosition 
CompCustomCompPage.bas[199] End Sub 
CompCustomCompPage.bas[200]  
CompCustomCompPage.bas[201] Sub custSlider_Changed(Params As Map) 
CompCustomCompPage.bas[202]  Log( {101} ) 
CompCustomCompPage.bas[203]  myToastId = myToastId + 1 
CompCustomCompPage.bas[204]  page.ShowToast( {102} & myToastId, {103} , {104} & Params.Get( {105} ), 5000) 
CompCustomCompPage.bas[205] End Sub 
CompCustomCompPage.bas[206]  
CompCustomCompPage.bas[207] ' clicked on the navigation bar 
CompCustomCompPage.bas[208] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompCustomCompPage.bas[209]  page.SaveNavigationBarPosition 
CompCustomCompPage.bas[210]  If Action = {106} Then Return 
CompCustomCompPage.bas[211]  If Action = {107} Then 
CompCustomCompPage.bas[212]  myToastId = myToastId + 1 
CompCustomCompPage.bas[213]  page.ShowToast( {108} & myToastId, {109} , {110} , 5000) 
CompCustomCompPage.bas[214]  Return 
CompCustomCompPage.bas[215]  End If 
CompCustomCompPage.bas[216]  If Action = {111} Then 
CompCustomCompPage.bas[217]  ABMShared.LogOff(page) 
CompCustomCompPage.bas[218]  Return 
CompCustomCompPage.bas[219]  End If 
CompCustomCompPage.bas[220]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompCustomCompPage.bas[221] End Sub 
CompCustomCompPage.bas[222]  
CompCustomCompPage.bas[223] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompCustomCompPage.bas[224]  page.ws.Session.SetAttribute( {112} , {113} ) 
CompCustomCompPage.bas[225]  page.ws.Session.SetAttribute( {114} , {115} ) 
CompCustomCompPage.bas[226]  page.ws.Session.SetAttribute( {116} , {117} ) 
CompCustomCompPage.bas[227]  ABMShared.NavigateToPage(ws, ABMPageId, {118} ) 
CompCustomCompPage.bas[228] End Sub 
Analysing: CompDateTimePickerPage.bas
CompDateTimePickerPage.bas[0] ﻿Type=Class 
CompDateTimePickerPage.bas[0] Version=4.7 
CompDateTimePickerPage.bas[0] ModulesStructureVersion=1 
CompDateTimePickerPage.bas[0] B4J=true 
CompDateTimePickerPage.bas[0] @EndOfDesignText@ 
CompDateTimePickerPage.bas[1] 'Class module 
CompDateTimePickerPage.bas[2] Sub Class_Globals 
CompDateTimePickerPage.bas[3]  Private ws As WebSocket 'ignore 
CompDateTimePickerPage.bas[4]  ' will hold our page information 
CompDateTimePickerPage.bas[5]  Public page As ABMPage 
CompDateTimePickerPage.bas[6]  ' page theme 
CompDateTimePickerPage.bas[7]  Private theme As ABMTheme 
CompDateTimePickerPage.bas[8]  ' to access the constants 
CompDateTimePickerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompDateTimePickerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompDateTimePickerPage.bas[11]  Public Name As String = {2} 
CompDateTimePickerPage.bas[12]  ' will hold the unique browsers window id 
CompDateTimePickerPage.bas[13]  Private ABMPageId As String = {3} 
CompDateTimePickerPage.bas[14]  
CompDateTimePickerPage.bas[15]  ' your own variables 
CompDateTimePickerPage.bas[16]  Dim myToastId As Int 
CompDateTimePickerPage.bas[17] End Sub 
CompDateTimePickerPage.bas[18]  
CompDateTimePickerPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompDateTimePickerPage.bas[20] Public Sub Initialize 
CompDateTimePickerPage.bas[21]  ' build the local structure IMPORTANT! 
CompDateTimePickerPage.bas[22]  BuildPage 
CompDateTimePickerPage.bas[23] End Sub 
CompDateTimePickerPage.bas[24]  
CompDateTimePickerPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompDateTimePickerPage.bas[26]  Log( {4} ) 
CompDateTimePickerPage.bas[27]  ws = WebSocket1 
CompDateTimePickerPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompDateTimePickerPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompDateTimePickerPage.bas[30]  
CompDateTimePickerPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompDateTimePickerPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompDateTimePickerPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompDateTimePickerPage.bas[34]  Return 
CompDateTimePickerPage.bas[35]  End If 
CompDateTimePickerPage.bas[36]  End If 
CompDateTimePickerPage.bas[37]  
CompDateTimePickerPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompDateTimePickerPage.bas[39]  If page.ComesFromPageCache Then 
CompDateTimePickerPage.bas[40]  ' refresh the page 
CompDateTimePickerPage.bas[41]  page.Refresh 
CompDateTimePickerPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDateTimePickerPage.bas[43]  page.FinishedLoading 
CompDateTimePickerPage.bas[44]  Else 
CompDateTimePickerPage.bas[45]  ' Prepare the page 
CompDateTimePickerPage.bas[46]  page.Prepare 
CompDateTimePickerPage.bas[47]  ' load the dynamic content 
CompDateTimePickerPage.bas[48]  ConnectPage 
CompDateTimePickerPage.bas[49]  End If 
CompDateTimePickerPage.bas[50]  Log(ABMPageId) 
CompDateTimePickerPage.bas[51] End Sub 
CompDateTimePickerPage.bas[52]  
CompDateTimePickerPage.bas[53] Private Sub WebSocket_Disconnected 
CompDateTimePickerPage.bas[54]  Log( {9} ) 
CompDateTimePickerPage.bas[55] End Sub 
CompDateTimePickerPage.bas[56]  
CompDateTimePickerPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompDateTimePickerPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompDateTimePickerPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompDateTimePickerPage.bas[60]  If eventName = {13} Then 
CompDateTimePickerPage.bas[61]  Log( {14} ) 
CompDateTimePickerPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompDateTimePickerPage.bas[63]  Return 
CompDateTimePickerPage.bas[64]  End If 
CompDateTimePickerPage.bas[65]  If SubExists(Me, eventName) Then 
CompDateTimePickerPage.bas[66]  Params.Remove( {15} ) 
CompDateTimePickerPage.bas[67]  Params.Remove( {16} ) 
CompDateTimePickerPage.bas[68]  Select Case Params.Size 
CompDateTimePickerPage.bas[69]  Case 0 
CompDateTimePickerPage.bas[70]  CallSub(Me, eventName) 
CompDateTimePickerPage.bas[71]  Case 1 
CompDateTimePickerPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompDateTimePickerPage.bas[73]  Case 2 
CompDateTimePickerPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompDateTimePickerPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompDateTimePickerPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompDateTimePickerPage.bas[77]  Else 
CompDateTimePickerPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompDateTimePickerPage.bas[79]  End If 
CompDateTimePickerPage.bas[80]  Case Else 
CompDateTimePickerPage.bas[81]  ' cannot be called directly, to many param 
CompDateTimePickerPage.bas[82]  CallSub2(Me, eventName, Params) 
CompDateTimePickerPage.bas[83]  End Select 
CompDateTimePickerPage.bas[84]  End If 
CompDateTimePickerPage.bas[85] End Sub 
CompDateTimePickerPage.bas[86]  
CompDateTimePickerPage.bas[87] public Sub BuildTheme() 
CompDateTimePickerPage.bas[88]  ' start with the base theme defined in ABMShared 
CompDateTimePickerPage.bas[89]  theme.Initialize( {18} ) 
CompDateTimePickerPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompDateTimePickerPage.bas[91]  
CompDateTimePickerPage.bas[92]  ' add additional themes specific for this page 
CompDateTimePickerPage.bas[93] End Sub 
CompDateTimePickerPage.bas[94]  
CompDateTimePickerPage.bas[95] public Sub BuildPage() 
CompDateTimePickerPage.bas[96]  ' initialize the theme 
CompDateTimePickerPage.bas[97]  BuildTheme 
CompDateTimePickerPage.bas[98]  
CompDateTimePickerPage.bas[99]  ' initialize this page using our theme 
CompDateTimePickerPage.bas[100]  page.InitializeWithTheme(Name, {19} & ABMshared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompDateTimePickerPage.bas[101]  page.ShowLoader=True 
CompDateTimePickerPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompDateTimePickerPage.bas[103]  page.PageTitle = {21} 
CompDateTimePickerPage.bas[104]  page.PageDescription = {22} 
CompDateTimePickerPage.bas[105]  page.PageHTMLName = {23} 
CompDateTimePickerPage.bas[106]  page.PageKeywords = {24} 
CompDateTimePickerPage.bas[107]  page.PageSiteMapPriority = {25} 
CompDateTimePickerPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompDateTimePickerPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompDateTimePickerPage.bas[110]  
CompDateTimePickerPage.bas[111]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompDateTimePickerPage.bas[112]  
CompDateTimePickerPage.bas[113]  ' create the page grid 
CompDateTimePickerPage.bas[114]  page.AddRows(7,True, {31} ).AddCells12(1, {32} ) 
CompDateTimePickerPage.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompDateTimePickerPage.bas[116]  
CompDateTimePickerPage.bas[117]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompDateTimePickerPage.bas[118]  'page.NeedsCodeLabel = True 
CompDateTimePickerPage.bas[119]  
CompDateTimePickerPage.bas[120]  ABMShared.BuildFooter(page) 
CompDateTimePickerPage.bas[121] End Sub 
CompDateTimePickerPage.bas[122]  
CompDateTimePickerPage.bas[123] Sub ConnectPage() 
CompDateTimePickerPage.bas[124]  'NEW 
CompDateTimePickerPage.bas[125]  ABMShared.ConnectNavigationBar(page) 
CompDateTimePickerPage.bas[126]  
CompDateTimePickerPage.bas[127]  ' add paragraph 
CompDateTimePickerPage.bas[128]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} ) ) 
CompDateTimePickerPage.bas[129]  
CompDateTimePickerPage.bas[130]  
CompDateTimePickerPage.bas[131] ' Input Example Description 
CompDateTimePickerPage.bas[132] ' YYYY 2014 4 Or 2 digit year 
CompDateTimePickerPage.bas[133] ' YY 14 2 digit year 
CompDateTimePickerPage.bas[134] ' Q 1..4 Quarter of year. Sets month To first month in quarter. 
CompDateTimePickerPage.bas[135] ' M MM 1..12 Month number 
CompDateTimePickerPage.bas[136] ' MMM MMMM Jan..December Month Name in locale set by moment.locale() 
CompDateTimePickerPage.bas[137] ' D DD 1..31 Day of month 
CompDateTimePickerPage.bas[138] ' Do 1st..31st Day of month with ordinal 
CompDateTimePickerPage.bas[139] ' DDD DDDD 1..365 Day of year 
CompDateTimePickerPage.bas[140] ' X 1410715640.579 Unix timestamp 
CompDateTimePickerPage.bas[141] ' x 1410715640579 Unix ms timestamp 
CompDateTimePickerPage.bas[142] ' 
CompDateTimePickerPage.bas[143] ' gggg 2014 Locale 4 digit week year 
CompDateTimePickerPage.bas[144] ' gg 14 Locale 2 digit week year 
CompDateTimePickerPage.bas[145] ' w ww 1..53 Locale week of year 
CompDateTimePickerPage.bas[146] ' e 1..7 Locale day of week 
CompDateTimePickerPage.bas[147] ' ddd dddd Mon...Sunday Day Name in locale set by moment.locale() 
CompDateTimePickerPage.bas[148] ' GGGG 2014 ISO 4 digit week year 
CompDateTimePickerPage.bas[149] ' GG 14 ISO 2 digit week year 
CompDateTimePickerPage.bas[150] ' W WW 1..53 ISO week of year 
CompDateTimePickerPage.bas[151] ' E 1..7 ISO day of week 
CompDateTimePickerPage.bas[152] ' 
CompDateTimePickerPage.bas[153] ' H HH 0..23 24 hour time 
CompDateTimePickerPage.bas[154] ' h hh 1..12 12 hour time used with a A. 
CompDateTimePickerPage.bas[155] ' a A am pm Post Or ante meridiem 
CompDateTimePickerPage.bas[156] ' m mm 0..59 Minutes 
CompDateTimePickerPage.bas[157] ' s ss 0..59 Seconds 
CompDateTimePickerPage.bas[158] ' S SS SSS 0..999 Fractional seconds 
CompDateTimePickerPage.bas[159] ' Z ZZ +12:00 Offset from UTC As +-HH:mm, +-HHmm, Or Z 
CompDateTimePickerPage.bas[160]  
CompDateTimePickerPage.bas[161]  ' uses moment format notations 
CompDateTimePickerPage.bas[162]  Dim mydate3 As ABMDateTimePicker 
CompDateTimePickerPage.bas[163]  Dim NewDate As Long = DateTime.Now 
CompDateTimePickerPage.bas[164]  mydate3.Initialize(page, {35} , ABM.DATETIMEPICKER_TYPE_DATETIME, NewDate, {36} , {37} ) 
CompDateTimePickerPage.bas[165]  mydate3.CancelText = {38} 
CompDateTimePickerPage.bas[166]  mydate3.PickText = {39} 
CompDateTimePickerPage.bas[167]  mydate3.TodayText = {40} 
CompDateTimePickerPage.bas[168]  mydate3.Language = {41} 
CompDateTimePickerPage.bas[169]  mydate3.ReturnDateFormat = {42} ' <--- see demo source code for settings 
CompDateTimePickerPage.bas[170]  mydate3.ReturnTimeFormat = {43} ' <--- see demo source code for settings 
CompDateTimePickerPage.bas[171]  mydate3.FirstDayOfWeek = 1 
CompDateTimePickerPage.bas[172]  'mydate3.ClickThrough = True <--- set to true if, when the user makes a selection, the ok action should be triggered. 
CompDateTimePickerPage.bas[173]  page.CellR(1,1).AddArrayComponent(mydate3, {44} ) ' <--- showing adding as an array 
CompDateTimePickerPage.bas[174]  
CompDateTimePickerPage.bas[175]  
CompDateTimePickerPage.bas[176]  ' code block 
CompDateTimePickerPage.bas[177]  Dim code1 As String = {0} 
CompDateTimePickerPage.bas[189]  
CompDateTimePickerPage.bas[190]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {45} , code1)) 
CompDateTimePickerPage.bas[191]  
CompDateTimePickerPage.bas[192]  ' add paragraph 
CompDateTimePickerPage.bas[193]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} ) ) 
CompDateTimePickerPage.bas[194]  
CompDateTimePickerPage.bas[195]  ' code block 
CompDateTimePickerPage.bas[196]  Dim code2 As String = {1} 
CompDateTimePickerPage.bas[205]  
CompDateTimePickerPage.bas[206]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {48} , code2)) 
CompDateTimePickerPage.bas[207]  
CompDateTimePickerPage.bas[208]  ' add paragraph 
CompDateTimePickerPage.bas[209]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} ) ) 
CompDateTimePickerPage.bas[210]  
CompDateTimePickerPage.bas[211]  'Dim tmpbtn As ABMButton 
CompDateTimePickerPage.bas[212]  'tmpbtn.InitializeRaised(page, {51} , {52} , {53} , {54} , {55} ) 
CompDateTimePickerPage.bas[213]  'page.CellR(1,1).AddComponent(tmpbtn) 
CompDateTimePickerPage.bas[214]  
CompDateTimePickerPage.bas[215]  
CompDateTimePickerPage.bas[216]  ' also add the components to the footer 
CompDateTimePickerPage.bas[217]  ABMShared.ConnectFooter(page) 
CompDateTimePickerPage.bas[218]  
CompDateTimePickerPage.bas[219]  page.Refresh ' IMPORTANT 
CompDateTimePickerPage.bas[220]  
CompDateTimePickerPage.bas[221] ' DateTime.DateFormat= {56} 
CompDateTimePickerPage.bas[222] ' DateTime.TimeFormat = {57} 
CompDateTimePickerPage.bas[223] ' NewDate = DateTime.DateTimeParse( {58} , {59} ) 
CompDateTimePickerPage.bas[224] ' mydate3.SetDate(NewDate) 
CompDateTimePickerPage.bas[225] ' mydate3.Refresh 
CompDateTimePickerPage.bas[226]  
CompDateTimePickerPage.bas[227]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDateTimePickerPage.bas[228]  page.FinishedLoading 'IMPORTANT 
CompDateTimePickerPage.bas[229]  
CompDateTimePickerPage.bas[230]  Page.RestoreNavigationBarPosition 
CompDateTimePickerPage.bas[231] End Sub 
CompDateTimePickerPage.bas[232]  
CompDateTimePickerPage.bas[233] Sub arrDate_Changed(Target As String, dateMilliseconds As String) 
CompDateTimePickerPage.bas[234]  Dim mydate3 As ABMDateTimePicker = page.Component(Target) 
CompDateTimePickerPage.bas[235]  Log(mydate3.GetDate & {60} & dateMilliseconds) 
CompDateTimePickerPage.bas[236]  ' convert to a B4J date 
CompDateTimePickerPage.bas[237]  Dim BackDate As Long = dateMilliseconds 
CompDateTimePickerPage.bas[238]  DateTime.DateFormat = {61} 
CompDateTimePickerPage.bas[239]  DateTime.TimeFormat = {62} 
CompDateTimePickerPage.bas[240]  
CompDateTimePickerPage.bas[241]  myToastId = myToastId + 1 
CompDateTimePickerPage.bas[242]  page.ShowToast( {63} & myToastId, {64} , {65} & DateTime.Date(BackDate) & {66} & DateTime.Time(BackDate), 5000) 
CompDateTimePickerPage.bas[243] End Sub 
CompDateTimePickerPage.bas[244]  
CompDateTimePickerPage.bas[245] Sub arrDate_ChangedWeek(Target As String, WeekString As String) 
CompDateTimePickerPage.bas[246]  Log(WeekString) 
CompDateTimePickerPage.bas[247] End Sub 
CompDateTimePickerPage.bas[248]  
CompDateTimePickerPage.bas[249] ' clicked on the navigation bar 
CompDateTimePickerPage.bas[250] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompDateTimePickerPage.bas[251]  page.SaveNavigationBarPosition 
CompDateTimePickerPage.bas[252]  If Action = {67} Then Return 
CompDateTimePickerPage.bas[253]  If Action = {68} Then 
CompDateTimePickerPage.bas[254]  myToastId = myToastId + 1 
CompDateTimePickerPage.bas[255]  page.ShowToast( {69} & myToastId, {70} , {71} , 5000) 
CompDateTimePickerPage.bas[256]  Return 
CompDateTimePickerPage.bas[257]  End If 
CompDateTimePickerPage.bas[258]  If Action = {72} Then 
CompDateTimePickerPage.bas[259]  ABMShared.LogOff(page) 
CompDateTimePickerPage.bas[260]  Return 
CompDateTimePickerPage.bas[261]  End If 
CompDateTimePickerPage.bas[262]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompDateTimePickerPage.bas[263] End Sub 
CompDateTimePickerPage.bas[264]  
CompDateTimePickerPage.bas[265] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompDateTimePickerPage.bas[266]  page.ws.Session.SetAttribute( {73} , {74} ) 
CompDateTimePickerPage.bas[267]  page.ws.Session.SetAttribute( {75} , {76} ) 
CompDateTimePickerPage.bas[268]  page.ws.Session.SetAttribute( {77} , {78} ) 
CompDateTimePickerPage.bas[269]  ABMShared.NavigateToPage(ws, ABMPageId, {79} ) 
CompDateTimePickerPage.bas[270] End Sub 
Analysing: CompDateTimeScrollerPage.bas
CompDateTimeScrollerPage.bas[0] ﻿Type=Class 
CompDateTimeScrollerPage.bas[0] Version=4.7 
CompDateTimeScrollerPage.bas[0] ModulesStructureVersion=1 
CompDateTimeScrollerPage.bas[0] B4J=true 
CompDateTimeScrollerPage.bas[0] @EndOfDesignText@ 
CompDateTimeScrollerPage.bas[1] 'Class module 
CompDateTimeScrollerPage.bas[2] Sub Class_Globals 
CompDateTimeScrollerPage.bas[3]  Private ws As WebSocket 'ignore 
CompDateTimeScrollerPage.bas[4]  ' will hold our page information 
CompDateTimeScrollerPage.bas[5]  Public page As ABMPage 
CompDateTimeScrollerPage.bas[6]  ' page theme 
CompDateTimeScrollerPage.bas[7]  Private theme As ABMTheme 
CompDateTimeScrollerPage.bas[8]  ' to access the constants 
CompDateTimeScrollerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompDateTimeScrollerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompDateTimeScrollerPage.bas[11]  Public Name As String = {2} 
CompDateTimeScrollerPage.bas[12]  ' will hold the unique browsers window id 
CompDateTimeScrollerPage.bas[13]  Private ABMPageId As String = {3} 
CompDateTimeScrollerPage.bas[14]  
CompDateTimeScrollerPage.bas[15]  ' your own variables 
CompDateTimeScrollerPage.bas[16]  Dim myToastId As Int 
CompDateTimeScrollerPage.bas[17] End Sub 
CompDateTimeScrollerPage.bas[18]  
CompDateTimeScrollerPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompDateTimeScrollerPage.bas[20] Public Sub Initialize 
CompDateTimeScrollerPage.bas[21]  ' build the local structure IMPORTANT! 
CompDateTimeScrollerPage.bas[22]  BuildPage 
CompDateTimeScrollerPage.bas[23] End Sub 
CompDateTimeScrollerPage.bas[24]  
CompDateTimeScrollerPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompDateTimeScrollerPage.bas[26]  Log( {4} ) 
CompDateTimeScrollerPage.bas[27]  ws = WebSocket1 
CompDateTimeScrollerPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompDateTimeScrollerPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompDateTimeScrollerPage.bas[30]  
CompDateTimeScrollerPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompDateTimeScrollerPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompDateTimeScrollerPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompDateTimeScrollerPage.bas[34]  Return 
CompDateTimeScrollerPage.bas[35]  End If 
CompDateTimeScrollerPage.bas[36]  End If 
CompDateTimeScrollerPage.bas[37]  
CompDateTimeScrollerPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompDateTimeScrollerPage.bas[39]  If page.ComesFromPageCache Then 
CompDateTimeScrollerPage.bas[40]  ' refresh the page 
CompDateTimeScrollerPage.bas[41]  page.Refresh 
CompDateTimeScrollerPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDateTimeScrollerPage.bas[43]  page.FinishedLoading 
CompDateTimeScrollerPage.bas[44]  Else 
CompDateTimeScrollerPage.bas[45]  ' Prepare the page 
CompDateTimeScrollerPage.bas[46]  page.Prepare 
CompDateTimeScrollerPage.bas[47]  ' load the dynamic content 
CompDateTimeScrollerPage.bas[48]  ConnectPage 
CompDateTimeScrollerPage.bas[49]  End If 
CompDateTimeScrollerPage.bas[50]  Log(ABMPageId) 
CompDateTimeScrollerPage.bas[51] End Sub 
CompDateTimeScrollerPage.bas[52]  
CompDateTimeScrollerPage.bas[53] Private Sub WebSocket_Disconnected 
CompDateTimeScrollerPage.bas[54]  Log( {9} ) 
CompDateTimeScrollerPage.bas[55] End Sub 
CompDateTimeScrollerPage.bas[56]  
CompDateTimeScrollerPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompDateTimeScrollerPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompDateTimeScrollerPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompDateTimeScrollerPage.bas[60]  If eventName = {13} Then 
CompDateTimeScrollerPage.bas[61]  Log( {14} ) 
CompDateTimeScrollerPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompDateTimeScrollerPage.bas[63]  Return 
CompDateTimeScrollerPage.bas[64]  End If 
CompDateTimeScrollerPage.bas[65]  If SubExists(Me, eventName) Then 
CompDateTimeScrollerPage.bas[66]  Params.Remove( {15} ) 
CompDateTimeScrollerPage.bas[67]  Params.Remove( {16} ) 
CompDateTimeScrollerPage.bas[68]  Select Case Params.Size 
CompDateTimeScrollerPage.bas[69]  Case 0 
CompDateTimeScrollerPage.bas[70]  CallSub(Me, eventName) 
CompDateTimeScrollerPage.bas[71]  Case 1 
CompDateTimeScrollerPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompDateTimeScrollerPage.bas[73]  Case 2 
CompDateTimeScrollerPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompDateTimeScrollerPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompDateTimeScrollerPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompDateTimeScrollerPage.bas[77]  Else 
CompDateTimeScrollerPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompDateTimeScrollerPage.bas[79]  End If 
CompDateTimeScrollerPage.bas[80]  Case Else 
CompDateTimeScrollerPage.bas[81]  ' cannot be called directly, to many param 
CompDateTimeScrollerPage.bas[82]  CallSub2(Me, eventName, Params) 
CompDateTimeScrollerPage.bas[83]  End Select 
CompDateTimeScrollerPage.bas[84]  End If 
CompDateTimeScrollerPage.bas[85] End Sub 
CompDateTimeScrollerPage.bas[86]  
CompDateTimeScrollerPage.bas[87] public Sub BuildTheme() 
CompDateTimeScrollerPage.bas[88]  ' start with the base theme defined in ABMShared 
CompDateTimeScrollerPage.bas[89]  theme.Initialize( {18} ) 
CompDateTimeScrollerPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompDateTimeScrollerPage.bas[91]  
CompDateTimeScrollerPage.bas[92]  ' add additional themes specific for this page 
CompDateTimeScrollerPage.bas[93] End Sub 
CompDateTimeScrollerPage.bas[94]  
CompDateTimeScrollerPage.bas[95] public Sub BuildPage() 
CompDateTimeScrollerPage.bas[96]  ' initialize the theme 
CompDateTimeScrollerPage.bas[97]  BuildTheme 
CompDateTimeScrollerPage.bas[98]  
CompDateTimeScrollerPage.bas[99]  ' initialize this page using our theme 
CompDateTimeScrollerPage.bas[100]  page.InitializeWithTheme(Name, {19} & ABMshared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompDateTimeScrollerPage.bas[101]  page.ShowLoader=True 
CompDateTimeScrollerPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompDateTimeScrollerPage.bas[103]  page.PageTitle = {21} 
CompDateTimeScrollerPage.bas[104]  page.PageDescription = {22} 
CompDateTimeScrollerPage.bas[105]  page.PageHTMLName = {23} 
CompDateTimeScrollerPage.bas[106]  page.PageKeywords = {24} 
CompDateTimeScrollerPage.bas[107]  page.PageSiteMapPriority = {25} 
CompDateTimeScrollerPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompDateTimeScrollerPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompDateTimeScrollerPage.bas[110]  
CompDateTimeScrollerPage.bas[111]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompDateTimeScrollerPage.bas[112]  
CompDateTimeScrollerPage.bas[113]  ' create the page grid 
CompDateTimeScrollerPage.bas[114]  page.AddRows(7,True, {31} ).AddCells12(1, {32} ) 
CompDateTimeScrollerPage.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompDateTimeScrollerPage.bas[116]  
CompDateTimeScrollerPage.bas[117]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompDateTimeScrollerPage.bas[118]  'page.NeedsCodeLabel = True 
CompDateTimeScrollerPage.bas[119]  
CompDateTimeScrollerPage.bas[120]  ABMShared.BuildFooter(page) 
CompDateTimeScrollerPage.bas[121] End Sub 
CompDateTimeScrollerPage.bas[122]  
CompDateTimeScrollerPage.bas[123] Sub ConnectPage() 
CompDateTimeScrollerPage.bas[124]  'NEW 
CompDateTimeScrollerPage.bas[125]  ABMShared.ConnectNavigationBar(page) 
CompDateTimeScrollerPage.bas[126]  
CompDateTimeScrollerPage.bas[127]  ' add paragraph 
CompDateTimeScrollerPage.bas[128]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} ) ) 
CompDateTimeScrollerPage.bas[129]  
CompDateTimeScrollerPage.bas[130]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} ) ) 
CompDateTimeScrollerPage.bas[131]  
CompDateTimeScrollerPage.bas[132]  
CompDateTimeScrollerPage.bas[133] ' DateFormat: 
CompDateTimeScrollerPage.bas[134] ' ----------- 
CompDateTimeScrollerPage.bas[135] ' m - month of year (no leading zero) 
CompDateTimeScrollerPage.bas[136] ' mm - month of year (two digit) 
CompDateTimeScrollerPage.bas[137] ' M - month Name short 
CompDateTimeScrollerPage.bas[138] ' MM - month Name long 
CompDateTimeScrollerPage.bas[139] ' d - day of month (no leading zero) 
CompDateTimeScrollerPage.bas[140] ' dd - day of month (two digit) 
CompDateTimeScrollerPage.bas[141] ' D - day of week (short) 
CompDateTimeScrollerPage.bas[142] ' DD - day of week (long) 
CompDateTimeScrollerPage.bas[143] ' y - year (two digit) 
CompDateTimeScrollerPage.bas[144] ' yy - year (four digit) 
CompDateTimeScrollerPage.bas[145] ' '...' - literal text 
CompDateTimeScrollerPage.bas[146] ' '' - single quote 
CompDateTimeScrollerPage.bas[147] ' anything Else - literal text 
CompDateTimeScrollerPage.bas[148]  
CompDateTimeScrollerPage.bas[149] ' TimeFormat: 
CompDateTimeScrollerPage.bas[150] ' ----------- 
CompDateTimeScrollerPage.bas[151] ' h - 12 hour format (no leading zero) 
CompDateTimeScrollerPage.bas[152] ' hh - 12 hour format (leading zero) 
CompDateTimeScrollerPage.bas[153] ' H - 24 hour format (no leading zero) 
CompDateTimeScrollerPage.bas[154] ' HH - 24 hour format (leading zero) 
CompDateTimeScrollerPage.bas[155] ' i - minutes (no leading zero) 
CompDateTimeScrollerPage.bas[156] ' ii - minutes (leading zero) 
CompDateTimeScrollerPage.bas[157] ' s - seconds (no leading zero) 
CompDateTimeScrollerPage.bas[158] ' ss - seconds (leading zero) 
CompDateTimeScrollerPage.bas[159] ' a - lowercase am/pm 
CompDateTimeScrollerPage.bas[160] ' A - uppercase AM/PM 
CompDateTimeScrollerPage.bas[161] ' '...' - literal text 
CompDateTimeScrollerPage.bas[162] ' '' - single quote 
CompDateTimeScrollerPage.bas[163] ' anything Else - literal text 
CompDateTimeScrollerPage.bas[164]  
CompDateTimeScrollerPage.bas[165]  Dim mydate As ABMDateTimeScroller 
CompDateTimeScrollerPage.bas[166]  Dim NewDate As Long = DateTime.Now 
CompDateTimeScrollerPage.bas[167]  mydate.Initialize(page, {37} , ABM.DATETIMESCROLLER_TYPE_DATETIME, ABM.DATETIMESCROLLER_MODE_MIXED, NewDate, {38} , {39} ) 
CompDateTimeScrollerPage.bas[168]  mydate.DateDayNames = {40} 
CompDateTimeScrollerPage.bas[169]  mydate.DateMonthNamesShort = {41} 
CompDateTimeScrollerPage.bas[170]  mydate.TitleDateFormat = {42} 
CompDateTimeScrollerPage.bas[171]  mydate.ReturnDateFormat = {43} ' <--- see demo source code for settings 
CompDateTimeScrollerPage.bas[172]  mydate.TitleTimeFormat = {44} ' <--- see demo source code for settings 
CompDateTimeScrollerPage.bas[173]  mydate.ReturnTimeFormat = {45} ' <--- see demo source code for settings 
CompDateTimeScrollerPage.bas[174]  mydate.DateOrder = {46} ' <--- see demo source code for settings 
CompDateTimeScrollerPage.bas[175]  mydate.TimeShowAMPM = False 
CompDateTimeScrollerPage.bas[176]  mydate.CancelText = {47} 
CompDateTimeScrollerPage.bas[177]  mydate.PickText = {48} 
CompDateTimeScrollerPage.bas[178]  page.CellR(1,1).AddComponent(mydate) 
CompDateTimeScrollerPage.bas[179]  
CompDateTimeScrollerPage.bas[180]  
CompDateTimeScrollerPage.bas[181]  ' code block 
CompDateTimeScrollerPage.bas[182]  Dim code1 As String = {0} 
CompDateTimeScrollerPage.bas[196]  
CompDateTimeScrollerPage.bas[197]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {49} , code1)) 
CompDateTimeScrollerPage.bas[198]  
CompDateTimeScrollerPage.bas[199]  ' add paragraph 
CompDateTimeScrollerPage.bas[200]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {50} , {51} ) ) 
CompDateTimeScrollerPage.bas[201]  
CompDateTimeScrollerPage.bas[202]  ' code block 
CompDateTimeScrollerPage.bas[203]  Dim code2 As String = {1} 
CompDateTimeScrollerPage.bas[212]  
CompDateTimeScrollerPage.bas[213]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {52} , code2)) 
CompDateTimeScrollerPage.bas[214]  
CompDateTimeScrollerPage.bas[215]  ' add paragraph 
CompDateTimeScrollerPage.bas[216]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {53} , {54} ) ) 
CompDateTimeScrollerPage.bas[217]  
CompDateTimeScrollerPage.bas[218]  ' also add the components to the footer 
CompDateTimeScrollerPage.bas[219]  ABMShared.ConnectFooter(page) 
CompDateTimeScrollerPage.bas[220]  
CompDateTimeScrollerPage.bas[221]  page.Refresh ' IMPORTANT 
CompDateTimeScrollerPage.bas[222]  
CompDateTimeScrollerPage.bas[223]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDateTimeScrollerPage.bas[224]  page.FinishedLoading 'IMPORTANT 
CompDateTimeScrollerPage.bas[225]  
CompDateTimeScrollerPage.bas[226]  page.RestoreNavigationBarPosition 
CompDateTimeScrollerPage.bas[227] End Sub 
CompDateTimeScrollerPage.bas[228]  
CompDateTimeScrollerPage.bas[229] Sub mydate_Changed(dateMilliseconds As String) 
CompDateTimeScrollerPage.bas[230]  Dim mydate As ABMDateTimeScroller = page.Component( {55} ) 
CompDateTimeScrollerPage.bas[231]  Log(mydate.GetDate & {56} & dateMilliseconds) 
CompDateTimeScrollerPage.bas[232]  ' convert to a B4J date 
CompDateTimeScrollerPage.bas[233]  Dim BackDate As Long = dateMilliseconds 
CompDateTimeScrollerPage.bas[234]  DateTime.DateFormat = {57} 
CompDateTimeScrollerPage.bas[235]  DateTime.TimeFormat = {58} 
CompDateTimeScrollerPage.bas[236]  
CompDateTimeScrollerPage.bas[237]  myToastId = myToastId + 1 
CompDateTimeScrollerPage.bas[238]  page.ShowToast( {59} & myToastId, {60} , {61} & DateTime.Date(BackDate) & {62} & DateTime.Time(BackDate), 5000) 
CompDateTimeScrollerPage.bas[239] End Sub 
CompDateTimeScrollerPage.bas[240]  
CompDateTimeScrollerPage.bas[241] ' clicked on the navigation bar 
CompDateTimeScrollerPage.bas[242] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompDateTimeScrollerPage.bas[243]  page.SaveNavigationBarPosition 
CompDateTimeScrollerPage.bas[244]  If Action = {63} Then Return 
CompDateTimeScrollerPage.bas[245]  If Action = {64} Then 
CompDateTimeScrollerPage.bas[246]  myToastId = myToastId + 1 
CompDateTimeScrollerPage.bas[247]  page.ShowToast( {65} & myToastId, {66} , {67} , 5000) 
CompDateTimeScrollerPage.bas[248]  Return 
CompDateTimeScrollerPage.bas[249]  End If 
CompDateTimeScrollerPage.bas[250]  If Action = {68} Then 
CompDateTimeScrollerPage.bas[251]  ABMShared.LogOff(page) 
CompDateTimeScrollerPage.bas[252]  Return 
CompDateTimeScrollerPage.bas[253]  End If 
CompDateTimeScrollerPage.bas[254]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompDateTimeScrollerPage.bas[255] End Sub 
CompDateTimeScrollerPage.bas[256]  
CompDateTimeScrollerPage.bas[257] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompDateTimeScrollerPage.bas[258]  page.ws.Session.SetAttribute( {69} , {70} ) 
CompDateTimeScrollerPage.bas[259]  page.ws.Session.SetAttribute( {71} , {72} ) 
CompDateTimeScrollerPage.bas[260]  page.ws.Session.SetAttribute( {73} , {74} ) 
CompDateTimeScrollerPage.bas[261]  ABMShared.NavigateToPage(ws, ABMPageId, {75} ) 
CompDateTimeScrollerPage.bas[262] End Sub 
Analysing: CompDividerPage.bas
CompDividerPage.bas[0] ﻿Type=Class 
CompDividerPage.bas[0] Version=4.7 
CompDividerPage.bas[0] ModulesStructureVersion=1 
CompDividerPage.bas[0] B4J=true 
CompDividerPage.bas[0] @EndOfDesignText@ 
CompDividerPage.bas[1] 'Class module 
CompDividerPage.bas[2] Sub Class_Globals 
CompDividerPage.bas[3]  Private ws As WebSocket 'ignore 
CompDividerPage.bas[4]  ' will hold our page information 
CompDividerPage.bas[5]  Public page As ABMPage 
CompDividerPage.bas[6]  ' page theme 
CompDividerPage.bas[7]  Private theme As ABMTheme 
CompDividerPage.bas[8]  ' to access the constants 
CompDividerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompDividerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompDividerPage.bas[11]  Public Name As String = {2} 
CompDividerPage.bas[12]  Private ABMPageId As String = {3} 
CompDividerPage.bas[13]  
CompDividerPage.bas[14]  ' your own variables 
CompDividerPage.bas[15]  Dim myToastId As Int 
CompDividerPage.bas[16] End Sub 
CompDividerPage.bas[17]  
CompDividerPage.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
CompDividerPage.bas[19] Public Sub Initialize 
CompDividerPage.bas[20]  ' build the local structure IMPORTANT! 
CompDividerPage.bas[21]  BuildPage 
CompDividerPage.bas[22] End Sub 
CompDividerPage.bas[23]  
CompDividerPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompDividerPage.bas[25]  Log( {4} ) 
CompDividerPage.bas[26]  ws = WebSocket1 
CompDividerPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompDividerPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompDividerPage.bas[29]  
CompDividerPage.bas[30]  If ABMShared.NeedsAuthorization Then 
CompDividerPage.bas[31]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompDividerPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompDividerPage.bas[33]  Return 
CompDividerPage.bas[34]  End If 
CompDividerPage.bas[35]  End If 
CompDividerPage.bas[36]  
CompDividerPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompDividerPage.bas[38]  If page.ComesFromPageCache Then 
CompDividerPage.bas[39]  ' refresh the page 
CompDividerPage.bas[40]  page.Refresh 
CompDividerPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDividerPage.bas[42]  page.FinishedLoading 
CompDividerPage.bas[43]  Else 
CompDividerPage.bas[44]  ' Prepare the page 
CompDividerPage.bas[45]  page.Prepare 
CompDividerPage.bas[46]  ' load the dynamic content 
CompDividerPage.bas[47]  ConnectPage 
CompDividerPage.bas[48]  End If 
CompDividerPage.bas[49]  Log(ABMPageId) 
CompDividerPage.bas[50] End Sub 
CompDividerPage.bas[51]  
CompDividerPage.bas[52] Private Sub WebSocket_Disconnected 
CompDividerPage.bas[53]  Log( {9} ) 
CompDividerPage.bas[54] End Sub 
CompDividerPage.bas[55]  
CompDividerPage.bas[56] Sub Page_ParseEvent(Params As Map) 
CompDividerPage.bas[57]  Dim eventName As String = Params.Get( {10} ) 
CompDividerPage.bas[58]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompDividerPage.bas[59]  If eventName = {13} Then 
CompDividerPage.bas[60]  Log( {14} ) 
CompDividerPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompDividerPage.bas[62]  Return 
CompDividerPage.bas[63]  End If 
CompDividerPage.bas[64]  If SubExists(Me, eventName) Then 
CompDividerPage.bas[65]  Params.Remove( {15} ) 
CompDividerPage.bas[66]  Params.Remove( {16} ) 
CompDividerPage.bas[67]  Select Case Params.Size 
CompDividerPage.bas[68]  Case 0 
CompDividerPage.bas[69]  CallSub(Me, eventName) 
CompDividerPage.bas[70]  Case 1 
CompDividerPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompDividerPage.bas[72]  Case 2 
CompDividerPage.bas[73]  If Params.get(eventParams(0)) = {17} Then 
CompDividerPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompDividerPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
CompDividerPage.bas[76]  Else 
CompDividerPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompDividerPage.bas[78]  End If 
CompDividerPage.bas[79]  Case Else 
CompDividerPage.bas[80]  ' cannot be called directly, to many param 
CompDividerPage.bas[81]  CallSub2(Me, eventName, Params) 
CompDividerPage.bas[82]  End Select 
CompDividerPage.bas[83]  End If 
CompDividerPage.bas[84] End Sub 
CompDividerPage.bas[85]  
CompDividerPage.bas[86] public Sub BuildTheme() 
CompDividerPage.bas[87]  ' start with the base theme defined in ABMShared 
CompDividerPage.bas[88]  theme.Initialize( {18} ) 
CompDividerPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
CompDividerPage.bas[90]  
CompDividerPage.bas[91]  ' add additional themes specific for this page 
CompDividerPage.bas[92]  theme.AddDividerTheme( {19} ) 
CompDividerPage.bas[93]  theme.Divider( {20} ).ForeColor = ABM.COLOR_LIGHTBLUE 
CompDividerPage.bas[94] End Sub 
CompDividerPage.bas[95]  
CompDividerPage.bas[96] public Sub BuildPage() 
CompDividerPage.bas[97]  ' initialize the theme 
CompDividerPage.bas[98]  BuildTheme 
CompDividerPage.bas[99]  
CompDividerPage.bas[100]  ' initialize this page using our theme 
CompDividerPage.bas[101]  page.InitializeWithTheme(Name, {21} & ABMshared.AppName & {22} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompDividerPage.bas[102]  page.ShowLoader=True 
CompDividerPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompDividerPage.bas[104]  page.PageTitle = {23} 
CompDividerPage.bas[105]  page.PageDescription = {24} 
CompDividerPage.bas[106]  page.PageHTMLName = {25} 
CompDividerPage.bas[107]  page.PageKeywords = {26} 
CompDividerPage.bas[108]  page.PageSiteMapPriority = {27} 
CompDividerPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompDividerPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompDividerPage.bas[111]  
CompDividerPage.bas[112]  ABMShared.BuildNavigationBar(page, {28} , {29} , {30} , {31} , {32} ) 
CompDividerPage.bas[113]  
CompDividerPage.bas[114]  ' create the page grid 
CompDividerPage.bas[115]  page.AddRows(4,True, {33} ).AddCells12(1, {34} ) 
CompDividerPage.bas[116]  page.AddRows(1,True, {35} ).AddCellsOS(2,0,0,0,6,6,6, {36} ) 
CompDividerPage.bas[117]  page.AddRows(1,True, {37} ).AddCells12(1, {38} ) 
CompDividerPage.bas[118]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompDividerPage.bas[119]  
CompDividerPage.bas[120]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompDividerPage.bas[121]  'page.NeedsCodeLabel = True 
CompDividerPage.bas[122]  
CompDividerPage.bas[123]  ABMShared.BuildFooter(page) 
CompDividerPage.bas[124] End Sub 
CompDividerPage.bas[125]  
CompDividerPage.bas[126] Sub ConnectPage() 
CompDividerPage.bas[127]  'NEW 
CompDividerPage.bas[128]  ABMShared.ConnectNavigationBar(page) 
CompDividerPage.bas[129]  
CompDividerPage.bas[130]  ' add paragraph 
CompDividerPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {39} , {40} ) ) 
CompDividerPage.bas[132]  ' add paragraph 
CompDividerPage.bas[133]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {41} , {42} )) 
CompDividerPage.bas[134]  
CompDividerPage.bas[135]  ' add a divider on the row 
CompDividerPage.bas[136]  Dim div1 As ABMDivider 
CompDividerPage.bas[137]  div1.Initialize(page, {43} , {44} ) 
CompDividerPage.bas[138]  page.Row(2).SetDivider(div1) 
CompDividerPage.bas[139]  
CompDividerPage.bas[140]  ' code block 
CompDividerPage.bas[141]  Dim code1 As String = {0} 
CompDividerPage.bas[145]  
CompDividerPage.bas[146]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {45} , code1)) 
CompDividerPage.bas[147]  
CompDividerPage.bas[148]  ' add paragraph 
CompDividerPage.bas[149]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} )) 
CompDividerPage.bas[150]  
CompDividerPage.bas[151]  ' add a loop of a divider and a label 
CompDividerPage.bas[152]  For i = 2 To 4 
CompDividerPage.bas[153]  Dim div2 As ABMDivider 
CompDividerPage.bas[154]  div2.Initialize(page, {48} & i, {49} ) 
CompDividerPage.bas[155]  page.Cell(5,1).AddComponent(div2) 
CompDividerPage.bas[156]  Dim lbl2 As ABMLabel 
CompDividerPage.bas[157]  lbl2.Initialize(page, {50} & i, {51} , ABM.SIZE_H6, True, {52} ) 
CompDividerPage.bas[158]  page.Cell(5,1).AddComponent(lbl2) 
CompDividerPage.bas[159]  Next 
CompDividerPage.bas[160]  ' add one at hte end of the cell 
CompDividerPage.bas[161]  Dim divend As ABMDivider 
CompDividerPage.bas[162]  divend.Initialize(page, {53} , {54} ) 
CompDividerPage.bas[163]  page.Cell(5,1).AddComponent(divend) 
CompDividerPage.bas[164]  
CompDividerPage.bas[165]  ' code block 
CompDividerPage.bas[166]  Dim code2 As String = {1} 
CompDividerPage.bas[179]  
CompDividerPage.bas[180]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {55} , code2)) 
CompDividerPage.bas[181]  
CompDividerPage.bas[182]  ' also add the components to the footer 
CompDividerPage.bas[183]  ABMShared.ConnectFooter(page) 
CompDividerPage.bas[184]  
CompDividerPage.bas[185]  page.Refresh ' IMPORTANT 
CompDividerPage.bas[186]  
CompDividerPage.bas[187]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompDividerPage.bas[188]  page.FinishedLoading 'IMPORTANT 
CompDividerPage.bas[189]  
CompDividerPage.bas[190]  page.RestoreNavigationBarPosition 
CompDividerPage.bas[191] End Sub 
CompDividerPage.bas[192]  
CompDividerPage.bas[193] ' clicked on the navigation bar 
CompDividerPage.bas[194] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompDividerPage.bas[195]  page.SaveNavigationBarPosition 
CompDividerPage.bas[196]  If Action = {56} Then Return 
CompDividerPage.bas[197]  If Action = {57} Then 
CompDividerPage.bas[198]  myToastId = myToastId + 1 
CompDividerPage.bas[199]  page.ShowToast( {58} & myToastId, {59} , {60} , 5000) 
CompDividerPage.bas[200]  Return 
CompDividerPage.bas[201]  End If 
CompDividerPage.bas[202]  If Action = {61} Then 
CompDividerPage.bas[203]  ABMShared.LogOff(page) 
CompDividerPage.bas[204]  Return 
CompDividerPage.bas[205]  End If 
CompDividerPage.bas[206]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompDividerPage.bas[207] End Sub 
CompDividerPage.bas[208]  
CompDividerPage.bas[209] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompDividerPage.bas[210]  page.ws.Session.SetAttribute( {62} , {63} ) 
CompDividerPage.bas[211]  page.ws.Session.SetAttribute( {64} , {65} ) 
CompDividerPage.bas[212]  page.ws.Session.SetAttribute( {66} , {67} ) 
CompDividerPage.bas[213]  ABMShared.NavigateToPage(ws, ABMPageId, {68} ) 
CompDividerPage.bas[214] End Sub 
Analysing: CompEditorPage.bas
CompEditorPage.bas[0] ﻿Type=Class 
CompEditorPage.bas[0] Version=4.7 
CompEditorPage.bas[0] ModulesStructureVersion=1 
CompEditorPage.bas[0] B4J=true 
CompEditorPage.bas[0] @EndOfDesignText@ 
CompEditorPage.bas[1] 'Class module 
CompEditorPage.bas[2] Sub Class_Globals 
CompEditorPage.bas[3]  Private ws As WebSocket 'ignore 
CompEditorPage.bas[4]  ' will hold our page information 
CompEditorPage.bas[5]  Public page As ABMPage 
CompEditorPage.bas[6]  ' page theme 
CompEditorPage.bas[7]  Private theme As ABMTheme 
CompEditorPage.bas[8]  ' to access the constants 
CompEditorPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompEditorPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompEditorPage.bas[11]  Public Name As String = {2} 
CompEditorPage.bas[12]  ' will hold the unique browsers window id 
CompEditorPage.bas[13]  Private ABMPageId As String = {3} 
CompEditorPage.bas[14]  
CompEditorPage.bas[15]  ' your own variables 
CompEditorPage.bas[16]  Dim myToastId As Int 
CompEditorPage.bas[17] End Sub 
CompEditorPage.bas[18]  
CompEditorPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompEditorPage.bas[20] Public Sub Initialize 
CompEditorPage.bas[21]  ' build the local structure IMPORTANT! 
CompEditorPage.bas[22]  BuildPage 
CompEditorPage.bas[23] End Sub 
CompEditorPage.bas[24]  
CompEditorPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompEditorPage.bas[26]  Log( {4} ) 
CompEditorPage.bas[27]  ws = WebSocket1 
CompEditorPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompEditorPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompEditorPage.bas[30]  
CompEditorPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompEditorPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompEditorPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompEditorPage.bas[34]  Return 
CompEditorPage.bas[35]  End If 
CompEditorPage.bas[36]  End If 
CompEditorPage.bas[37]  
CompEditorPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompEditorPage.bas[39]  If page.ComesFromPageCache Then 
CompEditorPage.bas[40]  ' refresh the page 
CompEditorPage.bas[41]  page.Refresh 
CompEditorPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompEditorPage.bas[43]  page.FinishedLoading 
CompEditorPage.bas[44]  Else 
CompEditorPage.bas[45]  ' Prepare the page 
CompEditorPage.bas[46]  page.Prepare 
CompEditorPage.bas[47]  ' load the dynamic content 
CompEditorPage.bas[48]  ConnectPage 
CompEditorPage.bas[49]  End If 
CompEditorPage.bas[50]  Log(ABMPageId) 
CompEditorPage.bas[51] End Sub 
CompEditorPage.bas[52]  
CompEditorPage.bas[53] Private Sub WebSocket_Disconnected 
CompEditorPage.bas[54]  Log( {9} ) 
CompEditorPage.bas[55] End Sub 
CompEditorPage.bas[56]  
CompEditorPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompEditorPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompEditorPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompEditorPage.bas[60]  If eventName = {13} Then 
CompEditorPage.bas[61]  Log( {14} ) 
CompEditorPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompEditorPage.bas[63]  Return 
CompEditorPage.bas[64]  End If 
CompEditorPage.bas[65]  If SubExists(Me, eventName) Then 
CompEditorPage.bas[66]  Params.Remove( {15} ) 
CompEditorPage.bas[67]  Params.Remove( {16} ) 
CompEditorPage.bas[68]  Select Case Params.Size 
CompEditorPage.bas[69]  Case 0 
CompEditorPage.bas[70]  CallSub(Me, eventName) 
CompEditorPage.bas[71]  Case 1 
CompEditorPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompEditorPage.bas[73]  Case 2 
CompEditorPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompEditorPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompEditorPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompEditorPage.bas[77]  Else 
CompEditorPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompEditorPage.bas[79]  End If 
CompEditorPage.bas[80]  Case Else 
CompEditorPage.bas[81]  ' cannot be called directly, to many param 
CompEditorPage.bas[82]  CallSub2(Me, eventName, Params) 
CompEditorPage.bas[83]  End Select 
CompEditorPage.bas[84]  End If 
CompEditorPage.bas[85] End Sub 
CompEditorPage.bas[86]  
CompEditorPage.bas[87] public Sub BuildTheme() 
CompEditorPage.bas[88]  ' start with the base theme defined in ABMShared 
CompEditorPage.bas[89]  theme.Initialize( {18} ) 
CompEditorPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompEditorPage.bas[91]  
CompEditorPage.bas[92]  ' add additional themes specific for this page 
CompEditorPage.bas[93]  
CompEditorPage.bas[94]  ' bluegray button 
CompEditorPage.bas[95]  theme.AddButtonTheme( {19} ) 
CompEditorPage.bas[96]  theme.Button( {20} ).BackColor = ABM.COLOR_BLUEGREY 
CompEditorPage.bas[97]  theme.Button( {21} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompEditorPage.bas[98]  
CompEditorPage.bas[99]  theme.AddEditorTheme( {22} ) 
CompEditorPage.bas[100]  theme.Editor( {23} ).BackColor = ABM.COLOR_WHITE 
CompEditorPage.bas[101] End Sub 
CompEditorPage.bas[102]  
CompEditorPage.bas[103] public Sub BuildPage() 
CompEditorPage.bas[104]  ' initialize the theme 
CompEditorPage.bas[105]  BuildTheme 
CompEditorPage.bas[106]  
CompEditorPage.bas[107]  ' initialize this page using our theme 
CompEditorPage.bas[108]  page.InitializeWithTheme(Name, {24} & ABMshared.AppName & {25} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompEditorPage.bas[109]  page.ShowLoader=True 
CompEditorPage.bas[110]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompEditorPage.bas[111]  page.PageTitle = {26} 
CompEditorPage.bas[112]  page.PageDescription = {27} 
CompEditorPage.bas[113]  page.PageHTMLName = {28} 
CompEditorPage.bas[114]  page.PageKeywords = {29} 
CompEditorPage.bas[115]  page.PageSiteMapPriority = {30} 
CompEditorPage.bas[116]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompEditorPage.bas[117]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompEditorPage.bas[118]  
CompEditorPage.bas[119]  ABMShared.BuildNavigationBar(page, {31} , {32} , {33} , {34} , {35} ) 
CompEditorPage.bas[120]  
CompEditorPage.bas[121]  ' create the page grid 
CompEditorPage.bas[122]  page.AddRows(8,True, {36} ).AddCells12(1, {37} ) 
CompEditorPage.bas[123]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompEditorPage.bas[124]  
CompEditorPage.bas[125]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompEditorPage.bas[126]  'page.NeedsCodeLabel = True 
CompEditorPage.bas[127]  
CompEditorPage.bas[128]  ABMShared.BuildFooter(page) 
CompEditorPage.bas[129] End Sub 
CompEditorPage.bas[130]  
CompEditorPage.bas[131] Sub ConnectPage() 
CompEditorPage.bas[132]  'NEW 
CompEditorPage.bas[133]  ABMShared.ConnectNavigationBar(page) 
CompEditorPage.bas[134]  
CompEditorPage.bas[135]  ' add paragraph 
CompEditorPage.bas[136]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} ) ) 
CompEditorPage.bas[137]  
CompEditorPage.bas[138]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompEditorPage.bas[139]  
CompEditorPage.bas[140]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} )) 
CompEditorPage.bas[141]  
CompEditorPage.bas[142]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {44} , {45} )) 
CompEditorPage.bas[143]  
CompEditorPage.bas[144]  ' add a editor on the row 
CompEditorPage.bas[145]  Dim editor As ABMEditor 
CompEditorPage.bas[146]  editor.Initialize(page, {46} , True, True, {47} ) 
CompEditorPage.bas[147]  page.CellR(1,1).AddComponent(editor) 
CompEditorPage.bas[148]  
CompEditorPage.bas[149]  ' code block 
CompEditorPage.bas[150]  Dim code1 As String = {0} 
CompEditorPage.bas[153]  
CompEditorPage.bas[154]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {48} , code1)) 
CompEditorPage.bas[155]  
CompEditorPage.bas[156]  ' add paragraph 
CompEditorPage.bas[157]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} )) 
CompEditorPage.bas[158]  
CompEditorPage.bas[159]  Dim btn1 As ABMButton 
CompEditorPage.bas[160]  btn1.InitializeRaised(page, {51} , {52} , {53} , {54} , {55} ) 
CompEditorPage.bas[161]  page.CellR(1,1).AddComponent(btn1) 
CompEditorPage.bas[162]  
CompEditorPage.bas[163]  ' code block 
CompEditorPage.bas[164]  Dim code2 As String = {1} 
CompEditorPage.bas[170]  
CompEditorPage.bas[171]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {56} , code2)) 
CompEditorPage.bas[172]  
CompEditorPage.bas[173]  Dim editorlbl As ABMEditor 
CompEditorPage.bas[174]  editorlbl.Initialize(page, {57} , False, False, {58} ) 
CompEditorPage.bas[175]  page.CellR(1,1).AddComponent(editorlbl) 
CompEditorPage.bas[176]  
CompEditorPage.bas[177]  ' also add the components to the footer 
CompEditorPage.bas[178]  ABMShared.ConnectFooter(page) 
CompEditorPage.bas[179]  
CompEditorPage.bas[180]  page.Refresh ' IMPORTANT 
CompEditorPage.bas[181]  
CompEditorPage.bas[182]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompEditorPage.bas[183]  page.FinishedLoading 'IMPORTANT 
CompEditorPage.bas[184]  
CompEditorPage.bas[185]  page.RestoreNavigationBarPosition 
CompEditorPage.bas[186] End Sub 
CompEditorPage.bas[187]  
CompEditorPage.bas[188] Sub btn1_Clicked(Target As String) 
CompEditorPage.bas[189]  Dim editor As ABMEditor = page.Component( {59} ) 
CompEditorPage.bas[190]  Dim editorlbl As ABMEditor = page.Component( {60} ) 
CompEditorPage.bas[191]  editorlbl.SetHTML(editor.GetHTML) 
CompEditorPage.bas[192]  editorlbl.Refresh 
CompEditorPage.bas[193] End Sub 
CompEditorPage.bas[194]  
CompEditorPage.bas[195] ' clicked on the navigation bar 
CompEditorPage.bas[196] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompEditorPage.bas[197]  page.SaveNavigationBarPosition 
CompEditorPage.bas[198]  If Action = {61} Then Return 
CompEditorPage.bas[199]  If Action = {62} Then 
CompEditorPage.bas[200]  myToastId = myToastId + 1 
CompEditorPage.bas[201]  page.ShowToast( {63} & myToastId, {64} , {65} , 5000) 
CompEditorPage.bas[202]  Return 
CompEditorPage.bas[203]  End If 
CompEditorPage.bas[204]  If Action = {66} Then 
CompEditorPage.bas[205]  ABMShared.LogOff(page) 
CompEditorPage.bas[206]  Return 
CompEditorPage.bas[207]  End If 
CompEditorPage.bas[208]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompEditorPage.bas[209] End Sub 
CompEditorPage.bas[210]  
CompEditorPage.bas[211] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompEditorPage.bas[212]  page.ws.Session.SetAttribute( {67} , {68} ) 
CompEditorPage.bas[213]  page.ws.Session.SetAttribute( {69} , {70} ) 
CompEditorPage.bas[214]  page.ws.Session.SetAttribute( {71} , {72} ) 
CompEditorPage.bas[215]  ABMShared.NavigateToPage(ws, ABMPageId, {73} ) 
CompEditorPage.bas[216] End Sub 
Analysing: CompFileInputPage.bas
CompFileInputPage.bas[0] ﻿Type=Class 
CompFileInputPage.bas[0] Version=4.7 
CompFileInputPage.bas[0] ModulesStructureVersion=1 
CompFileInputPage.bas[0] B4J=true 
CompFileInputPage.bas[0] @EndOfDesignText@ 
CompFileInputPage.bas[1] 'Class module 
CompFileInputPage.bas[2] Sub Class_Globals 
CompFileInputPage.bas[3]  Private ws As WebSocket 'ignore 
CompFileInputPage.bas[4]  ' will hold our page information 
CompFileInputPage.bas[5]  Public page As ABMPage 
CompFileInputPage.bas[6]  ' page theme 
CompFileInputPage.bas[7]  Private theme As ABMTheme 
CompFileInputPage.bas[8]  ' to access the constants 
CompFileInputPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompFileInputPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompFileInputPage.bas[11]  Public Name As String = {3} 
CompFileInputPage.bas[12]  ' will hold the unique browsers window id 
CompFileInputPage.bas[13]  Private ABMPageId As String = {4} 
CompFileInputPage.bas[14]  
CompFileInputPage.bas[15]  ' your own variables 
CompFileInputPage.bas[16]  Dim myToastId As Int 
CompFileInputPage.bas[17]  ' the download folder 
CompFileInputPage.bas[18]  Public DownloadFolder As String = {5} & ABMShared.AppName & {6} 
CompFileInputPage.bas[19]  Public DownloadMaxSize As String = 100*1024 
CompFileInputPage.bas[20] End Sub 
CompFileInputPage.bas[21]  
CompFileInputPage.bas[22] 'Initializes the object. You can add parameters to this method if needed. 
CompFileInputPage.bas[23] Public Sub Initialize 
CompFileInputPage.bas[24]  ' build the local structure IMPORTANT! 
CompFileInputPage.bas[25]  BuildPage 
CompFileInputPage.bas[26] End Sub 
CompFileInputPage.bas[27]  
CompFileInputPage.bas[28] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompFileInputPage.bas[29]  Log( {7} ) 
CompFileInputPage.bas[30]  ws = WebSocket1 
CompFileInputPage.bas[31]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompFileInputPage.bas[32]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompFileInputPage.bas[33]  
CompFileInputPage.bas[34]  If ABMShared.NeedsAuthorization Then 
CompFileInputPage.bas[35]  If session.GetAttribute2( {8} , {9} ) = {10} Then 
CompFileInputPage.bas[36]  ABMShared.NavigateToPage(ws, ABMPageId, {11} ) 
CompFileInputPage.bas[37]  Return 
CompFileInputPage.bas[38]  End If 
CompFileInputPage.bas[39]  End If 
CompFileInputPage.bas[40]  
CompFileInputPage.bas[41]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompFileInputPage.bas[42]  If page.ComesFromPageCache Then 
CompFileInputPage.bas[43]  ' refresh the page 
CompFileInputPage.bas[44]  page.Refresh 
CompFileInputPage.bas[45]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompFileInputPage.bas[46]  page.FinishedLoading 
CompFileInputPage.bas[47]  Else 
CompFileInputPage.bas[48]  ' Prepare the page 
CompFileInputPage.bas[49]  page.Prepare 
CompFileInputPage.bas[50]  ' load the dynamic content 
CompFileInputPage.bas[51]  ConnectPage 
CompFileInputPage.bas[52]  End If 
CompFileInputPage.bas[53]  Log(ABMPageId) 
CompFileInputPage.bas[54]  
CompFileInputPage.bas[55]  ' this page uses uploads, so needs some settings 
CompFileInputPage.bas[56]  ws.Session.SetAttribute( {12} , Me) 
CompFileInputPage.bas[57]  ws.Session.SetAttribute( {13} , DownloadFolder) 
CompFileInputPage.bas[58]  ws.Session.SetAttribute( {14} , DownloadMaxSize) 
CompFileInputPage.bas[59] End Sub 
CompFileInputPage.bas[60]  
CompFileInputPage.bas[61] Private Sub WebSocket_Disconnected 
CompFileInputPage.bas[62]  Log( {15} ) 
CompFileInputPage.bas[63]  
CompFileInputPage.bas[64]  Try 
CompFileInputPage.bas[65]  ws.Session.RemoveAttribute( {16} ) 
CompFileInputPage.bas[66]  ws.Session.RemoveAttribute( {17} ) 
CompFileInputPage.bas[67]  ws.Session.RemoveAttribute( {18} ) 
CompFileInputPage.bas[68]  Catch 
CompFileInputPage.bas[69]  Log(LastException.Message) 
CompFileInputPage.bas[70]  End Try 
CompFileInputPage.bas[71] End Sub 
CompFileInputPage.bas[72]  
CompFileInputPage.bas[73] Sub Page_ParseEvent(Params As Map) 
CompFileInputPage.bas[74]  Dim eventName As String = Params.Get( {19} ) 
CompFileInputPage.bas[75]  Dim eventParams() As String = Regex.Split( {20} ,Params.Get( {21} )) 
CompFileInputPage.bas[76]  If eventName = {22} Then 
CompFileInputPage.bas[77]  Log( {23} ) 
CompFileInputPage.bas[78]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompFileInputPage.bas[79]  Return 
CompFileInputPage.bas[80]  End If 
CompFileInputPage.bas[81]  If SubExists(Me, eventName) Then 
CompFileInputPage.bas[82]  Params.Remove( {24} ) 
CompFileInputPage.bas[83]  Params.Remove( {25} ) 
CompFileInputPage.bas[84]  Select Case Params.Size 
CompFileInputPage.bas[85]  Case 0 
CompFileInputPage.bas[86]  CallSub(Me, eventName) 
CompFileInputPage.bas[87]  Case 1 
CompFileInputPage.bas[88]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompFileInputPage.bas[89]  Case 2 
CompFileInputPage.bas[90]  If Params.get(eventParams(0)) = {26} Then 
CompFileInputPage.bas[91]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompFileInputPage.bas[92]  CallSub2(Me, eventName, PassedTables) 
CompFileInputPage.bas[93]  Else 
CompFileInputPage.bas[94]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompFileInputPage.bas[95]  End If 
CompFileInputPage.bas[96]  Case Else 
CompFileInputPage.bas[97]  ' cannot be called directly, to many param 
CompFileInputPage.bas[98]  CallSub2(Me, eventName, Params) 
CompFileInputPage.bas[99]  End Select 
CompFileInputPage.bas[100]  End If 
CompFileInputPage.bas[101] End Sub 
CompFileInputPage.bas[102]  
CompFileInputPage.bas[103] public Sub BuildTheme() 
CompFileInputPage.bas[104]  ' start with the base theme defined in ABMShared 
CompFileInputPage.bas[105]  theme.Initialize( {27} ) 
CompFileInputPage.bas[106]  theme.AddABMTheme(ABMShared.MyTheme) 
CompFileInputPage.bas[107]  
CompFileInputPage.bas[108]  ' add additional themes specific for this page 
CompFileInputPage.bas[109]  
CompFileInputPage.bas[110] End Sub 
CompFileInputPage.bas[111]  
CompFileInputPage.bas[112] public Sub BuildPage() 
CompFileInputPage.bas[113]  ' initialize the theme 
CompFileInputPage.bas[114]  BuildTheme 
CompFileInputPage.bas[115]  
CompFileInputPage.bas[116]  ' initialize this page using our theme 
CompFileInputPage.bas[117]  page.InitializeWithTheme(Name, {28} & ABMshared.AppName & {29} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompFileInputPage.bas[118]  page.ShowLoader=True 
CompFileInputPage.bas[119]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompFileInputPage.bas[120]  page.PageTitle = {30} 
CompFileInputPage.bas[121]  page.PageDescription = {31} 
CompFileInputPage.bas[122]  page.PageHTMLName = {32} 
CompFileInputPage.bas[123]  page.PageKeywords = {33} 
CompFileInputPage.bas[124]  page.PageSiteMapPriority = {34} 
CompFileInputPage.bas[125]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompFileInputPage.bas[126]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompFileInputPage.bas[127]  
CompFileInputPage.bas[128]  ABMShared.BuildNavigationBar(page, {35} , {36} , {37} , {38} , {39} ) 
CompFileInputPage.bas[129]  
CompFileInputPage.bas[130]  ' create the page grid 
CompFileInputPage.bas[131]  page.AddRows(5,True, {40} ).AddCells12(1, {41} ) 
CompFileInputPage.bas[132]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompFileInputPage.bas[133]  
CompFileInputPage.bas[134]  ABMShared.BuildFooter(page) 
CompFileInputPage.bas[135] End Sub 
CompFileInputPage.bas[136]  
CompFileInputPage.bas[137] Sub ConnectPage() 
CompFileInputPage.bas[138]  'NEW 
CompFileInputPage.bas[139]  ABMShared.ConnectNavigationBar(page) 
CompFileInputPage.bas[140]  ' add paragraph 
CompFileInputPage.bas[141]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} ) ) 
CompFileInputPage.bas[142]  
CompFileInputPage.bas[143]  Dim inp1 As ABMFileInput 
CompFileInputPage.bas[144]  inp1.Initialize(page, {44} , {45} , {46} , True, {47} , {48} ) 
CompFileInputPage.bas[145]  page.Cell(2,1).AddComponent(inp1) 
CompFileInputPage.bas[146]  
CompFileInputPage.bas[147]  Dim code1 As String = {0} 
CompFileInputPage.bas[150]  
CompFileInputPage.bas[151]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {49} , code1)) 
CompFileInputPage.bas[152]  
CompFileInputPage.bas[153]  Dim code2 As String = {1} 
CompFileInputPage.bas[158]  
CompFileInputPage.bas[159]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {50} , code2)) 
CompFileInputPage.bas[160]  
CompFileInputPage.bas[161]  Dim code3 As String = {2} 
CompFileInputPage.bas[166]  
CompFileInputPage.bas[167]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {51} , code3)) 
CompFileInputPage.bas[168]  
CompFileInputPage.bas[169]  ' also add the components to the footer 
CompFileInputPage.bas[170]  ABMShared.ConnectFooter(page) 
CompFileInputPage.bas[171]  
CompFileInputPage.bas[172]  page.Refresh ' IMPORTANT 
CompFileInputPage.bas[173]  
CompFileInputPage.bas[174]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompFileInputPage.bas[175]  page.FinishedLoading 'IMPORTANT 
CompFileInputPage.bas[176]  
CompFileInputPage.bas[177]  page.RestoreNavigationBarPosition 
CompFileInputPage.bas[178] End Sub 
CompFileInputPage.bas[179]  
CompFileInputPage.bas[180] Sub inp1_Changed(value As String) 
CompFileInputPage.bas[181]  Log( {52} & value) 
CompFileInputPage.bas[182]  Dim inp1 As ABMFileInput = page.Component( {53} ) 
CompFileInputPage.bas[183]  inp1.UploadToServer 'Here the file is uploading 
CompFileInputPage.bas[184] End Sub 
CompFileInputPage.bas[185]  
CompFileInputPage.bas[186] Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompFileInputPage.bas[187]  Dim inp1 As ABMFileInput = page.Component( {54} ) 
CompFileInputPage.bas[188]  inp1.Clear 
CompFileInputPage.bas[189]  Log(FileName & {55} & success) 
CompFileInputPage.bas[190]  myToastId = myToastId + 1 
CompFileInputPage.bas[191]  page.ShowToast( {56} & myToastId, {57} , {58} & FileName & {59} & success, 3000) 
CompFileInputPage.bas[192]  page.ws.Flush 'IMPORTANT 
CompFileInputPage.bas[193] End Sub 
CompFileInputPage.bas[194]  
CompFileInputPage.bas[195] ' clicked on the navigation bar 
CompFileInputPage.bas[196] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompFileInputPage.bas[197]  page.SaveNavigationBarPosition 
CompFileInputPage.bas[198]  If Action = {60} Then Return 
CompFileInputPage.bas[199]  If Action = {61} Then 
CompFileInputPage.bas[200]  myToastId = myToastId + 1 
CompFileInputPage.bas[201]  page.ShowToast( {62} & myToastId, {63} , {64} , 5000) 
CompFileInputPage.bas[202]  Return 
CompFileInputPage.bas[203]  End If 
CompFileInputPage.bas[204]  If Action = {65} Then 
CompFileInputPage.bas[205]  ABMShared.LogOff(page) 
CompFileInputPage.bas[206]  Return 
CompFileInputPage.bas[207]  End If 
CompFileInputPage.bas[208]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompFileInputPage.bas[209] End Sub 
CompFileInputPage.bas[210]  
CompFileInputPage.bas[211] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompFileInputPage.bas[212]  page.ws.Session.SetAttribute( {66} , {67} ) 
CompFileInputPage.bas[213]  page.ws.Session.SetAttribute( {68} , {69} ) 
CompFileInputPage.bas[214]  page.ws.Session.SetAttribute( {70} , {71} ) 
CompFileInputPage.bas[215]  ABMShared.NavigateToPage(ws, ABMPageId, {72} ) 
CompFileInputPage.bas[216] End Sub 
CompFileInputPage.bas[217]  
Analysing: CompGoogleMapPage.bas
CompGoogleMapPage.bas[0] ﻿Type=Class 
CompGoogleMapPage.bas[0] Version=4.7 
CompGoogleMapPage.bas[0] ModulesStructureVersion=1 
CompGoogleMapPage.bas[0] B4J=true 
CompGoogleMapPage.bas[0] @EndOfDesignText@ 
CompGoogleMapPage.bas[1] 'Class module 
CompGoogleMapPage.bas[2] Sub Class_Globals 
CompGoogleMapPage.bas[3]  Private ws As WebSocket 'ignore 
CompGoogleMapPage.bas[4]  ' will hold our page information 
CompGoogleMapPage.bas[5]  Public page As ABMPage 
CompGoogleMapPage.bas[6]  ' page theme 
CompGoogleMapPage.bas[7]  Private theme As ABMTheme 
CompGoogleMapPage.bas[8]  ' to access the constants 
CompGoogleMapPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompGoogleMapPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompGoogleMapPage.bas[11]  Public Name As String = {0} 
CompGoogleMapPage.bas[12]  ' will hold the unique browsers window id 
CompGoogleMapPage.bas[13]  Private ABMPageId As String = {1} 
CompGoogleMapPage.bas[14]  
CompGoogleMapPage.bas[15]  ' your own variables 
CompGoogleMapPage.bas[16]  Dim myToastId As Int 
CompGoogleMapPage.bas[17]  Dim counter As Int 
CompGoogleMapPage.bas[18]  Dim Markers As List 
CompGoogleMapPage.bas[19] End Sub 
CompGoogleMapPage.bas[20]  
CompGoogleMapPage.bas[21] 'Initializes the object. You can add parameters to this method if needed. 
CompGoogleMapPage.bas[22] Public Sub Initialize 
CompGoogleMapPage.bas[23]  ' build the local structure IMPORTANT! 
CompGoogleMapPage.bas[24]  BuildPage 
CompGoogleMapPage.bas[25]  Markers.Initialize 
CompGoogleMapPage.bas[26] End Sub 
CompGoogleMapPage.bas[27]  
CompGoogleMapPage.bas[28] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompGoogleMapPage.bas[29]  Log( {2} ) 
CompGoogleMapPage.bas[30]  ws = WebSocket1 
CompGoogleMapPage.bas[31]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompGoogleMapPage.bas[32]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompGoogleMapPage.bas[33]  
CompGoogleMapPage.bas[34]  If ABMShared.NeedsAuthorization Then 
CompGoogleMapPage.bas[35]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompGoogleMapPage.bas[36]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompGoogleMapPage.bas[37]  Return 
CompGoogleMapPage.bas[38]  End If 
CompGoogleMapPage.bas[39]  End If 
CompGoogleMapPage.bas[40]  
CompGoogleMapPage.bas[41]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompGoogleMapPage.bas[42]  If page.ComesFromPageCache Then 
CompGoogleMapPage.bas[43]  ' refresh the page 
CompGoogleMapPage.bas[44]  page.Refresh 
CompGoogleMapPage.bas[45]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompGoogleMapPage.bas[46]  page.FinishedLoading 
CompGoogleMapPage.bas[47]  Else 
CompGoogleMapPage.bas[48]  ' Prepare the page 
CompGoogleMapPage.bas[49]  page.Prepare 
CompGoogleMapPage.bas[50]  ' load the dynamic content 
CompGoogleMapPage.bas[51]  ConnectPage 
CompGoogleMapPage.bas[52]  End If 
CompGoogleMapPage.bas[53]  Log(ABMPageId) 
CompGoogleMapPage.bas[54] End Sub 
CompGoogleMapPage.bas[55]  
CompGoogleMapPage.bas[56] Private Sub WebSocket_Disconnected 
CompGoogleMapPage.bas[57]  Log( {7} ) 
CompGoogleMapPage.bas[58] End Sub 
CompGoogleMapPage.bas[59]  
CompGoogleMapPage.bas[60] Sub Page_ParseEvent(Params As Map) 
CompGoogleMapPage.bas[61]  Dim eventName As String = Params.Get( {8} ) 
CompGoogleMapPage.bas[62]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompGoogleMapPage.bas[63]  If eventName = {11} Then 
CompGoogleMapPage.bas[64]  Log( {12} ) 
CompGoogleMapPage.bas[65]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompGoogleMapPage.bas[66]  Return 
CompGoogleMapPage.bas[67]  End If 
CompGoogleMapPage.bas[68]  If SubExists(Me, eventName) Then 
CompGoogleMapPage.bas[69]  Params.Remove( {13} ) 
CompGoogleMapPage.bas[70]  Params.Remove( {14} ) 
CompGoogleMapPage.bas[71]  Select Case Params.Size 
CompGoogleMapPage.bas[72]  Case 0 
CompGoogleMapPage.bas[73]  CallSub(Me, eventName) 
CompGoogleMapPage.bas[74]  Case 1 
CompGoogleMapPage.bas[75]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompGoogleMapPage.bas[76]  Case 2 
CompGoogleMapPage.bas[77]  If Params.get(eventParams(0)) = {15} Then 
CompGoogleMapPage.bas[78]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompGoogleMapPage.bas[79]  CallSub2(Me, eventName, PassedTables) 
CompGoogleMapPage.bas[80]  Else 
CompGoogleMapPage.bas[81]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompGoogleMapPage.bas[82]  End If 
CompGoogleMapPage.bas[83]  Case Else 
CompGoogleMapPage.bas[84]  ' cannot be called directly, to many param 
CompGoogleMapPage.bas[85]  CallSub2(Me, eventName, Params) 
CompGoogleMapPage.bas[86]  End Select 
CompGoogleMapPage.bas[87]  End If 
CompGoogleMapPage.bas[88] End Sub 
CompGoogleMapPage.bas[89]  
CompGoogleMapPage.bas[90] public Sub BuildTheme() 
CompGoogleMapPage.bas[91]  ' start with the base theme defined in ABMShared 
CompGoogleMapPage.bas[92]  theme.Initialize( {16} ) 
CompGoogleMapPage.bas[93]  theme.AddABMTheme(ABMShared.MyTheme) 
CompGoogleMapPage.bas[94]  
CompGoogleMapPage.bas[95]  ' add additional themes specific for this page 
CompGoogleMapPage.bas[96]  ' bluegray button 
CompGoogleMapPage.bas[97]  theme.AddButtonTheme( {17} ) 
CompGoogleMapPage.bas[98]  theme.Button( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompGoogleMapPage.bas[99]  theme.Button( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompGoogleMapPage.bas[100] End Sub 
CompGoogleMapPage.bas[101]  
CompGoogleMapPage.bas[102] public Sub BuildPage() 
CompGoogleMapPage.bas[103]  ' initialize the theme 
CompGoogleMapPage.bas[104]  BuildTheme 
CompGoogleMapPage.bas[105]  
CompGoogleMapPage.bas[106]  ' initialize this page using our theme 
CompGoogleMapPage.bas[107]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompGoogleMapPage.bas[108]  page.ShowLoader=True 
CompGoogleMapPage.bas[109]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompGoogleMapPage.bas[110]  page.PageTitle = {22} 
CompGoogleMapPage.bas[111]  page.PageDescription = {23} 
CompGoogleMapPage.bas[112]  page.PageHTMLName = {24} 
CompGoogleMapPage.bas[113]  page.PageKeywords = {25} 
CompGoogleMapPage.bas[114]  page.PageSiteMapPriority = {26} 
CompGoogleMapPage.bas[115]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompGoogleMapPage.bas[116]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompGoogleMapPage.bas[117]  
CompGoogleMapPage.bas[118]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompGoogleMapPage.bas[119]  
CompGoogleMapPage.bas[120]  ' create the page grid 
CompGoogleMapPage.bas[121]  page.AddRows(13,True, {32} ).AddCells12(1, {33} ) 
CompGoogleMapPage.bas[122]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompGoogleMapPage.bas[123]  
CompGoogleMapPage.bas[124]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompGoogleMapPage.bas[125]  'page.NeedsCodeLabel = True 
CompGoogleMapPage.bas[126]  
CompGoogleMapPage.bas[127]  ABMShared.BuildFooter(page) 
CompGoogleMapPage.bas[128] End Sub 
CompGoogleMapPage.bas[129]  
CompGoogleMapPage.bas[130] Sub ConnectPage() 
CompGoogleMapPage.bas[131]  'NEW 
CompGoogleMapPage.bas[132]  ABMShared.ConnectNavigationBar(page) 
CompGoogleMapPage.bas[133]  
CompGoogleMapPage.bas[134]  ' add paragraph 
CompGoogleMapPage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} ) ) 
CompGoogleMapPage.bas[136]  
CompGoogleMapPage.bas[137]  ' create the google map 
CompGoogleMapPage.bas[138]  Dim gm1 As ABMGoogleMap 
CompGoogleMapPage.bas[139]  gm1.Initialize(page, {36} , 50.8500, 2.8833, 15, 350, ABM.GOOGLEMAPTYPE_ROADMAP) 
CompGoogleMapPage.bas[140]  gm1.Draggable = True 
CompGoogleMapPage.bas[141]  gm1.HasMapTypeControl = True 
CompGoogleMapPage.bas[142]  gm1.HasStreetViewControl = True 
CompGoogleMapPage.bas[143]  gm1.HasZoomControl = True 
CompGoogleMapPage.bas[144]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_ROADMAP) 
CompGoogleMapPage.bas[145]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_TERRAIN) 
CompGoogleMapPage.bas[146]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_HYBRID) 
CompGoogleMapPage.bas[147]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_SATELLITE) 
CompGoogleMapPage.bas[148]  
CompGoogleMapPage.bas[149]  page.Cell(2,1).AddComponent(gm1) 
CompGoogleMapPage.bas[150]  
CompGoogleMapPage.bas[151]  Dim btn As ABMButton 
CompGoogleMapPage.bas[152]  btn.InitializeRaised(page, {37} , {38} , {39} , {40} , {41} ) 
CompGoogleMapPage.bas[153]  page.Cell(3,1).AddComponent(btn) 
CompGoogleMapPage.bas[154]  
CompGoogleMapPage.bas[155]  Dim btn2 As ABMButton 
CompGoogleMapPage.bas[156]  btn2.InitializeRaised(page, {42} , {43} , {44} , {45} , {46} ) 
CompGoogleMapPage.bas[157]  page.Cell(3,1).AddComponent(btn2) 
CompGoogleMapPage.bas[158]  
CompGoogleMapPage.bas[159]  Dim btn3 As ABMButton 
CompGoogleMapPage.bas[160]  btn3.InitializeRaised(page, {47} , {48} , {49} , {50} , {51} ) 
CompGoogleMapPage.bas[161]  page.Cell(4,1).AddComponent(btn3) 
CompGoogleMapPage.bas[162]  
CompGoogleMapPage.bas[163]  Dim btn4 As ABMButton 
CompGoogleMapPage.bas[164]  btn4.InitializeRaised(page, {52} , {53} , {54} , {55} , {56} ) 
CompGoogleMapPage.bas[165]  page.Cell(4,1).AddComponent(btn4) 
CompGoogleMapPage.bas[166]  
CompGoogleMapPage.bas[167]  ' create the input field 
CompGoogleMapPage.bas[168]  Dim inp1 As ABMInput 
CompGoogleMapPage.bas[169]  inp1.Initialize(page, {57} , ABM.INPUT_TEXT, {58} , False, {59} ) 
CompGoogleMapPage.bas[170]  page.Cell(5,1).AddComponent(inp1) 
CompGoogleMapPage.bas[171]  
CompGoogleMapPage.bas[172]  Dim btn5 As ABMButton 
CompGoogleMapPage.bas[173]  btn5.InitializeRaised(page, {60} , {61} , {62} , {63} , {64} ) 
CompGoogleMapPage.bas[174]  page.Cell(5,1).AddComponent(btn5) 
CompGoogleMapPage.bas[175]  
CompGoogleMapPage.bas[176]  Dim btn12 As ABMButton 
CompGoogleMapPage.bas[177]  btn12.InitializeRaised(page, {65} , {66} , {67} , {68} , {69} ) 
CompGoogleMapPage.bas[178]  page.Cell(5,1).AddComponent(btn12) 
CompGoogleMapPage.bas[179]  
CompGoogleMapPage.bas[180]  Dim btn6 As ABMButton 
CompGoogleMapPage.bas[181]  btn6.InitializeRaised(page, {70} , {71} , {72} , {73} , {74} ) 
CompGoogleMapPage.bas[182]  page.Cell(6,1).AddComponent(btn6) 
CompGoogleMapPage.bas[183]  
CompGoogleMapPage.bas[184]  Dim btn7 As ABMButton 
CompGoogleMapPage.bas[185]  btn7.InitializeRaised(page, {75} , {76} , {77} , {78} , {79} ) 
CompGoogleMapPage.bas[186]  page.Cell(6,1).AddComponent(btn7) 
CompGoogleMapPage.bas[187]  
CompGoogleMapPage.bas[188]  Dim btn8 As ABMButton 
CompGoogleMapPage.bas[189]  btn8.InitializeRaised(page, {80} , {81} , {82} , {83} , {84} ) 
CompGoogleMapPage.bas[190]  page.Cell(7,1).AddComponent(btn8) 
CompGoogleMapPage.bas[191]  
CompGoogleMapPage.bas[192]  Dim btn9 As ABMButton 
CompGoogleMapPage.bas[193]  btn9.InitializeRaised(page, {85} , {86} , {87} , {88} , {89} ) 
CompGoogleMapPage.bas[194]  page.Cell(7,1).AddComponent(btn9) 
CompGoogleMapPage.bas[195]  
CompGoogleMapPage.bas[196]  Dim btn10 As ABMButton 
CompGoogleMapPage.bas[197]  btn10.InitializeRaised(page, {90} , {91} , {92} , {93} , {94} ) 
CompGoogleMapPage.bas[198]  page.Cell(8,1).AddComponent(btn10) 
CompGoogleMapPage.bas[199]  
CompGoogleMapPage.bas[200]  Dim btn11 As ABMButton 
CompGoogleMapPage.bas[201]  btn11.InitializeRaised(page, {95} , {96} , {97} , {98} , {99} ) 
CompGoogleMapPage.bas[202]  page.Cell(8,1).AddComponent(btn11) 
CompGoogleMapPage.bas[203]  
CompGoogleMapPage.bas[204]  ' add codeblock 
CompGoogleMapPage.bas[205]  Dim code As StringBuilder 
CompGoogleMapPage.bas[206]  code.Initialize 
CompGoogleMapPage.bas[207]  code.Append( {100} ).Append(CRLF) 
CompGoogleMapPage.bas[208]  code.Append( {101} ).Append(CRLF) 
CompGoogleMapPage.bas[209]  code.Append( {184} ).Append(CRLF) 
CompGoogleMapPage.bas[210]  code.Append( {105} ).Append(CRLF) 
CompGoogleMapPage.bas[211]  code.Append( {106} ).Append(CRLF) 
CompGoogleMapPage.bas[212]  code.Append( {107} ).Append(CRLF) 
CompGoogleMapPage.bas[213]  code.Append( {108} ).Append(CRLF) 
CompGoogleMapPage.bas[214]  code.Append( {109} ).Append(CRLF) 
CompGoogleMapPage.bas[215]  code.Append( {110} ).Append(CRLF) 
CompGoogleMapPage.bas[216]  code.Append( {111} ).Append(CRLF) 
CompGoogleMapPage.bas[217]  code.Append( {112} ).Append(CRLF) 
CompGoogleMapPage.bas[218]  code.Append( {113} ).Append(CRLF) 
CompGoogleMapPage.bas[219]  code.Append( {114} ).Append(CRLF) 
CompGoogleMapPage.bas[220]  
CompGoogleMapPage.bas[221]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {115} , code)) 
CompGoogleMapPage.bas[222]  
CompGoogleMapPage.bas[223]  ' add paragraph 
CompGoogleMapPage.bas[224]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {116} , {117} ) ) 
CompGoogleMapPage.bas[225]  
CompGoogleMapPage.bas[226]  ' create the panorama 
CompGoogleMapPage.bas[227]  Dim gm2 As ABMGoogleMap 
CompGoogleMapPage.bas[228]  gm2.InitializeAsPanorama(page, {118} , 50.8500, 2.8833, 1, 300, 45, 0) 
CompGoogleMapPage.bas[229]  page.Cell(11,1).AddComponent(gm2) 
CompGoogleMapPage.bas[230]  
CompGoogleMapPage.bas[231]  ' add codeblock 
CompGoogleMapPage.bas[232]  Dim code2 As StringBuilder 
CompGoogleMapPage.bas[233]  code2.Initialize 
CompGoogleMapPage.bas[234]  code2.Append( {119} ).Append(CRLF) 
CompGoogleMapPage.bas[235]  code2.Append( {120} ).Append(CRLF) 
CompGoogleMapPage.bas[236]  code2.Append( {186} ).Append(CRLF) 
CompGoogleMapPage.bas[237]  code2.Append( {124} ).Append(CRLF) 
CompGoogleMapPage.bas[238]  code2.Append( {125} ).Append(CRLF) 
CompGoogleMapPage.bas[239]  
CompGoogleMapPage.bas[240]  page.Cell(12,1).AddComponent(ABMShared.BuildCodeBlock(page, {126} , code2)) 
CompGoogleMapPage.bas[241]  
CompGoogleMapPage.bas[242]  ' also add the components to the footer 
CompGoogleMapPage.bas[243]  ABMShared.ConnectFooter(page) 
CompGoogleMapPage.bas[244]  
CompGoogleMapPage.bas[245]  page.Refresh ' IMPORTANT 
CompGoogleMapPage.bas[246]  
CompGoogleMapPage.bas[247]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompGoogleMapPage.bas[248]  page.FinishedLoading 'IMPORTANT 
CompGoogleMapPage.bas[249]  
CompGoogleMapPage.bas[250]  page.RestoreNavigationBarPosition 
CompGoogleMapPage.bas[251] End Sub 
CompGoogleMapPage.bas[252]  
CompGoogleMapPage.bas[253] ' clicked on the navigation bar 
CompGoogleMapPage.bas[254] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompGoogleMapPage.bas[255]  page.SaveNavigationBarPosition 
CompGoogleMapPage.bas[256]  If Action = {127} Then Return 
CompGoogleMapPage.bas[257]  If Action = {128} Then 
CompGoogleMapPage.bas[258]  myToastId = myToastId + 1 
CompGoogleMapPage.bas[259]  page.ShowToast( {129} & myToastId, {130} , {131} , 5000) 
CompGoogleMapPage.bas[260]  Return 
CompGoogleMapPage.bas[261]  End If 
CompGoogleMapPage.bas[262]  If Action = {132} Then 
CompGoogleMapPage.bas[263]  ABMShared.LogOff(page) 
CompGoogleMapPage.bas[264]  Return 
CompGoogleMapPage.bas[265]  End If 
CompGoogleMapPage.bas[266]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompGoogleMapPage.bas[267] End Sub 
CompGoogleMapPage.bas[268]  
CompGoogleMapPage.bas[269] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompGoogleMapPage.bas[270]  page.ws.Session.SetAttribute( {133} , {134} ) 
CompGoogleMapPage.bas[271]  page.ws.Session.SetAttribute( {135} , {136} ) 
CompGoogleMapPage.bas[272]  page.ws.Session.SetAttribute( {137} , {138} ) 
CompGoogleMapPage.bas[273]  ABMShared.NavigateToPage(ws, ABMPageId, {139} ) 
CompGoogleMapPage.bas[274] End Sub 
CompGoogleMapPage.bas[275]  
CompGoogleMapPage.bas[276] Sub btn_Clicked(Target As String) 
CompGoogleMapPage.bas[277]  Dim gm1 As ABMGoogleMap = page.Component( {140} ) 
CompGoogleMapPage.bas[278]  gm1.AddMarker( {141} , 50.8500, 2.8833, ABM.COLOR_RED, {142} , {143} ) 
CompGoogleMapPage.bas[279]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[280] End Sub 
CompGoogleMapPage.bas[281]  
CompGoogleMapPage.bas[282] Sub btn2_Clicked(Target As String) 
CompGoogleMapPage.bas[283]  Dim gm1 As ABMGoogleMap = page.Component( {144} ) 
CompGoogleMapPage.bas[284]  gm1.RemoveMarkers 
CompGoogleMapPage.bas[285]  Markers.Clear 
CompGoogleMapPage.bas[286]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[287] End Sub 
CompGoogleMapPage.bas[288]  
CompGoogleMapPage.bas[289] Sub btn3_Clicked(Target As String) 
CompGoogleMapPage.bas[290]  Dim gm1 As ABMGoogleMap = page.Component( {145} ) 
CompGoogleMapPage.bas[291]  gm1.GeoLocate 
CompGoogleMapPage.bas[292] End Sub 
CompGoogleMapPage.bas[293]  
CompGoogleMapPage.bas[294] Sub btn4_Clicked(Target As String) 
CompGoogleMapPage.bas[295]  Dim gm1 As ABMGoogleMap = page.Component( {146} ) 
CompGoogleMapPage.bas[296]  gm1.FitZoom 
CompGoogleMapPage.bas[297] End Sub 
CompGoogleMapPage.bas[298]  
CompGoogleMapPage.bas[299] Sub btn5_Clicked(Target As String) 
CompGoogleMapPage.bas[300]  Dim gm1 As ABMGoogleMap = page.Component( {147} ) 
CompGoogleMapPage.bas[301]  Dim inp1 As ABMInput = page.Component( {148} ) 
CompGoogleMapPage.bas[302]  gm1.GeoCode(inp1.Text) 
CompGoogleMapPage.bas[303] End Sub 
CompGoogleMapPage.bas[304]  
CompGoogleMapPage.bas[305] Sub btn6_Clicked(Target As String) 
CompGoogleMapPage.bas[306]  Dim gm1 As ABMGoogleMap = page.Component( {149} ) 
CompGoogleMapPage.bas[307]  gm1.AddPolyLine(Markers, ABM.COLOR_DEEPORANGE, ABM.INTENSITY_NORMAL, 0.6, 5) 
CompGoogleMapPage.bas[308]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[309] End Sub 
CompGoogleMapPage.bas[310]  
CompGoogleMapPage.bas[311] Sub btn7_Clicked(Target As String) 
CompGoogleMapPage.bas[312]  Dim gm1 As ABMGoogleMap = page.Component( {150} ) 
CompGoogleMapPage.bas[313]  gm1.RemovePolylines 
CompGoogleMapPage.bas[314]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[315] End Sub 
CompGoogleMapPage.bas[316]  
CompGoogleMapPage.bas[317] Sub btn8_Clicked(Target As String) 
CompGoogleMapPage.bas[318]  Dim gm1 As ABMGoogleMap = page.Component( {151} ) 
CompGoogleMapPage.bas[319]  gm1.AddPolygon(Markers, ABM.COLOR_DEEPPURPLE, ABM.INTENSITY_NORMAL, 0.6, 5, ABM.COLOR_CYAN, ABM.INTENSITY_NORMAL, 0.3) 
CompGoogleMapPage.bas[320]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[321] End Sub 
CompGoogleMapPage.bas[322]  
CompGoogleMapPage.bas[323] Sub btn9_Clicked(Target As String) 
CompGoogleMapPage.bas[324]  Dim gm1 As ABMGoogleMap = page.Component( {152} ) 
CompGoogleMapPage.bas[325]  gm1.RemovePolygons 
CompGoogleMapPage.bas[326]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[327] End Sub 
CompGoogleMapPage.bas[328]  
CompGoogleMapPage.bas[329] Sub btn10_Clicked(Target As String) 
CompGoogleMapPage.bas[330]  Dim gm1 As ABMGoogleMap = page.Component( {153} ) 
CompGoogleMapPage.bas[331]  gm1.AddMarker( {154} , 50.8500, 2.8833, ABM.COLOR_RED, {155} , {156} ) 
CompGoogleMapPage.bas[332]  gm1.AddMarker( {157} , 50.9333, 3.1167, ABM.COLOR_RED, {158} , {159} ) 
CompGoogleMapPage.bas[333]  gm1.AddRoute(50.8500, 2.8833, 50.9333, 3.1167, ABM.GOOGLEMAP_TRAVELMODE_DRIVING, ABM.COLOR_DEEPPURPLE, ABM.INTENSITY_NORMAL, 0.6, 5) 
CompGoogleMapPage.bas[334]  gm1.FitZoom 
CompGoogleMapPage.bas[335]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[336] End Sub 
CompGoogleMapPage.bas[337]  
CompGoogleMapPage.bas[338] Sub btn11_Clicked(Target As String) 
CompGoogleMapPage.bas[339]  Dim gm1 As ABMGoogleMap = page.Component( {160} ) 
CompGoogleMapPage.bas[340]  gm1.RemoveRoutes 
CompGoogleMapPage.bas[341]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[342] End Sub 
CompGoogleMapPage.bas[343]  
CompGoogleMapPage.bas[344] Sub btn12_Clicked(Target As String) 
CompGoogleMapPage.bas[345]  Dim gm1 As ABMGoogleMap = page.Component( {161} ) 
CompGoogleMapPage.bas[346]  gm1.ReverseGeoCode(50.8500, 2.8833) 
CompGoogleMapPage.bas[347]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[348] End Sub 
CompGoogleMapPage.bas[349]  
CompGoogleMapPage.bas[350] Sub gm1_Ready() 
CompGoogleMapPage.bas[351]  Log( {162} ) 
CompGoogleMapPage.bas[352] End Sub 
CompGoogleMapPage.bas[353]  
CompGoogleMapPage.bas[354] Sub gm1_Clicked(Latitude As Double, Longitude As Double) 
CompGoogleMapPage.bas[355]  Dim gm1 As ABMGoogleMap = page.Component( {163} ) 
CompGoogleMapPage.bas[356]  counter = counter + 1 
CompGoogleMapPage.bas[357]  ' to use to build our poly objects 
CompGoogleMapPage.bas[358]  Markers.Add(Latitude) 
CompGoogleMapPage.bas[359]  Markers.Add(Longitude) 
CompGoogleMapPage.bas[360]  gm1.AddMarker( {164} & counter, Latitude, Longitude, ABM.COLOR_BLUE, {165} , {166} ) 
CompGoogleMapPage.bas[361]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[362] End Sub 
CompGoogleMapPage.bas[363]  
CompGoogleMapPage.bas[364] Sub gm1_CurrentLocation(Latitude As Double, Longitude As Double) 
CompGoogleMapPage.bas[365]  myToastId = myToastId + 1 
CompGoogleMapPage.bas[366]  page.ShowToast( {167} & myToastId, {168} , {169} , 5000) 
CompGoogleMapPage.bas[367]  Dim gm1 As ABMGoogleMap = page.Component( {170} ) 
CompGoogleMapPage.bas[368]  gm1.SetLocation(Latitude, Longitude) 
CompGoogleMapPage.bas[369]  gm1.Refresh ' IMPORTANT 
CompGoogleMapPage.bas[370] End Sub 
CompGoogleMapPage.bas[371]  
CompGoogleMapPage.bas[372] Sub gm1_GeoCodeResult(Latitude As Double, Longitude As Double) 
CompGoogleMapPage.bas[373]  Dim gm1 As ABMGoogleMap = page.Component( {171} ) 
CompGoogleMapPage.bas[374]  counter = counter + 1 
CompGoogleMapPage.bas[375]  gm1.AddMarker( {172} & counter, Latitude, Longitude, ABM.COLOR_GREEN, {173} , {174} ) 
CompGoogleMapPage.bas[376]  gm1.SetLocation(Latitude, Longitude) 
CompGoogleMapPage.bas[377]  gm1.refresh ' IMPORTANT 
CompGoogleMapPage.bas[378] End Sub 
CompGoogleMapPage.bas[379]  
CompGoogleMapPage.bas[380] Sub gm1_Error(ErrorMessage As String) 
CompGoogleMapPage.bas[381]  If ErrorMessage <> {175} Then 
CompGoogleMapPage.bas[382]  myToastId = myToastId + 1 
CompGoogleMapPage.bas[383]  page.ShowToast( {176} & myToastId, {177} , ErrorMessage, 5000) 
CompGoogleMapPage.bas[384]  End If 
CompGoogleMapPage.bas[385] End Sub 
CompGoogleMapPage.bas[386]  
CompGoogleMapPage.bas[387] Sub gm1_MarkerClicked(MarkerId As String) 
CompGoogleMapPage.bas[388]  myToastId = myToastId + 1 
CompGoogleMapPage.bas[389]  page.ShowToast( {178} & myToastId, {179} , {180} & MarkerId, 5000) 
CompGoogleMapPage.bas[390] End Sub 
CompGoogleMapPage.bas[391]  
CompGoogleMapPage.bas[392] Sub gm1_ReverseGeoCodeResult(Address As String) 
CompGoogleMapPage.bas[393]  myToastId = myToastId + 1 
CompGoogleMapPage.bas[394]  page.ShowToast( {181} & myToastId, {182} , Address, 5000) 
CompGoogleMapPage.bas[395] End Sub 
Analysing: CompImagePage.bas
CompImagePage.bas[0] ﻿Type=Class 
CompImagePage.bas[0] Version=4.7 
CompImagePage.bas[0] ModulesStructureVersion=1 
CompImagePage.bas[0] B4J=true 
CompImagePage.bas[0] @EndOfDesignText@ 
CompImagePage.bas[1] 'Class module 
CompImagePage.bas[2] Sub Class_Globals 
CompImagePage.bas[3]  Private ws As WebSocket 'ignore 
CompImagePage.bas[4]  ' will hold our page information 
CompImagePage.bas[5]  Public page As ABMPage 
CompImagePage.bas[6]  ' page theme 
CompImagePage.bas[7]  Private theme As ABMTheme 
CompImagePage.bas[8]  ' to access the constants 
CompImagePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompImagePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompImagePage.bas[11]  Public Name As String = {0} 
CompImagePage.bas[12]  ' will hold the unique browsers window id 
CompImagePage.bas[13]  Private ABMPageId As String = {1} 
CompImagePage.bas[14]  
CompImagePage.bas[15]  ' your own variables 
CompImagePage.bas[16]  Dim myToastId As Int 
CompImagePage.bas[17] End Sub 
CompImagePage.bas[18]  
CompImagePage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompImagePage.bas[20] Public Sub Initialize 
CompImagePage.bas[21]  ' build the local structure IMPORTANT! 
CompImagePage.bas[22]  BuildPage 
CompImagePage.bas[23] End Sub 
CompImagePage.bas[24]  
CompImagePage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompImagePage.bas[26]  Log( {2} ) 
CompImagePage.bas[27]  ws = WebSocket1 
CompImagePage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompImagePage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompImagePage.bas[30]  
CompImagePage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompImagePage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompImagePage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompImagePage.bas[34]  Return 
CompImagePage.bas[35]  End If 
CompImagePage.bas[36]  End If 
CompImagePage.bas[37]  
CompImagePage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompImagePage.bas[39]  If page.ComesFromPageCache Then 
CompImagePage.bas[40]  ' refresh the page 
CompImagePage.bas[41]  page.Refresh 
CompImagePage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompImagePage.bas[43]  page.FinishedLoading 
CompImagePage.bas[44]  Else 
CompImagePage.bas[45]  ' Prepare the page 
CompImagePage.bas[46]  page.Prepare 
CompImagePage.bas[47]  ' load the dynamic content 
CompImagePage.bas[48]  ConnectPage 
CompImagePage.bas[49]  End If 
CompImagePage.bas[50]  Log(ABMPageId) 
CompImagePage.bas[51] End Sub 
CompImagePage.bas[52]  
CompImagePage.bas[53] Private Sub WebSocket_Disconnected 
CompImagePage.bas[54]  Log( {7} ) 
CompImagePage.bas[55] End Sub 
CompImagePage.bas[56]  
CompImagePage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompImagePage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompImagePage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompImagePage.bas[60]  If eventName = {11} Then 
CompImagePage.bas[61]  Log( {12} ) 
CompImagePage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompImagePage.bas[63]  Return 
CompImagePage.bas[64]  End If 
CompImagePage.bas[65]  If SubExists(Me, eventName) Then 
CompImagePage.bas[66]  Params.Remove( {13} ) 
CompImagePage.bas[67]  Params.Remove( {14} ) 
CompImagePage.bas[68]  Select Case Params.Size 
CompImagePage.bas[69]  Case 0 
CompImagePage.bas[70]  CallSub(Me, eventName) 
CompImagePage.bas[71]  Case 1 
CompImagePage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompImagePage.bas[73]  Case 2 
CompImagePage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompImagePage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompImagePage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompImagePage.bas[77]  Else 
CompImagePage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompImagePage.bas[79]  End If 
CompImagePage.bas[80]  Case Else 
CompImagePage.bas[81]  ' cannot be called directly, to many param 
CompImagePage.bas[82]  CallSub2(Me, eventName, Params) 
CompImagePage.bas[83]  End Select 
CompImagePage.bas[84]  End If 
CompImagePage.bas[85] End Sub 
CompImagePage.bas[86]  
CompImagePage.bas[87] public Sub BuildTheme() 
CompImagePage.bas[88]  ' start with the base theme defined in ABMShared 
CompImagePage.bas[89]  theme.Initialize( {16} ) 
CompImagePage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompImagePage.bas[91]  
CompImagePage.bas[92]  ' add additional themes specific for this page 
CompImagePage.bas[93]  
CompImagePage.bas[94] End Sub 
CompImagePage.bas[95]  
CompImagePage.bas[96] public Sub BuildPage() 
CompImagePage.bas[97]  ' initialize the theme 
CompImagePage.bas[98]  BuildTheme 
CompImagePage.bas[99]  
CompImagePage.bas[100]  ' initialize this page using our theme 
CompImagePage.bas[101]  page.InitializeWithTheme(Name, {17} & ABMshared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompImagePage.bas[102]  page.ShowLoader=True 
CompImagePage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompImagePage.bas[104]  page.PageTitle = {19} 
CompImagePage.bas[105]  page.PageDescription = {20} 
CompImagePage.bas[106]  page.PageHTMLName = {21} 
CompImagePage.bas[107]  page.PageKeywords = {22} 
CompImagePage.bas[108]  page.PageSiteMapPriority = {23} 
CompImagePage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompImagePage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompImagePage.bas[111]  
CompImagePage.bas[112]  ABMShared.BuildNavigationBar(page, {24} , {25} , {26} , {27} , {28} ) 
CompImagePage.bas[113]  
CompImagePage.bas[114]  ' create the page grid 
CompImagePage.bas[115]  page.AddRows(5,True, {29} ).AddCells12(1, {30} ) 
CompImagePage.bas[116]  page.AddRows(1,True, {31} ).AddCellsOS(1,0,0,0,12,4,4, {32} ).AddCellsOS(1,0,1,1,0,7,7, {33} ) 
CompImagePage.bas[117]  page.AddRows(1,True, {34} ).AddCells12(1, {35} ) 
CompImagePage.bas[118]  page.AddRows(1,True, {36} ).AddCellsOS(1,0,0,0,12,4,4, {37} ).AddCellsOS(1,0,1,1,0,7,7, {38} ) 
CompImagePage.bas[119]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompImagePage.bas[120]  
CompImagePage.bas[121]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompImagePage.bas[122]  'page.NeedsCodeLabel = True 
CompImagePage.bas[123]  
CompImagePage.bas[124]  ABMShared.BuildFooter(page) 
CompImagePage.bas[125] End Sub 
CompImagePage.bas[126]  
CompImagePage.bas[127] Sub ConnectPage() 
CompImagePage.bas[128]  'NEW 
CompImagePage.bas[129]  ABMShared.ConnectNavigationBar(page) 
CompImagePage.bas[130]  
CompImagePage.bas[131]  ' add paragraph 
CompImagePage.bas[132]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {39} , {40} ) ) 
CompImagePage.bas[133]  
CompImagePage.bas[134]  ' add a sub header label 
CompImagePage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader(page, {41} , {42} )) 
CompImagePage.bas[136]  
CompImagePage.bas[137]  ' add paragraph 
CompImagePage.bas[138]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {43} , {44} ) ) 
CompImagePage.bas[139]  
CompImagePage.bas[140]  Dim img2 As ABMImage 
CompImagePage.bas[141]  img2.Initialize(page, {45} , {46} , 1) 
CompImagePage.bas[142]  img2.IsResponsive=True 
CompImagePage.bas[143]  page.Cell(2,1).AddComponent(img2) 
CompImagePage.bas[144]  
CompImagePage.bas[145]  ' add a sub header label 
CompImagePage.bas[146]  page.Cell(3,1).AddComponent(ABMShared.BuildSubHeader(page, {47} , {48} )) 
CompImagePage.bas[147]  
CompImagePage.bas[148]  ' add paragraph 
CompImagePage.bas[149]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} ) ) 
CompImagePage.bas[150]  
CompImagePage.bas[151]  Dim img3 As ABMImage 
CompImagePage.bas[152]  img3.Initialize(page, {51} , {52} , 1) 
CompImagePage.bas[153]  img3.IsResponsive=True 
CompImagePage.bas[154]  img3.IsCircular=True 
CompImagePage.bas[155]  page.Cell(4,1).AddComponent(img3) 
CompImagePage.bas[156]  
CompImagePage.bas[157]  ' add a sub header label 
CompImagePage.bas[158]  page.Cell(5,1).AddComponent(ABMShared.BuildSubHeader(page, {53} , {54} )) 
CompImagePage.bas[159]  
CompImagePage.bas[160]  ' add paragraph 
CompImagePage.bas[161]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {55} , {56} ) ) 
CompImagePage.bas[162]  
CompImagePage.bas[163]  Dim img4 As ABMImage 
CompImagePage.bas[164]  img4.Initialize(page, {57} , {58} , 1) 
CompImagePage.bas[165]  img4.IsResponsive=True 
CompImagePage.bas[166]  img4.IsMaterialBoxed=True 
CompImagePage.bas[167]  page.Cell(6,1).AddComponent(img4) 
CompImagePage.bas[168]  
CompImagePage.bas[169]  ' add paragraph 
CompImagePage.bas[170]  page.Cell(6,2).AddComponent(ABMShared.BuildParagraph(page, {59} , {60} ) ) 
CompImagePage.bas[171]  
CompImagePage.bas[172]  ' add a sub header label 
CompImagePage.bas[173]  page.Cell(7,1).AddComponent(ABMShared.BuildSubHeader(page, {61} , {62} )) 
CompImagePage.bas[174]  
CompImagePage.bas[175]  ' add paragraph 
CompImagePage.bas[176]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {63} , {64} ) ) 
CompImagePage.bas[177]  
CompImagePage.bas[178]  Dim imgT As ABMImage 
CompImagePage.bas[179]  imgT.InitializeAsToggle(page, {65} , {66} , {67} , True, 1) 
CompImagePage.bas[180]  imgT.SetFixedSize(64,64) 
CompImagePage.bas[181]  page.Cell(8,1).AddComponent(imgT) 
CompImagePage.bas[182]  
CompImagePage.bas[183]  ' add paragraph 
CompImagePage.bas[184]  page.Cell(8,2).AddComponent(ABMShared.BuildParagraph(page, {68} , {69} ) ) 
CompImagePage.bas[185]  
CompImagePage.bas[186]  ' also add the components to the footer 
CompImagePage.bas[187]  ABMShared.ConnectFooter(page) 
CompImagePage.bas[188]  
CompImagePage.bas[189]  page.Refresh ' IMPORTANT 
CompImagePage.bas[190]  
CompImagePage.bas[191]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompImagePage.bas[192]  page.FinishedLoading 'IMPORTANT 
CompImagePage.bas[193]  
CompImagePage.bas[194]  page.RestoreNavigationBarPosition 
CompImagePage.bas[195] End Sub 
CompImagePage.bas[196]  
CompImagePage.bas[197] ' clicked on the navigation bar 
CompImagePage.bas[198] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompImagePage.bas[199]  page.SaveNavigationBarPosition 
CompImagePage.bas[200]  If Action = {70} Then Return 
CompImagePage.bas[201]  If Action = {71} Then 
CompImagePage.bas[202]  myToastId = myToastId + 1 
CompImagePage.bas[203]  page.ShowToast( {72} & myToastId, {73} , {74} , 5000) 
CompImagePage.bas[204]  Return 
CompImagePage.bas[205]  End If 
CompImagePage.bas[206]  If Action = {75} Then 
CompImagePage.bas[207]  ABMShared.LogOff(page) 
CompImagePage.bas[208]  Return 
CompImagePage.bas[209]  End If 
CompImagePage.bas[210]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompImagePage.bas[211] End Sub 
CompImagePage.bas[212]  
CompImagePage.bas[213] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompImagePage.bas[214]  page.ws.Session.SetAttribute( {76} , {77} ) 
CompImagePage.bas[215]  page.ws.Session.SetAttribute( {78} , {79} ) 
CompImagePage.bas[216]  page.ws.Session.SetAttribute( {80} , {81} ) 
CompImagePage.bas[217]  ABMShared.NavigateToPage(ws, ABMPageId, {82} ) 
CompImagePage.bas[218] End Sub 
Analysing: CompInputPage.bas
CompInputPage.bas[0] ﻿Type=Class 
CompInputPage.bas[0] Version=4.7 
CompInputPage.bas[0] ModulesStructureVersion=1 
CompInputPage.bas[0] B4J=true 
CompInputPage.bas[0] @EndOfDesignText@ 
CompInputPage.bas[1] 'Class module 
CompInputPage.bas[2] Sub Class_Globals 
CompInputPage.bas[3]  Private ws As WebSocket 'ignore 
CompInputPage.bas[4]  ' will hold our page information 
CompInputPage.bas[5]  Public page As ABMPage 
CompInputPage.bas[6]  ' page theme 
CompInputPage.bas[7]  Private theme As ABMTheme 
CompInputPage.bas[8]  ' to access the constants 
CompInputPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompInputPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompInputPage.bas[11]  Public Name As String = {0} 
CompInputPage.bas[12]  ' will hold the unique browsers window id 
CompInputPage.bas[13]  Private ABMPageId As String = {1} 
CompInputPage.bas[14]  
CompInputPage.bas[15]  ' your own variables 
CompInputPage.bas[16]  Dim myToastId As Int 
CompInputPage.bas[17] End Sub 
CompInputPage.bas[18]  
CompInputPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompInputPage.bas[20] Public Sub Initialize 
CompInputPage.bas[21]  ' build the local structure IMPORTANT! 
CompInputPage.bas[22]  BuildPage 
CompInputPage.bas[23] End Sub 
CompInputPage.bas[24]  
CompInputPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompInputPage.bas[26]  Log( {2} ) 
CompInputPage.bas[27]  ws = WebSocket1 
CompInputPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompInputPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompInputPage.bas[30]  
CompInputPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompInputPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompInputPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompInputPage.bas[34]  Return 
CompInputPage.bas[35]  End If 
CompInputPage.bas[36]  End If 
CompInputPage.bas[37]  
CompInputPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompInputPage.bas[39]  If page.ComesFromPageCache Then 
CompInputPage.bas[40]  ' refresh the page 
CompInputPage.bas[41]  page.Refresh 
CompInputPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompInputPage.bas[43]  page.FinishedLoading 
CompInputPage.bas[44]  Else 
CompInputPage.bas[45]  ' Prepare the page 
CompInputPage.bas[46]  page.Prepare 
CompInputPage.bas[47]  ' load the dynamic content 
CompInputPage.bas[48]  ConnectPage 
CompInputPage.bas[49]  End If 
CompInputPage.bas[50]  Log(ABMPageId) 
CompInputPage.bas[51] End Sub 
CompInputPage.bas[52]  
CompInputPage.bas[53] Private Sub WebSocket_Disconnected 
CompInputPage.bas[54]  Log( {7} ) 
CompInputPage.bas[55] End Sub 
CompInputPage.bas[56]  
CompInputPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompInputPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompInputPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompInputPage.bas[60]  If eventName = {11} Then 
CompInputPage.bas[61]  Log( {12} ) 
CompInputPage.bas[62]  ws.session.SetAttribute( {13} , True) 
CompInputPage.bas[63]  Return 
CompInputPage.bas[64]  End If 
CompInputPage.bas[65]  If SubExists(Me, eventName) Then 
CompInputPage.bas[66]  Params.Remove( {14} ) 
CompInputPage.bas[67]  Params.Remove( {15} ) 
CompInputPage.bas[68]  Select Case Params.Size 
CompInputPage.bas[69]  Case 0 
CompInputPage.bas[70]  CallSub(Me, eventName) 
CompInputPage.bas[71]  Case 1 
CompInputPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompInputPage.bas[73]  Case 2 
CompInputPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompInputPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompInputPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompInputPage.bas[77]  Else 
CompInputPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompInputPage.bas[79]  End If 
CompInputPage.bas[80]  Case Else 
CompInputPage.bas[81]  ' cannot be called diretly, to many param 
CompInputPage.bas[82]  CallSub2(Me, eventName, Params) 
CompInputPage.bas[83]  End Select 
CompInputPage.bas[84]  End If 
CompInputPage.bas[85] End Sub 
CompInputPage.bas[86]  
CompInputPage.bas[87] public Sub BuildTheme() 
CompInputPage.bas[88]  ' start with the base theme defined in ABMShared 
CompInputPage.bas[89]  theme.Initialize( {17} ) 
CompInputPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompInputPage.bas[91]  
CompInputPage.bas[92]  ' add additional themes specific for this page 
CompInputPage.bas[93]  ' change the placeholder for input fields. This is defined per page, not per input! 
CompInputPage.bas[94]  theme.Page.PlaceHolderColorIntensity = ABM.INTENSITY_DARKEN2 
CompInputPage.bas[95]  
CompInputPage.bas[96]  ' bluegray button 
CompInputPage.bas[97]  theme.AddButtonTheme( {18} ) 
CompInputPage.bas[98]  theme.Button( {19} ).BackColor = ABM.COLOR_BLUEGREY 
CompInputPage.bas[99]  theme.Button( {20} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompInputPage.bas[100]  
CompInputPage.bas[101]  ' modal sheet 
CompInputPage.bas[102]  theme.AddContainerTheme( {21} ) 
CompInputPage.bas[103]  theme.Container( {22} ).BackColor = ABM.COLOR_WHITE 
CompInputPage.bas[104] End Sub 
CompInputPage.bas[105]  
CompInputPage.bas[106] public Sub BuildPage() 
CompInputPage.bas[107]  ' initialize the theme 
CompInputPage.bas[108]  BuildTheme 
CompInputPage.bas[109]  
CompInputPage.bas[110]  ' initialize this page using our theme 
CompInputPage.bas[111]  page.InitializeWithTheme(Name, {23} & ABMShared.AppName & {24} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompInputPage.bas[112]  page.ShowLoader=True 
CompInputPage.bas[113]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompInputPage.bas[114]  page.PageTitle = {25} 
CompInputPage.bas[115]  page.PageDescription = {26} 
CompInputPage.bas[116]  page.PageHTMLName = {27} 
CompInputPage.bas[117]  page.PageKeywords = {28} 
CompInputPage.bas[118]  page.PageSiteMapPriority = {29} 
CompInputPage.bas[119]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompInputPage.bas[120]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompInputPage.bas[121]  
CompInputPage.bas[122]  ABMShared.BuildNavigationBar(page, {30} , {31} , {32} , {33} , {34} ) 
CompInputPage.bas[123]  
CompInputPage.bas[124]  ' create the grid 
CompInputPage.bas[125]  page.AddRows(1,True, {35} ).AddCells12(1, {36} ) 
CompInputPage.bas[126]  page.AddRows(1,True, {37} ).AddCellsOS(2,0,0,0,12,6,6, {38} ) 
CompInputPage.bas[127]  page.AddRows(8,True, {39} ).AddCells12(1, {40} ) 
CompInputPage.bas[128]  page.AddRows(1,True, {41} ).AddCellsOS(2,0,0,0,12,6,6, {42} ) 
CompInputPage.bas[129]  page.AddRows(8,True, {43} ).AddCells12(1, {44} ) 
CompInputPage.bas[130]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompInputPage.bas[131]  'page.ShowGridInfo = True 
CompInputPage.bas[132]  
CompInputPage.bas[133]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompInputPage.bas[134]  'page.NeedsCodeLabel = True 
CompInputPage.bas[135]  
CompInputPage.bas[136]  ABMShared.BuildFooter(page) 
CompInputPage.bas[137] End Sub 
CompInputPage.bas[138]  
CompInputPage.bas[139] Sub ConnectPage() 
CompInputPage.bas[140]  'NEW 
CompInputPage.bas[141]  ABMShared.ConnectNavigationBar(page) 
CompInputPage.bas[142]  
CompInputPage.bas[143]  ' add paragraph 
CompInputPage.bas[144]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {45} , {46} ) ) 
CompInputPage.bas[145]  
CompInputPage.bas[146]  ' create the input fields 
CompInputPage.bas[147]  Dim inp1 As ABMInput 
CompInputPage.bas[148]  inp1.Initialize(page, {47} , ABM.INPUT_TEXT, {48} , False, {49} ) 
CompInputPage.bas[149]  inp1.PlaceHolderText = {50} 
CompInputPage.bas[150]  
CompInputPage.bas[151]  'Dim inp1 As ABMFileInput 
CompInputPage.bas[152]  'inp1.Initialize(page, {51} , {52} , {53} , {54} , {55} ) 
CompInputPage.bas[153]  
CompInputPage.bas[154]  
CompInputPage.bas[155]  
CompInputPage.bas[156] ' inp1.AutoCompleteType = ABM.AUTOCOMPLETE_STARTS 
CompInputPage.bas[157] ' inp1.AddAutoComplete( {56} ) 
CompInputPage.bas[158] ' inp1.AddAutoComplete( {57} ) 
CompInputPage.bas[159] ' inp1.AddAutoComplete( {58} ) 
CompInputPage.bas[160] ' inp1.AddAutoComplete( {59} ) 
CompInputPage.bas[161] ' inp1.AddAutoComplete( {60} ) 
CompInputPage.bas[162] ' inp1.AddAutoComplete( {61} ) 
CompInputPage.bas[163] ' inp1.AddAutoComplete( {62} ) 
CompInputPage.bas[164] ' inp1.AddAutoComplete( {63} ) 
CompInputPage.bas[165] ' inp1.AddAutoComplete( {64} ) 
CompInputPage.bas[166] ' inp1.AddAutoComplete( {65} ) 
CompInputPage.bas[167] ' inp1.AddAutoComplete( {66} ) 
CompInputPage.bas[168]  page.Cell(2,1).AddComponent(inp1) 
CompInputPage.bas[169]  
CompInputPage.bas[170]  Dim inp2 As ABMInput 
CompInputPage.bas[171]  inp2.Initialize(page, {67} , ABM.INPUT_TEXT, {68} , False, {69} ) 
CompInputPage.bas[172]  'inp2.Align = ABM.INPUT_TEXTALIGN_END 
CompInputPage.bas[173] ' inp2.AutoCompleteType = ABM.AUTOCOMPLETE_CONTAINS 
CompInputPage.bas[174] ' inp2.AddAutoComplete( {70} ) 
CompInputPage.bas[175] ' inp2.AddAutoComplete( {71} ) 
CompInputPage.bas[176] ' inp2.AddAutoComplete( {72} ) 
CompInputPage.bas[177] ' inp2.AddAutoComplete( {73} ) 
CompInputPage.bas[178] ' inp2.AddAutoComplete( {74} ) 
CompInputPage.bas[179] ' inp2.AddAutoComplete( {75} ) 
CompInputPage.bas[180] ' inp2.AddAutoComplete( {76} ) 
CompInputPage.bas[181]  page.Cell(2,2).AddComponent(inp2) 
CompInputPage.bas[182]  
CompInputPage.bas[183]  Dim inp3 As ABMInput 
CompInputPage.bas[184]  inp3.Initialize(page, {77} , ABM.INPUT_TEXT, {78} , False, {79} ) 
CompInputPage.bas[185]  inp3.Enabled = False 
CompInputPage.bas[186]  inp3.PlaceHolderText = {80} 
CompInputPage.bas[187]  page.Cell(3,1).AddComponent(inp3) 
CompInputPage.bas[188]  
CompInputPage.bas[189]  Dim inp4 As ABMInput 
CompInputPage.bas[190]  inp4.Initialize(page, {81} , ABM.INPUT_PASSWORD, {82} , False, {83} ) 
CompInputPage.bas[191]  page.Cell(4,1).AddComponent(inp4) 
CompInputPage.bas[192]  
CompInputPage.bas[193]  Dim inp5 As ABMInput 
CompInputPage.bas[194]  inp5.Initialize(page, {84} , ABM.INPUT_EMAIL, {85} , False, {86} ) 
CompInputPage.bas[195]  inp5.WrongMessage = {87} 
CompInputPage.bas[196]  inp5.SuccessMessage = {88} 
CompInputPage.bas[197]  page.Cell(5,1).AddComponent(inp5) 
CompInputPage.bas[198]  
CompInputPage.bas[199]  ' add codeblock 
CompInputPage.bas[200]  Dim code1 As StringBuilder 
CompInputPage.bas[201]  code1.Initialize 
CompInputPage.bas[202]  code1.Append( {89} ).Append(CRLF) 
CompInputPage.bas[203]  code1.Append( {275} ).Append(CRLF) 
CompInputPage.bas[204]  code1.Append( {277} ).Append(CRLF) 
CompInputPage.bas[205]  code1.Append( {100} ).Append(CRLF) 
CompInputPage.bas[206]  code1.Append( {101} ).Append(CRLF) 
CompInputPage.bas[207]  code1.Append( {102} ).Append(CRLF) 
CompInputPage.bas[208]  code1.Append( {283} ).Append(CRLF) 
CompInputPage.bas[209]  code1.Append( {110} ).Append(CRLF) 
CompInputPage.bas[210]  code1.Append( {111} ).Append(CRLF) 
CompInputPage.bas[211]  code1.Append( {112} ).Append(CRLF) 
CompInputPage.bas[212]  code1.Append( {289} ).Append(CRLF) 
CompInputPage.bas[213]  code1.Append( {120} ).Append(CRLF) 
CompInputPage.bas[214]  code1.Append( {291} ).Append(CRLF) 
CompInputPage.bas[215]  code1.Append( {124} ).Append(CRLF) 
CompInputPage.bas[216]  code1.Append( {125} ).Append(CRLF) 
CompInputPage.bas[217]  code1.Append( {126} ).Append(CRLF) 
CompInputPage.bas[218]  code1.Append( {297} ).Append(CRLF) 
CompInputPage.bas[219]  code1.Append( {134} ).Append(CRLF) 
CompInputPage.bas[220]  code1.Append( {135} ).Append(CRLF) 
CompInputPage.bas[221]  code1.Append( {136} ).Append(CRLF) 
CompInputPage.bas[222]  code1.Append( {303} ).Append(CRLF) 
CompInputPage.bas[223]  code1.Append( {305} ).Append(CRLF) 
CompInputPage.bas[224]  code1.Append( {307} ).Append(CRLF) 
CompInputPage.bas[225]  code1.Append( {150} ).Append(CRLF) 
CompInputPage.bas[226]  
CompInputPage.bas[227]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlock(page, {151} , code1)) 
CompInputPage.bas[228]  
CompInputPage.bas[229]  ' add a sub header label 
CompInputPage.bas[230]  page.Cell(7,1).AddComponent(ABMShared.BuildSubHeader(page, {152} , {153} )) 
CompInputPage.bas[231]  
CompInputPage.bas[232]  ' input 
CompInputPage.bas[233]  Dim inp6 As ABMInput 
CompInputPage.bas[234]  inp6.Initialize(page, {154} , ABM.INPUT_TEXT, {155} , False, {156} ) 
CompInputPage.bas[235]  inp6.Text = {157} 
CompInputPage.bas[236]  page.Cell(8,1).AddComponent(inp6) 
CompInputPage.bas[237]  
CompInputPage.bas[238]  ' code block 
CompInputPage.bas[239]  Dim code2 As StringBuilder 
CompInputPage.bas[240]  code2.Initialize 
CompInputPage.bas[241]  code2.Append( {158} ).Append(CRLF) 
CompInputPage.bas[242]  code2.Append( {313} ).Append(CRLF) 
CompInputPage.bas[243]  code2.Append( {315} ).Append(CRLF) 
CompInputPage.bas[244]  code2.Append( {169} ).Append(CRLF) 
CompInputPage.bas[245]  
CompInputPage.bas[246]  page.Cell(9,1).AddComponent(ABMShared.BuildCodeBlock(page, {170} , code2)) 
CompInputPage.bas[247]  
CompInputPage.bas[248]  ' add a sub header 
CompInputPage.bas[249]  page.Cell(10,1).AddComponent(ABMShared.BuildSubHeader(page, {171} , {172} )) 
CompInputPage.bas[250]  
CompInputPage.bas[251]  ' add paragraph 
CompInputPage.bas[252]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {173} , {174} ) ) 
CompInputPage.bas[253]  
CompInputPage.bas[254]  ' input 
CompInputPage.bas[255]  Dim inp7 As ABMInput 
CompInputPage.bas[256]  inp7.Initialize(page, {175} , ABM.INPUT_TEXT, {176} , False, {177} ) 
CompInputPage.bas[257]  inp7.IconName = {178} 
CompInputPage.bas[258]  page.Cell(11,1).AddComponent(inp7) 
CompInputPage.bas[259]  
CompInputPage.bas[260]  ' input 
CompInputPage.bas[261]  Dim inp8 As ABMInput 
CompInputPage.bas[262]  inp8.Initialize(page, {179} , ABM.INPUT_TEXT, {180} , False, {181} ) 
CompInputPage.bas[263]  inp8.IconName = {182} 
CompInputPage.bas[264]  page.Cell(11,2).AddComponent(inp8) 
CompInputPage.bas[265]  
CompInputPage.bas[266] ' ' code block 
CompInputPage.bas[267]  Dim code3 As StringBuilder 
CompInputPage.bas[268]  code3.Initialize 
CompInputPage.bas[269]  code3.Append( {183} ).Append(CRLF) 
CompInputPage.bas[270]  code3.Append( {321} ).Append(CRLF) 
CompInputPage.bas[271]  code3.Append( {323} ).Append(CRLF) 
CompInputPage.bas[272]  code3.Append( {194} ).Append(CRLF) 
CompInputPage.bas[273]  code3.Append( {195} ).Append(CRLF) 
CompInputPage.bas[274]  code3.Append( {196} ).Append(CRLF) 
CompInputPage.bas[275]  code3.Append( {329} ).Append(CRLF) 
CompInputPage.bas[276]  code3.Append( {331} ).Append(CRLF) 
CompInputPage.bas[277]  code3.Append( {207} ).Append(CRLF) 
CompInputPage.bas[278]  
CompInputPage.bas[279]  page.Cell(12,1).AddComponent(ABMShared.BuildCodeBlock(page, {208} , code3)) 
CompInputPage.bas[280]  
CompInputPage.bas[281]  ' add a header 
CompInputPage.bas[282]  page.Cell(13,1).AddComponent(ABMShared.BuildHeader(page, {209} , {210} )) 
CompInputPage.bas[283]  
CompInputPage.bas[284]  ' add paragraph 
CompInputPage.bas[285]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {211} , {212} ) ) 
CompInputPage.bas[286]  
CompInputPage.bas[287]  ' input 
CompInputPage.bas[288]  Dim inp9 As ABMInput 
CompInputPage.bas[289]  inp9.Initialize(page, {213} , ABM.INPUT_TEXT, {214} , True, {215} ) 
CompInputPage.bas[290]  inp9.IconName = {216} 
CompInputPage.bas[291]  page.Cell(14,1).AddComponent(inp9) 
CompInputPage.bas[292]  
CompInputPage.bas[293]  ' add button 
CompInputPage.bas[294]  Dim btn1 As ABMButton 
CompInputPage.bas[295]  btn1.InitializeRaised(page, {217} , {218} , {219} , {220} , {221} ) 
CompInputPage.bas[296]  page.Cell(15,1).AddComponent(btn1) 
CompInputPage.bas[297]  
CompInputPage.bas[298]  ' add a date 
CompInputPage.bas[299]  Dim inp10 As ABMInput 
CompInputPage.bas[300]  inp10.Initialize(page, {222} , ABM.INPUT_TEXT, {223} , False, {224} ) 
CompInputPage.bas[301]  ' check out http://robinherbots.github.io/jquery.inputmask/ for more info how to build your masks 
CompInputPage.bas[302]  inp10.inputMask = {225} 
CompInputPage.bas[303]  page.Cell(16,1).AddComponent(inp10) 
CompInputPage.bas[304]  
CompInputPage.bas[305]  ' add a popup window 
CompInputPage.bas[306]  Dim myModal As ABMModalSheet 
CompInputPage.bas[307]  myModal.Initialize(page, {226} , False, False, {227} ) 
CompInputPage.bas[308]  myModal.Content.UseTheme( {228} ) 
CompInputPage.bas[309]  myModal.Footer.UseTheme( {229} ) 
CompInputPage.bas[310]  myModal.IsDismissible = True 
CompInputPage.bas[311]  
CompInputPage.bas[312]  myModal.Content.AddRows(1, True, {230} ).AddCells12(1, {231} ) 
CompInputPage.bas[313]  myModal.content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompInputPage.bas[314]  
CompInputPage.bas[315]  Dim lbl1 As ABMLabel 
CompInputPage.bas[316]  lbl1.Initialize(page, {232} , {233} ,ABM.SIZE_PARAGRAPH, False, {234} ) 
CompInputPage.bas[317]  myModal.content.Cell(1,1).AddComponent(lbl1) 
CompInputPage.bas[318]  
CompInputPage.bas[319]  page.AddModalSheetTemplate(myModal) 
CompInputPage.bas[320]  
CompInputPage.bas[321]  ' also add the components to the footer 
CompInputPage.bas[322]  ABMShared.ConnectFooter(page) 
CompInputPage.bas[323]  
CompInputPage.bas[324]  page.Refresh ' IMPORTANT 
CompInputPage.bas[325]  
CompInputPage.bas[326]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompInputPage.bas[327]  page.FinishedLoading 'IMPORTANT 
CompInputPage.bas[328]  
CompInputPage.bas[329]  page.RestoreNavigationBarPosition 
CompInputPage.bas[330] End Sub 
CompInputPage.bas[331]  
CompInputPage.bas[332] ' clicked on the navigation bar 
CompInputPage.bas[333] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompInputPage.bas[334]  page.SaveNavigationBarPosition 
CompInputPage.bas[335]  If Action = {235} Then Return 
CompInputPage.bas[336]  If Action = {236} Then 
CompInputPage.bas[337]  myToastId = myToastId + 1 
CompInputPage.bas[338]  page.ShowToast( {237} & myToastId, {238} , {239} , 5000) 
CompInputPage.bas[339]  Return 
CompInputPage.bas[340]  End If 
CompInputPage.bas[341]  If Action = {240} Then 
CompInputPage.bas[342]  ABMShared.LogOff(page) 
CompInputPage.bas[343]  Return 
CompInputPage.bas[344]  End If 
CompInputPage.bas[345]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompInputPage.bas[346] End Sub 
CompInputPage.bas[347]  
CompInputPage.bas[348] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompInputPage.bas[349]  page.ws.Session.SetAttribute( {241} , {242} ) 
CompInputPage.bas[350]  page.ws.Session.SetAttribute( {243} , {244} ) 
CompInputPage.bas[351]  page.ws.Session.SetAttribute( {245} , {246} ) 
CompInputPage.bas[352]  ABMShared.NavigateToPage(ws, ABMPageId, {247} ) 
CompInputPage.bas[353] End Sub 
CompInputPage.bas[354]  
CompInputPage.bas[355]  
CompInputPage.bas[356] Sub btn1_Clicked(Target As String) 
CompInputPage.bas[357]  
CompInputPage.bas[358]  Dim inp1 As ABMInput = page.Component( {248} ) 
CompInputPage.bas[359]  'Dim inp1 As ABMFileInput = page.Component( {249} ) 
CompInputPage.bas[360]  Dim inp2 As ABMInput = page.Component( {250} ) 
CompInputPage.bas[361]  Dim inp3 As ABMInput = page.Component( {251} ) 
CompInputPage.bas[362]  Dim inp4 As ABMInput = page.Component( {252} ) 
CompInputPage.bas[363]  Dim inp5 As ABMInput = page.Component( {253} ) 
CompInputPage.bas[364]  Dim inp6 As ABMInput = page.Component( {254} ) 
CompInputPage.bas[365]  Dim inp7 As ABMInput = page.Component( {255} ) 
CompInputPage.bas[366]  Dim inp8 As ABMInput = page.Component( {256} ) 
CompInputPage.bas[367]  Dim inp9 As ABMInput = page.Component( {257} ) 
CompInputPage.bas[368]  Dim mymodal As ABMModalSheet = page.ModalSheet( {258} ) 
CompInputPage.bas[369]  Dim myModalLbl As ABMLabel= mymodal.Content.Component( {259} ) 
CompInputPage.bas[370]  myModalLbl.Text = inp1.Text & {260} & inp2.Text & {261} & inp3.Text & {262} & inp4.Text & {263} & inp5.Text & {264} & inp6.Text & {265} & inp7.Text & {266} & inp8.Text & {267} & inp9.Text 
CompInputPage.bas[371]  
CompInputPage.bas[372]  ' Log( {268} & inp1.GetFileName) 
CompInputPage.bas[373]  
CompInputPage.bas[374]  page.ShowModalSheet( {269} ) 
CompInputPage.bas[375] End Sub 
Analysing: CompLabelPage.bas
CompLabelPage.bas[0] ﻿Type=Class 
CompLabelPage.bas[0] Version=4.7 
CompLabelPage.bas[0] ModulesStructureVersion=1 
CompLabelPage.bas[0] B4J=true 
CompLabelPage.bas[0] @EndOfDesignText@ 
CompLabelPage.bas[1] 'Class module 
CompLabelPage.bas[2] Sub Class_Globals 
CompLabelPage.bas[3]  Private ws As WebSocket 'ignore 
CompLabelPage.bas[4]  ' will hold our page information 
CompLabelPage.bas[5]  Public page As ABMPage 
CompLabelPage.bas[6]  ' page theme 
CompLabelPage.bas[7]  Private theme As ABMTheme 
CompLabelPage.bas[8]  ' to access the constants 
CompLabelPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompLabelPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompLabelPage.bas[11]  Public Name As String = {0} 
CompLabelPage.bas[12]  ' will hold the unique browsers window id 
CompLabelPage.bas[13]  Private ABMPageId As String = {1} 
CompLabelPage.bas[14]  
CompLabelPage.bas[15]  ' your own variables 
CompLabelPage.bas[16]  Dim myToastId As Int 
CompLabelPage.bas[17] End Sub 
CompLabelPage.bas[18]  
CompLabelPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompLabelPage.bas[20] Public Sub Initialize 
CompLabelPage.bas[21]  ' build the local structure IMPORTANT! 
CompLabelPage.bas[22]  BuildPage 
CompLabelPage.bas[23] End Sub 
CompLabelPage.bas[24]  
CompLabelPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompLabelPage.bas[26]  Log( {2} ) 
CompLabelPage.bas[27]  ws = WebSocket1 
CompLabelPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompLabelPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompLabelPage.bas[30]  
CompLabelPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompLabelPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompLabelPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompLabelPage.bas[34]  Return 
CompLabelPage.bas[35]  End If 
CompLabelPage.bas[36]  End If 
CompLabelPage.bas[37]  
CompLabelPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompLabelPage.bas[39]  If page.ComesFromPageCache Then 
CompLabelPage.bas[40]  ' refresh the page 
CompLabelPage.bas[41]  page.Refresh 
CompLabelPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompLabelPage.bas[43]  page.FinishedLoading 
CompLabelPage.bas[44]  Else 
CompLabelPage.bas[45]  ' Prepare the page 
CompLabelPage.bas[46]  page.Prepare 
CompLabelPage.bas[47]  ' load the dynamic content 
CompLabelPage.bas[48]  ConnectPage 
CompLabelPage.bas[49]  End If 
CompLabelPage.bas[50]  Log(ABMPageId) 
CompLabelPage.bas[51] End Sub 
CompLabelPage.bas[52]  
CompLabelPage.bas[53] Private Sub WebSocket_Disconnected 
CompLabelPage.bas[54]  Log( {7} ) 
CompLabelPage.bas[55] End Sub 
CompLabelPage.bas[56]  
CompLabelPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompLabelPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompLabelPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompLabelPage.bas[60]  If eventName = {11} Then 
CompLabelPage.bas[61]  Log( {12} ) 
CompLabelPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompLabelPage.bas[63]  Return 
CompLabelPage.bas[64]  End If 
CompLabelPage.bas[65]  If SubExists(Me, eventName) Then 
CompLabelPage.bas[66]  Params.Remove( {13} ) 
CompLabelPage.bas[67]  Params.Remove( {14} ) 
CompLabelPage.bas[68]  Select Case Params.Size 
CompLabelPage.bas[69]  Case 0 
CompLabelPage.bas[70]  CallSub(Me, eventName) 
CompLabelPage.bas[71]  Case 1 
CompLabelPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompLabelPage.bas[73]  Case 2 
CompLabelPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompLabelPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompLabelPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompLabelPage.bas[77]  Else 
CompLabelPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompLabelPage.bas[79]  End If 
CompLabelPage.bas[80]  Case Else 
CompLabelPage.bas[81]  ' cannot be called directly, to many param 
CompLabelPage.bas[82]  CallSub2(Me, eventName, Params) 
CompLabelPage.bas[83]  End Select 
CompLabelPage.bas[84]  End If 
CompLabelPage.bas[85] End Sub 
CompLabelPage.bas[86]  
CompLabelPage.bas[87] public Sub BuildTheme() 
CompLabelPage.bas[88]  ' start with the base theme defined in ABMShared 
CompLabelPage.bas[89]  theme.Initialize( {16} ) 
CompLabelPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompLabelPage.bas[91]  
CompLabelPage.bas[92]  ' add additional themes specific for this page 
CompLabelPage.bas[93]  theme.AddContainerTheme( {17} ) 
CompLabelPage.bas[94]  theme.Container( {18} ).BackColor = ABM.COLOR_WHITE 
CompLabelPage.bas[95]  theme.Container( {19} ).ZDepth = ABM.ZDEPTH_1 
CompLabelPage.bas[96] End Sub 
CompLabelPage.bas[97]  
CompLabelPage.bas[98] public Sub BuildPage() 
CompLabelPage.bas[99]  ' initialize the theme 
CompLabelPage.bas[100]  BuildTheme 
CompLabelPage.bas[101]  
CompLabelPage.bas[102]  ' initialize this page using our theme 
CompLabelPage.bas[103]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompLabelPage.bas[104]  page.ShowLoader=True 
CompLabelPage.bas[105]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompLabelPage.bas[106]  page.PageTitle = {22} 
CompLabelPage.bas[107]  page.PageDescription = {23} 
CompLabelPage.bas[108]  page.PageHTMLName = {24} 
CompLabelPage.bas[109]  page.PageKeywords = {25} 
CompLabelPage.bas[110]  page.PageSiteMapPriority = {26} 
CompLabelPage.bas[111]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompLabelPage.bas[112]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompLabelPage.bas[113]  
CompLabelPage.bas[114]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompLabelPage.bas[115]  
CompLabelPage.bas[116]  ' create the page grid 
CompLabelPage.bas[117]  page.AddRows(12,True, {32} ).AddCells12(1, {33} ) 
CompLabelPage.bas[118]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompLabelPage.bas[119]  
CompLabelPage.bas[120]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompLabelPage.bas[121]  'page.NeedsCodeLabel = True 
CompLabelPage.bas[122]  
CompLabelPage.bas[123]  ABMShared.BuildFooter(page) 
CompLabelPage.bas[124] End Sub 
CompLabelPage.bas[125]  
CompLabelPage.bas[126] Sub ConnectPage() 
CompLabelPage.bas[127]  'NEW 
CompLabelPage.bas[128]  ABMShared.ConnectNavigationBar(page) 
CompLabelPage.bas[129]  
CompLabelPage.bas[130]  ' add a header label 
CompLabelPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {34} , {35} )) 
CompLabelPage.bas[132]  ' add paragraph 
CompLabelPage.bas[133]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {36} , {37} ) ) 
CompLabelPage.bas[134]  ' add paragraph 
CompLabelPage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} ) ) 
CompLabelPage.bas[136]  
CompLabelPage.bas[137]  Dim lblH1 As ABMLabel 
CompLabelPage.bas[138]  lblH1.Initialize(page, {40} , {41} , ABM.SIZE_H1, False, {42} ) 
CompLabelPage.bas[139]  page.Cell(2,1).AddComponent(lblH1) 
CompLabelPage.bas[140]  
CompLabelPage.bas[141]  Dim lblH2 As ABMLabel 
CompLabelPage.bas[142]  lblH2.Initialize(page, {43} , {44} , ABM.SIZE_H2, False, {45} ) 
CompLabelPage.bas[143]  page.Cell(2,1).AddComponent(lblH2) 
CompLabelPage.bas[144]  
CompLabelPage.bas[145]  Dim lblH3 As ABMLabel 
CompLabelPage.bas[146]  lblH3.Initialize(page, {46} , {47} , ABM.SIZE_H3, False, {48} ) 
CompLabelPage.bas[147]  page.Cell(2,1).AddComponent(lblH3) 
CompLabelPage.bas[148]  
CompLabelPage.bas[149]  Dim lblH4 As ABMLabel 
CompLabelPage.bas[150]  lblH4.Initialize(page, {49} , {50} , ABM.SIZE_H4, False, {51} ) 
CompLabelPage.bas[151]  page.Cell(2,1).AddComponent(lblH4) 
CompLabelPage.bas[152]  
CompLabelPage.bas[153]  Dim lblH5 As ABMLabel 
CompLabelPage.bas[154]  lblH5.Initialize(page, {52} , {53} , ABM.SIZE_H5, False, {54} ) 
CompLabelPage.bas[155]  page.Cell(2,1).AddComponent(lblH5) 
CompLabelPage.bas[156]  
CompLabelPage.bas[157]  Dim lblH6 As ABMLabel 
CompLabelPage.bas[158]  lblH6.Initialize(page, {55} , {56} , ABM.SIZE_H6, False, {57} ) 
CompLabelPage.bas[159]  page.Cell(2,1).AddComponent(lblH6) 
CompLabelPage.bas[160]  
CompLabelPage.bas[161]  Dim lblPar As ABMLabel 
CompLabelPage.bas[162]  lblPar.Initialize(page, {58} , {59} , ABM.SIZE_PARAGRAPH, False, {60} ) 
CompLabelPage.bas[163]  page.Cell(2,1).AddComponent(lblPar) 
CompLabelPage.bas[164]  
CompLabelPage.bas[165]  Dim lblSpan As ABMLabel 
CompLabelPage.bas[166]  lblSpan.Initialize(page, {61} , {62} , ABM.SIZE_SPAN, False, {63} ) 
CompLabelPage.bas[167]  page.Cell(2,1).AddComponent(lblSpan) 
CompLabelPage.bas[168]  
CompLabelPage.bas[169]  ' add a header label 
CompLabelPage.bas[170]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {64} , {65} )) 
CompLabelPage.bas[171]  ' add paragraph 
CompLabelPage.bas[172]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {66} , {67} ) ) 
CompLabelPage.bas[173]  
CompLabelPage.bas[174]  Dim lblBlockquote As ABMLabel 
CompLabelPage.bas[175]  lblBlockquote.Initialize(page, {68} , {69} , ABM.SIZE_SPAN, False, {70} ) 
CompLabelPage.bas[176]  lblBlockquote.IsBlockQuote = True 
CompLabelPage.bas[177]  page.Cell(4,1).AddComponent(lblBlockquote) 
CompLabelPage.bas[178]  
CompLabelPage.bas[179]  ' add a header label 
CompLabelPage.bas[180]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {71} , {72} )) 
CompLabelPage.bas[181]  
CompLabelPage.bas[182]  ' create a container with a white background 
CompLabelPage.bas[183]  Dim cont1 As ABMContainer 
CompLabelPage.bas[184]  cont1.Initialize(page, {73} , {74} ) 
CompLabelPage.bas[185]  cont1.AddRows(1, True, {75} ).AddCells12(1, {76} ) 
CompLabelPage.bas[186]  cont1.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompLabelPage.bas[187]  
CompLabelPage.bas[188]  Dim lblTextFlowNo As ABMLabel 
CompLabelPage.bas[189]  lblTextFlowNo.Initialize(page, {77} , {78} , ABM.SIZE_SPAN, True, {79} ) 
CompLabelPage.bas[190]  cont1.Cell(1,1).AddComponent(lblTextFlowNo) 
CompLabelPage.bas[191]  page.Cell(6,1).AddComponent(cont1) 
CompLabelPage.bas[192]  
CompLabelPage.bas[193]  ' create a another container with a white background 
CompLabelPage.bas[194]  Dim cont2 As ABMContainer 
CompLabelPage.bas[195]  cont2.Initialize(page, {80} , {81} ) 
CompLabelPage.bas[196]  cont2.AddRows(1, True, {82} ).AddCells12(1, {83} ) 
CompLabelPage.bas[197]  cont2.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompLabelPage.bas[198]  
CompLabelPage.bas[199]  Dim lblTextFlow As ABMLabel 
CompLabelPage.bas[200]  lblTextFlow.Initialize(page, {84} , {85} , ABM.SIZE_SPAN, True, {86} ) 
CompLabelPage.bas[201]  lblTextFlow.IsFlowText = True 
CompLabelPage.bas[202]  cont2.Cell(1,1).AddComponent(lblTextFlow) 
CompLabelPage.bas[203]  page.Cell(7,1).AddComponent(cont2) 
CompLabelPage.bas[204]  
CompLabelPage.bas[205]  ' add a header label 
CompLabelPage.bas[206]  page.Cell(8,1).AddComponent(ABMShared.BuildHeader(page, {87} , {88} )) 
CompLabelPage.bas[207]  ' add paragraph 
CompLabelPage.bas[208]  page.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {89} , {90} ) ) 
CompLabelPage.bas[209]  
CompLabelPage.bas[210]  ' add param table 
CompLabelPage.bas[211]  Dim Headers, codes, Descriptions As List 
CompLabelPage.bas[212]  Headers.Initialize2(Array As String( {91} , {92} )) 
CompLabelPage.bas[213]  codes.Initialize2(Array As String( {93} , {94} , {95} , {96} , {97} , {98} , {99} , {100} )) 
CompLabelPage.bas[214]  Descriptions.Initialize2(Array As String( {101} , {102} , {103} , {104} , {105} , {106} , {107} , {108} )) 
CompLabelPage.bas[215]  page.Cell(9,1).AddComponent(ABMShared.BuildParamTable(page, {109} , Headers, codes, Descriptions)) 
CompLabelPage.bas[216]  
CompLabelPage.bas[217]  ' add a header label 
CompLabelPage.bas[218]  page.Cell(10,1).AddComponent(ABMShared.BuildHeader(page, {110} , {111} )) 
CompLabelPage.bas[219]  ' add paragraph 
CompLabelPage.bas[220]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {112} , {113} ) ) 
CompLabelPage.bas[221]  
CompLabelPage.bas[222]  Dim lblTruncate As ABMLabel 
CompLabelPage.bas[223]  lblTruncate.Initialize(page, {114} , {115} , ABM.SIZE_SPAN, False, {116} ) 
CompLabelPage.bas[224]  lblTruncate.Truncate = True 
CompLabelPage.bas[225]  page.Cell(11,1).AddComponent(lblTruncate) 
CompLabelPage.bas[226]  
CompLabelPage.bas[227]  ' also add the components to the footer 
CompLabelPage.bas[228]  ABMShared.ConnectFooter(page) 
CompLabelPage.bas[229]  
CompLabelPage.bas[230]  page.Refresh ' IMPORTANT 
CompLabelPage.bas[231]  
CompLabelPage.bas[232]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompLabelPage.bas[233]  page.FinishedLoading 'IMPORTANT 
CompLabelPage.bas[234]  
CompLabelPage.bas[235]  page.RestoreNavigationBarPosition 
CompLabelPage.bas[236] End Sub 
CompLabelPage.bas[237]  
CompLabelPage.bas[238] ' clicked on the navigation bar 
CompLabelPage.bas[239] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompLabelPage.bas[240]  page.SaveNavigationBarPosition 
CompLabelPage.bas[241]  If Action = {117} Then Return 
CompLabelPage.bas[242]  If Action = {118} Then 
CompLabelPage.bas[243]  myToastId = myToastId + 1 
CompLabelPage.bas[244]  page.ShowToast( {119} & myToastId, {120} , {121} , 5000) 
CompLabelPage.bas[245]  Return 
CompLabelPage.bas[246]  End If 
CompLabelPage.bas[247]  If Action = {122} Then 
CompLabelPage.bas[248]  ABMShared.LogOff(page) 
CompLabelPage.bas[249]  Return 
CompLabelPage.bas[250]  End If 
CompLabelPage.bas[251]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompLabelPage.bas[252] End Sub 
CompLabelPage.bas[253]  
CompLabelPage.bas[254] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompLabelPage.bas[255]  page.ws.Session.SetAttribute( {123} , {124} ) 
CompLabelPage.bas[256]  page.ws.Session.SetAttribute( {125} , {126} ) 
CompLabelPage.bas[257]  page.ws.Session.SetAttribute( {127} , {128} ) 
CompLabelPage.bas[258]  ABMShared.NavigateToPage(ws, ABMPageId, {129} ) 
CompLabelPage.bas[259] End Sub 
Analysing: CompListPage.bas
CompListPage.bas[0] ﻿Type=Class 
CompListPage.bas[0] Version=4.7 
CompListPage.bas[0] ModulesStructureVersion=1 
CompListPage.bas[0] B4J=true 
CompListPage.bas[0] @EndOfDesignText@ 
CompListPage.bas[1] 'Class module 
CompListPage.bas[2] Sub Class_Globals 
CompListPage.bas[3]  Private ws As WebSocket 'ignore 
CompListPage.bas[4]  ' will hold our page information 
CompListPage.bas[5]  Public page As ABMPage 
CompListPage.bas[6]  ' page theme 
CompListPage.bas[7]  Private theme As ABMTheme 
CompListPage.bas[8]  ' to access the constants 
CompListPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompListPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompListPage.bas[11]  Public Name As String = {0} 
CompListPage.bas[12]  ' will hold the unique browsers window id 
CompListPage.bas[13]  Private ABMPageId As String = {1} 
CompListPage.bas[14]  
CompListPage.bas[15]  ' your own variables 
CompListPage.bas[16]  Dim myToastId As Int 
CompListPage.bas[17] End Sub 
CompListPage.bas[18]  
CompListPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompListPage.bas[20] Public Sub Initialize 
CompListPage.bas[21]  ' build the local structure IMPORTANT! 
CompListPage.bas[22]  BuildPage 
CompListPage.bas[23] End Sub 
CompListPage.bas[24]  
CompListPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompListPage.bas[26]  Log( {2} ) 
CompListPage.bas[27]  ws = WebSocket1 
CompListPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompListPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompListPage.bas[30]  
CompListPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompListPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompListPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompListPage.bas[34]  Return 
CompListPage.bas[35]  End If 
CompListPage.bas[36]  End If 
CompListPage.bas[37]  
CompListPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompListPage.bas[39]  If page.ComesFromPageCache Then 
CompListPage.bas[40]  ' refresh the page 
CompListPage.bas[41]  page.Refresh 
CompListPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompListPage.bas[43]  page.FinishedLoading 
CompListPage.bas[44]  Else 
CompListPage.bas[45]  ' Prepare the page 
CompListPage.bas[46]  page.Prepare 
CompListPage.bas[47]  ' load the dynamic content 
CompListPage.bas[48]  ConnectPage 
CompListPage.bas[49]  End If 
CompListPage.bas[50]  Log(ABMPageId) 
CompListPage.bas[51] End Sub 
CompListPage.bas[52]  
CompListPage.bas[53] Private Sub WebSocket_Disconnected 
CompListPage.bas[54]  Log( {7} ) 
CompListPage.bas[55] End Sub 
CompListPage.bas[56]  
CompListPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompListPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompListPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompListPage.bas[60]  If eventName = {11} Then 
CompListPage.bas[61]  Log( {12} ) 
CompListPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompListPage.bas[63]  Return 
CompListPage.bas[64]  End If 
CompListPage.bas[65]  If SubExists(Me, eventName) Then 
CompListPage.bas[66]  Params.Remove( {13} ) 
CompListPage.bas[67]  Params.Remove( {14} ) 
CompListPage.bas[68]  Select Case Params.Size 
CompListPage.bas[69]  Case 0 
CompListPage.bas[70]  CallSub(Me, eventName) 
CompListPage.bas[71]  Case 1 
CompListPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompListPage.bas[73]  Case 2 
CompListPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompListPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompListPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompListPage.bas[77]  Else 
CompListPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompListPage.bas[79]  End If 
CompListPage.bas[80]  Case Else 
CompListPage.bas[81]  ' cannot be called directly, to many param 
CompListPage.bas[82]  CallSub2(Me, eventName, Params) 
CompListPage.bas[83]  End Select 
CompListPage.bas[84]  End If 
CompListPage.bas[85] End Sub 
CompListPage.bas[86]  
CompListPage.bas[87] public Sub BuildTheme() 
CompListPage.bas[88]  ' start with the base theme defined in ABMShared 
CompListPage.bas[89]  theme.Initialize( {16} ) 
CompListPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompListPage.bas[91]  
CompListPage.bas[92]  ' add additional themes specific for this page 
CompListPage.bas[93]  theme.AddListTheme( {17} ) 
CompListPage.bas[94]  theme.List( {18} ).ItemBackColor = ABM.COLOR_BLUEGREY 
CompListPage.bas[95]  theme.List( {19} ).SubItemBackColor = ABM.COLOR_WHITE 
CompListPage.bas[96]  theme.List( {20} ).BackColor = ABM.COLOR_WHITE 
CompListPage.bas[97]  
CompListPage.bas[98]  theme.AddListTheme( {21} ) 
CompListPage.bas[99]  theme.List( {22} ).ItemBackColor = ABM.COLOR_LIME 
CompListPage.bas[100]  theme.List( {23} ).SubItemBackColor = ABM.COLOR_WHITE 
CompListPage.bas[101]  theme.List( {24} ).SubItemDividerColor = ABM.COLOR_WHITE 
CompListPage.bas[102]  theme.List( {25} ).BackColor = ABM.COLOR_WHITE 
CompListPage.bas[103]  
CompListPage.bas[104]  theme.AddLabelTheme( {26} ) 
CompListPage.bas[105]  theme.Label( {27} ).ForeColor = ABM.COLOR_BLACK 
CompListPage.bas[106]  
CompListPage.bas[107]  theme.AddCardTheme( {28} ) 
CompListPage.bas[108]  theme.Card( {29} ).TitleForeColor = ABM.COLOR_WHITE 
CompListPage.bas[109] End Sub 
CompListPage.bas[110]  
CompListPage.bas[111] public Sub BuildPage() 
CompListPage.bas[112]  ' initialize the theme 
CompListPage.bas[113]  BuildTheme 
CompListPage.bas[114]  
CompListPage.bas[115]  ' initialize this page using our theme 
CompListPage.bas[116]  page.InitializeWithTheme(Name, {30} & ABMshared.AppName & {31} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompListPage.bas[117]  page.ShowLoader=True 
CompListPage.bas[118]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompListPage.bas[119]  page.PageTitle = {32} 
CompListPage.bas[120]  page.PageDescription = {33} 
CompListPage.bas[121]  page.PageHTMLName = {34} 
CompListPage.bas[122]  page.PageKeywords = {35} 
CompListPage.bas[123]  page.PageSiteMapPriority = {36} 
CompListPage.bas[124]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompListPage.bas[125]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompListPage.bas[126]  
CompListPage.bas[127]  ABMShared.BuildNavigationBar(page, {37} , {38} , {39} , {40} , {41} ) 
CompListPage.bas[128]  
CompListPage.bas[129]  ' create the page grid 
CompListPage.bas[130]  page.AddRows(8,True, {42} ).AddCells12(1, {43} ) 
CompListPage.bas[131]  page.AddRows(1,True, {44} ).AddCellsOS(1,0,0,0,12,6,6, {45} ) 
CompListPage.bas[132]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompListPage.bas[133]  
CompListPage.bas[134]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompListPage.bas[135]  'page.NeedsCodeLabel = True 
CompListPage.bas[136]  
CompListPage.bas[137]  ABMShared.BuildFooter(page) 
CompListPage.bas[138] End Sub 
CompListPage.bas[139]  
CompListPage.bas[140] Sub ConnectPage() 
CompListPage.bas[141]  'NEW 
CompListPage.bas[142]  ABMShared.ConnectNavigationBar(page) 
CompListPage.bas[143]  
CompListPage.bas[144]  ' add paragraph 
CompListPage.bas[145]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} ) ) 
CompListPage.bas[146]  
CompListPage.bas[147]  ' add a header label 
CompListPage.bas[148]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {48} , {49} )) 
CompListPage.bas[149]  
CompListPage.bas[150]  ' add paragraph 
CompListPage.bas[151]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {50} , {51} ) ) 
CompListPage.bas[152]  
CompListPage.bas[153]  ' create list 
CompListPage.bas[154]  Dim list1 As ABMList 
CompListPage.bas[155]  list1.Initialize(page, {52} , ABM.COLLAPSE_ACCORDION, {53} ) 
CompListPage.bas[156]  
CompListPage.bas[157]  ' add items 
CompListPage.bas[158]  list1.AddItem( {54} , BuildSimpleItem( {55} , {56} , {57} )) 
CompListPage.bas[159]  list1.AddSubItem( {58} , {59} , BuildSimpleItem( {60} , {61} , {62} )) 
CompListPage.bas[160]  list1.AddSubItem( {63} , {64} , BuildSimpleItem( {65} , {66} , {67} )) 
CompListPage.bas[161]  list1.AddSubItem( {68} , {69} , BuildSimpleItem( {70} , {71} , {72} )) 
CompListPage.bas[162]  list1.AddSubItem( {73} , {74} , BuildSimpleItem( {75} , {76} , {77} )) 
CompListPage.bas[163]  list1.AddItem( {78} , BuildSimpleItem( {79} , {80} , {81} )) 
CompListPage.bas[164]  list1.AddSubItem( {82} , {83} , BuildSimpleItem( {84} , {85} , {86} )) 
CompListPage.bas[165]  list1.AddSubItem( {87} , {88} , BuildSimpleItem( {89} , {90} , {91} )) 
CompListPage.bas[166]  list1.AddItem( {92} , BuildSimpleItem( {93} , {94} , {95} )) 
CompListPage.bas[167]  list1.AddSubItem( {96} , {97} , BuildSimpleItem( {98} , {99} , {100} )) 
CompListPage.bas[168]  list1.AddSubItem( {101} , {102} , BuildSimpleItem( {103} , {104} , {105} )) 
CompListPage.bas[169]  list1.AddSubItem( {106} , {107} , BuildSimpleItem( {108} , {109} , {110} )) 
CompListPage.bas[170]  list1.AddSubItem( {111} , {112} , BuildSimpleItem( {113} , {114} , {115} )) 
CompListPage.bas[171]  list1.AddSubItem( {116} , {117} , BuildSimpleItem( {118} , {119} , {120} )) 
CompListPage.bas[172]  list1.AddSubItem( {121} , {122} , BuildSimpleItem( {123} , {124} , {125} )) 
CompListPage.bas[173]  list1.AddSubItem( {126} , {127} , BuildSimpleItem( {128} , {129} , {130} )) 
CompListPage.bas[174]  list1.AddSubItem( {131} , {132} , BuildSimpleItem( {133} , {134} , {135} )) 
CompListPage.bas[175]  list1.AddItem( {136} , BuildSimpleItem( {137} , {138} , {139} )) 
CompListPage.bas[176]  
CompListPage.bas[177]  page.Cell(2,1).AddComponent(list1) 
CompListPage.bas[178]  
CompListPage.bas[179]  ' code block 
CompListPage.bas[180]  Dim code1 As StringBuilder 
CompListPage.bas[181]  code1.Initialize 
CompListPage.bas[182]  
CompListPage.bas[183]  code1.Append( {140} ).Append(CRLF) 
CompListPage.bas[184]  code1.Append( {141} ).Append(CRLF) 
CompListPage.bas[185]  code1.Append( {570} ).Append(CRLF) 
CompListPage.bas[186]  code1.Append( {147} ).Append(CRLF) 
CompListPage.bas[187]  code1.Append( {148} ).Append(CRLF) 
CompListPage.bas[188]  code1.Append( {578} ).Append(CRLF) 
CompListPage.bas[189]  code1.Append( {588} ).Append(CRLF) 
CompListPage.bas[190]  code1.Append( {598} ).Append(CRLF) 
CompListPage.bas[191]  code1.Append( {608} ).Append(CRLF) 
CompListPage.bas[192]  code1.Append( {618} ).Append(CRLF) 
CompListPage.bas[193]  code1.Append( {626} ).Append(CRLF) 
CompListPage.bas[194]  code1.Append( {636} ).Append(CRLF) 
CompListPage.bas[195]  code1.Append( {646} ).Append(CRLF) 
CompListPage.bas[196]  code1.Append( {654} ).Append(CRLF) 
CompListPage.bas[197]  code1.Append( {664} ).Append(CRLF) 
CompListPage.bas[198]  code1.Append( {674} ).Append(CRLF) 
CompListPage.bas[199]  code1.Append( {684} ).Append(CRLF) 
CompListPage.bas[200]  code1.Append( {694} ).Append(CRLF) 
CompListPage.bas[201]  code1.Append( {704} ).Append(CRLF) 
CompListPage.bas[202]  code1.Append( {714} ).Append(CRLF) 
CompListPage.bas[203]  code1.Append( {724} ).Append(CRLF) 
CompListPage.bas[204]  code1.Append( {734} ).Append(CRLF) 
CompListPage.bas[205]  code1.Append( {330} ).Append(CRLF) 
CompListPage.bas[206]  code1.Append( {331} ).Append(CRLF) 
CompListPage.bas[207]  
CompListPage.bas[208]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {332} , code1)) 
CompListPage.bas[209]  
CompListPage.bas[210]  ' code block 
CompListPage.bas[211]  Dim code1a As StringBuilder 
CompListPage.bas[212]  code1a.Initialize 
CompListPage.bas[213]  code1a.Append( {333} ).Append(CRLF) 
CompListPage.bas[214]  code1a.Append( {334} ).Append(CRLF) 
CompListPage.bas[215]  code1a.Append( {736} ).Append(CRLF) 
CompListPage.bas[216]  code1a.Append( {738} ).Append(CRLF) 
CompListPage.bas[217]  code1a.Append( {341} ).Append(CRLF) 
CompListPage.bas[218]  code1a.Append( {342} ).Append(CRLF) 
CompListPage.bas[219]  code1a.Append( {343} ).Append(CRLF) 
CompListPage.bas[220]  code1a.Append( {344} ).Append(CRLF) 
CompListPage.bas[221]  code1a.Append( {345} ).Append(CRLF) 
CompListPage.bas[222]  code1a.Append( {744} ).Append(CRLF) 
CompListPage.bas[223]  code1a.Append( {353} ).Append(CRLF) 
CompListPage.bas[224]  
CompListPage.bas[225]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {354} , code1a)) 
CompListPage.bas[226]  
CompListPage.bas[227]  ' add a header label 
CompListPage.bas[228]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {355} , {356} )) 
CompListPage.bas[229]  
CompListPage.bas[230]  ' add paragraph 
CompListPage.bas[231]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {357} , {358} ) ) 
CompListPage.bas[232]  
CompListPage.bas[233]  ' create list 
CompListPage.bas[234]  Dim list2 As ABMList 
CompListPage.bas[235]  list2.InitializeWithMaxHeight(page, {359} , ABM.COLLAPSE_EXPANDABLE, 310, {360} ) 
CompListPage.bas[236]  
CompListPage.bas[237]  ' add items 
CompListPage.bas[238]  list2.AddItem( {361} , BuildSimpleItem( {362} , {363} , {364} )) 
CompListPage.bas[239]  list2.AddSubItem( {365} , {366} , BuildSimpleItem( {367} , {368} , {369} )) 
CompListPage.bas[240]  list2.AddSubItem( {370} , {371} , BuildSimpleItem( {372} , {373} , {374} )) 
CompListPage.bas[241]  list2.AddSubItem( {375} , {376} , BuildSimpleItem( {377} , {378} , {379} )) 
CompListPage.bas[242]  list2.AddSubItem( {380} , {381} , BuildSimpleItem( {382} , {383} , {384} )) 
CompListPage.bas[243]  list2.AddItem( {385} , BuildSimpleItem( {386} , {387} , {388} )) 
CompListPage.bas[244]  list2.AddSubItem( {389} , {390} , BuildSimpleItem( {391} , {392} , {393} )) 
CompListPage.bas[245]  list2.AddSubItem( {394} , {395} , BuildSimpleItem( {396} , {397} , {398} )) 
CompListPage.bas[246]  list2.AddItem( {399} , BuildSimpleItem( {400} , {401} , {402} )) 
CompListPage.bas[247]  list2.AddSubItem( {403} , {404} , BuildSimpleItem( {405} , {406} , {407} )) 
CompListPage.bas[248]  list2.AddSubItem( {408} , {409} , BuildSimpleItem( {410} , {411} , {412} )) 
CompListPage.bas[249]  list2.AddSubItem( {413} , {414} , BuildSimpleItem( {415} , {416} , {417} )) 
CompListPage.bas[250]  list2.AddSubItem( {418} , {419} , BuildSimpleItem( {420} , {421} , {422} )) 
CompListPage.bas[251]  list2.AddSubItem( {423} , {424} , BuildSimpleItem( {425} , {426} , {427} )) 
CompListPage.bas[252]  list2.AddSubItem( {428} , {429} , BuildSimpleItem( {430} , {431} , {432} )) 
CompListPage.bas[253]  list2.AddSubItem( {433} , {434} , BuildSimpleItem( {435} , {436} , {437} )) 
CompListPage.bas[254]  list2.AddSubItem( {438} , {439} , BuildSimpleItem( {440} , {441} , {442} )) 
CompListPage.bas[255]  
CompListPage.bas[256]  page.Cell(6,1).AddComponent(list2) 
CompListPage.bas[257]  
CompListPage.bas[258]  ' code block 
CompListPage.bas[259]  Dim code2 As StringBuilder 
CompListPage.bas[260]  code2.Initialize 
CompListPage.bas[261]  code2.Append( {748} ).Append(CRLF) 
CompListPage.bas[262]  code2.Append( {448} ).Append(CRLF) 
CompListPage.bas[263]  
CompListPage.bas[264]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlock(page, {449} , code2)) 
CompListPage.bas[265]  
CompListPage.bas[266]  ' add a header label 
CompListPage.bas[267]  page.Cell(8,1).AddComponent(ABMShared.BuildHeader(page, {450} , {451} )) 
CompListPage.bas[268]  
CompListPage.bas[269]  ' add paragraph 
CompListPage.bas[270]  page.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {452} , {453} ) ) 
CompListPage.bas[271]  
CompListPage.bas[272]  ' create list 
CompListPage.bas[273]  Dim list3 As ABMList 
CompListPage.bas[274]  list3.InitializeWithMaxHeight(page, {454} , ABM.COLLAPSE_ACCORDION, 620, {455} ) 
CompListPage.bas[275]  
CompListPage.bas[276]  ' add items 
CompListPage.bas[277]  list3.AddItem( {456} , BuildSimpleItem( {457} , {458} , {459} )) 
CompListPage.bas[278]  list3.AddSubItem( {460} , {461} , BuildItem( {462} , {463} , {464} )) 
CompListPage.bas[279]  list3.AddSubItem( {465} , {466} , BuildItem( {467} , {468} , {469} )) 
CompListPage.bas[280]  list3.AddSubItem( {470} , {471} , BuildItem( {472} , {473} , {474} )) 
CompListPage.bas[281]  list3.AddSubItem( {475} , {476} , BuildItem( {477} , {478} , {479} )) 
CompListPage.bas[282]  list3.AddItem( {480} , BuildSimpleItem( {481} , {482} , {483} )) 
CompListPage.bas[283]  list3.AddSubItem( {484} , {485} , BuildItem( {486} , {487} , {488} )) 
CompListPage.bas[284]  list3.AddSubItem( {489} , {490} , BuildItem( {491} , {492} , {493} )) 
CompListPage.bas[285]  list3.AddItem( {494} , BuildSimpleItem( {495} , {496} , {497} )) 
CompListPage.bas[286]  list3.AddSubItem( {498} , {499} , BuildItem( {500} , {501} , {502} )) 
CompListPage.bas[287]  list3.AddSubItem( {503} , {504} , BuildItem( {505} , {506} , {507} )) 
CompListPage.bas[288]  list3.AddSubItem( {508} , {509} , BuildItem( {510} , {511} , {512} )) 
CompListPage.bas[289]  list3.AddSubItem( {513} , {514} , BuildItem( {515} , {516} , {517} )) 
CompListPage.bas[290]  list3.AddSubItem( {518} , {519} , BuildItem( {520} , {521} , {522} )) 
CompListPage.bas[291]  list3.AddSubItem( {523} , {524} , BuildItem( {525} , {526} , {527} )) 
CompListPage.bas[292]  list3.AddSubItem( {528} , {529} , BuildItem( {530} , {531} , {532} )) 
CompListPage.bas[293]  list3.AddSubItem( {533} , {534} , BuildItem( {535} , {536} , {537} )) 
CompListPage.bas[294]  
CompListPage.bas[295]  page.Cell(9,1).AddComponent(list3) 
CompListPage.bas[296]  
CompListPage.bas[297]  ' also add the components to the footer 
CompListPage.bas[298]  ABMShared.ConnectFooter(page) 
CompListPage.bas[299]  
CompListPage.bas[300]  page.Refresh ' IMPORTANT 
CompListPage.bas[301]  
CompListPage.bas[302]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompListPage.bas[303]  page.FinishedLoading 'IMPORTANT 
CompListPage.bas[304]  
CompListPage.bas[305]  page.RestoreNavigationBarPosition 
CompListPage.bas[306] End Sub 
CompListPage.bas[307]  
CompListPage.bas[308] Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
CompListPage.bas[309]  Dim lbl As ABMLabel 
CompListPage.bas[310]  If icon <> {538} Then 
CompListPage.bas[311]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, False, {539} ) 
CompListPage.bas[312]  Else 
CompListPage.bas[313]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {540} ) 
CompListPage.bas[314]  End If 
CompListPage.bas[315]  lbl.VerticalAlign = True 
CompListPage.bas[316]  lbl.IconName = icon 
CompListPage.bas[317]  Return lbl 
CompListPage.bas[318] End Sub 
CompListPage.bas[319]  
CompListPage.bas[320]  
CompListPage.bas[321] Sub BuildItem(id As String, image As String, title As String) As ABMCard 
CompListPage.bas[322]  ' image card 
CompListPage.bas[323]  Dim card4 As ABMCard 
CompListPage.bas[324]  card4.InitializeAsCard(page, {541} , title, {542} , ABM.CARD_NOTSPECIFIED, {543} ) 
CompListPage.bas[325]  card4.Image = image 
CompListPage.bas[326]  Return card4 
CompListPage.bas[327] End Sub 
CompListPage.bas[328]  
CompListPage.bas[329]  
CompListPage.bas[330] ' clicked on the navigation bar 
CompListPage.bas[331] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompListPage.bas[332]  page.SaveNavigationBarPosition 
CompListPage.bas[333]  If Action = {544} Then Return 
CompListPage.bas[334]  If Action = {545} Then 
CompListPage.bas[335]  myToastId = myToastId + 1 
CompListPage.bas[336]  page.ShowToast( {546} & myToastId, {547} , {548} , 5000) 
CompListPage.bas[337]  Return 
CompListPage.bas[338]  End If 
CompListPage.bas[339]  If Action = {549} Then 
CompListPage.bas[340]  ABMShared.LogOff(page) 
CompListPage.bas[341]  Return 
CompListPage.bas[342]  End If 
CompListPage.bas[343]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompListPage.bas[344] End Sub 
CompListPage.bas[345]  
CompListPage.bas[346] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompListPage.bas[347]  page.ws.Session.SetAttribute( {550} , {551} ) 
CompListPage.bas[348]  page.ws.Session.SetAttribute( {552} , {553} ) 
CompListPage.bas[349]  page.ws.Session.SetAttribute( {554} , {555} ) 
CompListPage.bas[350]  ABMShared.NavigateToPage(ws, ABMPageId, {556} ) 
CompListPage.bas[351] End Sub 
CompListPage.bas[352]  
CompListPage.bas[353] ' clicked on an item in the list 
CompListPage.bas[354] Sub List1_Clicked(ItemId As String) 
CompListPage.bas[355]  If ItemId.StartsWith( {557} ) Then Return 
CompListPage.bas[356]  Dim list1 As ABMList = page.Component( {558} ) 
CompListPage.bas[357]  list1.AddSubItem( {559} , {560} & (1000+myToastId), BuildSimpleItem( {561} & (1000+myToastId), {562} , {563} & (1000+myToastId))) 
CompListPage.bas[358]  list1.Refresh 
CompListPage.bas[359]  Dim lbl As ABMLabel = list1.Item(ItemId) 
CompListPage.bas[360]  myToastId = myToastId + 1 
CompListPage.bas[361]  page.ShowToast( {564} & myToastId, {565} , {566} & lbl.Text, 5000) 
CompListPage.bas[362] End Sub 
Analysing: CompOAuthPage.bas
CompOAuthPage.bas[0] ﻿Type=Class 
CompOAuthPage.bas[0] Version=4.7 
CompOAuthPage.bas[0] ModulesStructureVersion=1 
CompOAuthPage.bas[0] B4J=true 
CompOAuthPage.bas[0] @EndOfDesignText@ 
CompOAuthPage.bas[1] 'Class module 
CompOAuthPage.bas[2] Sub Class_Globals 
CompOAuthPage.bas[3]  Private ws As WebSocket 'ignore 
CompOAuthPage.bas[4]  ' will hold our page information 
CompOAuthPage.bas[5]  Public page As ABMPage 
CompOAuthPage.bas[6]  ' page theme 
CompOAuthPage.bas[7]  Private theme As ABMTheme 
CompOAuthPage.bas[8]  ' to access the constants 
CompOAuthPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompOAuthPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompOAuthPage.bas[11]  Public Name As String = {1} 
CompOAuthPage.bas[12]  ' will hold the unique browsers window id 
CompOAuthPage.bas[13]  Private ABMPageId As String = {2} 
CompOAuthPage.bas[14]  
CompOAuthPage.bas[15]  ' your own variables 
CompOAuthPage.bas[16]  Dim myToastId As Int 
CompOAuthPage.bas[17] End Sub 
CompOAuthPage.bas[18]  
CompOAuthPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompOAuthPage.bas[20] Public Sub Initialize 
CompOAuthPage.bas[21]  ' build the local structure IMPORTANT! 
CompOAuthPage.bas[22]  BuildPage 
CompOAuthPage.bas[23] End Sub 
CompOAuthPage.bas[24]  
CompOAuthPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompOAuthPage.bas[26]  Log( {3} ) 
CompOAuthPage.bas[27]  ws = WebSocket1 
CompOAuthPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompOAuthPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompOAuthPage.bas[30]  
CompOAuthPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompOAuthPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompOAuthPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompOAuthPage.bas[34]  Return 
CompOAuthPage.bas[35]  End If 
CompOAuthPage.bas[36]  End If 
CompOAuthPage.bas[37]  
CompOAuthPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompOAuthPage.bas[39]  If page.ComesFromPageCache Then 
CompOAuthPage.bas[40]  ' refresh the page 
CompOAuthPage.bas[41]  page.Refresh 
CompOAuthPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompOAuthPage.bas[43]  page.FinishedLoading 
CompOAuthPage.bas[44]  Else 
CompOAuthPage.bas[45]  ' Prepare the page 
CompOAuthPage.bas[46]  page.Prepare 
CompOAuthPage.bas[47]  ' load the dynamic content 
CompOAuthPage.bas[48]  ConnectPage 
CompOAuthPage.bas[49]  End If 
CompOAuthPage.bas[50]  Log(ABMPageId) 
CompOAuthPage.bas[51] End Sub 
CompOAuthPage.bas[52]  
CompOAuthPage.bas[53] Private Sub WebSocket_Disconnected 
CompOAuthPage.bas[54]  Log( {8} ) 
CompOAuthPage.bas[55] End Sub 
CompOAuthPage.bas[56]  
CompOAuthPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompOAuthPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
CompOAuthPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompOAuthPage.bas[60]  If eventName = {12} Then 
CompOAuthPage.bas[61]  Log( {13} ) 
CompOAuthPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompOAuthPage.bas[63]  Return 
CompOAuthPage.bas[64]  End If 
CompOAuthPage.bas[65]  If SubExists(Me, eventName) Then 
CompOAuthPage.bas[66]  Params.Remove( {14} ) 
CompOAuthPage.bas[67]  Params.Remove( {15} ) 
CompOAuthPage.bas[68]  Select Case Params.Size 
CompOAuthPage.bas[69]  Case 0 
CompOAuthPage.bas[70]  CallSub(Me, eventName) 
CompOAuthPage.bas[71]  Case 1 
CompOAuthPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompOAuthPage.bas[73]  Case 2 
CompOAuthPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompOAuthPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompOAuthPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompOAuthPage.bas[77]  Else 
CompOAuthPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompOAuthPage.bas[79]  End If 
CompOAuthPage.bas[80]  Case Else 
CompOAuthPage.bas[81]  ' cannot be called directly, to many param 
CompOAuthPage.bas[82]  CallSub2(Me, eventName, Params) 
CompOAuthPage.bas[83]  End Select 
CompOAuthPage.bas[84]  End If 
CompOAuthPage.bas[85] End Sub 
CompOAuthPage.bas[86]  
CompOAuthPage.bas[87] public Sub BuildTheme() 
CompOAuthPage.bas[88]  ' start with the base theme defined in ABMShared 
CompOAuthPage.bas[89]  theme.Initialize( {17} ) 
CompOAuthPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompOAuthPage.bas[91]  
CompOAuthPage.bas[92]  ' add additional themes specific for this page 
CompOAuthPage.bas[93]  
CompOAuthPage.bas[94] End Sub 
CompOAuthPage.bas[95]  
CompOAuthPage.bas[96] public Sub BuildPage() 
CompOAuthPage.bas[97]  ' initialize the theme 
CompOAuthPage.bas[98]  BuildTheme 
CompOAuthPage.bas[99]  
CompOAuthPage.bas[100]  ' initialize this page using our theme 
CompOAuthPage.bas[101]  page.InitializeWithTheme(Name, {18} & ABMShared.AppName & {19} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompOAuthPage.bas[102]  page.ShowLoader=True 
CompOAuthPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompOAuthPage.bas[104]  page.PageTitle = {20} 
CompOAuthPage.bas[105]  page.PageDescription = {21} 
CompOAuthPage.bas[106]  page.PageHTMLName = {22} 
CompOAuthPage.bas[107]  page.PageKeywords = {23} 
CompOAuthPage.bas[108]  page.PageSiteMapPriority = {24} 
CompOAuthPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompOAuthPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompOAuthPage.bas[111]  
CompOAuthPage.bas[112]  ABMShared.BuildNavigationBar(page, {25} , {26} , {27} , {28} , {29} ) 
CompOAuthPage.bas[113]  
CompOAuthPage.bas[114]  ' create the page grid 
CompOAuthPage.bas[115]  page.AddRows(5,True, {30} ).AddCells12(1, {31} ) 
CompOAuthPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompOAuthPage.bas[117]  
CompOAuthPage.bas[118]  ABMShared.BuildFooter(page) 
CompOAuthPage.bas[119] End Sub 
CompOAuthPage.bas[120]  
CompOAuthPage.bas[121] Sub ConnectPage() 
CompOAuthPage.bas[122]  'NEW 
CompOAuthPage.bas[123]  ABMShared.ConnectNavigationBar(page) 
CompOAuthPage.bas[124]  
CompOAuthPage.bas[125]  ' add paragraph 
CompOAuthPage.bas[126]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {32} , {33} ) ) 
CompOAuthPage.bas[127]  
CompOAuthPage.bas[128]  ' via social network 
CompOAuthPage.bas[129]  Dim sOAuth As ABMSocialOAuth 
CompOAuthPage.bas[130]  sOAuth.Initialize(page, {34} ) 
CompOAuthPage.bas[131]  sOAuth.AddFacebookButton( {35} , {36} , {37} ) 
CompOAuthPage.bas[132]  sOAuth.AddTwitterButton( {38} , {39} , {40} ) 
CompOAuthPage.bas[133]  sOAuth.AddGooglePlusButton( {41} , {42} ) 
CompOAuthPage.bas[134]  sOAuth.AddLinkedInButton( {43} , {44} ) 
CompOAuthPage.bas[135]  sOAuth.AddWindowsLiveButton( {45} , {46} , {47} ) 
CompOAuthPage.bas[136]  sOAuth.AddFourSquareButton( {48} , {49} , {50} ) 
CompOAuthPage.bas[137]  sOAuth.AddInstagramButton( {51} , {52} , {53} ) 
CompOAuthPage.bas[138]  sOAuth.AddSoundCloudButton( {54} , {55} , {56} ) 
CompOAuthPage.bas[139]  sOAuth.AddYahooButton( {57} , {58} , {59} ) 
CompOAuthPage.bas[140]  
CompOAuthPage.bas[141]  page.Cell(2,1).AddComponent(sOAuth) 
CompOAuthPage.bas[142]  
CompOAuthPage.bas[143]  Dim code As String = {0} 
CompOAuthPage.bas[157]  
CompOAuthPage.bas[158]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {60} , code)) 
CompOAuthPage.bas[159]  
CompOAuthPage.bas[160]  ' add paragraph 
CompOAuthPage.bas[161]  'page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {61} , {62} ) ) 
CompOAuthPage.bas[162]  
CompOAuthPage.bas[163]  ' add paragraph 
CompOAuthPage.bas[164]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {63} , {64} ) ) 
CompOAuthPage.bas[165]  
CompOAuthPage.bas[166]  ' add a header label 
CompOAuthPage.bas[167]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {65} , {66} )) 
CompOAuthPage.bas[168]  
CompOAuthPage.bas[169]  ' add paragraph 
CompOAuthPage.bas[170]  Dim s As String = {67} 
CompOAuthPage.bas[171]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {68} ,s) ) 
CompOAuthPage.bas[172]  
CompOAuthPage.bas[173]  ' add a header label 
CompOAuthPage.bas[174]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {69} , {70} )) 
CompOAuthPage.bas[175]  
CompOAuthPage.bas[176]  ' add paragraph 
CompOAuthPage.bas[177]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {71} , {72} ) ) 
CompOAuthPage.bas[178]  
CompOAuthPage.bas[179]  Dim img2 As ABMImage 
CompOAuthPage.bas[180]  img2.Initialize(page, {73} , {74} , 1) 
CompOAuthPage.bas[181]  img2.IsResponsive=True 
CompOAuthPage.bas[182]  page.Cell(4,1).AddComponent(img2) 
CompOAuthPage.bas[183]  
CompOAuthPage.bas[184]  ' also add the components to the footer 
CompOAuthPage.bas[185]  ABMShared.ConnectFooter(page) 
CompOAuthPage.bas[186]  
CompOAuthPage.bas[187]  page.Refresh ' IMPORTANT 
CompOAuthPage.bas[188]  
CompOAuthPage.bas[189]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompOAuthPage.bas[190]  page.FinishedLoading 'IMPORTANT 
CompOAuthPage.bas[191]  
CompOAuthPage.bas[192]  page.RestoreNavigationBarPosition 
CompOAuthPage.bas[193] End Sub 
CompOAuthPage.bas[194]  
CompOAuthPage.bas[195] ' clicked on the navigation bar 
CompOAuthPage.bas[196] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompOAuthPage.bas[197]  page.SaveNavigationBarPosition 
CompOAuthPage.bas[198]  If Action = {75} Then Return 
CompOAuthPage.bas[199]  If Action = {76} Then 
CompOAuthPage.bas[200]  myToastId = myToastId + 1 
CompOAuthPage.bas[201]  page.ShowToast( {77} & myToastId, {78} , {79} , 5000) 
CompOAuthPage.bas[202]  Return 
CompOAuthPage.bas[203]  End If 
CompOAuthPage.bas[204]  If Action = {80} Then 
CompOAuthPage.bas[205]  ABMShared.LogOff(page) 
CompOAuthPage.bas[206]  Return 
CompOAuthPage.bas[207]  End If 
CompOAuthPage.bas[208]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompOAuthPage.bas[209] End Sub 
CompOAuthPage.bas[210]  
CompOAuthPage.bas[211] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompOAuthPage.bas[212]  page.ws.Session.SetAttribute( {81} , {82} ) 
CompOAuthPage.bas[213]  page.ws.Session.SetAttribute( {83} , {84} ) 
CompOAuthPage.bas[214]  page.ws.Session.SetAttribute( {85} , {86} ) 
CompOAuthPage.bas[215]  ABMShared.NavigateToPage(ws, ABMPageId, {87} ) 
CompOAuthPage.bas[216] End Sub 
Analysing: CompPaginationPage.bas
CompPaginationPage.bas[0] ﻿Type=Class 
CompPaginationPage.bas[0] Version=4.7 
CompPaginationPage.bas[0] ModulesStructureVersion=1 
CompPaginationPage.bas[0] B4J=true 
CompPaginationPage.bas[0] @EndOfDesignText@ 
CompPaginationPage.bas[1] 'Class module 
CompPaginationPage.bas[2] Sub Class_Globals 
CompPaginationPage.bas[3]  Private ws As WebSocket 'ignore 
CompPaginationPage.bas[4]  ' will hold our page information 
CompPaginationPage.bas[5]  Public page As ABMPage 
CompPaginationPage.bas[6]  ' page theme 
CompPaginationPage.bas[7]  Private theme As ABMTheme 
CompPaginationPage.bas[8]  ' to access the constants 
CompPaginationPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPaginationPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPaginationPage.bas[11]  Public Name As String = {2} 
CompPaginationPage.bas[12]  ' will hold the unique browsers window id 
CompPaginationPage.bas[13]  Private ABMPageId As String = {3} 
CompPaginationPage.bas[14]  
CompPaginationPage.bas[15]  ' your own variables 
CompPaginationPage.bas[16]  Dim myToastId As Int 
CompPaginationPage.bas[17] End Sub 
CompPaginationPage.bas[18]  
CompPaginationPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompPaginationPage.bas[20] Public Sub Initialize 
CompPaginationPage.bas[21]  ' build the local structure IMPORTANT! 
CompPaginationPage.bas[22]  BuildPage 
CompPaginationPage.bas[23] End Sub 
CompPaginationPage.bas[24]  
CompPaginationPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPaginationPage.bas[26]  Log( {4} ) 
CompPaginationPage.bas[27]  ws = WebSocket1 
CompPaginationPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPaginationPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPaginationPage.bas[30]  
CompPaginationPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompPaginationPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompPaginationPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompPaginationPage.bas[34]  Return 
CompPaginationPage.bas[35]  End If 
CompPaginationPage.bas[36]  End If 
CompPaginationPage.bas[37]  
CompPaginationPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPaginationPage.bas[39]  If page.ComesFromPageCache Then 
CompPaginationPage.bas[40]  ' refresh the page 
CompPaginationPage.bas[41]  page.Refresh 
CompPaginationPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPaginationPage.bas[43]  page.FinishedLoading 
CompPaginationPage.bas[44]  Else 
CompPaginationPage.bas[45]  ' Prepare the page 
CompPaginationPage.bas[46]  page.Prepare 
CompPaginationPage.bas[47]  ' load the dynamic content 
CompPaginationPage.bas[48]  ConnectPage 
CompPaginationPage.bas[49]  End If 
CompPaginationPage.bas[50]  Log(ABMPageId) 
CompPaginationPage.bas[51] End Sub 
CompPaginationPage.bas[52]  
CompPaginationPage.bas[53] Private Sub WebSocket_Disconnected 
CompPaginationPage.bas[54]  Log( {9} ) 
CompPaginationPage.bas[55] End Sub 
CompPaginationPage.bas[56]  
CompPaginationPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompPaginationPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompPaginationPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompPaginationPage.bas[60]  If eventName = {13} Then 
CompPaginationPage.bas[61]  Log( {14} ) 
CompPaginationPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPaginationPage.bas[63]  Return 
CompPaginationPage.bas[64]  End If 
CompPaginationPage.bas[65]  If SubExists(Me, eventName) Then 
CompPaginationPage.bas[66]  Params.Remove( {15} ) 
CompPaginationPage.bas[67]  Params.Remove( {16} ) 
CompPaginationPage.bas[68]  Select Case Params.Size 
CompPaginationPage.bas[69]  Case 0 
CompPaginationPage.bas[70]  CallSub(Me, eventName) 
CompPaginationPage.bas[71]  Case 1 
CompPaginationPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPaginationPage.bas[73]  Case 2 
CompPaginationPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompPaginationPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPaginationPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompPaginationPage.bas[77]  Else 
CompPaginationPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPaginationPage.bas[79]  End If 
CompPaginationPage.bas[80]  Case Else 
CompPaginationPage.bas[81]  ' cannot be called directly, to many param 
CompPaginationPage.bas[82]  CallSub2(Me, eventName, Params) 
CompPaginationPage.bas[83]  End Select 
CompPaginationPage.bas[84]  End If 
CompPaginationPage.bas[85] End Sub 
CompPaginationPage.bas[86]  
CompPaginationPage.bas[87] public Sub BuildTheme() 
CompPaginationPage.bas[88]  ' start with the base theme defined in ABMShared 
CompPaginationPage.bas[89]  theme.Initialize( {18} ) 
CompPaginationPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPaginationPage.bas[91]  
CompPaginationPage.bas[92]  ' add additional themes specific for this page 
CompPaginationPage.bas[93]  theme.AddDividerTheme( {19} ) 
CompPaginationPage.bas[94]  theme.Divider( {20} ).ForeColor = ABM.COLOR_LIGHTBLUE 
CompPaginationPage.bas[95] End Sub 
CompPaginationPage.bas[96]  
CompPaginationPage.bas[97] public Sub BuildPage() 
CompPaginationPage.bas[98]  ' initialize the theme 
CompPaginationPage.bas[99]  BuildTheme 
CompPaginationPage.bas[100]  
CompPaginationPage.bas[101]  ' initialize this page using our theme 
CompPaginationPage.bas[102]  page.InitializeWithTheme(Name, {21} & ABMshared.AppName & {22} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPaginationPage.bas[103]  page.ShowLoader=True 
CompPaginationPage.bas[104]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPaginationPage.bas[105]  page.PageTitle = {23} 
CompPaginationPage.bas[106]  page.PageDescription = {24} 
CompPaginationPage.bas[107]  page.PageHTMLName = {25} 
CompPaginationPage.bas[108]  page.PageKeywords = {26} 
CompPaginationPage.bas[109]  page.PageSiteMapPriority = {27} 
CompPaginationPage.bas[110]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPaginationPage.bas[111]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPaginationPage.bas[112]  
CompPaginationPage.bas[113]  ABMShared.BuildNavigationBar(page, {28} , {29} , {30} , {31} , {32} ) 
CompPaginationPage.bas[114]  
CompPaginationPage.bas[115]  ' create the page grid 
CompPaginationPage.bas[116]  page.AddRows(4,True, {33} ).AddCells12(1, {34} ) 
CompPaginationPage.bas[117]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPaginationPage.bas[118]  
CompPaginationPage.bas[119]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPaginationPage.bas[120]  'page.NeedsCodeLabel = True 
CompPaginationPage.bas[121]  
CompPaginationPage.bas[122]  ABMShared.BuildFooter(page) 
CompPaginationPage.bas[123] End Sub 
CompPaginationPage.bas[124]  
CompPaginationPage.bas[125] Sub ConnectPage() 
CompPaginationPage.bas[126]  'NEW 
CompPaginationPage.bas[127]  ABMShared.ConnectNavigationBar(page) 
CompPaginationPage.bas[128]  
CompPaginationPage.bas[129]  ' add paragraph 
CompPaginationPage.bas[130]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} ) ) 
CompPaginationPage.bas[131]  ' add paragraph 
CompPaginationPage.bas[132]  
CompPaginationPage.bas[133]  ' add a pagination on the row 
CompPaginationPage.bas[134]  Dim pagination As ABMPagination 
CompPaginationPage.bas[135]  pagination.Initialize(page, {37} , 10, True, True, {38} ) 
CompPaginationPage.bas[136]  pagination.SetTotalNumberOfPages(20) 
CompPaginationPage.bas[137]  
CompPaginationPage.bas[138]  page.Cell(2,1).AddComponent(pagination) 
CompPaginationPage.bas[139]  
CompPaginationPage.bas[140]  ' code block 
CompPaginationPage.bas[141]  Dim code1 As String = {0} 
CompPaginationPage.bas[146]  
CompPaginationPage.bas[147]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {39} , code1)) 
CompPaginationPage.bas[148]  
CompPaginationPage.bas[149]  ' add paragraph 
CompPaginationPage.bas[150]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompPaginationPage.bas[151]  
CompPaginationPage.bas[152]  ' code block 
CompPaginationPage.bas[153]  Dim code2 As String = {1} 
CompPaginationPage.bas[159]  
CompPaginationPage.bas[160]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {42} , code2)) 
CompPaginationPage.bas[161]  
CompPaginationPage.bas[162]  ' also add the components to the footer 
CompPaginationPage.bas[163]  ABMShared.ConnectFooter(page) 
CompPaginationPage.bas[164]  
CompPaginationPage.bas[165]  page.Refresh ' IMPORTANT 
CompPaginationPage.bas[166]  
CompPaginationPage.bas[167]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPaginationPage.bas[168]  page.FinishedLoading 'IMPORTANT 
CompPaginationPage.bas[169]  
CompPaginationPage.bas[170]  page.RestoreNavigationBarPosition 
CompPaginationPage.bas[171] End Sub 
CompPaginationPage.bas[172]  
CompPaginationPage.bas[173] ' clicked on the navigation bar 
CompPaginationPage.bas[174] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPaginationPage.bas[175]  page.SaveNavigationBarPosition 
CompPaginationPage.bas[176]  If Action = {43} Then Return 
CompPaginationPage.bas[177]  If Action = {44} Then 
CompPaginationPage.bas[178]  myToastId = myToastId + 1 
CompPaginationPage.bas[179]  page.ShowToast( {45} & myToastId, {46} , {47} , 5000) 
CompPaginationPage.bas[180]  Return 
CompPaginationPage.bas[181]  End If 
CompPaginationPage.bas[182]  If Action = {48} Then 
CompPaginationPage.bas[183]  ABMShared.LogOff(page) 
CompPaginationPage.bas[184]  Return 
CompPaginationPage.bas[185]  End If 
CompPaginationPage.bas[186]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPaginationPage.bas[187] End Sub 
CompPaginationPage.bas[188]  
CompPaginationPage.bas[189] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPaginationPage.bas[190]  page.ws.Session.SetAttribute( {49} , {50} ) 
CompPaginationPage.bas[191]  page.ws.Session.SetAttribute( {51} , {52} ) 
CompPaginationPage.bas[192]  page.ws.Session.SetAttribute( {53} , {54} ) 
CompPaginationPage.bas[193]  ABMShared.NavigateToPage(ws, ABMPageId, {55} ) 
CompPaginationPage.bas[194] End Sub 
CompPaginationPage.bas[195]  
CompPaginationPage.bas[196] Sub pagination_PageChanged(OldPage As Int, NewPage As Int) 
CompPaginationPage.bas[197]  ' do your stuff 
CompPaginationPage.bas[198]  Dim pagination As ABMPagination = page.Component( {56} ) 
CompPaginationPage.bas[199]  pagination.SetActivePage(NewPage) ' IMPORTANT! 
CompPaginationPage.bas[200]  pagination.Refresh ' IMPORTANT! 
CompPaginationPage.bas[201] End Sub 
Analysing: CompPatternLockPage.bas
CompPatternLockPage.bas[0] ﻿Type=Class 
CompPatternLockPage.bas[0] Version=4.7 
CompPatternLockPage.bas[0] ModulesStructureVersion=1 
CompPatternLockPage.bas[0] B4J=true 
CompPatternLockPage.bas[0] @EndOfDesignText@ 
CompPatternLockPage.bas[1] 'Class module 
CompPatternLockPage.bas[2] Sub Class_Globals 
CompPatternLockPage.bas[3]  Private ws As WebSocket 'ignore 
CompPatternLockPage.bas[4]  ' will hold our page information 
CompPatternLockPage.bas[5]  Public page As ABMPage 
CompPatternLockPage.bas[6]  ' page theme 
CompPatternLockPage.bas[7]  Private theme As ABMTheme 
CompPatternLockPage.bas[8]  ' to access the constants 
CompPatternLockPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPatternLockPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPatternLockPage.bas[11]  Public Name As String = {2} 
CompPatternLockPage.bas[12]  ' will hold the unique browsers window id 
CompPatternLockPage.bas[13]  Private ABMPageId As String = {3} 
CompPatternLockPage.bas[14]  
CompPatternLockPage.bas[15]  ' your own variables 
CompPatternLockPage.bas[16]  Dim myToastId As Int 
CompPatternLockPage.bas[17] End Sub 
CompPatternLockPage.bas[18]  
CompPatternLockPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompPatternLockPage.bas[20] Public Sub Initialize 
CompPatternLockPage.bas[21]  ' build the local structure IMPORTANT! 
CompPatternLockPage.bas[22]  BuildPage 
CompPatternLockPage.bas[23] End Sub 
CompPatternLockPage.bas[24]  
CompPatternLockPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPatternLockPage.bas[26]  Log( {4} ) 
CompPatternLockPage.bas[27]  ws = WebSocket1 
CompPatternLockPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPatternLockPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPatternLockPage.bas[30]  
CompPatternLockPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompPatternLockPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompPatternLockPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompPatternLockPage.bas[34]  Return 
CompPatternLockPage.bas[35]  End If 
CompPatternLockPage.bas[36]  End If 
CompPatternLockPage.bas[37]  
CompPatternLockPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPatternLockPage.bas[39]  If page.ComesFromPageCache Then 
CompPatternLockPage.bas[40]  ' refresh the page 
CompPatternLockPage.bas[41]  page.Refresh 
CompPatternLockPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPatternLockPage.bas[43]  page.FinishedLoading 
CompPatternLockPage.bas[44]  Else 
CompPatternLockPage.bas[45]  ' Prepare the page 
CompPatternLockPage.bas[46]  page.Prepare 
CompPatternLockPage.bas[47]  ' load the dynamic content 
CompPatternLockPage.bas[48]  ConnectPage 
CompPatternLockPage.bas[49]  End If 
CompPatternLockPage.bas[50]  Log(ABMPageId) 
CompPatternLockPage.bas[51] End Sub 
CompPatternLockPage.bas[52]  
CompPatternLockPage.bas[53] Private Sub WebSocket_Disconnected 
CompPatternLockPage.bas[54]  Log( {9} ) 
CompPatternLockPage.bas[55] End Sub 
CompPatternLockPage.bas[56]  
CompPatternLockPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompPatternLockPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompPatternLockPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompPatternLockPage.bas[60]  If eventName = {13} Then 
CompPatternLockPage.bas[61]  Log( {14} ) 
CompPatternLockPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPatternLockPage.bas[63]  Return 
CompPatternLockPage.bas[64]  End If 
CompPatternLockPage.bas[65]  If SubExists(Me, eventName) Then 
CompPatternLockPage.bas[66]  Params.Remove( {15} ) 
CompPatternLockPage.bas[67]  Params.Remove( {16} ) 
CompPatternLockPage.bas[68]  Select Case Params.Size 
CompPatternLockPage.bas[69]  Case 0 
CompPatternLockPage.bas[70]  CallSub(Me, eventName) 
CompPatternLockPage.bas[71]  Case 1 
CompPatternLockPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPatternLockPage.bas[73]  Case 2 
CompPatternLockPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompPatternLockPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPatternLockPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompPatternLockPage.bas[77]  Else 
CompPatternLockPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPatternLockPage.bas[79]  End If 
CompPatternLockPage.bas[80]  Case Else 
CompPatternLockPage.bas[81]  ' cannot be called directly, to many param 
CompPatternLockPage.bas[82]  CallSub2(Me, eventName, Params) 
CompPatternLockPage.bas[83]  End Select 
CompPatternLockPage.bas[84]  End If 
CompPatternLockPage.bas[85] End Sub 
CompPatternLockPage.bas[86]  
CompPatternLockPage.bas[87] public Sub BuildTheme() 
CompPatternLockPage.bas[88]  ' start with the base theme defined in ABMShared 
CompPatternLockPage.bas[89]  theme.Initialize( {18} ) 
CompPatternLockPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPatternLockPage.bas[91]  
CompPatternLockPage.bas[92] End Sub 
CompPatternLockPage.bas[93]  
CompPatternLockPage.bas[94] public Sub BuildPage() 
CompPatternLockPage.bas[95]  ' initialize the theme 
CompPatternLockPage.bas[96]  BuildTheme 
CompPatternLockPage.bas[97]  
CompPatternLockPage.bas[98]  ' initialize this page using our theme 
CompPatternLockPage.bas[99]  page.InitializeWithTheme(Name, {19} & ABMshared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPatternLockPage.bas[100]  page.ShowLoader=True 
CompPatternLockPage.bas[101]  page.PageTitle = {21} 
CompPatternLockPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPatternLockPage.bas[103]  page.PageDescription = {22} 
CompPatternLockPage.bas[104]  page.PageHTMLName = {23} 
CompPatternLockPage.bas[105]  page.PageKeywords = {24} 
CompPatternLockPage.bas[106]  page.PageSiteMapPriority = {25} 
CompPatternLockPage.bas[107]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPatternLockPage.bas[108]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPatternLockPage.bas[109]  
CompPatternLockPage.bas[110]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompPatternLockPage.bas[111]  
CompPatternLockPage.bas[112]  ' create the page grid 
CompPatternLockPage.bas[113]  page.AddRows(4,True, {31} ).AddCells12(1, {32} ) 
CompPatternLockPage.bas[114]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPatternLockPage.bas[115]  
CompPatternLockPage.bas[116]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPatternLockPage.bas[117]  'page.NeedsCodeLabel = True 
CompPatternLockPage.bas[118]  
CompPatternLockPage.bas[119]  ABMShared.BuildFooter(page) 
CompPatternLockPage.bas[120] End Sub 
CompPatternLockPage.bas[121]  
CompPatternLockPage.bas[122] Sub ConnectPage() 
CompPatternLockPage.bas[123]  'NEW 
CompPatternLockPage.bas[124]  ABMShared.ConnectNavigationBar(page) 
CompPatternLockPage.bas[125]  
CompPatternLockPage.bas[126]  ' add paragraph 
CompPatternLockPage.bas[127]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} )) 
CompPatternLockPage.bas[128]  
CompPatternLockPage.bas[129]  Dim patlock As ABMPatternLock 
CompPatternLockPage.bas[130]  patlock.Initialize(page, {35} , 3, {36} ) 
CompPatternLockPage.bas[131]  page.Cell(2,1).AddComponent(patlock) 
CompPatternLockPage.bas[132]  
CompPatternLockPage.bas[133]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} )) 
CompPatternLockPage.bas[134]  
CompPatternLockPage.bas[135]  ' add codeblock 
CompPatternLockPage.bas[136]  Dim code As String = {0} 
CompPatternLockPage.bas[139]  
CompPatternLockPage.bas[140]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {39} , code)) 
CompPatternLockPage.bas[141]  
CompPatternLockPage.bas[142]  ' add codeblock 
CompPatternLockPage.bas[143]  Dim code2 As String = {1} 
CompPatternLockPage.bas[151]  
CompPatternLockPage.bas[152]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {40} , code2)) 
CompPatternLockPage.bas[153]  
CompPatternLockPage.bas[154]  ' also add the components to the footer 
CompPatternLockPage.bas[155]  ABMShared.ConnectFooter(page) 
CompPatternLockPage.bas[156]  
CompPatternLockPage.bas[157]  page.Refresh ' IMPORTANT 
CompPatternLockPage.bas[158]  
CompPatternLockPage.bas[159]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPatternLockPage.bas[160]  page.FinishedLoading 'IMPORTANT 
CompPatternLockPage.bas[161]  
CompPatternLockPage.bas[162]  page.RestoreNavigationBarPosition 
CompPatternLockPage.bas[163] End Sub 
CompPatternLockPage.bas[164]  
CompPatternLockPage.bas[165] Sub patlock_Changed(target As String, value As String) 
CompPatternLockPage.bas[166]  Log(value) 
CompPatternLockPage.bas[167]  Dim patLock As ABMPatternLock = page.Component( {41} ) 
CompPatternLockPage.bas[168]  If value <> {42} Then 
CompPatternLockPage.bas[169]  patLock.ShowIsWrong 
CompPatternLockPage.bas[170]  End If 
CompPatternLockPage.bas[171] End Sub 
CompPatternLockPage.bas[172]  
CompPatternLockPage.bas[173] ' clicked on the navigation bar 
CompPatternLockPage.bas[174] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPatternLockPage.bas[175]  page.SaveNavigationBarPosition 
CompPatternLockPage.bas[176]  If Action = {43} Then Return 
CompPatternLockPage.bas[177]  If Action = {44} Then 
CompPatternLockPage.bas[178]  myToastId = myToastId + 1 
CompPatternLockPage.bas[179]  page.ShowToast( {45} & myToastId, {46} , {47} , 5000) 
CompPatternLockPage.bas[180]  Return 
CompPatternLockPage.bas[181]  End If 
CompPatternLockPage.bas[182]  If Action = {48} Then 
CompPatternLockPage.bas[183]  ABMShared.LogOff(page) 
CompPatternLockPage.bas[184]  Return 
CompPatternLockPage.bas[185]  End If 
CompPatternLockPage.bas[186]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPatternLockPage.bas[187] End Sub 
CompPatternLockPage.bas[188]  
CompPatternLockPage.bas[189] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPatternLockPage.bas[190]  page.ws.Session.SetAttribute( {49} , {50} ) 
CompPatternLockPage.bas[191]  page.ws.Session.SetAttribute( {51} , {52} ) 
CompPatternLockPage.bas[192]  page.ws.Session.SetAttribute( {53} , {54} ) 
CompPatternLockPage.bas[193]  ABMShared.NavigateToPage(ws, ABMPageId, {55} ) 
CompPatternLockPage.bas[194] End Sub 
CompPatternLockPage.bas[195]  
CompPatternLockPage.bas[196] Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompPatternLockPage.bas[197]  
CompPatternLockPage.bas[198] End Sub 
Analysing: CompPDFViewerPage.bas
CompPDFViewerPage.bas[0] ﻿Type=Class 
CompPDFViewerPage.bas[0] Version=4.7 
CompPDFViewerPage.bas[0] ModulesStructureVersion=1 
CompPDFViewerPage.bas[0] B4J=true 
CompPDFViewerPage.bas[0] @EndOfDesignText@ 
CompPDFViewerPage.bas[1] 'Class module 
CompPDFViewerPage.bas[2] Sub Class_Globals 
CompPDFViewerPage.bas[3]  Private ws As WebSocket 'ignore 
CompPDFViewerPage.bas[4]  ' will hold our page information 
CompPDFViewerPage.bas[5]  Public page As ABMPage 
CompPDFViewerPage.bas[6]  ' page theme 
CompPDFViewerPage.bas[7]  Private theme As ABMTheme 
CompPDFViewerPage.bas[8]  ' to access the constants 
CompPDFViewerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPDFViewerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPDFViewerPage.bas[11]  Public Name As String = {1} 
CompPDFViewerPage.bas[12]  ' will hold the unique browsers window id 
CompPDFViewerPage.bas[13]  Private ABMPageId As String = {2} 
CompPDFViewerPage.bas[14]  
CompPDFViewerPage.bas[15]  ' your own variables 
CompPDFViewerPage.bas[16]  Dim myToastId As Int 
CompPDFViewerPage.bas[17] End Sub 
CompPDFViewerPage.bas[18]  
CompPDFViewerPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompPDFViewerPage.bas[20] Public Sub Initialize 
CompPDFViewerPage.bas[21]  ' build the local structure IMPORTANT! 
CompPDFViewerPage.bas[22]  BuildPage 
CompPDFViewerPage.bas[23] End Sub 
CompPDFViewerPage.bas[24]  
CompPDFViewerPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPDFViewerPage.bas[26]  Log( {3} ) 
CompPDFViewerPage.bas[27]  ws = WebSocket1 
CompPDFViewerPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPDFViewerPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPDFViewerPage.bas[30]  
CompPDFViewerPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompPDFViewerPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompPDFViewerPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompPDFViewerPage.bas[34]  Return 
CompPDFViewerPage.bas[35]  End If 
CompPDFViewerPage.bas[36]  End If 
CompPDFViewerPage.bas[37]  
CompPDFViewerPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPDFViewerPage.bas[39]  If page.ComesFromPageCache Then 
CompPDFViewerPage.bas[40]  ' refresh the page 
CompPDFViewerPage.bas[41]  page.Refresh 
CompPDFViewerPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPDFViewerPage.bas[43]  page.FinishedLoading 
CompPDFViewerPage.bas[44]  Else 
CompPDFViewerPage.bas[45]  ' Prepare the page 
CompPDFViewerPage.bas[46]  page.Prepare 
CompPDFViewerPage.bas[47]  ' load the dynamic content 
CompPDFViewerPage.bas[48]  ConnectPage 
CompPDFViewerPage.bas[49]  End If 
CompPDFViewerPage.bas[50]  Log(ABMPageId) 
CompPDFViewerPage.bas[51] End Sub 
CompPDFViewerPage.bas[52]  
CompPDFViewerPage.bas[53] Private Sub WebSocket_Disconnected 
CompPDFViewerPage.bas[54]  Log( {8} ) 
CompPDFViewerPage.bas[55] End Sub 
CompPDFViewerPage.bas[56]  
CompPDFViewerPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompPDFViewerPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
CompPDFViewerPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompPDFViewerPage.bas[60]  If eventName = {12} Then 
CompPDFViewerPage.bas[61]  Log( {13} ) 
CompPDFViewerPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPDFViewerPage.bas[63]  Return 
CompPDFViewerPage.bas[64]  End If 
CompPDFViewerPage.bas[65]  If SubExists(Me, eventName) Then 
CompPDFViewerPage.bas[66]  Params.Remove( {14} ) 
CompPDFViewerPage.bas[67]  Params.Remove( {15} ) 
CompPDFViewerPage.bas[68]  Select Case Params.Size 
CompPDFViewerPage.bas[69]  Case 0 
CompPDFViewerPage.bas[70]  CallSub(Me, eventName) 
CompPDFViewerPage.bas[71]  Case 1 
CompPDFViewerPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPDFViewerPage.bas[73]  Case 2 
CompPDFViewerPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompPDFViewerPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPDFViewerPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompPDFViewerPage.bas[77]  Else 
CompPDFViewerPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPDFViewerPage.bas[79]  End If 
CompPDFViewerPage.bas[80]  Case Else 
CompPDFViewerPage.bas[81]  ' cannot be called directly, to many param 
CompPDFViewerPage.bas[82]  CallSub2(Me, eventName, Params) 
CompPDFViewerPage.bas[83]  End Select 
CompPDFViewerPage.bas[84]  End If 
CompPDFViewerPage.bas[85] End Sub 
CompPDFViewerPage.bas[86]  
CompPDFViewerPage.bas[87] public Sub BuildTheme() 
CompPDFViewerPage.bas[88]  ' start with the base theme defined in ABMShared 
CompPDFViewerPage.bas[89]  theme.Initialize( {17} ) 
CompPDFViewerPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPDFViewerPage.bas[91]  
CompPDFViewerPage.bas[92]  ' add additional themes specific for this page 
CompPDFViewerPage.bas[93]  
CompPDFViewerPage.bas[94] End Sub 
CompPDFViewerPage.bas[95]  
CompPDFViewerPage.bas[96] public Sub BuildPage() 
CompPDFViewerPage.bas[97]  ' initialize the theme 
CompPDFViewerPage.bas[98]  BuildTheme 
CompPDFViewerPage.bas[99]  
CompPDFViewerPage.bas[100]  ' initialize this page using our theme 
CompPDFViewerPage.bas[101]  page.InitializeWithTheme(Name, {18} & ABMshared.AppName & {19} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPDFViewerPage.bas[102]  page.ShowLoader=True 
CompPDFViewerPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPDFViewerPage.bas[104]  page.PageTitle = {20} 
CompPDFViewerPage.bas[105]  page.PageDescription = {21} 
CompPDFViewerPage.bas[106]  page.PageHTMLName = {22} 
CompPDFViewerPage.bas[107]  page.PageKeywords = {23} 
CompPDFViewerPage.bas[108]  page.PageSiteMapPriority = {24} 
CompPDFViewerPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPDFViewerPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPDFViewerPage.bas[111]  
CompPDFViewerPage.bas[112]  ABMShared.BuildNavigationBar(page, {25} , {26} , {27} , {28} , {29} ) 
CompPDFViewerPage.bas[113]  
CompPDFViewerPage.bas[114]  ' create the page grid 
CompPDFViewerPage.bas[115]  page.AddRows(7,True, {30} ).AddCells12(1, {31} ) 
CompPDFViewerPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPDFViewerPage.bas[117]  
CompPDFViewerPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPDFViewerPage.bas[119]  'page.NeedsCodeLabel = True 
CompPDFViewerPage.bas[120]  
CompPDFViewerPage.bas[121]  ABMShared.BuildFooter(page) 
CompPDFViewerPage.bas[122] End Sub 
CompPDFViewerPage.bas[123]  
CompPDFViewerPage.bas[124] Sub ConnectPage() 
CompPDFViewerPage.bas[125]  'NEW 
CompPDFViewerPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompPDFViewerPage.bas[127]  
CompPDFViewerPage.bas[128]  ' add paragraph 
CompPDFViewerPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {32} , {33} )) 
CompPDFViewerPage.bas[130]  ' add paragraph 
CompPDFViewerPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} )) 
CompPDFViewerPage.bas[132]  
CompPDFViewerPage.bas[133]  Dim pdf As ABMPDFViewer 
CompPDFViewerPage.bas[134]  pdf.Initialize(page, {36} , 800, {37} , {38} ) 
CompPDFViewerPage.bas[135]  pdf.PreparePrintingText = {39} 
CompPDFViewerPage.bas[136]  pdf.ReadDirection = ABM.PDF_READDIRECTION_LTR 
CompPDFViewerPage.bas[137]  pdf.AllowDownload = True 
CompPDFViewerPage.bas[138]  pdf.AllowOpen = False 
CompPDFViewerPage.bas[139]  pdf.AllowPrint = True 
CompPDFViewerPage.bas[140]  pdf.AllowSideBar = True 
CompPDFViewerPage.bas[141]  pdf.AllowViewBookmark = False 
CompPDFViewerPage.bas[142]  pdf.ForcedLanguage = {40} 
CompPDFViewerPage.bas[143]  
CompPDFViewerPage.bas[144]  page.Cell(2,1).AddComponent(pdf) 
CompPDFViewerPage.bas[145]  
CompPDFViewerPage.bas[146]  Dim code1 As String = {0} 
CompPDFViewerPage.bas[157]  
CompPDFViewerPage.bas[158]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {41} , code1)) 
CompPDFViewerPage.bas[159]  
CompPDFViewerPage.bas[160]  ' also add the components to the footer 
CompPDFViewerPage.bas[161]  ABMShared.ConnectFooter(page) 
CompPDFViewerPage.bas[162]  
CompPDFViewerPage.bas[163]  page.Refresh ' IMPORTANT 
CompPDFViewerPage.bas[164]  
CompPDFViewerPage.bas[165]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPDFViewerPage.bas[166]  page.FinishedLoading 'IMPORTANT 
CompPDFViewerPage.bas[167]  
CompPDFViewerPage.bas[168]  page.RestoreNavigationBarPosition 
CompPDFViewerPage.bas[169] End Sub 
CompPDFViewerPage.bas[170]  
CompPDFViewerPage.bas[171] ' clicked on the navigation bar 
CompPDFViewerPage.bas[172] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPDFViewerPage.bas[173]  page.SaveNavigationBarPosition 
CompPDFViewerPage.bas[174]  If Action = {42} Then Return 
CompPDFViewerPage.bas[175]  If Action = {43} Then 
CompPDFViewerPage.bas[176]  myToastId = myToastId + 1 
CompPDFViewerPage.bas[177]  page.ShowToast( {44} & myToastId, {45} , {46} , 5000) 
CompPDFViewerPage.bas[178]  Return 
CompPDFViewerPage.bas[179]  End If 
CompPDFViewerPage.bas[180]  If Action = {47} Then 
CompPDFViewerPage.bas[181]  ABMShared.LogOff(page) 
CompPDFViewerPage.bas[182]  Return 
CompPDFViewerPage.bas[183]  End If 
CompPDFViewerPage.bas[184]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPDFViewerPage.bas[185] End Sub 
CompPDFViewerPage.bas[186]  
CompPDFViewerPage.bas[187] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPDFViewerPage.bas[188]  page.ws.Session.SetAttribute( {48} , {49} ) 
CompPDFViewerPage.bas[189]  page.ws.Session.SetAttribute( {50} , {51} ) 
CompPDFViewerPage.bas[190]  page.ws.Session.SetAttribute( {52} , {53} ) 
CompPDFViewerPage.bas[191]  ABMShared.NavigateToPage(ws, ABMPageId, {54} ) 
CompPDFViewerPage.bas[192] End Sub 
Analysing: CompPercentSlider.bas
CompPercentSlider.bas[0] ﻿Type=Class 
CompPercentSlider.bas[0] Version=4.7 
CompPercentSlider.bas[0] ModulesStructureVersion=1 
CompPercentSlider.bas[0] B4J=true 
CompPercentSlider.bas[0] @EndOfDesignText@ 
CompPercentSlider.bas[1] 'Class module 
CompPercentSlider.bas[2] Sub Class_Globals 
CompPercentSlider.bas[3]  Private ws As WebSocket 'ignore 
CompPercentSlider.bas[4]  ' will hold our page information 
CompPercentSlider.bas[5]  Public page As ABMPage 
CompPercentSlider.bas[6]  ' page theme 
CompPercentSlider.bas[7]  Private theme As ABMTheme 
CompPercentSlider.bas[8]  ' to access the constants 
CompPercentSlider.bas[9]  Private ABM As ABMaterial 'ignore 
CompPercentSlider.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPercentSlider.bas[11]  Public Name As String = {1} 
CompPercentSlider.bas[12]  Private ABMPageId As String = {2} 
CompPercentSlider.bas[13]  
CompPercentSlider.bas[14]  ' your own variables 
CompPercentSlider.bas[15]  Dim myToastId As Int 
CompPercentSlider.bas[16]  
CompPercentSlider.bas[17]  Dim Origin As String = {3} 
CompPercentSlider.bas[18] End Sub 
CompPercentSlider.bas[19]  
CompPercentSlider.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompPercentSlider.bas[21] Public Sub Initialize 
CompPercentSlider.bas[22]  ' build the local structure IMPORTANT! 
CompPercentSlider.bas[23]  BuildPage 
CompPercentSlider.bas[24] End Sub 
CompPercentSlider.bas[25]  
CompPercentSlider.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPercentSlider.bas[27]  Log( {4} ) 
CompPercentSlider.bas[28]  ws = WebSocket1 
CompPercentSlider.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPercentSlider.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPercentSlider.bas[31]  
CompPercentSlider.bas[32]  If ABMShared.NeedsAuthorization Then 
CompPercentSlider.bas[33]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompPercentSlider.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompPercentSlider.bas[35]  Return 
CompPercentSlider.bas[36]  End If 
CompPercentSlider.bas[37]  End If 
CompPercentSlider.bas[38]  
CompPercentSlider.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPercentSlider.bas[40]  If page.ComesFromPageCache Then 
CompPercentSlider.bas[41]  ' refresh the page 
CompPercentSlider.bas[42]  page.Refresh 
CompPercentSlider.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPercentSlider.bas[44]  page.FinishedLoading 
CompPercentSlider.bas[45]  Else 
CompPercentSlider.bas[46]  ' Prepare the page 
CompPercentSlider.bas[47]  page.Prepare 
CompPercentSlider.bas[48]  ' load the dynamic content 
CompPercentSlider.bas[49]  ConnectPage 
CompPercentSlider.bas[50]  End If 
CompPercentSlider.bas[51]  Log(ABMPageId) 
CompPercentSlider.bas[52] End Sub 
CompPercentSlider.bas[53]  
CompPercentSlider.bas[54] Private Sub WebSocket_Disconnected 
CompPercentSlider.bas[55]  Log( {9} ) 
CompPercentSlider.bas[56] End Sub 
CompPercentSlider.bas[57]  
CompPercentSlider.bas[58] Sub Page_ParseEvent(Params As Map) 
CompPercentSlider.bas[59]  Dim eventName As String = Params.Get( {10} ) 
CompPercentSlider.bas[60]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompPercentSlider.bas[61]  If eventName = {13} Then 
CompPercentSlider.bas[62]  Log( {14} ) 
CompPercentSlider.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPercentSlider.bas[64]  Return 
CompPercentSlider.bas[65]  End If 
CompPercentSlider.bas[66]  If SubExists(Me, eventName) Then 
CompPercentSlider.bas[67]  Params.Remove( {15} ) 
CompPercentSlider.bas[68]  Params.Remove( {16} ) 
CompPercentSlider.bas[69]  Select Case Params.Size 
CompPercentSlider.bas[70]  Case 0 
CompPercentSlider.bas[71]  CallSub(Me, eventName) 
CompPercentSlider.bas[72]  Case 1 
CompPercentSlider.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPercentSlider.bas[74]  Case 2 
CompPercentSlider.bas[75]  If Params.get(eventParams(0)) = {17} Then 
CompPercentSlider.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPercentSlider.bas[77]  CallSub2(Me, eventName, PassedTables) 
CompPercentSlider.bas[78]  Else 
CompPercentSlider.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPercentSlider.bas[80]  End If 
CompPercentSlider.bas[81]  Case Else 
CompPercentSlider.bas[82]  ' cannot be called directly, to many param 
CompPercentSlider.bas[83]  CallSub2(Me, eventName, Params) 
CompPercentSlider.bas[84]  End Select 
CompPercentSlider.bas[85]  End If 
CompPercentSlider.bas[86] End Sub 
CompPercentSlider.bas[87]  
CompPercentSlider.bas[88] public Sub BuildTheme() 
CompPercentSlider.bas[89]  ' start with the base theme defined in ABMShared 
CompPercentSlider.bas[90]  theme.Initialize( {18} ) 
CompPercentSlider.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPercentSlider.bas[92]  
CompPercentSlider.bas[93]  ' add additional themes specific for this page 
CompPercentSlider.bas[94] End Sub 
CompPercentSlider.bas[95]  
CompPercentSlider.bas[96] public Sub BuildPage() 
CompPercentSlider.bas[97]  ' initialize the theme 
CompPercentSlider.bas[98]  BuildTheme 
CompPercentSlider.bas[99]  
CompPercentSlider.bas[100]  ' initialize this page using our theme 
CompPercentSlider.bas[101]  page.InitializeWithTheme(Name, {19} & ABMShared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPercentSlider.bas[102]  page.ShowLoader=True 
CompPercentSlider.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPercentSlider.bas[104]  page.PageTitle = {21} 
CompPercentSlider.bas[105]  page.PageDescription = {22} 
CompPercentSlider.bas[106]  page.PageHTMLName = {23} 
CompPercentSlider.bas[107]  page.PageKeywords = {24} 
CompPercentSlider.bas[108]  page.PageSiteMapPriority = {25} 
CompPercentSlider.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPercentSlider.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPercentSlider.bas[111]  
CompPercentSlider.bas[112]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
CompPercentSlider.bas[113]  
CompPercentSlider.bas[114]  ' create the page grid 
CompPercentSlider.bas[115]  page.AddRows(6,True, {31} ).AddCells12(1, {32} ) 
CompPercentSlider.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPercentSlider.bas[117]  
CompPercentSlider.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPercentSlider.bas[119]  'page.NeedsCodeLabel = True 
CompPercentSlider.bas[120]  
CompPercentSlider.bas[121]  ABMShared.BuildFooter(page) 
CompPercentSlider.bas[122] End Sub 
CompPercentSlider.bas[123]  
CompPercentSlider.bas[124] Sub ConnectPage() 
CompPercentSlider.bas[125]  'NEW 
CompPercentSlider.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompPercentSlider.bas[127]  
CompPercentSlider.bas[128]  ' add paragraph 
CompPercentSlider.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} ) ) 
CompPercentSlider.bas[130]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} )) 
CompPercentSlider.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} )) 
CompPercentSlider.bas[132]  
CompPercentSlider.bas[133]  ' add codeblock 
CompPercentSlider.bas[134]  Dim code As String 
CompPercentSlider.bas[135]  code = {0} 
CompPercentSlider.bas[138]  
CompPercentSlider.bas[139]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {39} , code)) 
CompPercentSlider.bas[140]  
CompPercentSlider.bas[141]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompPercentSlider.bas[142]  
CompPercentSlider.bas[143]  Dim video1 As ABMVideo 
CompPercentSlider.bas[144]  video1.InitializeYoutube(page, {42} , {43} , Origin, True, False, True,100) 
CompPercentSlider.bas[145]  page.Cell(4,1).AddComponent(video1) 
CompPercentSlider.bas[146]  
CompPercentSlider.bas[147]  ' also add the components to the footer 
CompPercentSlider.bas[148]  ABMShared.ConnectFooter(page) 
CompPercentSlider.bas[149]  
CompPercentSlider.bas[150]  page.Refresh ' IMPORTANT 
CompPercentSlider.bas[151]  
CompPercentSlider.bas[152]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPercentSlider.bas[153]  page.FinishedLoading 'IMPORTANT 
CompPercentSlider.bas[154]  
CompPercentSlider.bas[155]  page.RestoreNavigationBarPosition 
CompPercentSlider.bas[156] End Sub 
CompPercentSlider.bas[157]  
CompPercentSlider.bas[158] ' clicked on the navigation bar 
CompPercentSlider.bas[159] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPercentSlider.bas[160]  page.SaveNavigationBarPosition 
CompPercentSlider.bas[161]  If Action = {44} Then Return 
CompPercentSlider.bas[162]  If Action = {45} Then 
CompPercentSlider.bas[163]  myToastId = myToastId + 1 
CompPercentSlider.bas[164]  page.ShowToast( {46} & myToastId, {47} , {48} , 5000) 
CompPercentSlider.bas[165]  Return 
CompPercentSlider.bas[166]  End If 
CompPercentSlider.bas[167]  If Action = {49} Then 
CompPercentSlider.bas[168]  ABMShared.LogOff(page) 
CompPercentSlider.bas[169]  Return 
CompPercentSlider.bas[170]  End If 
CompPercentSlider.bas[171]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPercentSlider.bas[172] End Sub 
CompPercentSlider.bas[173]  
CompPercentSlider.bas[174] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPercentSlider.bas[175]  page.ws.Session.SetAttribute( {50} , {51} ) 
CompPercentSlider.bas[176]  page.ws.Session.SetAttribute( {52} , {53} ) 
CompPercentSlider.bas[177]  page.ws.Session.SetAttribute( {54} , {55} ) 
CompPercentSlider.bas[178]  ABMShared.NavigateToPage(ws, ABMPageId, {56} ) 
CompPercentSlider.bas[179] End Sub 
Analysing: CompPercentSliderPage.bas
CompPercentSliderPage.bas[0] ﻿Type=Class 
CompPercentSliderPage.bas[0] Version=4.7 
CompPercentSliderPage.bas[0] ModulesStructureVersion=1 
CompPercentSliderPage.bas[0] B4J=true 
CompPercentSliderPage.bas[0] @EndOfDesignText@ 
CompPercentSliderPage.bas[1] 'Class module 
CompPercentSliderPage.bas[2] Sub Class_Globals 
CompPercentSliderPage.bas[3]  Private ws As WebSocket 'ignore 
CompPercentSliderPage.bas[4]  ' will hold our page information 
CompPercentSliderPage.bas[5]  Public page As ABMPage 
CompPercentSliderPage.bas[6]  ' page theme 
CompPercentSliderPage.bas[7]  Private theme As ABMTheme 
CompPercentSliderPage.bas[8]  ' to access the constants 
CompPercentSliderPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPercentSliderPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPercentSliderPage.bas[11]  Public Name As String = {2} 
CompPercentSliderPage.bas[12]  Private ABMPageId As String = {3} 
CompPercentSliderPage.bas[13]  
CompPercentSliderPage.bas[14]  ' your own variables 
CompPercentSliderPage.bas[15]  Dim myToastId As Int 
CompPercentSliderPage.bas[16]  
CompPercentSliderPage.bas[17] End Sub 
CompPercentSliderPage.bas[18]  
CompPercentSliderPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompPercentSliderPage.bas[20] Public Sub Initialize 
CompPercentSliderPage.bas[21]  ' build the local structure IMPORTANT! 
CompPercentSliderPage.bas[22]  BuildPage 
CompPercentSliderPage.bas[23] End Sub 
CompPercentSliderPage.bas[24]  
CompPercentSliderPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPercentSliderPage.bas[26]  Log( {4} ) 
CompPercentSliderPage.bas[27]  ws = WebSocket1 
CompPercentSliderPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPercentSliderPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPercentSliderPage.bas[30]  
CompPercentSliderPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompPercentSliderPage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompPercentSliderPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompPercentSliderPage.bas[34]  Return 
CompPercentSliderPage.bas[35]  End If 
CompPercentSliderPage.bas[36]  End If 
CompPercentSliderPage.bas[37]  
CompPercentSliderPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPercentSliderPage.bas[39]  If page.ComesFromPageCache Then 
CompPercentSliderPage.bas[40]  ' refresh the page 
CompPercentSliderPage.bas[41]  page.Refresh 
CompPercentSliderPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPercentSliderPage.bas[43]  page.FinishedLoading 
CompPercentSliderPage.bas[44]  Else 
CompPercentSliderPage.bas[45]  ' Prepare the page 
CompPercentSliderPage.bas[46]  page.Prepare 
CompPercentSliderPage.bas[47]  ' load the dynamic content 
CompPercentSliderPage.bas[48]  ConnectPage 
CompPercentSliderPage.bas[49]  End If 
CompPercentSliderPage.bas[50]  Log(ABMPageId) 
CompPercentSliderPage.bas[51] End Sub 
CompPercentSliderPage.bas[52]  
CompPercentSliderPage.bas[53] Private Sub WebSocket_Disconnected 
CompPercentSliderPage.bas[54]  Log( {9} ) 
CompPercentSliderPage.bas[55] End Sub 
CompPercentSliderPage.bas[56]  
CompPercentSliderPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompPercentSliderPage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompPercentSliderPage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompPercentSliderPage.bas[60]  If eventName = {13} Then 
CompPercentSliderPage.bas[61]  Log( {14} ) 
CompPercentSliderPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPercentSliderPage.bas[63]  Return 
CompPercentSliderPage.bas[64]  End If 
CompPercentSliderPage.bas[65]  If SubExists(Me, eventName) Then 
CompPercentSliderPage.bas[66]  Params.Remove( {15} ) 
CompPercentSliderPage.bas[67]  Params.Remove( {16} ) 
CompPercentSliderPage.bas[68]  Select Case Params.Size 
CompPercentSliderPage.bas[69]  Case 0 
CompPercentSliderPage.bas[70]  CallSub(Me, eventName) 
CompPercentSliderPage.bas[71]  Case 1 
CompPercentSliderPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPercentSliderPage.bas[73]  Case 2 
CompPercentSliderPage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompPercentSliderPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPercentSliderPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompPercentSliderPage.bas[77]  Else 
CompPercentSliderPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPercentSliderPage.bas[79]  End If 
CompPercentSliderPage.bas[80]  Case Else 
CompPercentSliderPage.bas[81]  ' cannot be called directly, to many param 
CompPercentSliderPage.bas[82]  CallSub2(Me, eventName, Params) 
CompPercentSliderPage.bas[83]  End Select 
CompPercentSliderPage.bas[84]  End If 
CompPercentSliderPage.bas[85] End Sub 
CompPercentSliderPage.bas[86]  
CompPercentSliderPage.bas[87] public Sub BuildTheme() 
CompPercentSliderPage.bas[88]  ' start with the base theme defined in ABMShared 
CompPercentSliderPage.bas[89]  theme.Initialize( {18} ) 
CompPercentSliderPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPercentSliderPage.bas[91]  
CompPercentSliderPage.bas[92]  ' add additional themes specific for this page 
CompPercentSliderPage.bas[93]  theme.AddPercentSliderTheme( {19} ) 
CompPercentSliderPage.bas[94]  theme.PercentSlider( {20} ).BlockColor(0,ABM.COLOR_LIGHTBLUE) 
CompPercentSliderPage.bas[95]  theme.PercentSlider( {21} ).BlockColor(1, ABM.COLOR_GREEN) 
CompPercentSliderPage.bas[96]  theme.PercentSlider( {22} ).BlockColor(2, ABM.COLOR_ORANGE) 
CompPercentSliderPage.bas[97]  theme.PercentSlider( {23} ).BlockColor(3, ABM.COLOR_RED) 
CompPercentSliderPage.bas[98] End Sub 
CompPercentSliderPage.bas[99]  
CompPercentSliderPage.bas[100] public Sub BuildPage() 
CompPercentSliderPage.bas[101]  ' initialize the theme 
CompPercentSliderPage.bas[102]  BuildTheme 
CompPercentSliderPage.bas[103]  
CompPercentSliderPage.bas[104]  ' initialize this page using our theme 
CompPercentSliderPage.bas[105]  page.InitializeWithTheme(Name, {24} & ABMShared.AppName & {25} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPercentSliderPage.bas[106]  page.ShowLoader=True 
CompPercentSliderPage.bas[107]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPercentSliderPage.bas[108]  page.PageTitle = {26} 
CompPercentSliderPage.bas[109]  page.PageDescription = {27} 
CompPercentSliderPage.bas[110]  page.PageHTMLName = {28} 
CompPercentSliderPage.bas[111]  page.PageKeywords = {29} 
CompPercentSliderPage.bas[112]  page.PageSiteMapPriority = {30} 
CompPercentSliderPage.bas[113]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPercentSliderPage.bas[114]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPercentSliderPage.bas[115]  
CompPercentSliderPage.bas[116]  ABMShared.BuildNavigationBar(page, {31} , {32} , {33} , {34} , {35} ) 
CompPercentSliderPage.bas[117]  
CompPercentSliderPage.bas[118]  ' create the page grid 
CompPercentSliderPage.bas[119]  page.AddRows(6,True, {36} ).AddCells12(1, {37} ) 
CompPercentSliderPage.bas[120]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPercentSliderPage.bas[121]  
CompPercentSliderPage.bas[122]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPercentSliderPage.bas[123]  'page.NeedsCodeLabel = True 
CompPercentSliderPage.bas[124]  
CompPercentSliderPage.bas[125]  ABMShared.BuildFooterFixed(page) 
CompPercentSliderPage.bas[126] End Sub 
CompPercentSliderPage.bas[127]  
CompPercentSliderPage.bas[128] Sub ConnectPage() 
CompPercentSliderPage.bas[129]  'NEW 
CompPercentSliderPage.bas[130]  ABMShared.ConnectNavigationBar(page) 
CompPercentSliderPage.bas[131]  
CompPercentSliderPage.bas[132]  ' add paragraph 
CompPercentSliderPage.bas[133]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} )) 
CompPercentSliderPage.bas[134]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompPercentSliderPage.bas[135]  
CompPercentSliderPage.bas[136]  
CompPercentSliderPage.bas[137]  Dim label As ABMLabel 
CompPercentSliderPage.bas[138]  label.Initialize(page, {42} , {43} , ABM.SIZE_H4, False, {44} ) 
CompPercentSliderPage.bas[139]  page.Cell(2,1).AddComponent(label) 
CompPercentSliderPage.bas[140]  
CompPercentSliderPage.bas[141]  Dim duration As ABMPercentSlider 
CompPercentSliderPage.bas[142]  duration.Initialize(page, {45} , {46} ) 
CompPercentSliderPage.bas[143]  duration.AddBlock( {47} , {48} , 10) 
CompPercentSliderPage.bas[144]  duration.AddBlock( {49} , {50} , 25) 
CompPercentSliderPage.bas[145]  duration.AddBlock( {51} , {52} , 55) 
CompPercentSliderPage.bas[146]  duration.AddBlock( {53} , {54} , 100) 
CompPercentSliderPage.bas[147]  duration.SetActiveUntilBlock(1) 
CompPercentSliderPage.bas[148]  
CompPercentSliderPage.bas[149]  page.Cell(3,1).AddComponent(duration) 
CompPercentSliderPage.bas[150]  
CompPercentSliderPage.bas[151]  Dim btn As ABMButton 
CompPercentSliderPage.bas[152]  btn.InitializeFlat(page, {55} , {56} , {57} , {58} , {59} ) 
CompPercentSliderPage.bas[153]  page.Cell(4,1).AddComponent(btn) 
CompPercentSliderPage.bas[154]  
CompPercentSliderPage.bas[155]  ' add codeblock 
CompPercentSliderPage.bas[156]  Dim code As String 
CompPercentSliderPage.bas[157]  code = {0} 
CompPercentSliderPage.bas[164]  
CompPercentSliderPage.bas[165]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {60} , code)) 
CompPercentSliderPage.bas[166]  
CompPercentSliderPage.bas[167]  code = {1} 
CompPercentSliderPage.bas[177]  
CompPercentSliderPage.bas[178]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {61} , code)) 
CompPercentSliderPage.bas[179]  
CompPercentSliderPage.bas[180]  ' also add the components to the footer 
CompPercentSliderPage.bas[181]  ABMShared.ConnectFooterFixed(page) 
CompPercentSliderPage.bas[182]  
CompPercentSliderPage.bas[183]  page.Refresh ' IMPORTANT 
CompPercentSliderPage.bas[184]  
CompPercentSliderPage.bas[185]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPercentSliderPage.bas[186]  page.FinishedLoading 'IMPORTANT 
CompPercentSliderPage.bas[187]  
CompPercentSliderPage.bas[188]  page.RestoreNavigationBarPosition 
CompPercentSliderPage.bas[189] End Sub 
CompPercentSliderPage.bas[190]  
CompPercentSliderPage.bas[191] Sub btn_Clicked(Target As String) 
CompPercentSliderPage.bas[192]  Dim duration As ABMPercentSlider = page.Component( {62} ) 
CompPercentSliderPage.bas[193]  Dim res As Int = duration.GetActiveUntilBlock 
CompPercentSliderPage.bas[194]  
CompPercentSliderPage.bas[195]  Dim choices As List 
CompPercentSliderPage.bas[196]  choices.Initialize2(Array As String( {63} , {64} , {65} , {66} )) 
CompPercentSliderPage.bas[197]  
CompPercentSliderPage.bas[198]  myToastId = myToastId + 1 
CompPercentSliderPage.bas[199]  page.ShowToast( {67} & myToastId, {68} , {69} & choices.get(res), 5000) 
CompPercentSliderPage.bas[200] End Sub 
CompPercentSliderPage.bas[201]  
CompPercentSliderPage.bas[202] ' clicked on the navigation bar 
CompPercentSliderPage.bas[203] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPercentSliderPage.bas[204]  page.SaveNavigationBarPosition 
CompPercentSliderPage.bas[205]  If Action = {70} Then Return 
CompPercentSliderPage.bas[206]  If Action = {71} Then 
CompPercentSliderPage.bas[207]  myToastId = myToastId + 1 
CompPercentSliderPage.bas[208]  page.ShowToast( {72} & myToastId, {73} , {74} , 5000) 
CompPercentSliderPage.bas[209]  Return 
CompPercentSliderPage.bas[210]  End If 
CompPercentSliderPage.bas[211]  If Action = {75} Then 
CompPercentSliderPage.bas[212]  ABMShared.LogOff(page) 
CompPercentSliderPage.bas[213]  Return 
CompPercentSliderPage.bas[214]  End If 
CompPercentSliderPage.bas[215]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPercentSliderPage.bas[216] End Sub 
CompPercentSliderPage.bas[217]  
CompPercentSliderPage.bas[218] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPercentSliderPage.bas[219]  page.ws.Session.SetAttribute( {76} , {77} ) 
CompPercentSliderPage.bas[220]  page.ws.Session.SetAttribute( {78} , {79} ) 
CompPercentSliderPage.bas[221]  page.ws.Session.SetAttribute( {80} , {81} ) 
CompPercentSliderPage.bas[222]  ABMShared.NavigateToPage(ws, ABMPageId, {82} ) 
CompPercentSliderPage.bas[223] End Sub 
Analysing: CompPivotTablePage.bas
CompPivotTablePage.bas[0] ﻿Type=Class 
CompPivotTablePage.bas[0] Version=4.7 
CompPivotTablePage.bas[0] ModulesStructureVersion=1 
CompPivotTablePage.bas[0] B4J=true 
CompPivotTablePage.bas[0] @EndOfDesignText@ 
CompPivotTablePage.bas[1] 'Class module 
CompPivotTablePage.bas[2] Sub Class_Globals 
CompPivotTablePage.bas[3]  Private ws As WebSocket 'ignore 
CompPivotTablePage.bas[4]  ' will hold our page information 
CompPivotTablePage.bas[5]  Public page As ABMPage 
CompPivotTablePage.bas[6]  ' page theme 
CompPivotTablePage.bas[7]  Private theme As ABMTheme 
CompPivotTablePage.bas[8]  ' to access the constants 
CompPivotTablePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPivotTablePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPivotTablePage.bas[11]  Public Name As String = {2} 
CompPivotTablePage.bas[12]  ' will hold the unique browsers window id 
CompPivotTablePage.bas[13]  Private ABMPageId As String = {3} 
CompPivotTablePage.bas[14]  
CompPivotTablePage.bas[15]  ' your own variables 
CompPivotTablePage.bas[16]  Dim myToastId As Int 
CompPivotTablePage.bas[17] End Sub 
CompPivotTablePage.bas[18]  
CompPivotTablePage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompPivotTablePage.bas[20] Public Sub Initialize 
CompPivotTablePage.bas[21]  ' build the local structure IMPORTANT! 
CompPivotTablePage.bas[22]  BuildPage 
CompPivotTablePage.bas[23] End Sub 
CompPivotTablePage.bas[24]  
CompPivotTablePage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPivotTablePage.bas[26]  Log( {4} ) 
CompPivotTablePage.bas[27]  ws = WebSocket1 
CompPivotTablePage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPivotTablePage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPivotTablePage.bas[30]  
CompPivotTablePage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompPivotTablePage.bas[32]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompPivotTablePage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompPivotTablePage.bas[34]  Return 
CompPivotTablePage.bas[35]  End If 
CompPivotTablePage.bas[36]  End If 
CompPivotTablePage.bas[37]  
CompPivotTablePage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPivotTablePage.bas[39]  If page.ComesFromPageCache Then 
CompPivotTablePage.bas[40]  ' refresh the page 
CompPivotTablePage.bas[41]  page.Refresh 
CompPivotTablePage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPivotTablePage.bas[43]  page.FinishedLoading 
CompPivotTablePage.bas[44]  Else 
CompPivotTablePage.bas[45]  ' Prepare the page 
CompPivotTablePage.bas[46]  page.Prepare 
CompPivotTablePage.bas[47]  ' load the dynamic content 
CompPivotTablePage.bas[48]  ConnectPage 
CompPivotTablePage.bas[49]  End If 
CompPivotTablePage.bas[50]  Log(ABMPageId) 
CompPivotTablePage.bas[51] End Sub 
CompPivotTablePage.bas[52]  
CompPivotTablePage.bas[53] Private Sub WebSocket_Disconnected 
CompPivotTablePage.bas[54]  Log( {9} ) 
CompPivotTablePage.bas[55] End Sub 
CompPivotTablePage.bas[56]  
CompPivotTablePage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompPivotTablePage.bas[58]  Dim eventName As String = Params.Get( {10} ) 
CompPivotTablePage.bas[59]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompPivotTablePage.bas[60]  If eventName = {13} Then 
CompPivotTablePage.bas[61]  Log( {14} ) 
CompPivotTablePage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPivotTablePage.bas[63]  Return 
CompPivotTablePage.bas[64]  End If 
CompPivotTablePage.bas[65]  If SubExists(Me, eventName) Then 
CompPivotTablePage.bas[66]  Params.Remove( {15} ) 
CompPivotTablePage.bas[67]  Params.Remove( {16} ) 
CompPivotTablePage.bas[68]  Select Case Params.Size 
CompPivotTablePage.bas[69]  Case 0 
CompPivotTablePage.bas[70]  CallSub(Me, eventName) 
CompPivotTablePage.bas[71]  Case 1 
CompPivotTablePage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPivotTablePage.bas[73]  Case 2 
CompPivotTablePage.bas[74]  If Params.get(eventParams(0)) = {17} Then 
CompPivotTablePage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPivotTablePage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompPivotTablePage.bas[77]  Else 
CompPivotTablePage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPivotTablePage.bas[79]  End If 
CompPivotTablePage.bas[80]  Case Else 
CompPivotTablePage.bas[81]  ' cannot be called directly, to many param 
CompPivotTablePage.bas[82]  CallSub2(Me, eventName, Params) 
CompPivotTablePage.bas[83]  End Select 
CompPivotTablePage.bas[84]  End If 
CompPivotTablePage.bas[85] End Sub 
CompPivotTablePage.bas[86]  
CompPivotTablePage.bas[87] public Sub BuildTheme() 
CompPivotTablePage.bas[88]  ' start with the base theme defined in ABMShared 
CompPivotTablePage.bas[89]  theme.Initialize( {18} ) 
CompPivotTablePage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPivotTablePage.bas[91]  
CompPivotTablePage.bas[92]  ' add additional themes specific for this page 
CompPivotTablePage.bas[93]  theme.AddPivotTable( {19} ) 
CompPivotTablePage.bas[94]  theme.PivotTable( {20} ).BackColor = ABM.COLOR_WHITE 
CompPivotTablePage.bas[95] End Sub 
CompPivotTablePage.bas[96]  
CompPivotTablePage.bas[97] public Sub BuildPage() 
CompPivotTablePage.bas[98]  ' initialize the theme 
CompPivotTablePage.bas[99]  BuildTheme 
CompPivotTablePage.bas[100]  
CompPivotTablePage.bas[101]  ' initialize this page using our theme 
CompPivotTablePage.bas[102]  page.InitializeWithTheme(Name, {21} & ABMShared.AppName & {22} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPivotTablePage.bas[103]  page.ShowLoader=True 
CompPivotTablePage.bas[104]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPivotTablePage.bas[105]  page.PageTitle = {23} 
CompPivotTablePage.bas[106]  page.PageDescription = {24} 
CompPivotTablePage.bas[107]  page.PageHTMLName = {25} 
CompPivotTablePage.bas[108]  page.PageKeywords = {26} 
CompPivotTablePage.bas[109]  page.PageSiteMapPriority = {27} 
CompPivotTablePage.bas[110]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPivotTablePage.bas[111]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPivotTablePage.bas[112]  
CompPivotTablePage.bas[113]  ABMShared.BuildNavigationBar(page, {28} , {29} , {30} , {31} , {32} ) 
CompPivotTablePage.bas[114]  
CompPivotTablePage.bas[115]  ' create the page grid 
CompPivotTablePage.bas[116]  page.AddRows(8,True, {33} ).AddCells12(1, {34} ) 
CompPivotTablePage.bas[117]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPivotTablePage.bas[118]  
CompPivotTablePage.bas[119]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompPivotTablePage.bas[120]  'page.NeedsCodeLabel = True 
CompPivotTablePage.bas[121]  
CompPivotTablePage.bas[122]  ABMShared.BuildFooter(page) 
CompPivotTablePage.bas[123] End Sub 
CompPivotTablePage.bas[124]  
CompPivotTablePage.bas[125] Sub ConnectPage() 
CompPivotTablePage.bas[126]  'NEW 
CompPivotTablePage.bas[127]  ABMShared.ConnectNavigationBar(page) 
CompPivotTablePage.bas[128]  
CompPivotTablePage.bas[129]  ' add paragraph 
CompPivotTablePage.bas[130]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} )) 
CompPivotTablePage.bas[131]  ' add paragraph 
CompPivotTablePage.bas[132]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} )) 
CompPivotTablePage.bas[133]  
CompPivotTablePage.bas[134]  Dim pivot As ABMPivotTable 
CompPivotTablePage.bas[135]  pivot.Initialize(page, {39} , 500, {40} , {41} , {42} , {43} ,False, {44} ) 
CompPivotTablePage.bas[136]  pivot.UsesSubTotals = True 
CompPivotTablePage.bas[137]  pivot.UsesGoogleCharts = True 
CompPivotTablePage.bas[138]  'pivot.ForcedLanguage = {45} 
CompPivotTablePage.bas[139]  page.Cell(2,1).AddComponent(pivot) 
CompPivotTablePage.bas[140]  
CompPivotTablePage.bas[141]  Dim exportBtn As ABMButton 
CompPivotTablePage.bas[142]  exportBtn.InitializeFlat(page, {46} , {47} , {48} , {49} , {50} ) 
CompPivotTablePage.bas[143]  page.Cell(3,1).AddComponent(exportBtn) 
CompPivotTablePage.bas[144]  
CompPivotTablePage.bas[145]  Dim code1 As String = {0} 
CompPivotTablePage.bas[148]  
CompPivotTablePage.bas[149]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {51} , code1)) 
CompPivotTablePage.bas[150]  
CompPivotTablePage.bas[151]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {52} , {53} )) 
CompPivotTablePage.bas[152]  
CompPivotTablePage.bas[153]  Dim code2 As String = {1} 
CompPivotTablePage.bas[170]  
CompPivotTablePage.bas[171]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {54} , code2)) 
CompPivotTablePage.bas[172]  
CompPivotTablePage.bas[173]  ' also add the components to the footer 
CompPivotTablePage.bas[174]  ABMShared.ConnectFooter(page) 
CompPivotTablePage.bas[175]  
CompPivotTablePage.bas[176]  page.Refresh ' IMPORTANT 
CompPivotTablePage.bas[177]  
CompPivotTablePage.bas[178]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPivotTablePage.bas[179]  page.FinishedLoading 'IMPORTANT 
CompPivotTablePage.bas[180]  
CompPivotTablePage.bas[181]  page.RestoreNavigationBarPosition 
CompPivotTablePage.bas[182] End Sub 
CompPivotTablePage.bas[183]  
CompPivotTablePage.bas[184] Sub exportbtn_Clicked(Target As String) 
CompPivotTablePage.bas[185]  Dim pivot As ABMPivotTable = page.Component( {55} ) 
CompPivotTablePage.bas[186]  pivot.ExportToXLS( {56} , {57} , {58} , {59} , {60} ) 
CompPivotTablePage.bas[187] End Sub 
CompPivotTablePage.bas[188]  
CompPivotTablePage.bas[189] ' clicked on the navigation bar 
CompPivotTablePage.bas[190] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPivotTablePage.bas[191]  page.SaveNavigationBarPosition 
CompPivotTablePage.bas[192]  If Action = {61} Then Return 
CompPivotTablePage.bas[193]  If Action = {62} Then 
CompPivotTablePage.bas[194]  myToastId = myToastId + 1 
CompPivotTablePage.bas[195]  page.ShowToast( {63} & myToastId, {64} , {65} , 5000) 
CompPivotTablePage.bas[196]  Return 
CompPivotTablePage.bas[197]  End If 
CompPivotTablePage.bas[198]  If Action = {66} Then 
CompPivotTablePage.bas[199]  ABMShared.LogOff(page) 
CompPivotTablePage.bas[200]  Return 
CompPivotTablePage.bas[201]  End If 
CompPivotTablePage.bas[202]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPivotTablePage.bas[203] End Sub 
CompPivotTablePage.bas[204]  
CompPivotTablePage.bas[205] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPivotTablePage.bas[206]  page.ws.Session.SetAttribute( {67} , {68} ) 
CompPivotTablePage.bas[207]  page.ws.Session.SetAttribute( {69} , {70} ) 
CompPivotTablePage.bas[208]  page.ws.Session.SetAttribute( {71} , {72} ) 
CompPivotTablePage.bas[209]  ABMShared.NavigateToPage(ws, ABMPageId, {73} ) 
CompPivotTablePage.bas[210] End Sub 
Analysing: CompPlannerPage.bas
CompPlannerPage.bas[0] ﻿Type=Class 
CompPlannerPage.bas[0] Version=4.7 
CompPlannerPage.bas[0] ModulesStructureVersion=1 
CompPlannerPage.bas[0] B4J=true 
CompPlannerPage.bas[0] @EndOfDesignText@ 
CompPlannerPage.bas[1] 'Class module 
CompPlannerPage.bas[2] Sub Class_Globals 
CompPlannerPage.bas[3]  Private ws As WebSocket 'ignore 
CompPlannerPage.bas[4]  ' will hold our page information 
CompPlannerPage.bas[5]  Public page As ABMPage 
CompPlannerPage.bas[6]  ' page theme 
CompPlannerPage.bas[7]  Private theme As ABMTheme 
CompPlannerPage.bas[8]  ' to access the constants 
CompPlannerPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompPlannerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompPlannerPage.bas[11]  Public Name As String = {0} 
CompPlannerPage.bas[12]  Private ABMPageId As String = {1} 
CompPlannerPage.bas[13]  
CompPlannerPage.bas[14]  ' your own variables 
CompPlannerPage.bas[15]  Dim FirstNames As List 
CompPlannerPage.bas[16]  Dim LastNames As List 
CompPlannerPage.bas[17]  Dim FirstDate As Long 
CompPlannerPage.bas[18]  
CompPlannerPage.bas[19]  Dim cutTaskID As String 
CompPlannerPage.bas[20]  Dim copyTask As ABMPlannerTask 
CompPlannerPage.bas[21]  Dim IsCut As Boolean 
CompPlannerPage.bas[22]  Dim counter As Int 
CompPlannerPage.bas[23]  
CompPlannerPage.bas[24]  Dim myToastID As Int 
CompPlannerPage.bas[25]  Dim ActiveDay As Int = -1 
CompPlannerPage.bas[26]  
CompPlannerPage.bas[27] End Sub 
CompPlannerPage.bas[28]  
CompPlannerPage.bas[29] 'Initializes the object. You can add parameters to this method if needed. 
CompPlannerPage.bas[30] Public Sub Initialize 
CompPlannerPage.bas[31]  ' build the local structure IMPORTANT! 
CompPlannerPage.bas[32]  BuildPage 
CompPlannerPage.bas[33] End Sub 
CompPlannerPage.bas[34]  
CompPlannerPage.bas[35] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompPlannerPage.bas[36]  Log( {2} ) 
CompPlannerPage.bas[37]  ws = WebSocket1 
CompPlannerPage.bas[38]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompPlannerPage.bas[39]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompPlannerPage.bas[40]  
CompPlannerPage.bas[41]  If ABMShared.NeedsAuthorization Then 
CompPlannerPage.bas[42]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompPlannerPage.bas[43]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompPlannerPage.bas[44]  Return 
CompPlannerPage.bas[45]  End If 
CompPlannerPage.bas[46]  End If 
CompPlannerPage.bas[47]  
CompPlannerPage.bas[48]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompPlannerPage.bas[49]  If page.ComesFromPageCache Then 
CompPlannerPage.bas[50]  ' refresh the page 
CompPlannerPage.bas[51]  page.Refresh 
CompPlannerPage.bas[52]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPlannerPage.bas[53]  page.FinishedLoading 
CompPlannerPage.bas[54]  Else 
CompPlannerPage.bas[55]  ' Prepare the page 
CompPlannerPage.bas[56]  page.Prepare 
CompPlannerPage.bas[57]  ' load the dynamic content 
CompPlannerPage.bas[58]  ConnectPage 
CompPlannerPage.bas[59]  End If 
CompPlannerPage.bas[60]  Log(ABMPageId) 
CompPlannerPage.bas[61] End Sub 
CompPlannerPage.bas[62]  
CompPlannerPage.bas[63] Private Sub WebSocket_Disconnected 
CompPlannerPage.bas[64]  Log( {7} ) 
CompPlannerPage.bas[65] End Sub 
CompPlannerPage.bas[66]  
CompPlannerPage.bas[67] Sub Page_ParseEvent(Params As Map) 
CompPlannerPage.bas[68]  Dim eventName As String = Params.Get( {8} ) 
CompPlannerPage.bas[69]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompPlannerPage.bas[70]  If eventName = {11} Then 
CompPlannerPage.bas[71]  Log( {12} ) 
CompPlannerPage.bas[72]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompPlannerPage.bas[73]  Return 
CompPlannerPage.bas[74]  End If 
CompPlannerPage.bas[75]  If SubExists(Me, eventName) Then 
CompPlannerPage.bas[76]  Params.Remove( {13} ) 
CompPlannerPage.bas[77]  Params.Remove( {14} ) 
CompPlannerPage.bas[78]  Select Case Params.Size 
CompPlannerPage.bas[79]  Case 0 
CompPlannerPage.bas[80]  CallSub(Me, eventName) 
CompPlannerPage.bas[81]  Case 1 
CompPlannerPage.bas[82]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompPlannerPage.bas[83]  Case 2 
CompPlannerPage.bas[84]  If Params.get(eventParams(0)) = {15} Then 
CompPlannerPage.bas[85]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompPlannerPage.bas[86]  CallSub2(Me, eventName, PassedTables) 
CompPlannerPage.bas[87]  Else 
CompPlannerPage.bas[88]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompPlannerPage.bas[89]  End If 
CompPlannerPage.bas[90]  Case Else 
CompPlannerPage.bas[91]  ' cannot be called directly, to many param 
CompPlannerPage.bas[92]  CallSub2(Me, eventName, Params) 
CompPlannerPage.bas[93]  End Select 
CompPlannerPage.bas[94]  End If 
CompPlannerPage.bas[95] End Sub 
CompPlannerPage.bas[96]  
CompPlannerPage.bas[97] public Sub BuildTheme() 
CompPlannerPage.bas[98]  ' start with the base theme defined in ABMShared 
CompPlannerPage.bas[99]  theme.Initialize( {16} ) 
CompPlannerPage.bas[100]  theme.AddABMTheme(ABMShared.MyTheme) 
CompPlannerPage.bas[101]  
CompPlannerPage.bas[102]  ' add additional themes specific for this page 
CompPlannerPage.bas[103]  theme.AddPlannerTheme( {17} ) 
CompPlannerPage.bas[104]  theme.Planner( {18} ).MenuColor = ABM.COLOR_LIME 
CompPlannerPage.bas[105]  theme.Planner( {19} ).MenuColorIntensity = ABM.INTENSITY_DARKEN3 
CompPlannerPage.bas[106]  theme.Planner( {20} ).HourColor = ABM.COLOR_GREY 
CompPlannerPage.bas[107]  theme.Planner( {21} ).HourColorIntensity = ABM.INTENSITY_LIGHTEN2 
CompPlannerPage.bas[108]  theme.Planner( {22} ).HourTextColor = ABM.COLOR_BLACK 
CompPlannerPage.bas[109]  theme.Planner( {23} ).HourAltColor = ABM.COLOR_GREY 
CompPlannerPage.bas[110]  theme.Planner( {24} ).HourAltTextColor = ABM.COLOR_BLACK 
CompPlannerPage.bas[111]  theme.Planner( {25} ).HourMinutesUsedColors(0,ABM.COLOR_BLUEGREY) 
CompPlannerPage.bas[112]  theme.Planner( {26} ).HourMinutesUsedColorsIntensity(0,ABM.INTENSITY_DARKEN4) 
CompPlannerPage.bas[113]  theme.Planner( {27} ).HourMinutesUsedColors(1,ABM.COLOR_BLUEGREY) 
CompPlannerPage.bas[114]  theme.Planner( {28} ).HourMinutesUsedColorsIntensity(1,ABM.INTENSITY_DARKEN2) 
CompPlannerPage.bas[115]  theme.Planner( {29} ).HourMinutesUsedColors(2,ABM.COLOR_BLUEGREY) 
CompPlannerPage.bas[116]  theme.Planner( {30} ).HourMinutesUsedColorsIntensity(2,ABM.INTENSITY_NORMAL) 
CompPlannerPage.bas[117]  theme.Planner( {31} ).HourMinutesUsedColors(3,ABM.COLOR_BLUEGREY) 
CompPlannerPage.bas[118]  theme.Planner( {32} ).HourMinutesUsedColorsIntensity(3,ABM.INTENSITY_LIGHTEN2) 
CompPlannerPage.bas[119]  theme.Planner( {33} ).HourMinutesNotAvailableColorIntensity = ABM.INTENSITY_DARKEN3 
CompPlannerPage.bas[120]  
CompPlannerPage.bas[121]  theme.AddCellTheme( {34} ) 
CompPlannerPage.bas[122]  theme.Cell( {35} ).Align = ABM.CELL_ALIGN_CENTER 
CompPlannerPage.bas[123] End Sub 
CompPlannerPage.bas[124]  
CompPlannerPage.bas[125] public Sub BuildPage() 
CompPlannerPage.bas[126]  ' initialize the theme 
CompPlannerPage.bas[127]  BuildTheme 
CompPlannerPage.bas[128]  
CompPlannerPage.bas[129]  ' initialize this page using our theme 
CompPlannerPage.bas[130]  page.InitializeWithTheme(Name, {36} & ABMShared.AppName & {37} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompPlannerPage.bas[131]  page.ShowLoader=True 
CompPlannerPage.bas[132]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompPlannerPage.bas[133]  page.PageTitle = {38} 
CompPlannerPage.bas[134]  page.PageDescription = {39} 
CompPlannerPage.bas[135]  page.PageHTMLName = {40} 
CompPlannerPage.bas[136]  page.PageKeywords = {41} 
CompPlannerPage.bas[137]  page.PageSiteMapPriority = {42} 
CompPlannerPage.bas[138]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompPlannerPage.bas[139]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompPlannerPage.bas[140]  
CompPlannerPage.bas[141]  ABMShared.BuildNavigationBar(page, {43} , {44} , {45} , {46} , {47} ) 
CompPlannerPage.bas[142]  
CompPlannerPage.bas[143]  ' create the page grid 
CompPlannerPage.bas[144]  page.AddRows(1,True, {48} ).AddCells12(1, {49} ) 
CompPlannerPage.bas[145]  page.AddRows(1,True, {50} ).AddCellsOSMP(1,0,0,0,2,2,1,18,0,0,0, {51} ).AddCellsOSMP(1,0,0,0,8,8,10,0,0,0,0, {52} ).AddCellsOSMP(1,0,0,0,2,2,1,18,0,0,0, {53} ) 
CompPlannerPage.bas[146]  page.AddRows(1,False, {54} ).AddCells12MP(1,0,0,10,10, {55} ) 
CompPlannerPage.bas[147]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompPlannerPage.bas[148]  
CompPlannerPage.bas[149]  page.Cell(2,1).UseTheme( {56} ) 
CompPlannerPage.bas[150]  page.Cell(2,3).UseTheme( {57} ) 
CompPlannerPage.bas[151]  ' You can use 'FromBottom' on pages that only take up one screen 
CompPlannerPage.bas[152]  page.Cell(3,1).SetFixedHeightFromBottom(50,True) 
CompPlannerPage.bas[153]  
CompPlannerPage.bas[154]  Dim prevWeek As ABMButton 
CompPlannerPage.bas[155]  prevWeek.InitializeFloating(page, {58} , {59} , {60} ) 
CompPlannerPage.bas[156]  page.Cell(2,1).AddComponent(prevWeek) 
CompPlannerPage.bas[157]  
CompPlannerPage.bas[158]  Dim mydate3 As ABMDateTimePicker 
CompPlannerPage.bas[159]  Dim NewDate As Long = DateTime.Now 
CompPlannerPage.bas[160]  mydate3.Initialize(page, {61} , ABM.DATETIMEPICKER_TYPE_WEEK, NewDate, {62} , {63} ) 
CompPlannerPage.bas[161]  mydate3.CancelText = {64} 
CompPlannerPage.bas[162]  mydate3.PickText = {65} 
CompPlannerPage.bas[163]  mydate3.TodayText = {66} 
CompPlannerPage.bas[164]  mydate3.Language = {67} 
CompPlannerPage.bas[165]  mydate3.ReturnDateFormat = {68} ' <--- see demo source code for settings 
CompPlannerPage.bas[166]  mydate3.ReturnTimeFormat = {69} ' <--- see demo source code for settings 
CompPlannerPage.bas[167]  mydate3.FirstDayOfWeek = 1 
CompPlannerPage.bas[168]  mydate3.WeekText = {70} 
CompPlannerPage.bas[169]  mydate3.ClickThrough = True 
CompPlannerPage.bas[170]  mydate3.IsTextSelectable = False 
CompPlannerPage.bas[171]  page.Cell(2,2).AddComponent(mydate3) ' <--- 
CompPlannerPage.bas[172]  
CompPlannerPage.bas[173]  Dim nextWeek As ABMButton 
CompPlannerPage.bas[174]  nextWeek.InitializeFloating(page, {71} , {72} , {73} ) 
CompPlannerPage.bas[175]  page.Cell(2,3).AddComponent(nextWeek) 
CompPlannerPage.bas[176]  
CompPlannerPage.bas[177]  Dim plan As ABMPlanner 
CompPlannerPage.bas[178]  plan.Initialize(page, {74} , True, 6,20, 5, False, {75} ) 
CompPlannerPage.bas[179]  plan.UseHeatMap( {76} ) 
CompPlannerPage.bas[180]  page.Cell(3,1).AddComponent(plan) 
CompPlannerPage.bas[181]  
CompPlannerPage.bas[182]  FirstNames.Initialize2(Array As String( {77} , {78} , {79} , {80} , {81} , {82} , {83} , {84} , {85} , {86} , {87} , {88} , {89} , {90} , {91} , {92} , {93} , {94} , {95} , {96} )) 
CompPlannerPage.bas[183]  LastNames.Initialize2(Array As String( {97} , {98} , {99} , {100} , {101} , {102} , {103} , {104} , {105} , {106} , {107} , {108} , {109} , {110} , {111} , {112} , {113} , {114} , {115} , {116} )) 
CompPlannerPage.bas[184]  
CompPlannerPage.bas[185]  
CompPlannerPage.bas[186]  ABMShared.BuildFooter(page) 
CompPlannerPage.bas[187] End Sub 
CompPlannerPage.bas[188]  
CompPlannerPage.bas[189] Sub ConnectPage() 
CompPlannerPage.bas[190]  'NEW 
CompPlannerPage.bas[191]  ABMShared.ConnectNavigationBar(page) 
CompPlannerPage.bas[192]  
CompPlannerPage.bas[193]  ' add paragraph 
CompPlannerPage.bas[194]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {117} , {118} )) 
CompPlannerPage.bas[195]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {119} , {120} )) 
CompPlannerPage.bas[196]  
CompPlannerPage.bas[197]  ' init all your own variables (like a List, Map) and add your components 
CompPlannerPage.bas[198]  Dim mydate3 As ABMDateTimePicker = page.Component( {121} ) 
CompPlannerPage.bas[199]  Dim spl() As String = Regex.Split( {122} ,mydate3.GetDateWeek) 
CompPlannerPage.bas[200]  FirstDate = spl(1) 
CompPlannerPage.bas[201]  LoadRandomWeek(FirstDate, False) 
CompPlannerPage.bas[202]  
CompPlannerPage.bas[203]  ' also add the components to the footer 
CompPlannerPage.bas[204]  ABMShared.ConnectFooter(page) 
CompPlannerPage.bas[205]  
CompPlannerPage.bas[206]  page.Refresh ' IMPORTANT 
CompPlannerPage.bas[207]  
CompPlannerPage.bas[208]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompPlannerPage.bas[209]  page.FinishedLoading 'IMPORTANT 
CompPlannerPage.bas[210]  
CompPlannerPage.bas[211]  page.RestoreNavigationBarPosition 
CompPlannerPage.bas[212] End Sub 
CompPlannerPage.bas[213]  
CompPlannerPage.bas[214] Sub NewTask(day As Int, taskID As String, startHour As Int, startMinutesPer5 As Int, lengthMinutesPer5 As Int, text As String, themeColorIndex As Int) As ABMPlannerTask 
CompPlannerPage.bas[215]  Dim task As ABMPlannerTask 
CompPlannerPage.bas[216]  task.Initialize(day, taskID, startHour, startMinutesPer5, lengthMinutesPer5, text, themeColorIndex) 
CompPlannerPage.bas[217]  Return task 
CompPlannerPage.bas[218] End Sub 
CompPlannerPage.bas[219]  
CompPlannerPage.bas[220] Sub plan_ActiveDayChanged(day As Int) 
CompPlannerPage.bas[221]  Log( {123} & day) 
CompPlannerPage.bas[222]  ActiveDay = day 
CompPlannerPage.bas[223]  ' important to sync the server with the browser! 
CompPlannerPage.bas[224]  Dim plan As ABMPlanner = page.Component( {124} ) 
CompPlannerPage.bas[225]  plan.SetActiveDay(ActiveDay) 
CompPlannerPage.bas[226] End Sub 
CompPlannerPage.bas[227]  
CompPlannerPage.bas[228] Sub plan_MinutesClicked(Value As String) 
CompPlannerPage.bas[229]  Dim spl() As String = Regex.Split( {125} , Value) 
CompPlannerPage.bas[230]  ' spl(0) is here always 0, as this would contain the menu item clicked. This is to be uniform with the MenuClicked Value param 
CompPlannerPage.bas[231]  Log( {126} & spl(1)) 
CompPlannerPage.bas[232]  Log( {127} & spl(2)) 
CompPlannerPage.bas[233]  Log( {128} & spl(3)) 
CompPlannerPage.bas[234]  ' use the ABM.PLANNER_STATUS_ constants to check the status 
CompPlannerPage.bas[235]  Log( {129} & spl(4)) 
CompPlannerPage.bas[236]  Log( {130} & spl(5)) 
CompPlannerPage.bas[237]  
CompPlannerPage.bas[238]  myToastID = myToastID + 1 
CompPlannerPage.bas[239]  page.ShowToast( {131} & myToastID, {132} , {133} , 5000) 
CompPlannerPage.bas[240] End Sub 
CompPlannerPage.bas[241]  
CompPlannerPage.bas[242] Sub plan_MenuClicked(MenuType As String, Value As String) 
CompPlannerPage.bas[243]  Dim spl() As String = Regex.Split( {134} , Value) 
CompPlannerPage.bas[244]  Dim plan As ABMPlanner = page.Component( {135} ) 
CompPlannerPage.bas[245]  Log( {136} & MenuType) 
CompPlannerPage.bas[246]  Log( {137} & Value) 
CompPlannerPage.bas[247]  Select Case MenuType 
CompPlannerPage.bas[248]  Case ABM.PLANNER_MENUTYPE_DAY 
CompPlannerPage.bas[249]  ' update the database 
CompPlannerPage.bas[250]  
CompPlannerPage.bas[251]  Log( {138} & spl(1)) 
CompPlannerPage.bas[252]  
CompPlannerPage.bas[253]  Select Case spl(0) 
CompPlannerPage.bas[254]  Case ABM.PLANNER_MENU_SETFREE 
CompPlannerPage.bas[255]  plan.SetDayStatus(spl(1), True) 
CompPlannerPage.bas[256]  Case ABM.PLANNER_MENU_SETNOTAVAILABLE 
CompPlannerPage.bas[257]  plan.SetDayStatus(spl(1), False) 
CompPlannerPage.bas[258]  End Select 
CompPlannerPage.bas[259]  
CompPlannerPage.bas[260]  ' IMPORTANT to perform the action in the browser 
CompPlannerPage.bas[261]  plan.PerfromDayHourMenuAction 
CompPlannerPage.bas[262]  Case ABM.PLANNER_MENUTYPE_HOUR 
CompPlannerPage.bas[263]  ' update the database 
CompPlannerPage.bas[264]  
CompPlannerPage.bas[265]  Log( {139} & spl(1)) 
CompPlannerPage.bas[266]  Log( {140} & spl(2)) 
CompPlannerPage.bas[267]  
CompPlannerPage.bas[268]  Select Case spl(0) 
CompPlannerPage.bas[269]  Case ABM.PLANNER_MENU_SETFREE 
CompPlannerPage.bas[270]  plan.SetHourStatus(spl(1), spl(2), True) 
CompPlannerPage.bas[271]  Case ABM.PLANNER_MENU_SETNOTAVAILABLE 
CompPlannerPage.bas[272]  plan.SetHourStatus(spl(1), spl(2), False) 
CompPlannerPage.bas[273]  End Select 
CompPlannerPage.bas[274]  
CompPlannerPage.bas[275]  ' IMPORTANT to perform the action in the browser 
CompPlannerPage.bas[276]  plan.PerfromDayHourMenuAction 
CompPlannerPage.bas[277]  Case ABM.PLANNER_MENUTYPE_MIN 
CompPlannerPage.bas[278]  ' update the database 
CompPlannerPage.bas[279]  
CompPlannerPage.bas[280]  Log( {141} & spl(1)) 
CompPlannerPage.bas[281]  Log( {142} & spl(2)) 
CompPlannerPage.bas[282]  Log( {143} & spl(3)) 
CompPlannerPage.bas[283]  ' use the ABM.PLANNER_STATUS_ constants to check the status 
CompPlannerPage.bas[284]  Log( {144} & spl(4)) 
CompPlannerPage.bas[285]  Log( {145} & spl(5)) 
CompPlannerPage.bas[286]  
CompPlannerPage.bas[287]  Select Case spl(0) 
CompPlannerPage.bas[288]  Case ABM.PLANNER_MENU_CUT 
CompPlannerPage.bas[289]  cutTaskID = spl(5) 
CompPlannerPage.bas[290]  copyTask = plan.GetTask(spl(5)) 
CompPlannerPage.bas[291]  IsCut = True 
CompPlannerPage.bas[292]  myToastID = myToastID + 1 
CompPlannerPage.bas[293]  page.ShowToast( {146} & myToastID, {147} , {148} & copyTask.Text & {149} , 5000) 
CompPlannerPage.bas[294]  Case ABM.PLANNER_MENU_COPY 
CompPlannerPage.bas[295]  copyTask = plan.GetTask(spl(5)) 
CompPlannerPage.bas[296]  IsCut = False 
CompPlannerPage.bas[297]  myToastID = myToastID + 1 
CompPlannerPage.bas[298]  page.ShowToast( {150} & myToastID, {151} , {152} & copyTask.Text & {153} , 5000) 
CompPlannerPage.bas[299]  Case ABM.PLANNER_MENU_PASTE 
CompPlannerPage.bas[300]  If IsCut Then 
CompPlannerPage.bas[301]  plan.RemoveTask2(cutTaskID) 
CompPlannerPage.bas[302]  Else 
CompPlannerPage.bas[303]  counter = counter + 1 
CompPlannerPage.bas[304]  copyTask = copyTask.Clone( {154} & counter) 
CompPlannerPage.bas[305]  End If 
CompPlannerPage.bas[306]  copyTask.Day = spl(1) 
CompPlannerPage.bas[307]  copyTask.StartHour = spl(2) 
CompPlannerPage.bas[308]  copyTask.StartMinututesPer = spl(3) 
CompPlannerPage.bas[309]  plan.AddTask(copyTask) 
CompPlannerPage.bas[310]  plan.Refresh 
CompPlannerPage.bas[311]  If IsCut Then 
CompPlannerPage.bas[312]  myToastID = myToastID + 1 
CompPlannerPage.bas[313]  page.ShowToast( {155} & myToastID, {156} , copyTask.Text & {157} , 5000) 
CompPlannerPage.bas[314]  Else 
CompPlannerPage.bas[315]  myToastID = myToastID + 1 
CompPlannerPage.bas[316]  page.ShowToast( {158} & myToastID, {159} , copyTask.Text & {160} , 5000) 
CompPlannerPage.bas[317]  End If 
CompPlannerPage.bas[318]  Case ABM.PLANNER_MENU_DELETE 
CompPlannerPage.bas[319]  plan.RemoveTask2(spl(5)) 
CompPlannerPage.bas[320]  plan.Refresh 
CompPlannerPage.bas[321]  End Select 
CompPlannerPage.bas[322]  
CompPlannerPage.bas[323]  
CompPlannerPage.bas[324]  End Select 
CompPlannerPage.bas[325] End Sub 
CompPlannerPage.bas[326]  
CompPlannerPage.bas[327] Sub prevWeek_Clicked(Target As String) 
CompPlannerPage.bas[328]  page.PauseDelayed(2000) 
CompPlannerPage.bas[329]  
CompPlannerPage.bas[330]  Dim per As Period 
CompPlannerPage.bas[331]  per.Initialize 
CompPlannerPage.bas[332]  per.Days = -7 
CompPlannerPage.bas[333]  
CompPlannerPage.bas[334]  FirstDate = DateUtils.AddPeriod(FirstDate, per) 
CompPlannerPage.bas[335]  
CompPlannerPage.bas[336]  Dim mydate3 As ABMDateTimePicker = page.Component( {161} ) 
CompPlannerPage.bas[337]  mydate3.SetDate(FirstDate) 
CompPlannerPage.bas[338]  
CompPlannerPage.bas[339]  LoadRandomWeek(FirstDate, True) 
CompPlannerPage.bas[340]  
CompPlannerPage.bas[341]  mydate3.Refresh 
CompPlannerPage.bas[342] End Sub 
CompPlannerPage.bas[343]  
CompPlannerPage.bas[344] Sub nextWeek_Clicked(Target As String) 
CompPlannerPage.bas[345]  page.PauseDelayed(2000) 
CompPlannerPage.bas[346]  
CompPlannerPage.bas[347]  Dim per As Period 
CompPlannerPage.bas[348]  per.Initialize 
CompPlannerPage.bas[349]  per.Days = 7 
CompPlannerPage.bas[350]  
CompPlannerPage.bas[351]  FirstDate = DateUtils.AddPeriod(FirstDate, per) 
CompPlannerPage.bas[352]  
CompPlannerPage.bas[353]  Dim mydate3 As ABMDateTimePicker = page.Component( {162} ) 
CompPlannerPage.bas[354]  mydate3.SetDate(FirstDate) 
CompPlannerPage.bas[355]  
CompPlannerPage.bas[356]  LoadRandomWeek(FirstDate, True) 
CompPlannerPage.bas[357]  
CompPlannerPage.bas[358]  mydate3.Refresh 
CompPlannerPage.bas[359] End Sub 
CompPlannerPage.bas[360]  
CompPlannerPage.bas[361] Sub mydate3_ChangedWeek(Target As String, WeekString As String) 
CompPlannerPage.bas[362]  page.PauseDelayed(2000) 
CompPlannerPage.bas[363]  
CompPlannerPage.bas[364]  Dim spl() As String = Regex.Split( {163} ,WeekString) 
CompPlannerPage.bas[365]  FirstDate = spl(1) 
CompPlannerPage.bas[366]  LoadRandomWeek(FirstDate, True) 
CompPlannerPage.bas[367] End Sub 
CompPlannerPage.bas[368]  
CompPlannerPage.bas[369] Sub LoadRandomWeek(StartDay As Long,doRefresh As Boolean) 
CompPlannerPage.bas[370]  Dim plan As ABMPlanner = page.Component( {164} ) 
CompPlannerPage.bas[371]  plan.ClearPlanner 
CompPlannerPage.bas[372]  
CompPlannerPage.bas[373]  Dim Days(7) As String 
CompPlannerPage.bas[374]  Dim Day As Int = DateTime.GetDayOfMonth(StartDay) 
CompPlannerPage.bas[375]  Dim nextDay As Long = StartDay 
CompPlannerPage.bas[376]  Dim perNext As Period 
CompPlannerPage.bas[377]  perNext.Initialize 
CompPlannerPage.bas[378]  perNext.Days = 1 
CompPlannerPage.bas[379]  For i = 0 To 6 
CompPlannerPage.bas[380]  If ActiveDay = -1 Then 
CompPlannerPage.bas[381]  If DateTime.Date(nextDay) = DateTime.Date(DateTime.Now) Then 
CompPlannerPage.bas[382]  ActiveDay = i 
CompPlannerPage.bas[383]  End If 
CompPlannerPage.bas[384]  End If 
CompPlannerPage.bas[385]  Days(i) = Day 
CompPlannerPage.bas[386]  If Days(i).Length = 1 Then 
CompPlannerPage.bas[387]  Days(i) = {165} & Days(i) 
CompPlannerPage.bas[388]  End If 
CompPlannerPage.bas[389]  nextDay = DateUtils.AddPeriod(nextDay, perNext) 
CompPlannerPage.bas[390]  Day = DateTime.GetDayOfMonth(nextDay) 
CompPlannerPage.bas[391]  Next 
CompPlannerPage.bas[392]  ' the day is not visible 
CompPlannerPage.bas[393]  If ActiveDay = -1 Then ActiveDay = 0 
CompPlannerPage.bas[394]  
CompPlannerPage.bas[395]  Dim mins As List 
CompPlannerPage.bas[396]  mins.Initialize 
CompPlannerPage.bas[397]  mins.Add(1) 
CompPlannerPage.bas[398]  mins.Add(3) 
CompPlannerPage.bas[399]  mins.Add(6) 
CompPlannerPage.bas[400]  mins.Add(12) 
CompPlannerPage.bas[401]  plan.SetDayLabels( {166} & Days(0), {167} & Days(1), {168} & Days(2), {169} & Days(3), {170} & Days(4), {171} & Days(5), {172} & Days(6)) 
CompPlannerPage.bas[402]  Dim PerTotal As Int = 12 
CompPlannerPage.bas[403]  
CompPlannerPage.bas[404]  For i = 0 To 4 
CompPlannerPage.bas[405]  Dim u As Int = 6 
CompPlannerPage.bas[406]  Dim m As Int = 0 
CompPlannerPage.bas[407]  Dim l As Int = 0 
CompPlannerPage.bas[408]  Dim lIndex As Int 
CompPlannerPage.bas[409]  Do While u < 21 
CompPlannerPage.bas[410]  Do While m < PerTotal 
CompPlannerPage.bas[411]  m = m + Rnd(1,3) 
CompPlannerPage.bas[412]  lIndex = Rnd(0,3) 
CompPlannerPage.bas[413]  l = mins.Get(lIndex) 
CompPlannerPage.bas[414]  If (u*PerTotal + m + l) < (21*PerTotal) And m < PerTotal And (i <> 2 Or u <=11 ) Then 
CompPlannerPage.bas[415]  Dim patient As String = FirstNames.get(Rnd(0,19)) & {173} & LastNames.get(Rnd(0,19)) 
CompPlannerPage.bas[416]  counter = counter + 1 
CompPlannerPage.bas[417]  plan.AddTask(NewTask(i, {174} & counter,u,m,l,patient,lIndex)) ' taskid must be a string! 
CompPlannerPage.bas[418]  End If 
CompPlannerPage.bas[419]  m = m + l 
CompPlannerPage.bas[420]  Loop 
CompPlannerPage.bas[421]  m = m - PerTotal 
CompPlannerPage.bas[422]  u = u + 1 
CompPlannerPage.bas[423]  Loop 
CompPlannerPage.bas[424]  Next 
CompPlannerPage.bas[425]  
CompPlannerPage.bas[426]  plan.SetActiveDay(ActiveDay) 
CompPlannerPage.bas[427]  plan.SetDayStatus(5,False) 
CompPlannerPage.bas[428]  plan.SetDayStatus(6,False) 
CompPlannerPage.bas[429]  For i = 12 To 20 
CompPlannerPage.bas[430]  plan.SetHourStatus(2,i,False) 
CompPlannerPage.bas[431]  Next 
CompPlannerPage.bas[432]  If doRefresh Then 
CompPlannerPage.bas[433]  plan.Refresh 
CompPlannerPage.bas[434]  End If 
CompPlannerPage.bas[435] End Sub 
CompPlannerPage.bas[436]  
CompPlannerPage.bas[437] Sub plan_Refreshed() 
CompPlannerPage.bas[438]  page.Resume 
CompPlannerPage.bas[439] End Sub 
CompPlannerPage.bas[440]  
CompPlannerPage.bas[441] ' clicked on the navigation bar 
CompPlannerPage.bas[442] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompPlannerPage.bas[443]  page.SaveNavigationBarPosition 
CompPlannerPage.bas[444]  If Action = {175} Then Return 
CompPlannerPage.bas[445]  If Action = {176} Then 
CompPlannerPage.bas[446]  myToastID = myToastID + 1 
CompPlannerPage.bas[447]  page.ShowToast( {177} & myToastID, {178} , {179} , 5000) 
CompPlannerPage.bas[448]  Return 
CompPlannerPage.bas[449]  End If 
CompPlannerPage.bas[450]  If Action = {180} Then 
CompPlannerPage.bas[451]  ABMShared.LogOff(page) 
CompPlannerPage.bas[452]  Return 
CompPlannerPage.bas[453]  End If 
CompPlannerPage.bas[454]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompPlannerPage.bas[455] End Sub 
CompPlannerPage.bas[456]  
CompPlannerPage.bas[457] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompPlannerPage.bas[458]  page.ws.Session.SetAttribute( {181} , {182} ) 
CompPlannerPage.bas[459]  page.ws.Session.SetAttribute( {183} , {184} ) 
CompPlannerPage.bas[460]  page.ws.Session.SetAttribute( {185} , {186} ) 
CompPlannerPage.bas[461]  ABMShared.NavigateToPage(ws, ABMPageId, {187} ) 
CompPlannerPage.bas[462] End Sub 
Analysing: CompRadioGroupPage.bas
CompRadioGroupPage.bas[0] ﻿Type=Class 
CompRadioGroupPage.bas[0] Version=4.7 
CompRadioGroupPage.bas[0] ModulesStructureVersion=1 
CompRadioGroupPage.bas[0] B4J=true 
CompRadioGroupPage.bas[0] @EndOfDesignText@ 
CompRadioGroupPage.bas[1] 'Class module 
CompRadioGroupPage.bas[2] Sub Class_Globals 
CompRadioGroupPage.bas[3]  Private ws As WebSocket 'ignore 
CompRadioGroupPage.bas[4]  ' will hold our page information 
CompRadioGroupPage.bas[5]  Public page As ABMPage 
CompRadioGroupPage.bas[6]  ' page theme 
CompRadioGroupPage.bas[7]  Private theme As ABMTheme 
CompRadioGroupPage.bas[8]  ' to access the constants 
CompRadioGroupPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompRadioGroupPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompRadioGroupPage.bas[11]  Public Name As String = {0} 
CompRadioGroupPage.bas[12]  ' will hold the unique browsers window id 
CompRadioGroupPage.bas[13]  Private ABMPageId As String = {1} 
CompRadioGroupPage.bas[14]  
CompRadioGroupPage.bas[15]  ' your own variables 
CompRadioGroupPage.bas[16]  Dim myToastId As Int 
CompRadioGroupPage.bas[17] End Sub 
CompRadioGroupPage.bas[18]  
CompRadioGroupPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompRadioGroupPage.bas[20] Public Sub Initialize 
CompRadioGroupPage.bas[21]  ' build the local structure IMPORTANT! 
CompRadioGroupPage.bas[22]  BuildPage 
CompRadioGroupPage.bas[23] End Sub 
CompRadioGroupPage.bas[24]  
CompRadioGroupPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompRadioGroupPage.bas[26]  Log( {2} ) 
CompRadioGroupPage.bas[27]  ws = WebSocket1 
CompRadioGroupPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompRadioGroupPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompRadioGroupPage.bas[30]  
CompRadioGroupPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompRadioGroupPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompRadioGroupPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompRadioGroupPage.bas[34]  Return 
CompRadioGroupPage.bas[35]  End If 
CompRadioGroupPage.bas[36]  End If 
CompRadioGroupPage.bas[37]  
CompRadioGroupPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompRadioGroupPage.bas[39]  If page.ComesFromPageCache Then 
CompRadioGroupPage.bas[40]  ' refresh the page 
CompRadioGroupPage.bas[41]  page.Refresh 
CompRadioGroupPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRadioGroupPage.bas[43]  page.FinishedLoading 
CompRadioGroupPage.bas[44]  Else 
CompRadioGroupPage.bas[45]  ' Prepare the page 
CompRadioGroupPage.bas[46]  page.Prepare 
CompRadioGroupPage.bas[47]  ' load the dynamic content 
CompRadioGroupPage.bas[48]  ConnectPage 
CompRadioGroupPage.bas[49]  End If 
CompRadioGroupPage.bas[50]  Log(ABMPageId) 
CompRadioGroupPage.bas[51] End Sub 
CompRadioGroupPage.bas[52]  
CompRadioGroupPage.bas[53] Private Sub WebSocket_Disconnected 
CompRadioGroupPage.bas[54]  Log( {7} ) 
CompRadioGroupPage.bas[55] End Sub 
CompRadioGroupPage.bas[56]  
CompRadioGroupPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompRadioGroupPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompRadioGroupPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompRadioGroupPage.bas[60]  If eventName = {11} Then 
CompRadioGroupPage.bas[61]  Log( {12} ) 
CompRadioGroupPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompRadioGroupPage.bas[63]  Return 
CompRadioGroupPage.bas[64]  End If 
CompRadioGroupPage.bas[65]  If SubExists(Me, eventName) Then 
CompRadioGroupPage.bas[66]  Params.Remove( {13} ) 
CompRadioGroupPage.bas[67]  Params.Remove( {14} ) 
CompRadioGroupPage.bas[68]  Select Case Params.Size 
CompRadioGroupPage.bas[69]  Case 0 
CompRadioGroupPage.bas[70]  CallSub(Me, eventName) 
CompRadioGroupPage.bas[71]  Case 1 
CompRadioGroupPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompRadioGroupPage.bas[73]  Case 2 
CompRadioGroupPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompRadioGroupPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompRadioGroupPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompRadioGroupPage.bas[77]  Else 
CompRadioGroupPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompRadioGroupPage.bas[79]  End If 
CompRadioGroupPage.bas[80]  Case Else 
CompRadioGroupPage.bas[81]  ' cannot be called directly, to many param 
CompRadioGroupPage.bas[82]  CallSub2(Me, eventName, Params) 
CompRadioGroupPage.bas[83]  End Select 
CompRadioGroupPage.bas[84]  End If 
CompRadioGroupPage.bas[85] End Sub 
CompRadioGroupPage.bas[86]  
CompRadioGroupPage.bas[87] public Sub BuildTheme() 
CompRadioGroupPage.bas[88]  ' start with the base theme defined in ABMShared 
CompRadioGroupPage.bas[89]  theme.Initialize( {16} ) 
CompRadioGroupPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompRadioGroupPage.bas[91]  
CompRadioGroupPage.bas[92]  ' add additional themes specific for this page 
CompRadioGroupPage.bas[93]  ' bluegray button 
CompRadioGroupPage.bas[94]  theme.AddButtonTheme( {17} ) 
CompRadioGroupPage.bas[95]  theme.Button( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompRadioGroupPage.bas[96]  theme.Button( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompRadioGroupPage.bas[97] End Sub 
CompRadioGroupPage.bas[98]  
CompRadioGroupPage.bas[99] public Sub BuildPage() 
CompRadioGroupPage.bas[100]  ' initialize the theme 
CompRadioGroupPage.bas[101]  BuildTheme 
CompRadioGroupPage.bas[102]  
CompRadioGroupPage.bas[103]  ' initialize this page using our theme 
CompRadioGroupPage.bas[104]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompRadioGroupPage.bas[105]  page.ShowLoader=True 
CompRadioGroupPage.bas[106]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompRadioGroupPage.bas[107]  page.PageTitle = {22} 
CompRadioGroupPage.bas[108]  page.PageDescription = {23} 
CompRadioGroupPage.bas[109]  page.PageHTMLName = {24} 
CompRadioGroupPage.bas[110]  page.PageKeywords = {25} 
CompRadioGroupPage.bas[111]  page.PageSiteMapPriority = {26} 
CompRadioGroupPage.bas[112]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompRadioGroupPage.bas[113]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompRadioGroupPage.bas[114]  
CompRadioGroupPage.bas[115]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompRadioGroupPage.bas[116]  
CompRadioGroupPage.bas[117]  ' create the page grid 
CompRadioGroupPage.bas[118]  page.AddRows(5,True, {32} ).AddCells12(1, {33} ) 
CompRadioGroupPage.bas[119]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompRadioGroupPage.bas[120]  
CompRadioGroupPage.bas[121]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompRadioGroupPage.bas[122]  'page.NeedsCodeLabel = True 
CompRadioGroupPage.bas[123]  
CompRadioGroupPage.bas[124]  ABMShared.BuildFooter(page) 
CompRadioGroupPage.bas[125] End Sub 
CompRadioGroupPage.bas[126]  
CompRadioGroupPage.bas[127] Sub ConnectPage() 
CompRadioGroupPage.bas[128]  'NEW 
CompRadioGroupPage.bas[129]  ABMShared.ConnectNavigationBar(page) 
CompRadioGroupPage.bas[130]  
CompRadioGroupPage.bas[131]  ' add paragraph 
CompRadioGroupPage.bas[132]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} ) ) 
CompRadioGroupPage.bas[133]  
CompRadioGroupPage.bas[134]  Dim rbgroup As ABMRadioGroup 
CompRadioGroupPage.bas[135]  rbgroup.Initialize(page, {36} , {37} ) 
CompRadioGroupPage.bas[136]  rbgroup.AddRadioButton( {38} , True) 
CompRadioGroupPage.bas[137]  rbgroup.AddRadioButton( {39} , True) 
CompRadioGroupPage.bas[138]  rbgroup.AddRadioButton( {40} , True) 
CompRadioGroupPage.bas[139]  rbgroup.AddRadioButton( {41} , False) 
CompRadioGroupPage.bas[140]  
CompRadioGroupPage.bas[141]  rbgroup.SetActive(1) ' start from 0, so we select the second one! 
CompRadioGroupPage.bas[142]  
CompRadioGroupPage.bas[143]  page.Cell(2,1).AddComponent(rbgroup) 
CompRadioGroupPage.bas[144]  
CompRadioGroupPage.bas[145]  ' add button 
CompRadioGroupPage.bas[146]  Dim btn1 As ABMButton 
CompRadioGroupPage.bas[147]  btn1.InitializeRaised(page, {42} , {43} , {44} , {45} , {46} ) 
CompRadioGroupPage.bas[148]  page.Cell(3,1).AddComponent(btn1) 
CompRadioGroupPage.bas[149]  
CompRadioGroupPage.bas[150]  ' add codeblock 
CompRadioGroupPage.bas[151]  Dim code As StringBuilder 
CompRadioGroupPage.bas[152]  code.Initialize 
CompRadioGroupPage.bas[153]  code.Append( {47} ).Append(CRLF) 
CompRadioGroupPage.bas[154]  code.Append( {112} ).Append(CRLF) 
CompRadioGroupPage.bas[155]  code.Append( {114} ).Append(CRLF) 
CompRadioGroupPage.bas[156]  code.Append( {116} ).Append(CRLF) 
CompRadioGroupPage.bas[157]  code.Append( {118} ).Append(CRLF) 
CompRadioGroupPage.bas[158]  code.Append( {120} ).Append(CRLF) 
CompRadioGroupPage.bas[159]  code.Append( {65} ).Append(CRLF) 
CompRadioGroupPage.bas[160]  code.Append( {66} ).Append(CRLF) 
CompRadioGroupPage.bas[161]  code.Append( {67} ).Append(CRLF) 
CompRadioGroupPage.bas[162]  code.Append( {68} ).Append(CRLF) 
CompRadioGroupPage.bas[163]  
CompRadioGroupPage.bas[164]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {69} , code)) 
CompRadioGroupPage.bas[165]  
CompRadioGroupPage.bas[166]  ' add codeblock 
CompRadioGroupPage.bas[167]  Dim code2 As StringBuilder 
CompRadioGroupPage.bas[168]  code2.Initialize 
CompRadioGroupPage.bas[169]  code2.Append( {70} ).Append(CRLF) 
CompRadioGroupPage.bas[170]  code2.Append( {122} ).Append(CRLF) 
CompRadioGroupPage.bas[171]  code2.Append( {74} ).Append(CRLF) 
CompRadioGroupPage.bas[172]  code2.Append( {75} ).Append(CRLF) 
CompRadioGroupPage.bas[173]  code2.Append( {76} ).Append(CRLF) 
CompRadioGroupPage.bas[174]  code2.Append( {77} ).Append(CRLF) 
CompRadioGroupPage.bas[175]  code2.Append( {78} ).Append(CRLF) 
CompRadioGroupPage.bas[176]  code2.Append( {130} ).Append(CRLF) 
CompRadioGroupPage.bas[177]  code2.Append( {88} ).Append(CRLF) 
CompRadioGroupPage.bas[178]  
CompRadioGroupPage.bas[179]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlock(page, {89} , code2)) 
CompRadioGroupPage.bas[180]  
CompRadioGroupPage.bas[181]  ' also add the components to the footer 
CompRadioGroupPage.bas[182]  ABMShared.ConnectFooter(page) 
CompRadioGroupPage.bas[183]  
CompRadioGroupPage.bas[184]  page.Refresh ' IMPORTANT 
CompRadioGroupPage.bas[185]  
CompRadioGroupPage.bas[186]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRadioGroupPage.bas[187]  page.FinishedLoading 'IMPORTANT 
CompRadioGroupPage.bas[188]  
CompRadioGroupPage.bas[189]  Page.RestoreNavigationBarPosition 
CompRadioGroupPage.bas[190] End Sub 
CompRadioGroupPage.bas[191]  
CompRadioGroupPage.bas[192] ' clicked on the navigation bar 
CompRadioGroupPage.bas[193] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompRadioGroupPage.bas[194]  page.SaveNavigationBarPosition 
CompRadioGroupPage.bas[195]  If Action = {90} Then Return 
CompRadioGroupPage.bas[196]  If Action = {91} Then 
CompRadioGroupPage.bas[197]  myToastId = myToastId + 1 
CompRadioGroupPage.bas[198]  page.ShowToast( {92} & myToastId, {93} , {94} , 5000) 
CompRadioGroupPage.bas[199]  Return 
CompRadioGroupPage.bas[200]  End If 
CompRadioGroupPage.bas[201]  If Action = {95} Then 
CompRadioGroupPage.bas[202]  ABMShared.LogOff(page) 
CompRadioGroupPage.bas[203]  Return 
CompRadioGroupPage.bas[204]  End If 
CompRadioGroupPage.bas[205]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompRadioGroupPage.bas[206] End Sub 
CompRadioGroupPage.bas[207]  
CompRadioGroupPage.bas[208] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompRadioGroupPage.bas[209]  page.ws.Session.SetAttribute( {96} , {97} ) 
CompRadioGroupPage.bas[210]  page.ws.Session.SetAttribute( {98} , {99} ) 
CompRadioGroupPage.bas[211]  page.ws.Session.SetAttribute( {100} , {101} ) 
CompRadioGroupPage.bas[212]  ABMShared.NavigateToPage(ws, ABMPageId, {102} ) 
CompRadioGroupPage.bas[213] End Sub 
CompRadioGroupPage.bas[214]  
CompRadioGroupPage.bas[215] Sub rbgroup_Clicked(Target As String) 
CompRadioGroupPage.bas[216]  Log(Target & {103} ) 
CompRadioGroupPage.bas[217] End Sub 
CompRadioGroupPage.bas[218]  
CompRadioGroupPage.bas[219] Sub btn1_Clicked(Target As String) 
CompRadioGroupPage.bas[220]  Dim rb As ABMRadioGroup = page.Component( {104} ) 
CompRadioGroupPage.bas[221]  Dim but As Int = rb.GetActive + 1 ' plus one, starts from 0, remember? 
CompRadioGroupPage.bas[222]  Dim myTexts, myReturns As List 
CompRadioGroupPage.bas[223]  myTexts.Initialize 
CompRadioGroupPage.bas[224]  myReturns.Initialize 
CompRadioGroupPage.bas[225]  myToastId = myToastId + 1 
CompRadioGroupPage.bas[226]  page.ShowToast( {105} & myToastId, {106} , {107} & but & {108} , 5000) 
CompRadioGroupPage.bas[227]  
CompRadioGroupPage.bas[228] End Sub 
Analysing: CompRangePage.bas
CompRangePage.bas[0] ﻿Type=Class 
CompRangePage.bas[0] Version=4.7 
CompRangePage.bas[0] ModulesStructureVersion=1 
CompRangePage.bas[0] B4J=true 
CompRangePage.bas[0] @EndOfDesignText@ 
CompRangePage.bas[1] 'Class module 
CompRangePage.bas[2] Sub Class_Globals 
CompRangePage.bas[3]  Private ws As WebSocket 'ignore 
CompRangePage.bas[4]  ' will hold our page information 
CompRangePage.bas[5]  Public page As ABMPage 
CompRangePage.bas[6]  ' page theme 
CompRangePage.bas[7]  Private theme As ABMTheme 
CompRangePage.bas[8]  ' to access the constants 
CompRangePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompRangePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompRangePage.bas[11]  Public Name As String = {3} 
CompRangePage.bas[12]  ' will hold the unique browsers window id 
CompRangePage.bas[13]  Private ABMPageId As String = {4} 
CompRangePage.bas[14]  
CompRangePage.bas[15]  ' your own variables 
CompRangePage.bas[16]  Dim myToastId As Int 
CompRangePage.bas[17] End Sub 
CompRangePage.bas[18]  
CompRangePage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompRangePage.bas[20] Public Sub Initialize 
CompRangePage.bas[21]  ' build the local structure IMPORTANT! 
CompRangePage.bas[22]  BuildPage 
CompRangePage.bas[23] End Sub 
CompRangePage.bas[24]  
CompRangePage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompRangePage.bas[26]  Log( {5} ) 
CompRangePage.bas[27]  ws = WebSocket1 
CompRangePage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompRangePage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompRangePage.bas[30]  
CompRangePage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompRangePage.bas[32]  If session.GetAttribute2( {6} , {7} ) = {8} Then 
CompRangePage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {9} ) 
CompRangePage.bas[34]  Return 
CompRangePage.bas[35]  End If 
CompRangePage.bas[36]  End If 
CompRangePage.bas[37]  
CompRangePage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompRangePage.bas[39]  If page.ComesFromPageCache Then 
CompRangePage.bas[40]  ' refresh the page 
CompRangePage.bas[41]  page.Refresh 
CompRangePage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRangePage.bas[43]  page.FinishedLoading 
CompRangePage.bas[44]  Else 
CompRangePage.bas[45]  ' Prepare the page 
CompRangePage.bas[46]  page.Prepare 
CompRangePage.bas[47]  ' load the dynamic content 
CompRangePage.bas[48]  ConnectPage 
CompRangePage.bas[49]  End If 
CompRangePage.bas[50]  Log(ABMPageId) 
CompRangePage.bas[51] End Sub 
CompRangePage.bas[52]  
CompRangePage.bas[53] Private Sub WebSocket_Disconnected 
CompRangePage.bas[54]  Log( {10} ) 
CompRangePage.bas[55] End Sub 
CompRangePage.bas[56]  
CompRangePage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompRangePage.bas[58]  Dim eventName As String = Params.Get( {11} ) 
CompRangePage.bas[59]  Dim eventParams() As String = Regex.Split( {12} ,Params.Get( {13} )) 
CompRangePage.bas[60]  If eventName = {14} Then 
CompRangePage.bas[61]  Log( {15} ) 
CompRangePage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompRangePage.bas[63]  Return 
CompRangePage.bas[64]  End If 
CompRangePage.bas[65]  If SubExists(Me, eventName) Then 
CompRangePage.bas[66]  Params.Remove( {16} ) 
CompRangePage.bas[67]  Params.Remove( {17} ) 
CompRangePage.bas[68]  Select Case Params.Size 
CompRangePage.bas[69]  Case 0 
CompRangePage.bas[70]  CallSub(Me, eventName) 
CompRangePage.bas[71]  Case 1 
CompRangePage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompRangePage.bas[73]  Case 2 
CompRangePage.bas[74]  If Params.get(eventParams(0)) = {18} Then 
CompRangePage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompRangePage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompRangePage.bas[77]  Else 
CompRangePage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompRangePage.bas[79]  End If 
CompRangePage.bas[80]  Case Else 
CompRangePage.bas[81]  ' cannot be called directly, to many param 
CompRangePage.bas[82]  CallSub2(Me, eventName, Params) 
CompRangePage.bas[83]  End Select 
CompRangePage.bas[84]  End If 
CompRangePage.bas[85] End Sub 
CompRangePage.bas[86]  
CompRangePage.bas[87] public Sub BuildTheme() 
CompRangePage.bas[88]  ' start with the base theme defined in ABMShared 
CompRangePage.bas[89]  theme.Initialize( {19} ) 
CompRangePage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompRangePage.bas[91]  
CompRangePage.bas[92]  ' add additional themes specific for this page 
CompRangePage.bas[93]  
CompRangePage.bas[94] End Sub 
CompRangePage.bas[95]  
CompRangePage.bas[96] public Sub BuildPage() 
CompRangePage.bas[97]  ' initialize the theme 
CompRangePage.bas[98]  BuildTheme 
CompRangePage.bas[99]  
CompRangePage.bas[100]  ' initialize this page using our theme 
CompRangePage.bas[101]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompRangePage.bas[102]  page.ShowLoader=True 
CompRangePage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompRangePage.bas[104]  page.PageTitle = {22} 
CompRangePage.bas[105]  page.PageDescription = {23} 
CompRangePage.bas[106]  page.PageHTMLName = {24} 
CompRangePage.bas[107]  page.PageKeywords = {25} 
CompRangePage.bas[108]  page.PageSiteMapPriority = {26} 
CompRangePage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompRangePage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompRangePage.bas[111]  
CompRangePage.bas[112]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompRangePage.bas[113]  
CompRangePage.bas[114]  ' create the page grid 
CompRangePage.bas[115]  page.AddRows(7,True, {32} ).AddCells12(1, {33} ) 
CompRangePage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompRangePage.bas[117]  
CompRangePage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompRangePage.bas[119]  'page.NeedsCodeLabel = True 
CompRangePage.bas[120]  
CompRangePage.bas[121]  ABMShared.BuildFooter(page) 
CompRangePage.bas[122] End Sub 
CompRangePage.bas[123]  
CompRangePage.bas[124] Sub ConnectPage() 
CompRangePage.bas[125]  'NEW 
CompRangePage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompRangePage.bas[127]  
CompRangePage.bas[128]  ' add paragraph 
CompRangePage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} )) 
CompRangePage.bas[130]  ' add paragraph 
CompRangePage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {36} , {37} )) 
CompRangePage.bas[132]  ' add paragraph 
CompRangePage.bas[133]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} )) 
CompRangePage.bas[134]  ' add paragraph 
CompRangePage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} )) 
CompRangePage.bas[136]  
CompRangePage.bas[137]  Dim range As ABMRange 
CompRangePage.bas[138]  range.Initialize(page, {42} , 25, 75, 0, 100, 1, {43} ) 
CompRangePage.bas[139]  range.HandleToolTip = {44} 
CompRangePage.bas[140]  range.Connect = ABM.RANGE_CONNECT_TRUE 
CompRangePage.bas[141]  
CompRangePage.bas[142]  page.Cell(2,1).AddComponent(range) 
CompRangePage.bas[143]  
CompRangePage.bas[144]  ' code block 
CompRangePage.bas[145]  Dim code1 As String = {0} 
CompRangePage.bas[151]  
CompRangePage.bas[152]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {45} , code1)) 
CompRangePage.bas[153]  
CompRangePage.bas[154]  ' add paragraph 
CompRangePage.bas[155]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} )) 
CompRangePage.bas[156]  
CompRangePage.bas[157]  ' code block 
CompRangePage.bas[158]  Dim code2 As String = {1} 
CompRangePage.bas[161]  
CompRangePage.bas[162]  Dim code3 As String = {2} 
CompRangePage.bas[167]  
CompRangePage.bas[168]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {48} , code2 & CRLF & CRLF & code3)) 
CompRangePage.bas[169]  
CompRangePage.bas[170]  
CompRangePage.bas[171]  ' also add the components to the footer 
CompRangePage.bas[172]  ABMShared.ConnectFooter(page) 
CompRangePage.bas[173]  
CompRangePage.bas[174]  page.Refresh ' IMPORTANT 
CompRangePage.bas[175]  
CompRangePage.bas[176]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRangePage.bas[177]  page.FinishedLoading 'IMPORTANT 
CompRangePage.bas[178]  
CompRangePage.bas[179]  page.RestoreNavigationBarPosition 
CompRangePage.bas[180] End Sub 
CompRangePage.bas[181]  
CompRangePage.bas[182] ' clicked on the navigation bar 
CompRangePage.bas[183] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompRangePage.bas[184]  page.SaveNavigationBarPosition 
CompRangePage.bas[185]  If Action = {49} Then Return 
CompRangePage.bas[186]  If Action = {50} Then 
CompRangePage.bas[187]  myToastId = myToastId + 1 
CompRangePage.bas[188]  page.ShowToast( {51} & myToastId, {52} , {53} , 5000) 
CompRangePage.bas[189]  Return 
CompRangePage.bas[190]  End If 
CompRangePage.bas[191]  If Action = {54} Then 
CompRangePage.bas[192]  ABMShared.LogOff(page) 
CompRangePage.bas[193]  Return 
CompRangePage.bas[194]  End If 
CompRangePage.bas[195]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompRangePage.bas[196] End Sub 
CompRangePage.bas[197]  
CompRangePage.bas[198] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompRangePage.bas[199]  page.ws.Session.SetAttribute( {55} , {56} ) 
CompRangePage.bas[200]  page.ws.Session.SetAttribute( {57} , {58} ) 
CompRangePage.bas[201]  page.ws.Session.SetAttribute( {59} , {60} ) 
CompRangePage.bas[202]  ABMShared.NavigateToPage(ws, ABMPageId, {61} ) 
CompRangePage.bas[203] End Sub 
Analysing: CompRealSliderPage.bas
CompRealSliderPage.bas[0] ﻿Type=Class 
CompRealSliderPage.bas[0] Version=4.7 
CompRealSliderPage.bas[0] ModulesStructureVersion=1 
CompRealSliderPage.bas[0] B4J=true 
CompRealSliderPage.bas[0] @EndOfDesignText@ 
CompRealSliderPage.bas[1] 'Class module 
CompRealSliderPage.bas[2] Sub Class_Globals 
CompRealSliderPage.bas[3]  Private ws As WebSocket 'ignore 
CompRealSliderPage.bas[4]  ' will hold our page information 
CompRealSliderPage.bas[5]  Public page As ABMPage 
CompRealSliderPage.bas[6]  ' page theme 
CompRealSliderPage.bas[7]  Private theme As ABMTheme 
CompRealSliderPage.bas[8]  ' to access the constants 
CompRealSliderPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompRealSliderPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompRealSliderPage.bas[11]  Public Name As String = {3} 
CompRealSliderPage.bas[12]  ' will hold the unique browsers window id 
CompRealSliderPage.bas[13]  Private ABMPageId As String = {4} 
CompRealSliderPage.bas[14]  
CompRealSliderPage.bas[15]  ' your own variables 
CompRealSliderPage.bas[16]  Dim myToastId As Int 
CompRealSliderPage.bas[17] End Sub 
CompRealSliderPage.bas[18]  
CompRealSliderPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompRealSliderPage.bas[20] Public Sub Initialize 
CompRealSliderPage.bas[21]  ' build the local structure IMPORTANT! 
CompRealSliderPage.bas[22]  BuildPage 
CompRealSliderPage.bas[23] End Sub 
CompRealSliderPage.bas[24]  
CompRealSliderPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompRealSliderPage.bas[26]  Log( {5} ) 
CompRealSliderPage.bas[27]  ws = WebSocket1 
CompRealSliderPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompRealSliderPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompRealSliderPage.bas[30]  
CompRealSliderPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompRealSliderPage.bas[32]  If session.GetAttribute2( {6} , {7} ) = {8} Then 
CompRealSliderPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {9} ) 
CompRealSliderPage.bas[34]  Return 
CompRealSliderPage.bas[35]  End If 
CompRealSliderPage.bas[36]  End If 
CompRealSliderPage.bas[37]  
CompRealSliderPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompRealSliderPage.bas[39]  If page.ComesFromPageCache Then 
CompRealSliderPage.bas[40]  ' refresh the page 
CompRealSliderPage.bas[41]  page.Refresh 
CompRealSliderPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRealSliderPage.bas[43]  page.FinishedLoading 
CompRealSliderPage.bas[44]  Else 
CompRealSliderPage.bas[45]  ' Prepare the page 
CompRealSliderPage.bas[46]  page.Prepare 
CompRealSliderPage.bas[47]  ' load the dynamic content 
CompRealSliderPage.bas[48]  ConnectPage 
CompRealSliderPage.bas[49]  End If 
CompRealSliderPage.bas[50]  Log(ABMPageId) 
CompRealSliderPage.bas[51] End Sub 
CompRealSliderPage.bas[52]  
CompRealSliderPage.bas[53] Private Sub WebSocket_Disconnected 
CompRealSliderPage.bas[54]  Log( {10} ) 
CompRealSliderPage.bas[55] End Sub 
CompRealSliderPage.bas[56]  
CompRealSliderPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompRealSliderPage.bas[58]  Dim eventName As String = Params.Get( {11} ) 
CompRealSliderPage.bas[59]  Dim eventParams() As String = Regex.Split( {12} ,Params.Get( {13} )) 
CompRealSliderPage.bas[60]  If eventName = {14} Then 
CompRealSliderPage.bas[61]  Log( {15} ) 
CompRealSliderPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompRealSliderPage.bas[63]  Return 
CompRealSliderPage.bas[64]  End If 
CompRealSliderPage.bas[65]  If SubExists(Me, eventName) Then 
CompRealSliderPage.bas[66]  Params.Remove( {16} ) 
CompRealSliderPage.bas[67]  Params.Remove( {17} ) 
CompRealSliderPage.bas[68]  Select Case Params.Size 
CompRealSliderPage.bas[69]  Case 0 
CompRealSliderPage.bas[70]  CallSub(Me, eventName) 
CompRealSliderPage.bas[71]  Case 1 
CompRealSliderPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompRealSliderPage.bas[73]  Case 2 
CompRealSliderPage.bas[74]  If Params.get(eventParams(0)) = {18} Then 
CompRealSliderPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompRealSliderPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompRealSliderPage.bas[77]  Else 
CompRealSliderPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompRealSliderPage.bas[79]  End If 
CompRealSliderPage.bas[80]  Case Else 
CompRealSliderPage.bas[81]  ' cannot be called directly, to many param 
CompRealSliderPage.bas[82]  CallSub2(Me, eventName, Params) 
CompRealSliderPage.bas[83]  End Select 
CompRealSliderPage.bas[84]  End If 
CompRealSliderPage.bas[85] End Sub 
CompRealSliderPage.bas[86]  
CompRealSliderPage.bas[87] public Sub BuildTheme() 
CompRealSliderPage.bas[88]  ' start with the base theme defined in ABMShared 
CompRealSliderPage.bas[89]  theme.Initialize( {19} ) 
CompRealSliderPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompRealSliderPage.bas[91]  
CompRealSliderPage.bas[92]  ' add additional themes specific for this page 
CompRealSliderPage.bas[93]  
CompRealSliderPage.bas[94] End Sub 
CompRealSliderPage.bas[95]  
CompRealSliderPage.bas[96] public Sub BuildPage() 
CompRealSliderPage.bas[97]  ' initialize the theme 
CompRealSliderPage.bas[98]  BuildTheme 
CompRealSliderPage.bas[99]  
CompRealSliderPage.bas[100]  ' initialize this page using our theme 
CompRealSliderPage.bas[101]  page.InitializeWithTheme(Name, {20} & ABMshared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompRealSliderPage.bas[102]  page.ShowLoader=True 
CompRealSliderPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompRealSliderPage.bas[104]  page.PageTitle = {22} 
CompRealSliderPage.bas[105]  page.PageDescription = {23} 
CompRealSliderPage.bas[106]  page.PageHTMLName = {24} 
CompRealSliderPage.bas[107]  page.PageKeywords = {25} 
CompRealSliderPage.bas[108]  page.PageSiteMapPriority = {26} 
CompRealSliderPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompRealSliderPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompRealSliderPage.bas[111]  
CompRealSliderPage.bas[112]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompRealSliderPage.bas[113]  
CompRealSliderPage.bas[114]  ' create the page grid 
CompRealSliderPage.bas[115]  page.AddRows(7,True, {32} ).AddCells12(1, {33} ) 
CompRealSliderPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompRealSliderPage.bas[117]  
CompRealSliderPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompRealSliderPage.bas[119]  'page.NeedsCodeLabel = True 
CompRealSliderPage.bas[120]  
CompRealSliderPage.bas[121]  ABMShared.BuildFooter(page) 
CompRealSliderPage.bas[122] End Sub 
CompRealSliderPage.bas[123]  
CompRealSliderPage.bas[124] Sub ConnectPage() 
CompRealSliderPage.bas[125]  'NEW 
CompRealSliderPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompRealSliderPage.bas[127]  
CompRealSliderPage.bas[128]  ' add paragraph 
CompRealSliderPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} )) 
CompRealSliderPage.bas[130]  ' add paragraph 
CompRealSliderPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {36} , {37} )) 
CompRealSliderPage.bas[132]  
CompRealSliderPage.bas[133]  Dim slider As ABMSlider 
CompRealSliderPage.bas[134]  slider.Initialize(page, {38} , 25, 0, 100, 1, {39} ) 
CompRealSliderPage.bas[135]  slider.HandleToolTip = {40} 
CompRealSliderPage.bas[136]  slider.Connect = ABM.SLIDER_CONNECT_LOWER 
CompRealSliderPage.bas[137]  
CompRealSliderPage.bas[138]  page.Cell(2,1).AddComponent(slider) 
CompRealSliderPage.bas[139]  
CompRealSliderPage.bas[140]  ' code block 
CompRealSliderPage.bas[141]  Dim code1 As String = {0} 
CompRealSliderPage.bas[147]  
CompRealSliderPage.bas[148]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {41} , code1)) 
CompRealSliderPage.bas[149]  
CompRealSliderPage.bas[150]  ' add paragraph 
CompRealSliderPage.bas[151]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} )) 
CompRealSliderPage.bas[152]  
CompRealSliderPage.bas[153]  ' code block 
CompRealSliderPage.bas[154]  Dim code2 As String = {1} 
CompRealSliderPage.bas[157]  
CompRealSliderPage.bas[158]  Dim code3 As String = {2} 
CompRealSliderPage.bas[162]  
CompRealSliderPage.bas[163]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {44} , code2 & CRLF & CRLF & code3)) 
CompRealSliderPage.bas[164]  
CompRealSliderPage.bas[165]  ' also add the components to the footer 
CompRealSliderPage.bas[166]  ABMShared.ConnectFooter(page) 
CompRealSliderPage.bas[167]  
CompRealSliderPage.bas[168]  page.Refresh ' IMPORTANT 
CompRealSliderPage.bas[169]  
CompRealSliderPage.bas[170]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompRealSliderPage.bas[171]  page.FinishedLoading 'IMPORTANT 
CompRealSliderPage.bas[172]  
CompRealSliderPage.bas[173]  page.RestoreNavigationBarPosition 
CompRealSliderPage.bas[174] End Sub 
CompRealSliderPage.bas[175]  
CompRealSliderPage.bas[176] ' clicked on the navigation bar 
CompRealSliderPage.bas[177] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompRealSliderPage.bas[178]  page.SaveNavigationBarPosition 
CompRealSliderPage.bas[179]  If Action = {45} Then Return 
CompRealSliderPage.bas[180]  If Action = {46} Then 
CompRealSliderPage.bas[181]  myToastId = myToastId + 1 
CompRealSliderPage.bas[182]  page.ShowToast( {47} & myToastId, {48} , {49} , 5000) 
CompRealSliderPage.bas[183]  Return 
CompRealSliderPage.bas[184]  End If 
CompRealSliderPage.bas[185]  If Action = {50} Then 
CompRealSliderPage.bas[186]  ABMShared.LogOff(page) 
CompRealSliderPage.bas[187]  Return 
CompRealSliderPage.bas[188]  End If 
CompRealSliderPage.bas[189]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompRealSliderPage.bas[190] End Sub 
CompRealSliderPage.bas[191]  
CompRealSliderPage.bas[192] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompRealSliderPage.bas[193]  page.ws.Session.SetAttribute( {51} , {52} ) 
CompRealSliderPage.bas[194]  page.ws.Session.SetAttribute( {53} , {54} ) 
CompRealSliderPage.bas[195]  page.ws.Session.SetAttribute( {55} , {56} ) 
CompRealSliderPage.bas[196]  ABMShared.NavigateToPage(ws, ABMPageId, {57} ) 
CompRealSliderPage.bas[197] End Sub 
Analysing: CompSignaturePage.bas
CompSignaturePage.bas[0] ﻿Type=Class 
CompSignaturePage.bas[0] Version=4.7 
CompSignaturePage.bas[0] ModulesStructureVersion=1 
CompSignaturePage.bas[0] B4J=true 
CompSignaturePage.bas[0] @EndOfDesignText@ 
CompSignaturePage.bas[1] 'Class module 
CompSignaturePage.bas[2] Sub Class_Globals 
CompSignaturePage.bas[3]  Private ws As WebSocket 'ignore 
CompSignaturePage.bas[4]  ' will hold our page information 
CompSignaturePage.bas[5]  Public page As ABMPage 
CompSignaturePage.bas[6]  ' page theme 
CompSignaturePage.bas[7]  Private theme As ABMTheme 
CompSignaturePage.bas[8]  ' to access the constants 
CompSignaturePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompSignaturePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompSignaturePage.bas[11]  Public Name As String = {5} 
CompSignaturePage.bas[12]  ' will hold the unique browsers window id 
CompSignaturePage.bas[13]  Private ABMPageId As String = {6} 
CompSignaturePage.bas[14]  ' the download folder 
CompSignaturePage.bas[15]  Public DownloadFolder As String = {7} & ABMShared.AppName & {8} 
CompSignaturePage.bas[16]  Public DownloadMaxSize As String = 2*1024*1024 
CompSignaturePage.bas[17]  
CompSignaturePage.bas[18]  ' your own variables 
CompSignaturePage.bas[19]  Dim myToastId As Int 
CompSignaturePage.bas[20]  Dim SignCounter As Int 
CompSignaturePage.bas[21] End Sub 
CompSignaturePage.bas[22]  
CompSignaturePage.bas[23] 'Initializes the object. You can add parameters to this method if needed. 
CompSignaturePage.bas[24] Public Sub Initialize 
CompSignaturePage.bas[25]  ' build the local structure IMPORTANT! 
CompSignaturePage.bas[26]  BuildPage 
CompSignaturePage.bas[27] End Sub 
CompSignaturePage.bas[28]  
CompSignaturePage.bas[29] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompSignaturePage.bas[30]  Log( {9} ) 
CompSignaturePage.bas[31]  ws = WebSocket1 
CompSignaturePage.bas[32]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompSignaturePage.bas[33]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompSignaturePage.bas[34]  
CompSignaturePage.bas[35]  If ABMShared.NeedsAuthorization Then 
CompSignaturePage.bas[36]  If session.GetAttribute2( {10} , {11} ) = {12} Then 
CompSignaturePage.bas[37]  ABMShared.NavigateToPage(ws, ABMPageId, {13} ) 
CompSignaturePage.bas[38]  Return 
CompSignaturePage.bas[39]  End If 
CompSignaturePage.bas[40]  End If 
CompSignaturePage.bas[41]  
CompSignaturePage.bas[42]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompSignaturePage.bas[43]  If page.ComesFromPageCache Then 
CompSignaturePage.bas[44]  ' refresh the page 
CompSignaturePage.bas[45]  page.Refresh 
CompSignaturePage.bas[46]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSignaturePage.bas[47]  page.FinishedLoading 
CompSignaturePage.bas[48]  Else 
CompSignaturePage.bas[49]  ' Prepare the page 
CompSignaturePage.bas[50]  page.Prepare 
CompSignaturePage.bas[51]  ' load the dynamic content 
CompSignaturePage.bas[52]  ConnectPage 
CompSignaturePage.bas[53]  End If 
CompSignaturePage.bas[54]  Log(ABMPageId) 
CompSignaturePage.bas[55]  ' this page uses uploads, so needs some settings 
CompSignaturePage.bas[56]  ws.Session.SetAttribute( {14} , Me) 
CompSignaturePage.bas[57]  ws.Session.SetAttribute( {15} , DownloadFolder) 
CompSignaturePage.bas[58]  ws.Session.SetAttribute( {16} , DownloadMaxSize) 
CompSignaturePage.bas[59] End Sub 
CompSignaturePage.bas[60]  
CompSignaturePage.bas[61] Private Sub WebSocket_Disconnected 
CompSignaturePage.bas[62]  Log( {17} ) 
CompSignaturePage.bas[63]  Try 
CompSignaturePage.bas[64]  ws.Session.RemoveAttribute( {18} ) 
CompSignaturePage.bas[65]  ws.Session.RemoveAttribute( {19} ) 
CompSignaturePage.bas[66]  ws.Session.RemoveAttribute( {20} ) 
CompSignaturePage.bas[67]  Catch 
CompSignaturePage.bas[68]  Log(LastException.Message) 
CompSignaturePage.bas[69]  End Try 
CompSignaturePage.bas[70] End Sub 
CompSignaturePage.bas[71]  
CompSignaturePage.bas[72] Sub Page_ParseEvent(Params As Map) 
CompSignaturePage.bas[73]  Dim eventName As String = Params.Get( {21} ) 
CompSignaturePage.bas[74]  Dim eventParams() As String = Regex.Split( {22} ,Params.Get( {23} )) 
CompSignaturePage.bas[75]  If eventName = {24} Then 
CompSignaturePage.bas[76]  Log( {25} ) 
CompSignaturePage.bas[77]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompSignaturePage.bas[78]  Return 
CompSignaturePage.bas[79]  End If 
CompSignaturePage.bas[80]  If SubExists(Me, eventName) Then 
CompSignaturePage.bas[81]  Params.Remove( {26} ) 
CompSignaturePage.bas[82]  Params.Remove( {27} ) 
CompSignaturePage.bas[83]  Select Case Params.Size 
CompSignaturePage.bas[84]  Case 0 
CompSignaturePage.bas[85]  CallSub(Me, eventName) 
CompSignaturePage.bas[86]  Case 1 
CompSignaturePage.bas[87]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompSignaturePage.bas[88]  Case 2 
CompSignaturePage.bas[89]  If Params.get(eventParams(0)) = {28} Then 
CompSignaturePage.bas[90]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompSignaturePage.bas[91]  CallSub2(Me, eventName, PassedTables) 
CompSignaturePage.bas[92]  Else 
CompSignaturePage.bas[93]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompSignaturePage.bas[94]  End If 
CompSignaturePage.bas[95]  Case Else 
CompSignaturePage.bas[96]  ' cannot be called directly, to many param 
CompSignaturePage.bas[97]  CallSub2(Me, eventName, Params) 
CompSignaturePage.bas[98]  End Select 
CompSignaturePage.bas[99]  End If 
CompSignaturePage.bas[100] End Sub 
CompSignaturePage.bas[101]  
CompSignaturePage.bas[102] public Sub BuildTheme() 
CompSignaturePage.bas[103]  ' start with the base theme defined in ABMShared 
CompSignaturePage.bas[104]  theme.Initialize( {29} ) 
CompSignaturePage.bas[105]  theme.AddABMTheme(ABMShared.MyTheme) 
CompSignaturePage.bas[106]  
CompSignaturePage.bas[107]  ' add additional themes specific for this page 
CompSignaturePage.bas[108]  ' bluegray button 
CompSignaturePage.bas[109]  theme.AddButtonTheme( {30} ) 
CompSignaturePage.bas[110]  theme.Button( {31} ).BackColor = ABM.COLOR_BLUEGREY 
CompSignaturePage.bas[111]  theme.Button( {32} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompSignaturePage.bas[112]  
CompSignaturePage.bas[113]  ' another toast theme 
CompSignaturePage.bas[114]  theme.AddToastTheme( {33} ) 
CompSignaturePage.bas[115]  theme.Toast( {34} ).Rounded = True 
CompSignaturePage.bas[116]  theme.Toast( {35} ).ActionForeColor = ABM.COLOR_BLACK 
CompSignaturePage.bas[117]  theme.Toast( {36} ).BackColor = ABM.COLOR_GREEN 
CompSignaturePage.bas[118] End Sub 
CompSignaturePage.bas[119]  
CompSignaturePage.bas[120] public Sub BuildPage() 
CompSignaturePage.bas[121]  ' initialize the theme 
CompSignaturePage.bas[122]  BuildTheme 
CompSignaturePage.bas[123]  
CompSignaturePage.bas[124]  ' initialize this page using our theme 
CompSignaturePage.bas[125]  page.InitializeWithTheme(Name, {37} & ABMshared.AppName & {38} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompSignaturePage.bas[126]  page.ShowLoader=True 
CompSignaturePage.bas[127]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompSignaturePage.bas[128]  page.PageTitle = {39} 
CompSignaturePage.bas[129]  page.PageDescription = {40} 
CompSignaturePage.bas[130]  page.PageHTMLName = {41} 
CompSignaturePage.bas[131]  page.PageKeywords = {42} 
CompSignaturePage.bas[132]  page.PageSiteMapPriority = {43} 
CompSignaturePage.bas[133]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompSignaturePage.bas[134]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompSignaturePage.bas[135]  
CompSignaturePage.bas[136]  ABMShared.BuildNavigationBar(page, {44} , {45} , {46} , {47} , {48} ) 
CompSignaturePage.bas[137]  
CompSignaturePage.bas[138]  ' create the page grid 
CompSignaturePage.bas[139]  page.AddRows(7,True, {49} ).AddCells12(1, {50} ) 
CompSignaturePage.bas[140]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompSignaturePage.bas[141]  
CompSignaturePage.bas[142]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompSignaturePage.bas[143]  'page.NeedsCodeLabel = True 
CompSignaturePage.bas[144]  
CompSignaturePage.bas[145]  ABMShared.BuildFooter(page) 
CompSignaturePage.bas[146] End Sub 
CompSignaturePage.bas[147]  
CompSignaturePage.bas[148] Sub ConnectPage() 
CompSignaturePage.bas[149]  'NEW 
CompSignaturePage.bas[150]  ABMShared.ConnectNavigationBar(page) 
CompSignaturePage.bas[151]  
CompSignaturePage.bas[152]  ' add paragraph 
CompSignaturePage.bas[153]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {51} , {52} ) ) 
CompSignaturePage.bas[154]  
CompSignaturePage.bas[155]  ' create the pad 
CompSignaturePage.bas[156]  Dim sign1 As ABMSignaturePad 
CompSignaturePage.bas[157]  sign1.Initialize(page, {53} , 640, 360, ABM.COLOR_WHITE, ABM.INTENSITY_NORMAL, ABM.COLOR_BLUEGREY, ABM.INTENSITY_DARKEN2, ABM.ZDEPTH_1) 
CompSignaturePage.bas[158]  page.Cell(2,1).AddComponent(sign1) 
CompSignaturePage.bas[159]  
CompSignaturePage.bas[160]  ' add buttons 
CompSignaturePage.bas[161]  Dim btnClear As ABMButton 
CompSignaturePage.bas[162]  btnClear.InitializeRaised(page, {54} , {55} , {56} , {57} , {58} ) 
CompSignaturePage.bas[163]  page.Cell(3,1).AddComponent(btnClear) 
CompSignaturePage.bas[164]  
CompSignaturePage.bas[165]  Dim btnGetSign As ABMButton 
CompSignaturePage.bas[166]  btnGetSign.InitializeRaised(page, {59} , {60} , {61} , {62} , {63} ) 
CompSignaturePage.bas[167]  page.Cell(3,1).AddComponent(btnGetSign) 
CompSignaturePage.bas[168]  
CompSignaturePage.bas[169]  ' add paragraph 
CompSignaturePage.bas[170]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {64} , {65} ) ) 
CompSignaturePage.bas[171]  
CompSignaturePage.bas[172]  ' code block 
CompSignaturePage.bas[173]  Dim code1 As String = {0} 
CompSignaturePage.bas[177]  
CompSignaturePage.bas[178]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {66} , code1)) 
CompSignaturePage.bas[179]  
CompSignaturePage.bas[180]  ' code block 
CompSignaturePage.bas[181]  Dim code2 As String = {1} 
CompSignaturePage.bas[186]  
CompSignaturePage.bas[187]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {67} , code2)) 
CompSignaturePage.bas[188]  
CompSignaturePage.bas[189]  ' code block 
CompSignaturePage.bas[190]  Dim code3 As String = {2} 
CompSignaturePage.bas[199]  
CompSignaturePage.bas[200]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {68} , code3)) 
CompSignaturePage.bas[201]  
CompSignaturePage.bas[202]  ' add paragraph 
CompSignaturePage.bas[203]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {69} , {70} )) 
CompSignaturePage.bas[204]  
CompSignaturePage.bas[205]  ' add codeblock 
CompSignaturePage.bas[206]  Dim code As String = {3} 
CompSignaturePage.bas[210]  
CompSignaturePage.bas[211]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {71} , code)) 
CompSignaturePage.bas[212]  ' add codeblock 
CompSignaturePage.bas[213]  code = {4} 
CompSignaturePage.bas[221]  
CompSignaturePage.bas[222]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {72} , code)) 
CompSignaturePage.bas[223]  
CompSignaturePage.bas[224]  ' also add the components to the footer 
CompSignaturePage.bas[225]  ABMShared.ConnectFooter(page) 
CompSignaturePage.bas[226]  
CompSignaturePage.bas[227]  page.Refresh ' IMPORTANT 
CompSignaturePage.bas[228]  
CompSignaturePage.bas[229]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSignaturePage.bas[230]  page.FinishedLoading 'IMPORTANT 
CompSignaturePage.bas[231]  
CompSignaturePage.bas[232]  page.RestoreNavigationBarPosition 
CompSignaturePage.bas[233] End Sub 
CompSignaturePage.bas[234]  
CompSignaturePage.bas[235] ' clicked on the navigation bar 
CompSignaturePage.bas[236] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompSignaturePage.bas[237]  page.SaveNavigationBarPosition 
CompSignaturePage.bas[238]  If Action = {73} Then Return 
CompSignaturePage.bas[239]  If Action = {74} Then 
CompSignaturePage.bas[240]  myToastId = myToastId + 1 
CompSignaturePage.bas[241]  page.ShowToast( {75} & myToastId, {76} , {77} , 5000) 
CompSignaturePage.bas[242]  Return 
CompSignaturePage.bas[243]  End If 
CompSignaturePage.bas[244]  If Action = {78} Then 
CompSignaturePage.bas[245]  ABMShared.LogOff(page) 
CompSignaturePage.bas[246]  Return 
CompSignaturePage.bas[247]  End If 
CompSignaturePage.bas[248]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompSignaturePage.bas[249] End Sub 
CompSignaturePage.bas[250]  
CompSignaturePage.bas[251] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompSignaturePage.bas[252]  page.ws.Session.SetAttribute( {79} , {80} ) 
CompSignaturePage.bas[253]  page.ws.Session.SetAttribute( {81} , {82} ) 
CompSignaturePage.bas[254]  page.ws.Session.SetAttribute( {83} , {84} ) 
CompSignaturePage.bas[255]  ABMShared.NavigateToPage(ws, ABMPageId, {85} ) 
CompSignaturePage.bas[256] End Sub 
CompSignaturePage.bas[257]  
CompSignaturePage.bas[258] Sub btnClear_Clicked(Target As String) 
CompSignaturePage.bas[259]  Dim sign1 As ABMSignaturePad = page.Cell(2,1).Component( {86} ) 
CompSignaturePage.bas[260]  sign1.Clear 
CompSignaturePage.bas[261] End Sub 
CompSignaturePage.bas[262]  
CompSignaturePage.bas[263] Sub btnGetSign_Clicked(Target As String) 
CompSignaturePage.bas[264]  Dim sign1 As ABMSignaturePad = page.Cell(2,1).Component( {87} ) 
CompSignaturePage.bas[265]  SignCounter =SignCounter + 1 
CompSignaturePage.bas[266]  sign1.GetDrawingURI( {88} & SignCounter & {89} ) 
CompSignaturePage.bas[267] End Sub 
CompSignaturePage.bas[268]  
CompSignaturePage.bas[269] Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompSignaturePage.bas[270]  myToastId = myToastId + 1 
CompSignaturePage.bas[271]  If success Then 
CompSignaturePage.bas[272]  page.ShowToast( {90} & myToastId, {91} , {92} & FileName & {93} , 5000) 
CompSignaturePage.bas[273]  Else 
CompSignaturePage.bas[274]  page.ShowToast( {94} & myToastId, {95} , {96} & FileName & {97} , 5000) 
CompSignaturePage.bas[275]  End If 
CompSignaturePage.bas[276]  page.ws.Flush ' IMPORTANT 
CompSignaturePage.bas[277] End Sub 
CompSignaturePage.bas[278]  
CompSignaturePage.bas[279]  
Analysing: CompSliderPage.bas
CompSliderPage.bas[0] ﻿Type=Class 
CompSliderPage.bas[0] Version=4.7 
CompSliderPage.bas[0] ModulesStructureVersion=1 
CompSliderPage.bas[0] B4J=true 
CompSliderPage.bas[0] @EndOfDesignText@ 
CompSliderPage.bas[1] 'Class module 
CompSliderPage.bas[2] Sub Class_Globals 
CompSliderPage.bas[3]  Private ws As WebSocket 'ignore 
CompSliderPage.bas[4]  ' will hold our page information 
CompSliderPage.bas[5]  Public page As ABMPage 
CompSliderPage.bas[6]  ' page theme 
CompSliderPage.bas[7]  Private theme As ABMTheme 
CompSliderPage.bas[8]  ' to access the constants 
CompSliderPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompSliderPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompSliderPage.bas[11]  Public Name As String = {0} 
CompSliderPage.bas[12]  ' will hold the unique browsers window id 
CompSliderPage.bas[13]  Private ABMPageId As String = {1} 
CompSliderPage.bas[14]  
CompSliderPage.bas[15]  ' your own variables 
CompSliderPage.bas[16]  Dim myToastId As Int 
CompSliderPage.bas[17] End Sub 
CompSliderPage.bas[18]  
CompSliderPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompSliderPage.bas[20] Public Sub Initialize 
CompSliderPage.bas[21]  ' build the local structure IMPORTANT! 
CompSliderPage.bas[22]  BuildPage 
CompSliderPage.bas[23] End Sub 
CompSliderPage.bas[24]  
CompSliderPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompSliderPage.bas[26]  Log( {2} ) 
CompSliderPage.bas[27]  ws = WebSocket1 
CompSliderPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompSliderPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompSliderPage.bas[30]  
CompSliderPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompSliderPage.bas[32]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompSliderPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompSliderPage.bas[34]  Return 
CompSliderPage.bas[35]  End If 
CompSliderPage.bas[36]  End If 
CompSliderPage.bas[37]  
CompSliderPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompSliderPage.bas[39]  If page.ComesFromPageCache Then 
CompSliderPage.bas[40]  ' refresh the page 
CompSliderPage.bas[41]  page.Refresh 
CompSliderPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSliderPage.bas[43]  page.FinishedLoading 
CompSliderPage.bas[44]  Else 
CompSliderPage.bas[45]  ' Prepare the page 
CompSliderPage.bas[46]  page.Prepare 
CompSliderPage.bas[47]  ' load the dynamic content 
CompSliderPage.bas[48]  ConnectPage 
CompSliderPage.bas[49]  End If 
CompSliderPage.bas[50]  Log(ABMPageId) 
CompSliderPage.bas[51] End Sub 
CompSliderPage.bas[52]  
CompSliderPage.bas[53] Private Sub WebSocket_Disconnected 
CompSliderPage.bas[54]  Log( {7} ) 
CompSliderPage.bas[55] End Sub 
CompSliderPage.bas[56]  
CompSliderPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompSliderPage.bas[58]  Dim eventName As String = Params.Get( {8} ) 
CompSliderPage.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompSliderPage.bas[60]  If eventName = {11} Then 
CompSliderPage.bas[61]  Log( {12} ) 
CompSliderPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompSliderPage.bas[63]  Return 
CompSliderPage.bas[64]  End If 
CompSliderPage.bas[65]  If SubExists(Me, eventName) Then 
CompSliderPage.bas[66]  Params.Remove( {13} ) 
CompSliderPage.bas[67]  Params.Remove( {14} ) 
CompSliderPage.bas[68]  Select Case Params.Size 
CompSliderPage.bas[69]  Case 0 
CompSliderPage.bas[70]  CallSub(Me, eventName) 
CompSliderPage.bas[71]  Case 1 
CompSliderPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompSliderPage.bas[73]  Case 2 
CompSliderPage.bas[74]  If Params.get(eventParams(0)) = {15} Then 
CompSliderPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompSliderPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompSliderPage.bas[77]  Else 
CompSliderPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompSliderPage.bas[79]  End If 
CompSliderPage.bas[80]  Case Else 
CompSliderPage.bas[81]  ' cannot be called directly, to many param 
CompSliderPage.bas[82]  CallSub2(Me, eventName, Params) 
CompSliderPage.bas[83]  End Select 
CompSliderPage.bas[84]  End If 
CompSliderPage.bas[85] End Sub 
CompSliderPage.bas[86]  
CompSliderPage.bas[87] public Sub BuildTheme() 
CompSliderPage.bas[88]  ' start with the base theme defined in ABMShared 
CompSliderPage.bas[89]  theme.Initialize( {16} ) 
CompSliderPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompSliderPage.bas[91]  
CompSliderPage.bas[92]  ' add additional themes specific for this page 
CompSliderPage.bas[93]  ' bluegray button 
CompSliderPage.bas[94]  theme.AddButtonTheme( {17} ) 
CompSliderPage.bas[95]  theme.Button( {18} ).BackColor = ABM.COLOR_BLUEGREY 
CompSliderPage.bas[96]  theme.Button( {19} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompSliderPage.bas[97]  
CompSliderPage.bas[98]  theme.AddImageSliderTheme( {20} ) 
CompSliderPage.bas[99]  theme.ImageSlider( {21} ).Height = 300 
CompSliderPage.bas[100] End Sub 
CompSliderPage.bas[101]  
CompSliderPage.bas[102] public Sub BuildPage() 
CompSliderPage.bas[103]  ' initialize the theme 
CompSliderPage.bas[104]  BuildTheme 
CompSliderPage.bas[105]  
CompSliderPage.bas[106]  ' initialize this page using our theme 
CompSliderPage.bas[107]  page.InitializeWithTheme(Name, {22} & ABMshared.AppName & {23} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompSliderPage.bas[108]  page.ShowLoader=True 
CompSliderPage.bas[109]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompSliderPage.bas[110]  page.PageTitle = {24} 
CompSliderPage.bas[111]  page.PageDescription = {25} 
CompSliderPage.bas[112]  page.PageHTMLName = {26} 
CompSliderPage.bas[113]  page.PageKeywords = {27} 
CompSliderPage.bas[114]  page.PageSiteMapPriority = {28} 
CompSliderPage.bas[115]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompSliderPage.bas[116]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompSliderPage.bas[117]  
CompSliderPage.bas[118]  ABMShared.BuildNavigationBar(page, {29} , {30} , {31} , {32} , {33} ) 
CompSliderPage.bas[119]  
CompSliderPage.bas[120]  ' create the page grid 
CompSliderPage.bas[121]  page.AddRows(1,True, {34} ).AddCells12(1, {35} ) 
CompSliderPage.bas[122]  page.AddRows(1,True, {36} ).AddCellsOS(1,0,2,2,12,8,8, {37} ) 
CompSliderPage.bas[123]  page.AddRows(4,True, {38} ).AddCells12(1, {39} ) 
CompSliderPage.bas[124]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompSliderPage.bas[125]  
CompSliderPage.bas[126]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompSliderPage.bas[127]  'page.NeedsCodeLabel = True 
CompSliderPage.bas[128]  
CompSliderPage.bas[129]  ABMShared.BuildFooter(page) 
CompSliderPage.bas[130] End Sub 
CompSliderPage.bas[131]  
CompSliderPage.bas[132] Sub ConnectPage() 
CompSliderPage.bas[133]  'NEW 
CompSliderPage.bas[134]  ABMShared.ConnectNavigationBar(page) 
CompSliderPage.bas[135]  
CompSliderPage.bas[136]  ' add paragraph 
CompSliderPage.bas[137]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {40} , {41} ) ) 
CompSliderPage.bas[138]  
CompSliderPage.bas[139]  ' create slider 
CompSliderPage.bas[140]  Dim slider As ABMImageSlider 
CompSliderPage.bas[141]  slider.Initialize(page, {42} , {43} ) 
CompSliderPage.bas[142]  
CompSliderPage.bas[143]  ' add images 
CompSliderPage.bas[144]  slider.AddSlideImage( {44} , {45} , {46} , ABM.IMAGESLIDER_LEFT) 
CompSliderPage.bas[145]  slider.AddSlideImage( {47} , {48} , {49} , ABM.IMAGESLIDER_CENTER) 
CompSliderPage.bas[146]  slider.AddSlideImage( {50} , {51} , {52} , ABM.IMAGESLIDER_RIGHT) 
CompSliderPage.bas[147]  slider.AddSlideImage( {53} , {54} , {55} , ABM.IMAGESLIDER_CENTER) 
CompSliderPage.bas[148]  
CompSliderPage.bas[149]  page.Cell(2,1).AddComponent(slider) 
CompSliderPage.bas[150]  
CompSliderPage.bas[151]  ' add codeblock 
CompSliderPage.bas[152]  Dim code As StringBuilder 
CompSliderPage.bas[153]  code.Initialize 
CompSliderPage.bas[154]  code.Append( {56} ).Append(CRLF) 
CompSliderPage.bas[155]  code.Append( {57} ).Append(CRLF) 
CompSliderPage.bas[156]  code.Append( {136} ).Append(CRLF) 
CompSliderPage.bas[157]  code.Append( {63} ).Append(CRLF) 
CompSliderPage.bas[158]  code.Append( {64} ).Append(CRLF) 
CompSliderPage.bas[159]  code.Append( {142} ).Append(CRLF) 
CompSliderPage.bas[160]  code.Append( {148} ).Append(CRLF) 
CompSliderPage.bas[161]  code.Append( {154} ).Append(CRLF) 
CompSliderPage.bas[162]  code.Append( {160} ).Append(CRLF) 
CompSliderPage.bas[163]  code.Append( {93} ).Append(CRLF) 
CompSliderPage.bas[164]  code.Append( {94} ).Append(CRLF) 
CompSliderPage.bas[165]  
CompSliderPage.bas[166]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {95} , code)) 
CompSliderPage.bas[167]  
CompSliderPage.bas[168]  ' add button 
CompSliderPage.bas[169]  Dim btn1 As ABMButton 
CompSliderPage.bas[170]  btn1.InitializeRaised(page, {96} , {97} , {98} , {99} , {100} ) 
CompSliderPage.bas[171]  page.Cell(4,1).AddComponent(btn1) 
CompSliderPage.bas[172]  
CompSliderPage.bas[173]  ' also add the components to the footer 
CompSliderPage.bas[174]  ABMShared.ConnectFooter(page) 
CompSliderPage.bas[175]  
CompSliderPage.bas[176]  page.Refresh ' IMPORTANT 
CompSliderPage.bas[177]  
CompSliderPage.bas[178]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSliderPage.bas[179]  page.FinishedLoading 'IMPORTANT 
CompSliderPage.bas[180]  
CompSliderPage.bas[181]  page.RestoreNavigationBarPosition 
CompSliderPage.bas[182] End Sub 
CompSliderPage.bas[183]  
CompSliderPage.bas[184] Sub btn1_Clicked(Target As String) 
CompSliderPage.bas[185]  Dim slider As ABMImageSlider = page.Component( {101} ) 
CompSliderPage.bas[186]  slider.Clear 
CompSliderPage.bas[187]  slider.AddSlideImage( {102} , {103} , {104} , ABM.IMAGESLIDER_LEFT) 
CompSliderPage.bas[188]  slider.AddSlideImage( {105} , {106} , {107} , ABM.IMAGESLIDER_CENTER) 
CompSliderPage.bas[189]  slider.AddSlideImage( {108} , {109} , {110} , ABM.IMAGESLIDER_RIGHT) 
CompSliderPage.bas[190]  slider.AddSlideImage( {111} , {112} , {113} , ABM.IMAGESLIDER_CENTER) 
CompSliderPage.bas[191]  slider.AddSlideImage( {114} , {115} , {116} , ABM.IMAGESLIDER_LEFT) 
CompSliderPage.bas[192]  slider.AddSlideImage( {117} , {118} , {119} , ABM.IMAGESLIDER_CENTER) 
CompSliderPage.bas[193]  slider.Refresh 
CompSliderPage.bas[194] End Sub 
CompSliderPage.bas[195]  
CompSliderPage.bas[196] ' clicked on the navigation bar 
CompSliderPage.bas[197] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompSliderPage.bas[198]  page.SaveNavigationBarPosition 
CompSliderPage.bas[199]  If Action = {120} Then Return 
CompSliderPage.bas[200]  If Action = {121} Then 
CompSliderPage.bas[201]  myToastId = myToastId + 1 
CompSliderPage.bas[202]  page.ShowToast( {122} & myToastId, {123} , {124} , 5000) 
CompSliderPage.bas[203]  Return 
CompSliderPage.bas[204]  End If 
CompSliderPage.bas[205]  If Action = {125} Then 
CompSliderPage.bas[206]  ABMShared.LogOff(page) 
CompSliderPage.bas[207]  Return 
CompSliderPage.bas[208]  End If 
CompSliderPage.bas[209]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompSliderPage.bas[210] End Sub 
CompSliderPage.bas[211]  
CompSliderPage.bas[212] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompSliderPage.bas[213]  page.ws.Session.SetAttribute( {126} , {127} ) 
CompSliderPage.bas[214]  page.ws.Session.SetAttribute( {128} , {129} ) 
CompSliderPage.bas[215]  page.ws.Session.SetAttribute( {130} , {131} ) 
CompSliderPage.bas[216]  ABMShared.NavigateToPage(ws, ABMPageId, {132} ) 
CompSliderPage.bas[217] End Sub 
Analysing: CompSocialSharePage.bas
CompSocialSharePage.bas[0] ﻿Type=Class 
CompSocialSharePage.bas[0] Version=4.7 
CompSocialSharePage.bas[0] ModulesStructureVersion=1 
CompSocialSharePage.bas[0] B4J=true 
CompSocialSharePage.bas[0] @EndOfDesignText@ 
CompSocialSharePage.bas[1] 'Class module 
CompSocialSharePage.bas[2] Sub Class_Globals 
CompSocialSharePage.bas[3]  Private ws As WebSocket 'ignore 
CompSocialSharePage.bas[4]  ' will hold our page information 
CompSocialSharePage.bas[5]  Public page As ABMPage 
CompSocialSharePage.bas[6]  ' page theme 
CompSocialSharePage.bas[7]  Private theme As ABMTheme 
CompSocialSharePage.bas[8]  ' to access the constants 
CompSocialSharePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompSocialSharePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompSocialSharePage.bas[11]  Public Name As String = {1} 
CompSocialSharePage.bas[12]  ' will hold the unique browsers window id 
CompSocialSharePage.bas[13]  Private ABMPageId As String = {2} 
CompSocialSharePage.bas[14]  
CompSocialSharePage.bas[15]  ' your own variables 
CompSocialSharePage.bas[16]  Dim myToastId As Int 
CompSocialSharePage.bas[17] End Sub 
CompSocialSharePage.bas[18]  
CompSocialSharePage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompSocialSharePage.bas[20] Public Sub Initialize 
CompSocialSharePage.bas[21]  ' build the local structure IMPORTANT! 
CompSocialSharePage.bas[22]  BuildPage 
CompSocialSharePage.bas[23] End Sub 
CompSocialSharePage.bas[24]  
CompSocialSharePage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompSocialSharePage.bas[26]  Log( {3} ) 
CompSocialSharePage.bas[27]  ws = WebSocket1 
CompSocialSharePage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompSocialSharePage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompSocialSharePage.bas[30]  
CompSocialSharePage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompSocialSharePage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompSocialSharePage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompSocialSharePage.bas[34]  Return 
CompSocialSharePage.bas[35]  End If 
CompSocialSharePage.bas[36]  End If 
CompSocialSharePage.bas[37]  
CompSocialSharePage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompSocialSharePage.bas[39]  If page.ComesFromPageCache Then 
CompSocialSharePage.bas[40]  ' refresh the page 
CompSocialSharePage.bas[41]  page.Refresh 
CompSocialSharePage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSocialSharePage.bas[43]  page.FinishedLoading 
CompSocialSharePage.bas[44]  Else 
CompSocialSharePage.bas[45]  ' Prepare the page 
CompSocialSharePage.bas[46]  page.Prepare 
CompSocialSharePage.bas[47]  ' load the dynamic content 
CompSocialSharePage.bas[48]  ConnectPage 
CompSocialSharePage.bas[49]  End If 
CompSocialSharePage.bas[50]  Log(ABMPageId) 
CompSocialSharePage.bas[51] End Sub 
CompSocialSharePage.bas[52]  
CompSocialSharePage.bas[53] Private Sub WebSocket_Disconnected 
CompSocialSharePage.bas[54]  Log( {8} ) 
CompSocialSharePage.bas[55] End Sub 
CompSocialSharePage.bas[56]  
CompSocialSharePage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompSocialSharePage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
CompSocialSharePage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompSocialSharePage.bas[60]  If eventName = {12} Then 
CompSocialSharePage.bas[61]  Log( {13} ) 
CompSocialSharePage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompSocialSharePage.bas[63]  Return 
CompSocialSharePage.bas[64]  End If 
CompSocialSharePage.bas[65]  If SubExists(Me, eventName) Then 
CompSocialSharePage.bas[66]  Params.Remove( {14} ) 
CompSocialSharePage.bas[67]  Params.Remove( {15} ) 
CompSocialSharePage.bas[68]  Select Case Params.Size 
CompSocialSharePage.bas[69]  Case 0 
CompSocialSharePage.bas[70]  CallSub(Me, eventName) 
CompSocialSharePage.bas[71]  Case 1 
CompSocialSharePage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompSocialSharePage.bas[73]  Case 2 
CompSocialSharePage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompSocialSharePage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompSocialSharePage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompSocialSharePage.bas[77]  Else 
CompSocialSharePage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompSocialSharePage.bas[79]  End If 
CompSocialSharePage.bas[80]  Case Else 
CompSocialSharePage.bas[81]  ' cannot be called directly, to many param 
CompSocialSharePage.bas[82]  CallSub2(Me, eventName, Params) 
CompSocialSharePage.bas[83]  End Select 
CompSocialSharePage.bas[84]  End If 
CompSocialSharePage.bas[85] End Sub 
CompSocialSharePage.bas[86]  
CompSocialSharePage.bas[87] public Sub BuildTheme() 
CompSocialSharePage.bas[88]  ' start with the base theme defined in ABMShared 
CompSocialSharePage.bas[89]  theme.Initialize( {17} ) 
CompSocialSharePage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompSocialSharePage.bas[91]  
CompSocialSharePage.bas[92]  ' add additional themes specific for this page 
CompSocialSharePage.bas[93]  
CompSocialSharePage.bas[94]  ' bluegray button 
CompSocialSharePage.bas[95]  
CompSocialSharePage.bas[96] End Sub 
CompSocialSharePage.bas[97]  
CompSocialSharePage.bas[98] public Sub BuildPage() 
CompSocialSharePage.bas[99]  ' initialize the theme 
CompSocialSharePage.bas[100]  BuildTheme 
CompSocialSharePage.bas[101]  
CompSocialSharePage.bas[102]  ' initialize this page using our theme 
CompSocialSharePage.bas[103]  page.InitializeWithTheme(Name, {18} & ABMshared.AppName & {19} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompSocialSharePage.bas[104]  page.ShowLoader=True 
CompSocialSharePage.bas[105]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompSocialSharePage.bas[106]  page.PageTitle = {20} 
CompSocialSharePage.bas[107]  page.PageDescription = {21} 
CompSocialSharePage.bas[108]  page.PageHTMLName = {22} 
CompSocialSharePage.bas[109]  page.PageKeywords = {23} 
CompSocialSharePage.bas[110]  page.PageSiteMapPriority = {24} 
CompSocialSharePage.bas[111]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompSocialSharePage.bas[112]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompSocialSharePage.bas[113]  
CompSocialSharePage.bas[114]  ABMShared.BuildNavigationBar(page, {25} , {26} , {27} , {28} , {29} ) 
CompSocialSharePage.bas[115]  
CompSocialSharePage.bas[116]  ' create the page grid 
CompSocialSharePage.bas[117]  page.AddRows(8,True, {30} ).AddCells12(1, {31} ) 
CompSocialSharePage.bas[118]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompSocialSharePage.bas[119]  
CompSocialSharePage.bas[120]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompSocialSharePage.bas[121]  'page.NeedsCodeLabel = True 
CompSocialSharePage.bas[122]  
CompSocialSharePage.bas[123]  ABMShared.BuildFooter(page) 
CompSocialSharePage.bas[124] End Sub 
CompSocialSharePage.bas[125]  
CompSocialSharePage.bas[126] Sub ConnectPage() 
CompSocialSharePage.bas[127]  'NEW 
CompSocialSharePage.bas[128]  ABMShared.ConnectNavigationBar(page) 
CompSocialSharePage.bas[129]  
CompSocialSharePage.bas[130]  ' add paragraph 
CompSocialSharePage.bas[131]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {32} , {33} ) ) 
CompSocialSharePage.bas[132]  
CompSocialSharePage.bas[133]  ' add a Social share editor on the row 
CompSocialSharePage.bas[134]  Dim socshare As ABMSocialShare 
CompSocialSharePage.bas[135]  socshare.Initialize(page, {34} , {35} , Null, {36} , ABM.SOCIALSHAREBUTTONTYPE_BUTTONLABELCOUNT) 
CompSocialSharePage.bas[136]  socshare.AddEmail 
CompSocialSharePage.bas[137]  socshare.AddFacebook 
CompSocialSharePage.bas[138]  socshare.AddGooglePlus 
CompSocialSharePage.bas[139]  socshare.AddLinkedIn 
CompSocialSharePage.bas[140]  socshare.AddPintrest( {37} ) 
CompSocialSharePage.bas[141]  socshare.AddTwitter( {38} , {39} ) 
CompSocialSharePage.bas[142]  socshare.AddWhatsApp 
CompSocialSharePage.bas[143]  page.CellR(1,1).AddComponent(socshare) 
CompSocialSharePage.bas[144]  
CompSocialSharePage.bas[145]  ' code block 
CompSocialSharePage.bas[146]  Dim code1 As String = {0} 
CompSocialSharePage.bas[156]  
CompSocialSharePage.bas[157]  page.CellR(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {40} , code1)) 
CompSocialSharePage.bas[158]  
CompSocialSharePage.bas[159]  ' also add the components to the footer 
CompSocialSharePage.bas[160]  ABMShared.ConnectFooter(page) 
CompSocialSharePage.bas[161]  
CompSocialSharePage.bas[162]  page.Refresh ' IMPORTANT 
CompSocialSharePage.bas[163]  
CompSocialSharePage.bas[164]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSocialSharePage.bas[165]  page.FinishedLoading 'IMPORTANT 
CompSocialSharePage.bas[166]  
CompSocialSharePage.bas[167]  page.RestoreNavigationBarPosition 
CompSocialSharePage.bas[168] End Sub 
CompSocialSharePage.bas[169]  
CompSocialSharePage.bas[170] Sub btn1_Clicked(Target As String) 
CompSocialSharePage.bas[171]  Dim editor As ABMEditor = page.Component( {41} ) 
CompSocialSharePage.bas[172]  Dim lbl As ABMLabel = page.Component( {42} ) 
CompSocialSharePage.bas[173]  lbl.Text = editor.GetHTML 
CompSocialSharePage.bas[174]  lbl.Refresh 
CompSocialSharePage.bas[175] End Sub 
CompSocialSharePage.bas[176]  
CompSocialSharePage.bas[177] ' clicked on the navigation bar 
CompSocialSharePage.bas[178] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompSocialSharePage.bas[179]  page.SaveNavigationBarPosition 
CompSocialSharePage.bas[180]  If Action = {43} Then Return 
CompSocialSharePage.bas[181]  If Action = {44} Then 
CompSocialSharePage.bas[182]  myToastId = myToastId + 1 
CompSocialSharePage.bas[183]  page.ShowToast( {45} & myToastId, {46} , {47} , 5000) 
CompSocialSharePage.bas[184]  Return 
CompSocialSharePage.bas[185]  End If 
CompSocialSharePage.bas[186]  If Action = {48} Then 
CompSocialSharePage.bas[187]  ABMShared.LogOff(page) 
CompSocialSharePage.bas[188]  Return 
CompSocialSharePage.bas[189]  End If 
CompSocialSharePage.bas[190]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompSocialSharePage.bas[191] End Sub 
CompSocialSharePage.bas[192]  
CompSocialSharePage.bas[193] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompSocialSharePage.bas[194]  page.ws.Session.SetAttribute( {49} , {50} ) 
CompSocialSharePage.bas[195]  page.ws.Session.SetAttribute( {51} , {52} ) 
CompSocialSharePage.bas[196]  page.ws.Session.SetAttribute( {53} , {54} ) 
CompSocialSharePage.bas[197]  ABMShared.NavigateToPage(ws, ABMPageId, {55} ) 
CompSocialSharePage.bas[198] End Sub 
Analysing: CompSVGSurfacePage.bas
CompSVGSurfacePage.bas[0] ﻿Type=Class 
CompSVGSurfacePage.bas[0] Version=4.7 
CompSVGSurfacePage.bas[0] ModulesStructureVersion=1 
CompSVGSurfacePage.bas[0] B4J=true 
CompSVGSurfacePage.bas[0] @EndOfDesignText@ 
CompSVGSurfacePage.bas[1] 'Class module 
CompSVGSurfacePage.bas[2] Sub Class_Globals 
CompSVGSurfacePage.bas[3]  Private ws As WebSocket 'ignore 
CompSVGSurfacePage.bas[4]  ' will hold our page information 
CompSVGSurfacePage.bas[5]  Public page As ABMPage 
CompSVGSurfacePage.bas[6]  ' page theme 
CompSVGSurfacePage.bas[7]  Private theme As ABMTheme 
CompSVGSurfacePage.bas[8]  ' to access the constants 
CompSVGSurfacePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompSVGSurfacePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompSVGSurfacePage.bas[11]  Public Name As String = {8} 
CompSVGSurfacePage.bas[12]  ' will hold the unique browsers window id 
CompSVGSurfacePage.bas[13]  Private ABMPageId As String = {9} 
CompSVGSurfacePage.bas[14]  
CompSVGSurfacePage.bas[15]  ' your own variables 
CompSVGSurfacePage.bas[16]  Dim myToastId As Int 
CompSVGSurfacePage.bas[17] End Sub 
CompSVGSurfacePage.bas[18]  
CompSVGSurfacePage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompSVGSurfacePage.bas[20] Public Sub Initialize 
CompSVGSurfacePage.bas[21]  ' build the local structure IMPORTANT! 
CompSVGSurfacePage.bas[22]  BuildPage 
CompSVGSurfacePage.bas[23] End Sub 
CompSVGSurfacePage.bas[24]  
CompSVGSurfacePage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompSVGSurfacePage.bas[26]  Log( {10} ) 
CompSVGSurfacePage.bas[27]  ws = WebSocket1 
CompSVGSurfacePage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompSVGSurfacePage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompSVGSurfacePage.bas[30]  
CompSVGSurfacePage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompSVGSurfacePage.bas[32]  If session.GetAttribute2( {11} , {12} ) = {13} Then 
CompSVGSurfacePage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {14} ) 
CompSVGSurfacePage.bas[34]  Return 
CompSVGSurfacePage.bas[35]  End If 
CompSVGSurfacePage.bas[36]  End If 
CompSVGSurfacePage.bas[37]  
CompSVGSurfacePage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompSVGSurfacePage.bas[39]  If page.ComesFromPageCache Then 
CompSVGSurfacePage.bas[40]  ' refresh the page 
CompSVGSurfacePage.bas[41]  page.Refresh 
CompSVGSurfacePage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSVGSurfacePage.bas[43]  page.FinishedLoading 
CompSVGSurfacePage.bas[44]  Else 
CompSVGSurfacePage.bas[45]  ' Prepare the page 
CompSVGSurfacePage.bas[46]  page.Prepare 
CompSVGSurfacePage.bas[47]  ' load the dynamic content 
CompSVGSurfacePage.bas[48]  ConnectPage 
CompSVGSurfacePage.bas[49]  End If 
CompSVGSurfacePage.bas[50]  Log(ABMPageId) 
CompSVGSurfacePage.bas[51] End Sub 
CompSVGSurfacePage.bas[52]  
CompSVGSurfacePage.bas[53] Private Sub WebSocket_Disconnected 
CompSVGSurfacePage.bas[54]  Log( {15} ) 
CompSVGSurfacePage.bas[55] End Sub 
CompSVGSurfacePage.bas[56]  
CompSVGSurfacePage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompSVGSurfacePage.bas[58]  Dim eventName As String = Params.Get( {16} ) 
CompSVGSurfacePage.bas[59]  Dim eventParams() As String = Regex.Split( {17} ,Params.Get( {18} )) 
CompSVGSurfacePage.bas[60]  If eventName = {19} Then 
CompSVGSurfacePage.bas[61]  Log( {20} ) 
CompSVGSurfacePage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompSVGSurfacePage.bas[63]  Return 
CompSVGSurfacePage.bas[64]  End If 
CompSVGSurfacePage.bas[65]  If SubExists(Me, eventName) Then 
CompSVGSurfacePage.bas[66]  Params.Remove( {21} ) 
CompSVGSurfacePage.bas[67]  Params.Remove( {22} ) 
CompSVGSurfacePage.bas[68]  Select Case Params.Size 
CompSVGSurfacePage.bas[69]  Case 0 
CompSVGSurfacePage.bas[70]  CallSub(Me, eventName) 
CompSVGSurfacePage.bas[71]  Case 1 
CompSVGSurfacePage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompSVGSurfacePage.bas[73]  Case 2 
CompSVGSurfacePage.bas[74]  If Params.get(eventParams(0)) = {23} Then 
CompSVGSurfacePage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompSVGSurfacePage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompSVGSurfacePage.bas[77]  Else 
CompSVGSurfacePage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompSVGSurfacePage.bas[79]  End If 
CompSVGSurfacePage.bas[80]  Case Else 
CompSVGSurfacePage.bas[81]  ' cannot be called directly, to many param 
CompSVGSurfacePage.bas[82]  CallSub2(Me, eventName, Params) 
CompSVGSurfacePage.bas[83]  End Select 
CompSVGSurfacePage.bas[84]  End If 
CompSVGSurfacePage.bas[85] End Sub 
CompSVGSurfacePage.bas[86]  
CompSVGSurfacePage.bas[87] public Sub BuildTheme() 
CompSVGSurfacePage.bas[88]  ' start with the base theme defined in ABMShared 
CompSVGSurfacePage.bas[89]  theme.Initialize( {24} ) 
CompSVGSurfacePage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompSVGSurfacePage.bas[91]  
CompSVGSurfacePage.bas[92]  ' add additional themes specific for this page 
CompSVGSurfacePage.bas[93]  
CompSVGSurfacePage.bas[94] End Sub 
CompSVGSurfacePage.bas[95]  
CompSVGSurfacePage.bas[96] public Sub BuildPage() 
CompSVGSurfacePage.bas[97]  ' initialize the theme 
CompSVGSurfacePage.bas[98]  BuildTheme 
CompSVGSurfacePage.bas[99]  
CompSVGSurfacePage.bas[100]  ' initialize this page using our theme 
CompSVGSurfacePage.bas[101]  page.InitializeWithTheme(Name, {25} & ABMshared.AppName & {26} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompSVGSurfacePage.bas[102]  page.ShowLoader=True 
CompSVGSurfacePage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompSVGSurfacePage.bas[104]  page.PageTitle = {27} 
CompSVGSurfacePage.bas[105]  page.PageDescription = {28} 
CompSVGSurfacePage.bas[106]  page.PageHTMLName = {29} 
CompSVGSurfacePage.bas[107]  page.PageKeywords = {30} 
CompSVGSurfacePage.bas[108]  page.PageSiteMapPriority = {31} 
CompSVGSurfacePage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompSVGSurfacePage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompSVGSurfacePage.bas[111]  
CompSVGSurfacePage.bas[112]  ABMShared.BuildNavigationBar(page, {32} , {33} , {34} , {35} , {36} ) 
CompSVGSurfacePage.bas[113]  
CompSVGSurfacePage.bas[114]  ' create the page grid 
CompSVGSurfacePage.bas[115]  page.AddRows(9,True, {37} ).AddCells12(1, {38} ) 
CompSVGSurfacePage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompSVGSurfacePage.bas[117]  
CompSVGSurfacePage.bas[118]  ABMShared.BuildFooter(page) 
CompSVGSurfacePage.bas[119] End Sub 
CompSVGSurfacePage.bas[120]  
CompSVGSurfacePage.bas[121] Sub ConnectPage() 
CompSVGSurfacePage.bas[122]  'NEW 
CompSVGSurfacePage.bas[123]  ABMShared.ConnectNavigationBar(page) 
CompSVGSurfacePage.bas[124]  ' add paragraph 
CompSVGSurfacePage.bas[125]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {39} , {40} ) ) 
CompSVGSurfacePage.bas[126]  ' add paragraph 
CompSVGSurfacePage.bas[127]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {41} , {42} )) 
CompSVGSurfacePage.bas[128]  ' add paragraph 
CompSVGSurfacePage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {43} , {44} )) 
CompSVGSurfacePage.bas[130]  
CompSVGSurfacePage.bas[131]  
CompSVGSurfacePage.bas[132]  
CompSVGSurfacePage.bas[133]  ' build some values 
CompSVGSurfacePage.bas[134]  Dim values As List 
CompSVGSurfacePage.bas[135]  values.initialize 
CompSVGSurfacePage.bas[136]  For i = 1 To 10 
CompSVGSurfacePage.bas[137]  Dim value As Double = Rnd(20,100) 
CompSVGSurfacePage.bas[138]  values.Add(value) 
CompSVGSurfacePage.bas[139]  Next 
CompSVGSurfacePage.bas[140]  For i = 1 To 10 
CompSVGSurfacePage.bas[141]  Dim value As Double = values.Get(i-1) 
CompSVGSurfacePage.bas[142]  AddBarRow(2, {45} & i, {46} & i, value, 75, (value < 40)) 
CompSVGSurfacePage.bas[143]  Next 
CompSVGSurfacePage.bas[144]  
CompSVGSurfacePage.bas[145]  ' add codeblock 
CompSVGSurfacePage.bas[146]  Dim code1 As String = {0} 
CompSVGSurfacePage.bas[180]  
CompSVGSurfacePage.bas[181]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {47} , code1)) 
CompSVGSurfacePage.bas[182]  
CompSVGSurfacePage.bas[183]  ' add paragraph 
CompSVGSurfacePage.bas[184]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {48} , {49} )) 
CompSVGSurfacePage.bas[185]  
CompSVGSurfacePage.bas[186]  For i = 1 To 10 
CompSVGSurfacePage.bas[187]  Dim perc As Double = Rnd(10, 100) 
CompSVGSurfacePage.bas[188]  AddPieRow(5, i, {50} & i, perc) 
CompSVGSurfacePage.bas[189]  
CompSVGSurfacePage.bas[190]  Next 
CompSVGSurfacePage.bas[191]  
CompSVGSurfacePage.bas[192]  Dim code2 As String = {1} 
CompSVGSurfacePage.bas[241]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {51} , code2)) 
CompSVGSurfacePage.bas[242]  
CompSVGSurfacePage.bas[243]  Dim code3 As String = {2} 
CompSVGSurfacePage.bas[247]  
CompSVGSurfacePage.bas[248]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {52} , code3)) 
CompSVGSurfacePage.bas[249]  
CompSVGSurfacePage.bas[250]  ' also add the components to the footer 
CompSVGSurfacePage.bas[251]  ABMShared.ConnectFooter(page) 
CompSVGSurfacePage.bas[252]  
CompSVGSurfacePage.bas[253]  page.Refresh ' IMPORTANT 
CompSVGSurfacePage.bas[254]  
CompSVGSurfacePage.bas[255]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSVGSurfacePage.bas[256]  page.FinishedLoading 'IMPORTANT 
CompSVGSurfacePage.bas[257]  
CompSVGSurfacePage.bas[258]  page.RestoreNavigationBarPosition 
CompSVGSurfacePage.bas[259] End Sub 
CompSVGSurfacePage.bas[260]  
CompSVGSurfacePage.bas[261] ' clicked on the navigation bar 
CompSVGSurfacePage.bas[262] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompSVGSurfacePage.bas[263]  page.SaveNavigationBarPosition 
CompSVGSurfacePage.bas[264]  If Action = {53} Then Return 
CompSVGSurfacePage.bas[265]  If Action = {54} Then 
CompSVGSurfacePage.bas[266]  myToastId = myToastId + 1 
CompSVGSurfacePage.bas[267]  page.ShowToast( {55} & myToastId, {56} , {57} , 5000) 
CompSVGSurfacePage.bas[268]  Return 
CompSVGSurfacePage.bas[269]  End If 
CompSVGSurfacePage.bas[270]  If Action = {58} Then 
CompSVGSurfacePage.bas[271]  ABMShared.LogOff(page) 
CompSVGSurfacePage.bas[272]  Return 
CompSVGSurfacePage.bas[273]  End If 
CompSVGSurfacePage.bas[274]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompSVGSurfacePage.bas[275] End Sub 
CompSVGSurfacePage.bas[276]  
CompSVGSurfacePage.bas[277] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompSVGSurfacePage.bas[278]  page.ws.Session.SetAttribute( {59} , {60} ) 
CompSVGSurfacePage.bas[279]  page.ws.Session.SetAttribute( {61} , {62} ) 
CompSVGSurfacePage.bas[280]  page.ws.Session.SetAttribute( {63} , {64} ) 
CompSVGSurfacePage.bas[281]  ABMShared.NavigateToPage(ws, ABMPageId, {65} ) 
CompSVGSurfacePage.bas[282] End Sub 
CompSVGSurfacePage.bas[283]  
CompSVGSurfacePage.bas[284] Sub AddBarRow(PageRow As Int, id As String, Text As String, perc As Double, WeekToDoPerc As Double, IsBad As Boolean) 
CompSVGSurfacePage.bas[285]  Dim cnt As ABMContainer 
CompSVGSurfacePage.bas[286]  cnt.Initialize(page , {66} & id, {67} ) 
CompSVGSurfacePage.bas[287]  
CompSVGSurfacePage.bas[288]  cnt.AddRowsM(1, False,0,0, {68} ).AddCellsOSMP(1,0,0,0,12,6,6,0,0,10,10, {69} ).AddCellsOSMP(1,0,0,0,12,6,6,0,0,10,10, {70} ) 
CompSVGSurfacePage.bas[289]  cnt.BuildGrid 
CompSVGSurfacePage.bas[290]  
CompSVGSurfacePage.bas[291]  Dim lbl1 As ABMLabel 
CompSVGSurfacePage.bas[292]  lbl1.Initialize(page, {71} & id, Text, ABM.SIZE_H6, True, {72} ) 
CompSVGSurfacePage.bas[293]  
CompSVGSurfacePage.bas[294]  cnt.Cell(1,1).AddComponent(lbl1) 
CompSVGSurfacePage.bas[295]  
CompSVGSurfacePage.bas[296]  ' make sure the container is added BEFORE adding an SVGsurface 
CompSVGSurfacePage.bas[297]  page.Cell(PageRow,1).AddComponent(cnt) 
CompSVGSurfacePage.bas[298]  
CompSVGSurfacePage.bas[299]  Dim svg As ABMSVGSurface 
CompSVGSurfacePage.bas[300]  svg.Initialize(page, {73} & id, {74} , {75} , {76} , {77} ) 
CompSVGSurfacePage.bas[301]  cnt.Cell(1,2).AddComponent(svg) 
CompSVGSurfacePage.bas[302]  cnt.Cell(1,2).MarginBottom = {78} 
CompSVGSurfacePage.bas[303]  
CompSVGSurfacePage.bas[304]  Dim rect1 As ABMSVGElement = svg.Rect( {79} & id, 0,0,perc*4,50,0,0) 
CompSVGSurfacePage.bas[305]  
CompSVGSurfacePage.bas[306]  If perc >= WeekToDoPerc Then 
CompSVGSurfacePage.bas[307]  rect1.SetAttributes( {3} ) 
CompSVGSurfacePage.bas[308]  Else 
CompSVGSurfacePage.bas[309]  rect1.SetAttributes( {4} ) 
CompSVGSurfacePage.bas[310]  If perc < (WeekToDoPerc - 10) Then 
CompSVGSurfacePage.bas[311]  rect1.AddAnimationContinuousRun( {5} , 1500, {80} , {6} , 500, {81} ) 
CompSVGSurfacePage.bas[312]  End If 
CompSVGSurfacePage.bas[313]  End If 
CompSVGSurfacePage.bas[314]  
CompSVGSurfacePage.bas[315]  Dim line2 As ABMSVGElement = svg.Line( {82} & id, WeekToDoPerc*4,0,WeekToDoPerc*4,50) 
CompSVGSurfacePage.bas[316]  line2.SetAttributes( {7} ) 
CompSVGSurfacePage.bas[317] End Sub 
CompSVGSurfacePage.bas[318]  
CompSVGSurfacePage.bas[319] Sub AddPieRow(RowNum As Int, id As Int, text2 As String, perc As Double) 
CompSVGSurfacePage.bas[320]  Dim cnt As ABMContainer 
CompSVGSurfacePage.bas[321]  cnt.Initialize(page , {83} & id, {84} ) 
CompSVGSurfacePage.bas[322]  
CompSVGSurfacePage.bas[323]  cnt.AddRowsM(1, False,0,0, {85} ).AddCellsOS(1,0,0,0,4,4,4, {86} ).AddCellsOS(1,0,0,0,8,8,8, {87} ) 
CompSVGSurfacePage.bas[324]  cnt.BuildGrid 
CompSVGSurfacePage.bas[325]  
CompSVGSurfacePage.bas[326]  Dim cnt2 As ABMContainer 
CompSVGSurfacePage.bas[327]  cnt2.Initialize(page , {88} & id, {89} ) 
CompSVGSurfacePage.bas[328]  
CompSVGSurfacePage.bas[329]  cnt2.AddRowsM(1, False,0,0, {90} ).AddCellsOSMP(1, 0,0,0,12,12,12,0,0,0,0, {91} ) 
CompSVGSurfacePage.bas[330]  cnt2.BuildGrid 
CompSVGSurfacePage.bas[331]  
CompSVGSurfacePage.bas[332]  Dim lbl2 As ABMLabel 
CompSVGSurfacePage.bas[333]  lbl2.Initialize(page, {92} & id, text2, ABM.SIZE_H6, True, {93} ) 
CompSVGSurfacePage.bas[334]  
CompSVGSurfacePage.bas[335]  cnt.cell(1,1).addcomponent(cnt2) 
CompSVGSurfacePage.bas[336]  cnt.Cell(1,2).AddComponent(lbl2) 
CompSVGSurfacePage.bas[337]  
CompSVGSurfacePage.bas[338]  page.Cell(RowNum,1).AddComponent(cnt) 
CompSVGSurfacePage.bas[339]  
CompSVGSurfacePage.bas[340]  Dim svg As ABMSVGSurface 
CompSVGSurfacePage.bas[341]  svg.Initialize(page, id, {94} , {95} , {96} , {97} ) 
CompSVGSurfacePage.bas[342]  cnt.Cell(1,1).AddArrayComponent(svg, {98} ) 
CompSVGSurfacePage.bas[343]  cnt.Cell(1,1).MarginBottom = {99} 
CompSVGSurfacePage.bas[344]  
CompSVGSurfacePage.bas[345]  Dim cir1 As ABMSVGElement = svg.circle( {100} & id, 40,40,30) 
CompSVGSurfacePage.bas[346]  cir1.SetAttributes( {101} ) 
CompSVGSurfacePage.bas[347]  
CompSVGSurfacePage.bas[348]  Dim pie1 As ABMSVGElement = svg.Pie( {102} & id, 40,40,0,30, -90, 0) 
CompSVGSurfacePage.bas[349]  
CompSVGSurfacePage.bas[350]  Dim pie1Group As ABMSVGElement = svg.Group( {103} & id & {104} , Array As String( {105} & id)) ' <- Needed for the pointer cursor, can only be set to a group 
CompSVGSurfacePage.bas[351]  pie1Group.SetAttributes( {106} ) 
CompSVGSurfacePage.bas[352]  
CompSVGSurfacePage.bas[353]  pie1.SetAttributes( {107} ) 
CompSVGSurfacePage.bas[354]  Dim EndVal As Int = (360*perc/100)-90 
CompSVGSurfacePage.bas[355]  pie1.AddHoverINAnimation( {108} ,250, {109} ) 
CompSVGSurfacePage.bas[356]  pie1.AddHoverOUTAnimation( {110} ,250, {111} ) 
CompSVGSurfacePage.bas[357]  'pie1.AddAnimationContinuousRun( {112} & EndVal & {113} , 3000, {114} , {115} , 3000, {116} ) 
CompSVGSurfacePage.bas[358]  pie1.AddAnimationSingleRun( {117} & EndVal & {118} , 3000, {119} ) 
CompSVGSurfacePage.bas[359]  pie1.HasEvents = True 
CompSVGSurfacePage.bas[360]  
CompSVGSurfacePage.bas[361]  If perc < 40 Then 
CompSVGSurfacePage.bas[362]  pie1.AddAnimationContinuousRun( {120} , 1500, {121} , {122} , 500, {123} ) 
CompSVGSurfacePage.bas[363]  End If 
CompSVGSurfacePage.bas[364]  
CompSVGSurfacePage.bas[365]  Dim txt1 As ABMSVGElement = svg.Text( {124} & id, 40,40, perc & {125} ) 
CompSVGSurfacePage.bas[366]  txt1.SetAttributes( {126} ) 
CompSVGSurfacePage.bas[367] End Sub 
CompSVGSurfacePage.bas[368]  
CompSVGSurfacePage.bas[369] Sub psvg_SVGClicked(elementID As String) 
CompSVGSurfacePage.bas[370]  myToastId = myToastId + 1 
CompSVGSurfacePage.bas[371]  page.ShowToast( {127} & myToastId, {128} , {129} & elementID, 2000) 
CompSVGSurfacePage.bas[372] End Sub 
Analysing: CompSwitchPage.bas
CompSwitchPage.bas[0] ﻿Type=Class 
CompSwitchPage.bas[0] Version=4.7 
CompSwitchPage.bas[0] ModulesStructureVersion=1 
CompSwitchPage.bas[0] B4J=true 
CompSwitchPage.bas[0] @EndOfDesignText@ 
CompSwitchPage.bas[1] 'Class module 
CompSwitchPage.bas[2] Sub Class_Globals 
CompSwitchPage.bas[3]  Private ws As WebSocket 'ignore 
CompSwitchPage.bas[4]  ' will hold our page information 
CompSwitchPage.bas[5]  Public page As ABMPage 
CompSwitchPage.bas[6]  ' page theme 
CompSwitchPage.bas[7]  Private theme As ABMTheme 
CompSwitchPage.bas[8]  ' to access the constants 
CompSwitchPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompSwitchPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompSwitchPage.bas[11]  Public Name As String = {0} 
CompSwitchPage.bas[12]  Private ABMPageId As String = {1} 
CompSwitchPage.bas[13]  
CompSwitchPage.bas[14]  ' your own variables 
CompSwitchPage.bas[15]  Dim myToastId As Int 
CompSwitchPage.bas[16] End Sub 
CompSwitchPage.bas[17]  
CompSwitchPage.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
CompSwitchPage.bas[19] Public Sub Initialize 
CompSwitchPage.bas[20]  ' build the local structure IMPORTANT! 
CompSwitchPage.bas[21]  BuildPage 
CompSwitchPage.bas[22] End Sub 
CompSwitchPage.bas[23]  
CompSwitchPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompSwitchPage.bas[25]  Log( {2} ) 
CompSwitchPage.bas[26]  ws = WebSocket1 
CompSwitchPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompSwitchPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompSwitchPage.bas[29]  
CompSwitchPage.bas[30]  If ABMShared.NeedsAuthorization Then 
CompSwitchPage.bas[31]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompSwitchPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompSwitchPage.bas[33]  Return 
CompSwitchPage.bas[34]  End If 
CompSwitchPage.bas[35]  End If 
CompSwitchPage.bas[36]  
CompSwitchPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompSwitchPage.bas[38]  If page.ComesFromPageCache Then 
CompSwitchPage.bas[39]  ' refresh the page 
CompSwitchPage.bas[40]  page.Refresh 
CompSwitchPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSwitchPage.bas[42]  page.FinishedLoading 
CompSwitchPage.bas[43]  Else 
CompSwitchPage.bas[44]  ' Prepare the page 
CompSwitchPage.bas[45]  page.Prepare 
CompSwitchPage.bas[46]  ' load the dynamic content 
CompSwitchPage.bas[47]  ConnectPage 
CompSwitchPage.bas[48]  End If 
CompSwitchPage.bas[49]  Log(ABMPageId) 
CompSwitchPage.bas[50] End Sub 
CompSwitchPage.bas[51]  
CompSwitchPage.bas[52] Private Sub WebSocket_Disconnected 
CompSwitchPage.bas[53]  Log( {7} ) 
CompSwitchPage.bas[54] End Sub 
CompSwitchPage.bas[55]  
CompSwitchPage.bas[56] Sub Page_ParseEvent(Params As Map) 
CompSwitchPage.bas[57]  Dim eventName As String = Params.Get( {8} ) 
CompSwitchPage.bas[58]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
CompSwitchPage.bas[59]  If eventName = {11} Then 
CompSwitchPage.bas[60]  Log( {12} ) 
CompSwitchPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompSwitchPage.bas[62]  Return 
CompSwitchPage.bas[63]  End If 
CompSwitchPage.bas[64]  If SubExists(Me, eventName) Then 
CompSwitchPage.bas[65]  Params.Remove( {13} ) 
CompSwitchPage.bas[66]  Params.Remove( {14} ) 
CompSwitchPage.bas[67]  Select Case Params.Size 
CompSwitchPage.bas[68]  Case 0 
CompSwitchPage.bas[69]  CallSub(Me, eventName) 
CompSwitchPage.bas[70]  Case 1 
CompSwitchPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompSwitchPage.bas[72]  Case 2 
CompSwitchPage.bas[73]  If Params.get(eventParams(0)) = {15} Then 
CompSwitchPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompSwitchPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
CompSwitchPage.bas[76]  Else 
CompSwitchPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompSwitchPage.bas[78]  End If 
CompSwitchPage.bas[79]  Case Else 
CompSwitchPage.bas[80]  ' cannot be called directly, to many param 
CompSwitchPage.bas[81]  CallSub2(Me, eventName, Params) 
CompSwitchPage.bas[82]  End Select 
CompSwitchPage.bas[83]  End If 
CompSwitchPage.bas[84] End Sub 
CompSwitchPage.bas[85]  
CompSwitchPage.bas[86] public Sub BuildTheme() 
CompSwitchPage.bas[87]  ' start with the base theme defined in ABMShared 
CompSwitchPage.bas[88]  theme.Initialize( {16} ) 
CompSwitchPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
CompSwitchPage.bas[90]  
CompSwitchPage.bas[91]  ' add additional themes specific for this page 
CompSwitchPage.bas[92]  theme.AddSwitchTheme( {17} ) 
CompSwitchPage.bas[93]  theme.Switch( {18} ).LabelFontSize = {19} 
CompSwitchPage.bas[94] End Sub 
CompSwitchPage.bas[95]  
CompSwitchPage.bas[96] public Sub BuildPage() 
CompSwitchPage.bas[97]  ' initialize the theme 
CompSwitchPage.bas[98]  BuildTheme 
CompSwitchPage.bas[99]  
CompSwitchPage.bas[100]  ' initialize this page using our theme 
CompSwitchPage.bas[101]  page.InitializeWithTheme(Name, {20} & ABMShared.AppName & {21} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompSwitchPage.bas[102]  page.ShowLoader=True 
CompSwitchPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompSwitchPage.bas[104]  page.PageTitle = {22} 
CompSwitchPage.bas[105]  page.PageDescription = {23} 
CompSwitchPage.bas[106]  page.PageHTMLName = {24} 
CompSwitchPage.bas[107]  page.PageKeywords = {25} 
CompSwitchPage.bas[108]  page.PageSiteMapPriority = {26} 
CompSwitchPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompSwitchPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompSwitchPage.bas[111]  
CompSwitchPage.bas[112]  ABMShared.BuildNavigationBar(page, {27} , {28} , {29} , {30} , {31} ) 
CompSwitchPage.bas[113]  
CompSwitchPage.bas[114]  ' create the page grid 
CompSwitchPage.bas[115]  page.AddRows(5,True, {32} ).AddCells12(1, {33} ) 
CompSwitchPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompSwitchPage.bas[117]  
CompSwitchPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompSwitchPage.bas[119]  'page.NeedsCodeLabel = True 
CompSwitchPage.bas[120]  
CompSwitchPage.bas[121]  ABMShared.BuildFooter(page) 
CompSwitchPage.bas[122] End Sub 
CompSwitchPage.bas[123]  
CompSwitchPage.bas[124] Sub ConnectPage() 
CompSwitchPage.bas[125]  'NEW 
CompSwitchPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
CompSwitchPage.bas[127]  
CompSwitchPage.bas[128]  ' add paragraph 
CompSwitchPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {34} , {35} ) ) 
CompSwitchPage.bas[130]  
CompSwitchPage.bas[131]  Dim switch1 As ABMSwitch 
CompSwitchPage.bas[132]  switch1.Initialize(page, {36} , {37} , {38} , True, {39} ) 
CompSwitchPage.bas[133]  page.Cell(2,1).AddComponent(switch1) 
CompSwitchPage.bas[134]  
CompSwitchPage.bas[135]  Dim switch2 As ABMSwitch 
CompSwitchPage.bas[136]  switch2.Initialize(page, {40} , {41} , {42} , False, {43} ) 
CompSwitchPage.bas[137]  switch2.Enabled=False 
CompSwitchPage.bas[138]  page.Cell(3,1).AddComponent(switch2) 
CompSwitchPage.bas[139]  
CompSwitchPage.bas[140]  ' add codeblock 
CompSwitchPage.bas[141]  Dim code As StringBuilder 
CompSwitchPage.bas[142]  code.Initialize 
CompSwitchPage.bas[143]  code.Append( {44} ).Append(CRLF) 
CompSwitchPage.bas[144]  code.Append( {122} ).Append(CRLF) 
CompSwitchPage.bas[145]  code.Append( {54} ).Append(CRLF) 
CompSwitchPage.bas[146]  code.Append( {55} ).Append(CRLF) 
CompSwitchPage.bas[147]  code.Append( {56} ).Append(CRLF) 
CompSwitchPage.bas[148]  code.Append( {130} ).Append(CRLF) 
CompSwitchPage.bas[149]  code.Append( {66} ).Append(CRLF) 
CompSwitchPage.bas[150]  code.Append( {67} ).Append(CRLF) 
CompSwitchPage.bas[151]  
CompSwitchPage.bas[152]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {68} , code)) 
CompSwitchPage.bas[153]  
CompSwitchPage.bas[154]  ' add codeblock 
CompSwitchPage.bas[155]  Dim code2 As StringBuilder 
CompSwitchPage.bas[156]  code2.Initialize 
CompSwitchPage.bas[157]  code2.Append( {69} ).Append(CRLF) 
CompSwitchPage.bas[158]  code2.Append( {70} ).Append(CRLF) 
CompSwitchPage.bas[159]  code2.Append( {132} ).Append(CRLF) 
CompSwitchPage.bas[160]  code2.Append( {74} ).Append(CRLF) 
CompSwitchPage.bas[161]  code2.Append( {134} ).Append(CRLF) 
CompSwitchPage.bas[162]  code2.Append( {78} ).Append(CRLF) 
CompSwitchPage.bas[163]  code2.Append( {136} ).Append(CRLF) 
CompSwitchPage.bas[164]  code2.Append( {82} ).Append(CRLF) 
CompSwitchPage.bas[165]  code2.Append( {83} ).Append(CRLF) 
CompSwitchPage.bas[166]  code2.Append( {84} ).Append(CRLF) 
CompSwitchPage.bas[167]  code2.Append( {85} ).Append(CRLF) 
CompSwitchPage.bas[168]  code2.Append( {86} ).Append(CRLF) 
CompSwitchPage.bas[169]  code2.Append( {142} ).Append(CRLF) 
CompSwitchPage.bas[170]  code2.Append( {94} ).Append(CRLF) 
CompSwitchPage.bas[171]  
CompSwitchPage.bas[172]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlock(page, {95} , code2)) 
CompSwitchPage.bas[173]  
CompSwitchPage.bas[174]  ' also add the components to the footer 
CompSwitchPage.bas[175]  ABMShared.ConnectFooter(page) 
CompSwitchPage.bas[176]  
CompSwitchPage.bas[177]  page.Refresh ' IMPORTANT 
CompSwitchPage.bas[178]  
CompSwitchPage.bas[179]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompSwitchPage.bas[180]  page.FinishedLoading 'IMPORTANT 
CompSwitchPage.bas[181]  
CompSwitchPage.bas[182]  page.RestoreNavigationBarPosition 
CompSwitchPage.bas[183] End Sub 
CompSwitchPage.bas[184]  
CompSwitchPage.bas[185] ' clicked on the navigation bar 
CompSwitchPage.bas[186] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompSwitchPage.bas[187]  page.SaveNavigationBarPosition 
CompSwitchPage.bas[188]  If Action = {96} Then Return 
CompSwitchPage.bas[189]  If Action = {97} Then 
CompSwitchPage.bas[190]  myToastId = myToastId + 1 
CompSwitchPage.bas[191]  page.ShowToast( {98} & myToastId, {99} , {100} , 5000) 
CompSwitchPage.bas[192]  Return 
CompSwitchPage.bas[193]  End If 
CompSwitchPage.bas[194]  If Action = {101} Then 
CompSwitchPage.bas[195]  ABMShared.LogOff(page) 
CompSwitchPage.bas[196]  Return 
CompSwitchPage.bas[197]  End If 
CompSwitchPage.bas[198]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompSwitchPage.bas[199] End Sub 
CompSwitchPage.bas[200]  
CompSwitchPage.bas[201] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompSwitchPage.bas[202]  page.ws.Session.SetAttribute( {102} , {103} ) 
CompSwitchPage.bas[203]  page.ws.Session.SetAttribute( {104} , {105} ) 
CompSwitchPage.bas[204]  page.ws.Session.SetAttribute( {106} , {107} ) 
CompSwitchPage.bas[205]  ABMShared.NavigateToPage(ws, ABMPageId, {108} ) 
CompSwitchPage.bas[206] End Sub 
CompSwitchPage.bas[207]  
CompSwitchPage.bas[208]  
CompSwitchPage.bas[209] Sub switch1_Clicked(Target As String) 
CompSwitchPage.bas[210]  Dim checked As String 
CompSwitchPage.bas[211]  Dim switch1 As ABMSwitch = page.Component( {109} ) 
CompSwitchPage.bas[212]  If switch1.State Then 
CompSwitchPage.bas[213]  checked= {110} 
CompSwitchPage.bas[214]  Else 
CompSwitchPage.bas[215]  checked= {111} 
CompSwitchPage.bas[216]  End If 
CompSwitchPage.bas[217]  myToastId = myToastId + 1 
CompSwitchPage.bas[218]  page.ShowToast( {112} & myToastId, {113} , {114} & checked, 5000) 
CompSwitchPage.bas[219] End Sub 
Analysing: CompTabsPage.bas
CompTabsPage.bas[0] ﻿Type=Class 
CompTabsPage.bas[0] Version=4.7 
CompTabsPage.bas[0] ModulesStructureVersion=1 
CompTabsPage.bas[0] B4J=true 
CompTabsPage.bas[0] @EndOfDesignText@ 
CompTabsPage.bas[1] 'Class module 
CompTabsPage.bas[2] Sub Class_Globals 
CompTabsPage.bas[3]  Private ws As WebSocket 'ignore 
CompTabsPage.bas[4]  ' will hold our page information 
CompTabsPage.bas[5]  Public page As ABMPage 
CompTabsPage.bas[6]  ' page theme 
CompTabsPage.bas[7]  Private theme As ABMTheme 
CompTabsPage.bas[8]  ' to access the constants 
CompTabsPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompTabsPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompTabsPage.bas[11]  Public Name As String = {1} 
CompTabsPage.bas[12]  ' will hold the unique browsers window id 
CompTabsPage.bas[13]  Private ABMPageId As String = {2} 
CompTabsPage.bas[14]  
CompTabsPage.bas[15]  ' your own variables 
CompTabsPage.bas[16]  Dim myToastId As Int 
CompTabsPage.bas[17] End Sub 
CompTabsPage.bas[18]  
CompTabsPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
CompTabsPage.bas[20] Public Sub Initialize 
CompTabsPage.bas[21]  ' build the local structure IMPORTANT! 
CompTabsPage.bas[22]  BuildPage 
CompTabsPage.bas[23] End Sub 
CompTabsPage.bas[24]  
CompTabsPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompTabsPage.bas[26]  Log( {3} ) 
CompTabsPage.bas[27]  ws = WebSocket1 
CompTabsPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompTabsPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompTabsPage.bas[30]  
CompTabsPage.bas[31]  If ABMShared.NeedsAuthorization Then 
CompTabsPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompTabsPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompTabsPage.bas[34]  Return 
CompTabsPage.bas[35]  End If 
CompTabsPage.bas[36]  End If 
CompTabsPage.bas[37]  
CompTabsPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompTabsPage.bas[39]  If page.ComesFromPageCache Then 
CompTabsPage.bas[40]  ' refresh the page 
CompTabsPage.bas[41]  page.Refresh 
CompTabsPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTabsPage.bas[43]  page.FinishedLoading 
CompTabsPage.bas[44]  Else 
CompTabsPage.bas[45]  ' Prepare the page 
CompTabsPage.bas[46]  page.Prepare 
CompTabsPage.bas[47]  ' load the dynamic content 
CompTabsPage.bas[48]  ConnectPage 
CompTabsPage.bas[49]  End If 
CompTabsPage.bas[50]  Log(ABMPageId) 
CompTabsPage.bas[51] End Sub 
CompTabsPage.bas[52]  
CompTabsPage.bas[53] Private Sub WebSocket_Disconnected 
CompTabsPage.bas[54]  Log( {8} ) 
CompTabsPage.bas[55] End Sub 
CompTabsPage.bas[56]  
CompTabsPage.bas[57] Sub Page_ParseEvent(Params As Map) 
CompTabsPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
CompTabsPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompTabsPage.bas[60]  If eventName = {12} Then 
CompTabsPage.bas[61]  Log( {13} ) 
CompTabsPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompTabsPage.bas[63]  Return 
CompTabsPage.bas[64]  End If 
CompTabsPage.bas[65]  If SubExists(Me, eventName) Then 
CompTabsPage.bas[66]  Params.Remove( {14} ) 
CompTabsPage.bas[67]  Params.Remove( {15} ) 
CompTabsPage.bas[68]  Select Case Params.Size 
CompTabsPage.bas[69]  Case 0 
CompTabsPage.bas[70]  CallSub(Me, eventName) 
CompTabsPage.bas[71]  Case 1 
CompTabsPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompTabsPage.bas[73]  Case 2 
CompTabsPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
CompTabsPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompTabsPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
CompTabsPage.bas[77]  Else 
CompTabsPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompTabsPage.bas[79]  End If 
CompTabsPage.bas[80]  Case Else 
CompTabsPage.bas[81]  ' cannot be called directly, to many param 
CompTabsPage.bas[82]  CallSub2(Me, eventName, Params) 
CompTabsPage.bas[83]  End Select 
CompTabsPage.bas[84]  End If 
CompTabsPage.bas[85] End Sub 
CompTabsPage.bas[86]  
CompTabsPage.bas[87] public Sub BuildTheme() 
CompTabsPage.bas[88]  ' start with the base theme defined in ABMShared 
CompTabsPage.bas[89]  theme.Initialize( {17} ) 
CompTabsPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
CompTabsPage.bas[91]  
CompTabsPage.bas[92]  ' add additional themes specific for this page 
CompTabsPage.bas[93]  
CompTabsPage.bas[94]  ' bluegray button 
CompTabsPage.bas[95]  theme.AddButtonTheme( {18} ) 
CompTabsPage.bas[96]  theme.Button( {19} ).BackColor = ABM.COLOR_BLUEGREY 
CompTabsPage.bas[97]  theme.Button( {20} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompTabsPage.bas[98]  
CompTabsPage.bas[99]  ' a tabs theme 
CompTabsPage.bas[100]  theme.AddTabsTheme( {21} ) 
CompTabsPage.bas[101]  theme.Tabs( {22} ).ForeColor = ABM.COLOR_AMBER 
CompTabsPage.bas[102]  theme.Tabs( {23} ).HoverForeColor = ABM.COLOR_GREEN 
CompTabsPage.bas[103]  theme.Tabs( {24} ).IndicatorColor = ABM.COLOR_GREEN 
CompTabsPage.bas[104]  
CompTabsPage.bas[105]  ' tabpage theme 
CompTabsPage.bas[106]  theme.AddContainerTheme( {25} ) 
CompTabsPage.bas[107]  theme.Container( {26} ).BackColor = ABM.COLOR_WHITE 
CompTabsPage.bas[108]  theme.Container( {27} ).ZDepth = ABM.ZDEPTH_1 
CompTabsPage.bas[109]  
CompTabsPage.bas[110]  ' add additional themes specific for this page 
CompTabsPage.bas[111]  theme.AddTableTheme( {28} ) 
CompTabsPage.bas[112]  theme.Table( {29} ).ZDepth = ABM.ZDEPTH_1 
CompTabsPage.bas[113]  
CompTabsPage.bas[114]  theme.Table( {30} ).AddCellTheme( {31} ) 
CompTabsPage.bas[115]  theme.Table( {32} ).Cell( {33} ).BackColor = ABM.COLOR_BLUEGREY 
CompTabsPage.bas[116]  theme.Table( {34} ).Cell( {35} ).ForeColor = ABM.COLOR_WHITE 
CompTabsPage.bas[117]  
CompTabsPage.bas[118]  theme.Table( {36} ).AddCellTheme( {37} ) 
CompTabsPage.bas[119]  theme.Table( {38} ).Cell( {39} ).BackColor = ABM.COLOR_BLUEGREY 
CompTabsPage.bas[120]  theme.Table( {40} ).Cell( {41} ).ForeColor = ABM.COLOR_WHITE 
CompTabsPage.bas[121]  theme.Table( {42} ).Cell( {43} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTabsPage.bas[122]  
CompTabsPage.bas[123]  theme.Table( {44} ).AddCellTheme( {45} ) 
CompTabsPage.bas[124]  theme.Table( {46} ).Cell( {47} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
CompTabsPage.bas[125]  theme.Table( {48} ).Cell( {49} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
CompTabsPage.bas[126]  
CompTabsPage.bas[127]  theme.Table( {50} ).AddCellTheme( {51} ) 
CompTabsPage.bas[128]  theme.Table( {52} ).Cell( {53} ).BackColor = ABM.COLOR_GREEN 
CompTabsPage.bas[129]  theme.Table( {54} ).Cell( {55} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompTabsPage.bas[130]  theme.Table( {56} ).Cell( {57} ).ActiveBackColor = ABM.COLOR_GREEN 
CompTabsPage.bas[131]  theme.Table( {58} ).Cell( {59} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompTabsPage.bas[132]  theme.Table( {60} ).Cell( {61} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTabsPage.bas[133]  
CompTabsPage.bas[134]  theme.Table( {62} ).AddCellTheme( {63} ) 
CompTabsPage.bas[135]  theme.Table( {64} ).Cell( {65} ).BackColor = ABM.COLOR_RED 
CompTabsPage.bas[136]  theme.Table( {66} ).Cell( {67} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompTabsPage.bas[137]  theme.Table( {68} ).Cell( {69} ).ActiveBackColor = ABM.COLOR_RED 
CompTabsPage.bas[138]  theme.Table( {70} ).Cell( {71} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompTabsPage.bas[139]  theme.Table( {72} ).Cell( {73} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTabsPage.bas[140]  
CompTabsPage.bas[141]  theme.Table( {74} ).AddCellTheme( {75} ) 
CompTabsPage.bas[142]  theme.Table( {76} ).Cell( {77} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
CompTabsPage.bas[143] End Sub 
CompTabsPage.bas[144]  
CompTabsPage.bas[145] public Sub BuildPage() 
CompTabsPage.bas[146]  ' initialize the theme 
CompTabsPage.bas[147]  BuildTheme 
CompTabsPage.bas[148]  
CompTabsPage.bas[149]  ' initialize this page using our theme 
CompTabsPage.bas[150]  page.InitializeWithTheme(Name, {78} & ABMShared.AppName & {79} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompTabsPage.bas[151]  page.ShowLoader=True 
CompTabsPage.bas[152]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompTabsPage.bas[153]  page.PageTitle = {80} 
CompTabsPage.bas[154]  page.PageDescription = {81} 
CompTabsPage.bas[155]  page.PageHTMLName = {82} 
CompTabsPage.bas[156]  page.PageKeywords = {83} 
CompTabsPage.bas[157]  page.PageSiteMapPriority = {84} 
CompTabsPage.bas[158]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompTabsPage.bas[159]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompTabsPage.bas[160]  
CompTabsPage.bas[161]  ABMShared.BuildNavigationBar(page, {85} , {86} , {87} , {88} , {89} ) 
CompTabsPage.bas[162]  
CompTabsPage.bas[163]  ' create the page grid 
CompTabsPage.bas[164]  page.AddRows(5,True, {90} ).AddCells12(1, {91} ) 
CompTabsPage.bas[165]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTabsPage.bas[166]  
CompTabsPage.bas[167]  ABMShared.BuildFooter(page) 
CompTabsPage.bas[168] End Sub 
CompTabsPage.bas[169]  
CompTabsPage.bas[170] Sub ConnectPage() 
CompTabsPage.bas[171]  'NEW 
CompTabsPage.bas[172]  ABMShared.ConnectNavigationBar(page) 
CompTabsPage.bas[173]  
CompTabsPage.bas[174]  ' add a header label 
CompTabsPage.bas[175]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {92} , {93} )) 
CompTabsPage.bas[176]  ' add paragraph 
CompTabsPage.bas[177]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {94} , {95} ) ) 
CompTabsPage.bas[178]  
CompTabsPage.bas[179]  ' add the tabs object 
CompTabsPage.bas[180]  Dim tabs As ABMTabs 
CompTabsPage.bas[181]  tabs.Initialize(page, {96} , {97} ) 
CompTabsPage.bas[182]  
CompTabsPage.bas[183]  ' create the tabs as ABMContainers 
CompTabsPage.bas[184]  tabs.AddTab( {98} , {99} , BuildTabContainer( {100} , {101} ),3,3,3,12,12,12,True,False, {102} , {103} ) 
CompTabsPage.bas[185]  tabs.AddTab( {104} , {105} , BuildTabContainer( {106} , {107} ),3,3,3,12,12,12,True,True, {108} , {109} ) 
CompTabsPage.bas[186]  tabs.AddTab( {110} , {111} , BuildTabContainer( {112} , {113} ),3,3,3,12,12,12,False,False, {114} , {115} ) 
CompTabsPage.bas[187]  'tabs.AddTab( {116} , {117} , BuildTabContainer( {118} , {119} ),3,3,3,12,12,12,True,False, {120} ) 
CompTabsPage.bas[188]  
CompTabsPage.bas[189]  ' create a table 
CompTabsPage.bas[190]  Dim tbl1 As ABMTable 
CompTabsPage.bas[191]  tbl1.Initialize(page, {121} , True, False, True, {122} ) 
CompTabsPage.bas[192]  tbl1.SetHeaders(Array As String( {123} , {124} , {125} )) 
CompTabsPage.bas[193]  tbl1.SetHeaderThemes(Array As String( {126} , {127} , {128} )) 
CompTabsPage.bas[194]  
CompTabsPage.bas[195]  Dim FirstNames As List 
CompTabsPage.bas[196]  Dim LastNames As List 
CompTabsPage.bas[197]  
CompTabsPage.bas[198]  FirstNames.Initialize2(Array As String( {129} , {130} , {131} , {132} , {133} , {134} , {135} , {136} , {137} , {138} )) 
CompTabsPage.bas[199]  LastNames.Initialize2(Array As String( {139} , {140} , {141} , {142} , {143} , {144} , {145} , {146} , {147} , {148} )) 
CompTabsPage.bas[200]  
CompTabsPage.bas[201]  ' add some random values 
CompTabsPage.bas[202]  For i = 0 To 9 
CompTabsPage.bas[203]  Dim r As List 
CompTabsPage.bas[204]  Dim rCellThemes As List 
CompTabsPage.bas[205]  r.Initialize 
CompTabsPage.bas[206]  rCellThemes.Initialize 
CompTabsPage.bas[207]  r.Add(FirstNames.get(Rnd(0,9))) 
CompTabsPage.bas[208]  rCellThemes.Add( {149} ) 
CompTabsPage.bas[209]  r.Add(LastNames.get(Rnd(0,9))) 
CompTabsPage.bas[210]  rCellThemes.Add( {150} ) 
CompTabsPage.bas[211]  Dim Neg As Int = Rnd(0,100) 
CompTabsPage.bas[212]  If Neg > 50 Then 
CompTabsPage.bas[213]  r.Add( {151} & Rnd(1000, 15000)) 
CompTabsPage.bas[217]  rCellThemes.Add( {152} ) 
CompTabsPage.bas[218]  End If 
CompTabsPage.bas[219]  tbl1.AddRow( {153} & i, r) 
CompTabsPage.bas[220]  tbl1.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
CompTabsPage.bas[221]  Next 
CompTabsPage.bas[222]  
CompTabsPage.bas[223]  tbl1.SetFooter( {154} , 12, {155} ) 
CompTabsPage.bas[224]  
CompTabsPage.bas[225]  Dim tbl1cont As ABMContainer 
CompTabsPage.bas[226]  tbl1cont.Initialize(page, {156} , {157} ) 
CompTabsPage.bas[227]  
CompTabsPage.bas[228]  tbl1cont.AddRows(1,True, {158} ).AddCells12(1, {159} ) 
CompTabsPage.bas[229]  tbl1cont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTabsPage.bas[230]  tbl1cont.Cell(1,1).AddComponent(tbl1) 
CompTabsPage.bas[231]  
CompTabsPage.bas[232]  tabs.AddTab( {160} , {161} , tbl1cont,3,3,3,12,12,12,True,False, {162} , {163} ) 
CompTabsPage.bas[233]  
CompTabsPage.bas[234]  
CompTabsPage.bas[235]  ' add to cell 
CompTabsPage.bas[236]  page.Cell(2,1).AddComponent(tabs) 
CompTabsPage.bas[237]  
CompTabsPage.bas[238]  ' add button 
CompTabsPage.bas[239]  Dim btn1 As ABMButton 
CompTabsPage.bas[240]  btn1.InitializeRaised(page, {164} , {165} , {166} , {167} , {168} ) 
CompTabsPage.bas[241]  page.Cell(3,1).AddComponent(btn1) 
CompTabsPage.bas[242]  
CompTabsPage.bas[243]  ' add codeblock 
CompTabsPage.bas[244]  Dim code As StringBuilder 
CompTabsPage.bas[245]  code.Initialize 
CompTabsPage.bas[246]  code.Append( {169} ).Append(CRLF) 
CompTabsPage.bas[247]  code.Append( {265} ).Append(CRLF) 
CompTabsPage.bas[248]  code.Append( {175} ).Append(CRLF) 
CompTabsPage.bas[249]  code.Append( {176} ).Append(CRLF) 
CompTabsPage.bas[250]  code.Append( {273} ).Append(CRLF) 
CompTabsPage.bas[251]  code.Append( {281} ).Append(CRLF) 
CompTabsPage.bas[252]  code.Append( {289} ).Append(CRLF) 
CompTabsPage.bas[253]  code.Append( {297} ).Append(CRLF) 
CompTabsPage.bas[254]  code.Append( {213} ).Append(CRLF) 
CompTabsPage.bas[255]  code.Append( {214} ).Append(CRLF) 
CompTabsPage.bas[256]  code.Append( {215} ).Append(CRLF) 
CompTabsPage.bas[257]  
CompTabsPage.bas[258]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {216} , code)) 
CompTabsPage.bas[259]  
CompTabsPage.bas[260]  ' add paragraph 
CompTabsPage.bas[261]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {217} , {218} ) ) 
CompTabsPage.bas[262]  
CompTabsPage.bas[263]  ' add codeblock 
CompTabsPage.bas[264]  Dim code2 As StringBuilder 
CompTabsPage.bas[265]  code2.Initialize 
CompTabsPage.bas[266]  code2.Append( {219} ).Append(CRLF) 
CompTabsPage.bas[267]  code2.Append( {220} ).Append(CRLF) 
CompTabsPage.bas[268]  code2.Append( {299} ).Append(CRLF) 
CompTabsPage.bas[269]  code2.Append( {224} ).Append(CRLF) 
CompTabsPage.bas[270]  code2.Append( {303} ).Append(CRLF) 
CompTabsPage.bas[271]  code2.Append( {230} ).Append(CRLF) 
CompTabsPage.bas[272]  code2.Append( {307} ).Append(CRLF) 
CompTabsPage.bas[273]  code2.Append( {236} ).Append(CRLF) 
CompTabsPage.bas[274]  code2.Append( {237} ).Append(CRLF) 
CompTabsPage.bas[275]  code2.Append( {238} ).Append(CRLF) 
CompTabsPage.bas[276]  
CompTabsPage.bas[277]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlock(page, {239} , code2)) 
CompTabsPage.bas[278]  
CompTabsPage.bas[279]  ' also add the components to the footer 
CompTabsPage.bas[280]  ABMShared.ConnectFooter(page) 
CompTabsPage.bas[281]  
CompTabsPage.bas[282]  page.Refresh ' IMPORTANT 
CompTabsPage.bas[283]  
CompTabsPage.bas[284]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTabsPage.bas[285]  page.FinishedLoading 'IMPORTANT 
CompTabsPage.bas[286]  
CompTabsPage.bas[287]  page.RestoreNavigationBarPosition 
CompTabsPage.bas[288] End Sub 
CompTabsPage.bas[289]  
CompTabsPage.bas[290] Sub tbl1_Clicked(PassedRowsAndColumns As List) 
CompTabsPage.bas[291]  ' is the root table 
CompTabsPage.bas[292]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
CompTabsPage.bas[293]  Log(tblCellInfo.TableName) 
CompTabsPage.bas[294] End Sub 
CompTabsPage.bas[295]  
CompTabsPage.bas[296] Sub BuildTabContainer(id As String, Text As String) As ABMContainer 
CompTabsPage.bas[297]  Dim Tabc As ABMContainer 
CompTabsPage.bas[298]  Tabc.Initialize(page, id, {240} ) 
CompTabsPage.bas[299]  
CompTabsPage.bas[300]  Tabc.AddRows(1,True, {241} ).AddCells12(1, {242} ) 
CompTabsPage.bas[301]  Tabc.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTabsPage.bas[302]  
CompTabsPage.bas[303]  Dim lbl As ABMLabel 
CompTabsPage.bas[304]  lbl.Initialize(page, id & {243} , Text, ABM.SIZE_H5, True, {244} ) 
CompTabsPage.bas[305]  Tabc.Cell(1,1).AddComponent(lbl) 
CompTabsPage.bas[306]  Return Tabc 
CompTabsPage.bas[307] End Sub 
CompTabsPage.bas[308]  
CompTabsPage.bas[309]  
CompTabsPage.bas[310] ' clicked on the navigation bar 
CompTabsPage.bas[311] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompTabsPage.bas[312]  page.SaveNavigationBarPosition 
CompTabsPage.bas[313]  If Action = {245} Then Return 
CompTabsPage.bas[314]  If Action = {246} Then 
CompTabsPage.bas[315]  myToastId = myToastId + 1 
CompTabsPage.bas[316]  page.ShowToast( {247} & myToastId, {248} , {249} , 5000) 
CompTabsPage.bas[317]  Return 
CompTabsPage.bas[318]  End If 
CompTabsPage.bas[319]  If Action = {250} Then 
CompTabsPage.bas[320]  ABMShared.LogOff(page) 
CompTabsPage.bas[321]  Return 
CompTabsPage.bas[322]  End If 
CompTabsPage.bas[323]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompTabsPage.bas[324] End Sub 
CompTabsPage.bas[325]  
CompTabsPage.bas[326] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompTabsPage.bas[327]  page.ws.Session.SetAttribute( {251} , {252} ) 
CompTabsPage.bas[328]  page.ws.Session.SetAttribute( {253} , {254} ) 
CompTabsPage.bas[329]  page.ws.Session.SetAttribute( {255} , {256} ) 
CompTabsPage.bas[330]  ABMShared.NavigateToPage(ws, ABMPageId, {257} ) 
CompTabsPage.bas[331] End Sub 
CompTabsPage.bas[332]  
CompTabsPage.bas[333] Sub btn1_Clicked(Target As String) 
CompTabsPage.bas[334]  Dim tabs As ABMTabs = page.Component( {258} ) 
CompTabsPage.bas[335]  myToastId = myToastId + 1 
CompTabsPage.bas[336]  page.ShowToast( {259} & myToastId, {260} , tabs.GetActive & {261} , 5000) 
CompTabsPage.bas[337] End Sub 
Analysing: CompTimeLinePage.bas
CompTimeLinePage.bas[0] ﻿Type=Class 
CompTimeLinePage.bas[0] Version=4.7 
CompTimeLinePage.bas[0] ModulesStructureVersion=1 
CompTimeLinePage.bas[0] B4J=true 
CompTimeLinePage.bas[0] @EndOfDesignText@ 
CompTimeLinePage.bas[1] 'Class module 
CompTimeLinePage.bas[2] Sub Class_Globals 
CompTimeLinePage.bas[3]  Private ws As WebSocket 'ignore 
CompTimeLinePage.bas[4]  ' will hold our page information 
CompTimeLinePage.bas[5]  Public page As ABMPage 
CompTimeLinePage.bas[6]  ' page theme 
CompTimeLinePage.bas[7]  Private theme As ABMTheme 
CompTimeLinePage.bas[8]  ' to access the constants 
CompTimeLinePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompTimeLinePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompTimeLinePage.bas[11]  Public Name As String = {1} 
CompTimeLinePage.bas[12]  ' will hold the unique browsers window id 
CompTimeLinePage.bas[13]  Private ABMPageId As String = {2} 
CompTimeLinePage.bas[14]  
CompTimeLinePage.bas[15]  ' your own variables 
CompTimeLinePage.bas[16]  Dim myToastId As Int 
CompTimeLinePage.bas[17]  Dim counter As Int = 4 
CompTimeLinePage.bas[18] End Sub 
CompTimeLinePage.bas[19]  
CompTimeLinePage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
CompTimeLinePage.bas[21] Public Sub Initialize 
CompTimeLinePage.bas[22]  ' build the local structure IMPORTANT! 
CompTimeLinePage.bas[23]  BuildPage 
CompTimeLinePage.bas[24] End Sub 
CompTimeLinePage.bas[25]  
CompTimeLinePage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompTimeLinePage.bas[27]  Log( {3} ) 
CompTimeLinePage.bas[28]  ws = WebSocket1 
CompTimeLinePage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompTimeLinePage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompTimeLinePage.bas[31]  
CompTimeLinePage.bas[32]  If ABMShared.NeedsAuthorization Then 
CompTimeLinePage.bas[33]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
CompTimeLinePage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
CompTimeLinePage.bas[35]  Return 
CompTimeLinePage.bas[36]  End If 
CompTimeLinePage.bas[37]  End If 
CompTimeLinePage.bas[38]  
CompTimeLinePage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompTimeLinePage.bas[40]  If page.ComesFromPageCache Then 
CompTimeLinePage.bas[41]  ' refresh the page 
CompTimeLinePage.bas[42]  page.Refresh 
CompTimeLinePage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTimeLinePage.bas[44]  page.FinishedLoading 
CompTimeLinePage.bas[45]  Else 
CompTimeLinePage.bas[46]  ' Prepare the page 
CompTimeLinePage.bas[47]  page.Prepare 
CompTimeLinePage.bas[48]  ' load the dynamic content 
CompTimeLinePage.bas[49]  ConnectPage 
CompTimeLinePage.bas[50]  End If 
CompTimeLinePage.bas[51]  Log(ABMPageId) 
CompTimeLinePage.bas[52] End Sub 
CompTimeLinePage.bas[53]  
CompTimeLinePage.bas[54] Private Sub WebSocket_Disconnected 
CompTimeLinePage.bas[55]  Log( {8} ) 
CompTimeLinePage.bas[56] End Sub 
CompTimeLinePage.bas[57]  
CompTimeLinePage.bas[58] Sub Page_ParseEvent(Params As Map) 
CompTimeLinePage.bas[59]  Dim eventName As String = Params.Get( {9} ) 
CompTimeLinePage.bas[60]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
CompTimeLinePage.bas[61]  If eventName = {12} Then 
CompTimeLinePage.bas[62]  Log( {13} ) 
CompTimeLinePage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompTimeLinePage.bas[64]  Return 
CompTimeLinePage.bas[65]  End If 
CompTimeLinePage.bas[66]  If SubExists(Me, eventName) Then 
CompTimeLinePage.bas[67]  Params.Remove( {14} ) 
CompTimeLinePage.bas[68]  Params.Remove( {15} ) 
CompTimeLinePage.bas[69]  Select Case Params.Size 
CompTimeLinePage.bas[70]  Case 0 
CompTimeLinePage.bas[71]  CallSub(Me, eventName) 
CompTimeLinePage.bas[72]  Case 1 
CompTimeLinePage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompTimeLinePage.bas[74]  Case 2 
CompTimeLinePage.bas[75]  If Params.get(eventParams(0)) = {16} Then 
CompTimeLinePage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompTimeLinePage.bas[77]  CallSub2(Me, eventName, PassedTables) 
CompTimeLinePage.bas[78]  Else 
CompTimeLinePage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompTimeLinePage.bas[80]  End If 
CompTimeLinePage.bas[81]  Case Else 
CompTimeLinePage.bas[82]  ' cannot be called directly, to many param 
CompTimeLinePage.bas[83]  CallSub2(Me, eventName, Params) 
CompTimeLinePage.bas[84]  End Select 
CompTimeLinePage.bas[85]  End If 
CompTimeLinePage.bas[86] End Sub 
CompTimeLinePage.bas[87]  
CompTimeLinePage.bas[88] public Sub BuildTheme() 
CompTimeLinePage.bas[89]  ' start with the base theme defined in ABMShared 
CompTimeLinePage.bas[90]  theme.Initialize( {17} ) 
CompTimeLinePage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
CompTimeLinePage.bas[92]  
CompTimeLinePage.bas[93]  ' add additional themes specific for this page 
CompTimeLinePage.bas[94]  theme.AddDividerTheme( {18} ) 
CompTimeLinePage.bas[95]  theme.Divider( {19} ).ForeColor = ABM.COLOR_LIGHTBLUE 
CompTimeLinePage.bas[96]  
CompTimeLinePage.bas[97]  ' add additional themes specific for this page 
CompTimeLinePage.bas[98]  theme.AddTableTheme( {20} ) 
CompTimeLinePage.bas[99]  theme.Table( {21} ).ZDepth = ABM.ZDEPTH_1 
CompTimeLinePage.bas[100]  
CompTimeLinePage.bas[101]  theme.Table( {22} ).AddCellTheme( {23} ) 
CompTimeLinePage.bas[102]  theme.Table( {24} ).Cell( {25} ).BackColor = ABM.COLOR_BLUEGREY 
CompTimeLinePage.bas[103]  theme.Table( {26} ).Cell( {27} ).ForeColor = ABM.COLOR_WHITE 
CompTimeLinePage.bas[104]  
CompTimeLinePage.bas[105]  theme.Table( {28} ).AddCellTheme( {29} ) 
CompTimeLinePage.bas[106]  theme.Table( {30} ).Cell( {31} ).BackColor = ABM.COLOR_BLUEGREY 
CompTimeLinePage.bas[107]  theme.Table( {32} ).Cell( {33} ).ForeColor = ABM.COLOR_WHITE 
CompTimeLinePage.bas[108]  theme.Table( {34} ).Cell( {35} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTimeLinePage.bas[109]  
CompTimeLinePage.bas[110]  theme.Table( {36} ).AddCellTheme( {37} ) 
CompTimeLinePage.bas[111]  theme.Table( {38} ).Cell( {39} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
CompTimeLinePage.bas[112]  theme.Table( {40} ).Cell( {41} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
CompTimeLinePage.bas[113]  
CompTimeLinePage.bas[114]  theme.Table( {42} ).AddCellTheme( {43} ) 
CompTimeLinePage.bas[115]  theme.Table( {44} ).Cell( {45} ).BackColor = ABM.COLOR_GREEN 
CompTimeLinePage.bas[116]  theme.Table( {46} ).Cell( {47} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompTimeLinePage.bas[117]  theme.Table( {48} ).Cell( {49} ).ActiveBackColor = ABM.COLOR_GREEN 
CompTimeLinePage.bas[118]  theme.Table( {50} ).Cell( {51} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompTimeLinePage.bas[119]  theme.Table( {52} ).Cell( {53} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTimeLinePage.bas[120]  
CompTimeLinePage.bas[121]  theme.Table( {54} ).AddCellTheme( {55} ) 
CompTimeLinePage.bas[122]  theme.Table( {56} ).Cell( {57} ).BackColor = ABM.COLOR_RED 
CompTimeLinePage.bas[123]  theme.Table( {58} ).Cell( {59} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompTimeLinePage.bas[124]  theme.Table( {60} ).Cell( {61} ).ActiveBackColor = ABM.COLOR_RED 
CompTimeLinePage.bas[125]  theme.Table( {62} ).Cell( {63} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
CompTimeLinePage.bas[126]  theme.Table( {64} ).Cell( {65} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTimeLinePage.bas[127]  
CompTimeLinePage.bas[128]  theme.Table( {66} ).AddCellTheme( {67} ) 
CompTimeLinePage.bas[129]  theme.Table( {68} ).Cell( {69} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
CompTimeLinePage.bas[130] End Sub 
CompTimeLinePage.bas[131]  
CompTimeLinePage.bas[132] public Sub BuildPage() 
CompTimeLinePage.bas[133]  ' initialize the theme 
CompTimeLinePage.bas[134]  BuildTheme 
CompTimeLinePage.bas[135]  
CompTimeLinePage.bas[136]  ' initialize this page using our theme 
CompTimeLinePage.bas[137]  page.InitializeWithTheme(Name, {70} & ABMshared.AppName & {71} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompTimeLinePage.bas[138]  page.ShowLoader=True 
CompTimeLinePage.bas[139]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompTimeLinePage.bas[140]  page.PageTitle = {72} 
CompTimeLinePage.bas[141]  page.PageDescription = {73} 
CompTimeLinePage.bas[142]  page.PageHTMLName = {74} 
CompTimeLinePage.bas[143]  page.PageKeywords = {75} 
CompTimeLinePage.bas[144]  page.PageSiteMapPriority = {76} 
CompTimeLinePage.bas[145]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompTimeLinePage.bas[146]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompTimeLinePage.bas[147]  
CompTimeLinePage.bas[148]  ABMShared.BuildNavigationBar(page, {77} , {78} , {79} , {80} , {81} ) 
CompTimeLinePage.bas[149]  
CompTimeLinePage.bas[150]  ' create the page grid 
CompTimeLinePage.bas[151]  page.AddRows(4,True, {82} ).AddCells12(1, {83} ) 
CompTimeLinePage.bas[152]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTimeLinePage.bas[153]  
CompTimeLinePage.bas[154]  page.Cell(2,1).SetFixedHeight(800,True) ' IMPORTANT TO DO IN BUILDPAGE FOR EDGE! 
CompTimeLinePage.bas[155]  
CompTimeLinePage.bas[156]  ABMShared.BuildFooter(page) 
CompTimeLinePage.bas[157] End Sub 
CompTimeLinePage.bas[158]  
CompTimeLinePage.bas[159] Sub ConnectPage() 
CompTimeLinePage.bas[160]  'NEW 
CompTimeLinePage.bas[161]  ABMShared.ConnectNavigationBar(page) 
CompTimeLinePage.bas[162]  
CompTimeLinePage.bas[163]  ' add paragraph 
CompTimeLinePage.bas[164]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {84} , {85} ) ) 
CompTimeLinePage.bas[165]  ' add paragraph 
CompTimeLinePage.bas[166]  
CompTimeLinePage.bas[167]  'page.Cell(2,1).SetFixedHeight(800) ' IMPORTANT 
CompTimeLinePage.bas[168]  
CompTimeLinePage.bas[169]  Dim timeline As ABMTimeLine 
CompTimeLinePage.bas[170]  timeline.Initialize(page, {86} , {87} , {88} , {89} , {90} ) 
CompTimeLinePage.bas[171]  timeline.Language = {91} 
CompTimeLinePage.bas[172]  timeline.StartAtSlideNumber = 1 
CompTimeLinePage.bas[173]  timeline.HideSwipeMessage = True 
CompTimeLinePage.bas[174]  
CompTimeLinePage.bas[175]  
CompTimeLinePage.bas[176]  Dim date1 As ABMTimeLineSlide 
CompTimeLinePage.bas[177]  date1.Initialize( {92} , {93} , {94} ) 
CompTimeLinePage.bas[178]  date1.Text.Text = {95} 
CompTimeLinePage.bas[179]  date1.Container.Initialize(page, {96} , {97} ) 
CompTimeLinePage.bas[180]  
CompTimeLinePage.bas[181]  ' create a table 
CompTimeLinePage.bas[182]  Dim tbl1 As ABMTable 
CompTimeLinePage.bas[183]  tbl1.Initialize(page, {98} , True, False, True, {99} ) 
CompTimeLinePage.bas[184]  tbl1.SetHeaders(Array As String( {100} , {101} , {102} )) 
CompTimeLinePage.bas[185]  tbl1.SetColumnDataFields(Array As String( {103} , {104} , {105} )) 
CompTimeLinePage.bas[186]  tbl1.SetHeaderThemes(Array As String( {106} , {107} , {108} )) 
CompTimeLinePage.bas[187]  
CompTimeLinePage.bas[188]  Dim FirstNames As List 
CompTimeLinePage.bas[189]  Dim LastNames As List 
CompTimeLinePage.bas[190]  
CompTimeLinePage.bas[191]  FirstNames.Initialize2(Array As String( {109} , {110} , {111} , {112} , {113} , {114} , {115} , {116} , {117} , {118} )) 
CompTimeLinePage.bas[192]  LastNames.Initialize2(Array As String( {119} , {120} , {121} , {122} , {123} , {124} , {125} , {126} , {127} , {128} )) 
CompTimeLinePage.bas[193]  
CompTimeLinePage.bas[194]  ' add some random values 
CompTimeLinePage.bas[195]  For i = 0 To 9 
CompTimeLinePage.bas[196]  Dim r As List 
CompTimeLinePage.bas[197]  Dim rCellThemes As List 
CompTimeLinePage.bas[198]  r.Initialize 
CompTimeLinePage.bas[199]  rCellThemes.Initialize 
CompTimeLinePage.bas[200]  r.Add(FirstNames.get(Rnd(0,9))) 
CompTimeLinePage.bas[201]  rCellThemes.Add( {129} ) 
CompTimeLinePage.bas[202]  r.Add(LastNames.get(Rnd(0,9))) 
CompTimeLinePage.bas[203]  rCellThemes.Add( {130} ) 
CompTimeLinePage.bas[204]  Dim Neg As Int = Rnd(0,100) 
CompTimeLinePage.bas[205]  If Neg > 50 Then 
CompTimeLinePage.bas[206]  r.Add( {131} & Rnd(1000, 15000)) 
CompTimeLinePage.bas[210]  rCellThemes.Add( {132} ) 
CompTimeLinePage.bas[211]  End If 
CompTimeLinePage.bas[212]  tbl1.AddRow( {133} & i, r) 
CompTimeLinePage.bas[213]  tbl1.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
CompTimeLinePage.bas[214]  Next 
CompTimeLinePage.bas[215]  
CompTimeLinePage.bas[216]  tbl1.SetFooter( {134} , 12, {135} ) 
CompTimeLinePage.bas[217]  
CompTimeLinePage.bas[218]  date1.Container.AddRows(1,True, {136} ).AddCells12(1, {137} ) 
CompTimeLinePage.bas[219]  date1.Container.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTimeLinePage.bas[220]  date1.Container.Cell(1,1).AddComponent(tbl1) 
CompTimeLinePage.bas[221]  
CompTimeLinePage.bas[222]  
CompTimeLinePage.bas[223]  timeline.AddSlide(date1) 
CompTimeLinePage.bas[224]  
CompTimeLinePage.bas[225]  Dim date2 As ABMTimeLineSlide 
CompTimeLinePage.bas[226]  date2.Initialize( {138} , {139} , {140} ) 
CompTimeLinePage.bas[227]  date2.StartDate.Month = 12 
CompTimeLinePage.bas[228]  date2.Text.Text = {141} 
CompTimeLinePage.bas[229]  'date2.BackgroundURL = {142} 
CompTimeLinePage.bas[230]  date2.Container.Initialize(page, {143} , {144} ) 
CompTimeLinePage.bas[231]  date2.Container.AddRows(1,True, {145} ).AddCells12(1, {146} ) 
CompTimeLinePage.bas[232]  date2.Container.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTimeLinePage.bas[233]  
CompTimeLinePage.bas[234]  Dim pdf As ABMPDFViewer 
CompTimeLinePage.bas[235]  pdf.Initialize(page, {147} , 400, {148} , {149} ) 
CompTimeLinePage.bas[236]  pdf.PreparePrintingText = {150} 
CompTimeLinePage.bas[237]  pdf.ReadDirection = ABM.PDF_READDIRECTION_LTR 
CompTimeLinePage.bas[238]  pdf.AllowDownload = True 
CompTimeLinePage.bas[239]  pdf.AllowOpen = False 
CompTimeLinePage.bas[240]  pdf.AllowPrint = True 
CompTimeLinePage.bas[241]  pdf.AllowSideBar = True 
CompTimeLinePage.bas[242]  pdf.AllowViewBookmark = False 
CompTimeLinePage.bas[243]  
CompTimeLinePage.bas[244]  date2.Container.Cell(1,1).AddComponent(pdf) 
CompTimeLinePage.bas[245]  timeline.AddSlide(date2) 
CompTimeLinePage.bas[246]  
CompTimeLinePage.bas[247]  Dim date4 As ABMTimeLineSlide 
CompTimeLinePage.bas[248]  date4.Initialize( {151} , {152} , {153} ) 
CompTimeLinePage.bas[249]  date4.StartDate.Month = 5 
CompTimeLinePage.bas[250]  date4.Text.Text = {154} 
CompTimeLinePage.bas[251]  'date2.BackgroundURL = {155} 
CompTimeLinePage.bas[252]  date4.Container.Initialize(page, {156} , {157} ) 
CompTimeLinePage.bas[253]  date4.Container.AddRows(1,True, {158} ).AddCells12(1, {159} ) 
CompTimeLinePage.bas[254]  date4.Container.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTimeLinePage.bas[255]  
CompTimeLinePage.bas[256]  ' create the panorama 
CompTimeLinePage.bas[257]  Dim gm2 As ABMGoogleMap 
CompTimeLinePage.bas[258]  gm2.InitializeAsPanorama(page, {160} , 50.8500, 2.8833, 1, 300, 45, 0) 
CompTimeLinePage.bas[259]  
CompTimeLinePage.bas[260]  date4.Container.Cell(1,1).AddComponent(gm2) 
CompTimeLinePage.bas[261]  timeline.AddSlide(date4) 
CompTimeLinePage.bas[262]  
CompTimeLinePage.bas[263]  page.Cell(2,1).AddComponent(timeline) 
CompTimeLinePage.bas[264]  
CompTimeLinePage.bas[265]  Dim btn1 As ABMButton 
CompTimeLinePage.bas[266]  btn1.InitializeFlat(page, {161} , {162} , {163} , {164} , {165} ) 
CompTimeLinePage.bas[267]  page.Cell(3,1).AddComponent(btn1) 
CompTimeLinePage.bas[268]  
CompTimeLinePage.bas[269]  Dim btn2 As ABMButton 
CompTimeLinePage.bas[270]  btn2.InitializeFlat(page, {166} , {167} , {168} , {169} , {170} ) 
CompTimeLinePage.bas[271]  page.Cell(3,1).AddComponent(btn2) 
CompTimeLinePage.bas[272]  
CompTimeLinePage.bas[273]  ' also add the components to the footer 
CompTimeLinePage.bas[274]  ABMShared.ConnectFooter(page) 
CompTimeLinePage.bas[275]  
CompTimeLinePage.bas[276]  page.Refresh ' IMPORTANT 
CompTimeLinePage.bas[277]  
CompTimeLinePage.bas[278]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTimeLinePage.bas[279]  page.FinishedLoading 'IMPORTANT 
CompTimeLinePage.bas[280]  
CompTimeLinePage.bas[281]  page.RestoreNavigationBarPosition 
CompTimeLinePage.bas[282] End Sub 
CompTimeLinePage.bas[283]  
CompTimeLinePage.bas[284] Sub btn1_Clicked(Target As String) 
CompTimeLinePage.bas[285]  Dim timeline As ABMTimeLine = page.Component( {171} ) 
CompTimeLinePage.bas[286]  Dim date3 As ABMTimeLineSlide 
CompTimeLinePage.bas[287]  date3.Initialize( {172} & counter, {173} , {174} ) 
CompTimeLinePage.bas[288]  date3.StartDate.Month = Rnd(1,13) 
CompTimeLinePage.bas[289]  date3.Text.Text = {175} 
CompTimeLinePage.bas[290]  date3.Container.Initialize(page, {176} & counter, {177} ) 
CompTimeLinePage.bas[291]  
CompTimeLinePage.bas[292]  ' create the grid for the content 
CompTimeLinePage.bas[293]  date3.Container.AddRows(1,True, {178} ).AddCells12(1, {179} ) 
CompTimeLinePage.bas[294]  date3.Container.AddRows(1,True, {180} ).AddCellsOS(2,0,0,0,6,6,6, {181} ) 
CompTimeLinePage.bas[295]  date3.Container.AddRows(3,True, {182} ).AddCells12(1, {183} ) 
CompTimeLinePage.bas[296]  date3.Container.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTimeLinePage.bas[297]  
CompTimeLinePage.bas[298]  ' add paragraph 
CompTimeLinePage.bas[299]  date3.Container.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {184} , {185} ) ) 
CompTimeLinePage.bas[300]  
CompTimeLinePage.bas[301]  ' create the input fields for the content 
CompTimeLinePage.bas[302]  Dim inp1 As ABMInput 
CompTimeLinePage.bas[303]  inp1.Initialize(page, {186} , ABM.INPUT_TEXT, {187} , False, {188} ) 
CompTimeLinePage.bas[304]  inp1.PlaceHolderText = {189} 
CompTimeLinePage.bas[305]  date3.Container.Cell(2,1).AddComponent(inp1) 
CompTimeLinePage.bas[306]  
CompTimeLinePage.bas[307]  Dim inp2 As ABMInput 
CompTimeLinePage.bas[308]  inp2.Initialize(page, {190} , ABM.INPUT_TEXT, {191} , False, {192} ) 
CompTimeLinePage.bas[309]  date3.Container.Cell(2,2).AddComponent(inp2) 
CompTimeLinePage.bas[310]  
CompTimeLinePage.bas[311]  
CompTimeLinePage.bas[312]  ' create combo 
CompTimeLinePage.bas[313]  Dim combo1 As ABMCombo 
CompTimeLinePage.bas[314]  combo1.Initialize(page, {193} , {194} , 650, {195} ) 
CompTimeLinePage.bas[315]  
CompTimeLinePage.bas[316]  ' add items 
CompTimeLinePage.bas[317]  combo1.AddItem( {196} , {197} , BuildSimpleItem( {198} , {199} , {200} )) 
CompTimeLinePage.bas[318]  combo1.AddItem( {201} , {202} , BuildSimpleItem( {203} , {204} , {205} )) 
CompTimeLinePage.bas[319]  combo1.AddItem( {206} , {207} , BuildSimpleItem( {208} , {209} , {210} )) 
CompTimeLinePage.bas[320]  combo1.AddItem( {211} , {212} , BuildSimpleItem( {213} , {214} , {215} )) 
CompTimeLinePage.bas[321]  
CompTimeLinePage.bas[322]  date3.Container.Cell(3,1).AddComponent(combo1) 
CompTimeLinePage.bas[323]  
CompTimeLinePage.bas[324]  Dim inp4 As ABMInput 
CompTimeLinePage.bas[325]  inp4.Initialize(page, {216} , ABM.INPUT_PASSWORD, {217} , False, {218} ) 
CompTimeLinePage.bas[326]  date3.Container.Cell(4,1).AddComponent(inp4) 
CompTimeLinePage.bas[327]  
CompTimeLinePage.bas[328]  Dim inp5 As ABMInput 
CompTimeLinePage.bas[329]  inp5.Initialize(page, {219} , ABM.INPUT_EMAIL, {220} , False, {221} ) 
CompTimeLinePage.bas[330]  inp5.WrongMessage = {222} 
CompTimeLinePage.bas[331]  inp5.SuccessMessage = {223} 
CompTimeLinePage.bas[332]  date3.Container.Cell(5,1).AddComponent(inp5) 
CompTimeLinePage.bas[333]  
CompTimeLinePage.bas[334]  timeline.AddSlideRunTime(date3) 
CompTimeLinePage.bas[335]  
CompTimeLinePage.bas[336]  counter = counter + 1 
CompTimeLinePage.bas[337] End Sub 
CompTimeLinePage.bas[338]  
CompTimeLinePage.bas[339] Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
CompTimeLinePage.bas[340]  Dim lbl As ABMLabel 
CompTimeLinePage.bas[341]  If icon <> {224} Then 
CompTimeLinePage.bas[342]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {225} ) 
CompTimeLinePage.bas[343]  Else 
CompTimeLinePage.bas[344]  lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {226} ) 
CompTimeLinePage.bas[345]  End If 
CompTimeLinePage.bas[346]  lbl.VerticalAlign = True 
CompTimeLinePage.bas[347]  lbl.IconName = icon 
CompTimeLinePage.bas[348]  Return lbl 
CompTimeLinePage.bas[349] End Sub 
CompTimeLinePage.bas[350]  
CompTimeLinePage.bas[351] Sub btn2_Clicked(Target As String) 
CompTimeLinePage.bas[352]  Dim timeline As ABMTimeLine = page.Component( {227} ) 
CompTimeLinePage.bas[353]  timeline.RemoveSlideRunTime( {228} & (counter - 1)) 
CompTimeLinePage.bas[354] End Sub 
CompTimeLinePage.bas[355]  
CompTimeLinePage.bas[356] Sub timeline_DataLoaded() 
CompTimeLinePage.bas[357]  Log( {229} ) 
CompTimeLinePage.bas[358]  Dim timeline As ABMTimeLine = page.Component( {230} ) 
CompTimeLinePage.bas[359]  timeline.PrepareComponentsForAllSlides ' IMPORTANT 
CompTimeLinePage.bas[360] End Sub 
CompTimeLinePage.bas[361]  
CompTimeLinePage.bas[362] Sub timeline_Added(uniqueID As String) 
CompTimeLinePage.bas[363]  Log( {231} & uniqueID) 
CompTimeLinePage.bas[364]  Dim timeline As ABMTimeLine = page.Component( {232} ) 
CompTimeLinePage.bas[365]  timeline.Goto(uniqueID, True) 
CompTimeLinePage.bas[366]  timeline.PrepareComponentsForSlide(uniqueID) ' IMPORTANT 
CompTimeLinePage.bas[367] End Sub 
CompTimeLinePage.bas[368]  
CompTimeLinePage.bas[369] Sub timeline_BackToStart() 
CompTimeLinePage.bas[370]  Log( {233} ) 
CompTimeLinePage.bas[371] End Sub 
CompTimeLinePage.bas[372]  
CompTimeLinePage.bas[373] Sub timeline_MovedToSlide(uniqueID As String) 
CompTimeLinePage.bas[374]  Log( {234} & uniqueID) 
CompTimeLinePage.bas[375] End Sub 
CompTimeLinePage.bas[376]  
CompTimeLinePage.bas[377] Sub timeline_Removed(uniqueID As String) 
CompTimeLinePage.bas[378]  Log( {235} ) 
CompTimeLinePage.bas[379] End Sub 
CompTimeLinePage.bas[380]  
CompTimeLinePage.bas[381] ' clicked on the navigation bar 
CompTimeLinePage.bas[382] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompTimeLinePage.bas[383]  page.SaveNavigationBarPosition 
CompTimeLinePage.bas[384]  If Action = {236} Then Return 
CompTimeLinePage.bas[385]  If Action = {237} Then 
CompTimeLinePage.bas[386]  myToastId = myToastId + 1 
CompTimeLinePage.bas[387]  page.ShowToast( {238} & myToastId, {239} , {240} , 5000) 
CompTimeLinePage.bas[388]  Return 
CompTimeLinePage.bas[389]  End If 
CompTimeLinePage.bas[390]  If Action = {241} Then 
CompTimeLinePage.bas[391]  ABMShared.LogOff(page) 
CompTimeLinePage.bas[392]  Return 
CompTimeLinePage.bas[393]  End If 
CompTimeLinePage.bas[394]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompTimeLinePage.bas[395] End Sub 
CompTimeLinePage.bas[396]  
CompTimeLinePage.bas[397] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompTimeLinePage.bas[398]  page.ws.Session.SetAttribute( {242} , {243} ) 
CompTimeLinePage.bas[399]  page.ws.Session.SetAttribute( {244} , {245} ) 
CompTimeLinePage.bas[400]  page.ws.Session.SetAttribute( {246} , {247} ) 
CompTimeLinePage.bas[401]  ABMShared.NavigateToPage(ws, ABMPageId, {248} ) 
CompTimeLinePage.bas[402] End Sub 
Analysing: CompTreeTablePage.bas
CompTreeTablePage.bas[0] ﻿Type=Class 
CompTreeTablePage.bas[0] Version=4.7 
CompTreeTablePage.bas[0] ModulesStructureVersion=1 
CompTreeTablePage.bas[0] B4J=true 
CompTreeTablePage.bas[0] @EndOfDesignText@ 
CompTreeTablePage.bas[1] 'Class module 
CompTreeTablePage.bas[2] Sub Class_Globals 
CompTreeTablePage.bas[3]  Private ws As WebSocket 'ignore 
CompTreeTablePage.bas[4]  ' will hold our page information 
CompTreeTablePage.bas[5]  Public page As ABMPage 
CompTreeTablePage.bas[6]  ' page theme 
CompTreeTablePage.bas[7]  Private theme As ABMTheme 
CompTreeTablePage.bas[8]  ' to access the constants 
CompTreeTablePage.bas[9]  Private ABM As ABMaterial 'ignore 
CompTreeTablePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompTreeTablePage.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
CompTreeTablePage.bas[12]  ' will hold the unique browsers window id 
CompTreeTablePage.bas[13]  Private ABMPageId As String = {1} 
CompTreeTablePage.bas[14]  
CompTreeTablePage.bas[15]  ' your own variables 
CompTreeTablePage.bas[16]  Dim myToastId As Int 
CompTreeTablePage.bas[17]  'Dim PDFName As String 
CompTreeTablePage.bas[18]  Dim PlusParents As Map 
CompTreeTablePage.bas[19]  
CompTreeTablePage.bas[20]  Type PlusStructure (Prefix As String, NextValue As Int) 
CompTreeTablePage.bas[21] End Sub 
CompTreeTablePage.bas[22]  
CompTreeTablePage.bas[23] 'Initializes the object. You can add parameters to this method if needed. 
CompTreeTablePage.bas[24] Public Sub Initialize 
CompTreeTablePage.bas[25]  ' build the local structure IMPORTANT! 
CompTreeTablePage.bas[26]  BuildPage 
CompTreeTablePage.bas[27] End Sub 
CompTreeTablePage.bas[28]  
CompTreeTablePage.bas[29] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompTreeTablePage.bas[30]  Log( {2} ) 
CompTreeTablePage.bas[31]  ws = WebSocket1 
CompTreeTablePage.bas[32]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompTreeTablePage.bas[33]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompTreeTablePage.bas[34]  
CompTreeTablePage.bas[35]  If ABMShared.NeedsAuthorization Then 
CompTreeTablePage.bas[36]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
CompTreeTablePage.bas[37]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
CompTreeTablePage.bas[38]  Return 
CompTreeTablePage.bas[39]  End If 
CompTreeTablePage.bas[40]  End If 
CompTreeTablePage.bas[41]  
CompTreeTablePage.bas[42]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompTreeTablePage.bas[43]  If page.ComesFromPageCache Then 
CompTreeTablePage.bas[44]  ' refresh the page 
CompTreeTablePage.bas[45]  page.Refresh 
CompTreeTablePage.bas[46]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTreeTablePage.bas[47]  page.FinishedLoading 
CompTreeTablePage.bas[48]  Else 
CompTreeTablePage.bas[49]  ' Prepare the page 
CompTreeTablePage.bas[50]  page.Prepare 
CompTreeTablePage.bas[51]  ' load the dynamic content 
CompTreeTablePage.bas[52]  ConnectPage 
CompTreeTablePage.bas[53]  End If 
CompTreeTablePage.bas[54]  Log(ABMPageId) 
CompTreeTablePage.bas[55] End Sub 
CompTreeTablePage.bas[56]  
CompTreeTablePage.bas[57] ' imagine this comes from a database, for the demo's purpose it is hard coded 
CompTreeTablePage.bas[58] ' you can call this method with a different query every time (e.g. depending on the user) 
CompTreeTablePage.bas[59] Sub LoadTree() 
CompTreeTablePage.bas[60]  
CompTreeTablePage.bas[61]  DateTime.DateFormat = {7} 
CompTreeTablePage.bas[62]  Dim view1 As ABMTreeTable = page.Component( {8} ) 
CompTreeTablePage.bas[63]  view1.Clear 
CompTreeTablePage.bas[64]  view1.AddRow(BuildLev1Header(1, {9} , {10} , {11} , {12} )) 
CompTreeTablePage.bas[65]  view1.AddRow(BuildLev2Header1(2, {13} , {14} , {15} , {16} , DateTime.Date(DateTime.Now))) 
CompTreeTablePage.bas[66]  view1.AddRow(BuildLev3Header(3, {17} , {18} , {19} , {20} , Array As String( {21} ), {22} , 1)) 
CompTreeTablePage.bas[67]  view1.AddRow(BuildLev4Body1(4, {23} , {24} , {25} , {26} , {27} , {28} )) 
CompTreeTablePage.bas[68]  view1.AddRow(BuildLev4Body1(4, {29} , {30} , {31} , {32} , {33} , {34} )) 
CompTreeTablePage.bas[69]  view1.AddRow(BuildLev4Body1(4, {35} , {36} , {37} , {38} , {39} , {40} )) 
CompTreeTablePage.bas[70]  view1.AddRow(BuildLev3Footer1(3, {41} , {42} , {43} , {44} , {45} , {46} )) 
CompTreeTablePage.bas[71]  view1.AddRow(BuildLev3Header(3, {47} , {48} , {49} , {50} ,Array As String( {51} ), {52} , 0)) 
CompTreeTablePage.bas[72]  view1.AddRow(BuildLev4Body2(4, {53} , {54} , {55} , {56} )) 
CompTreeTablePage.bas[73]  view1.AddRow(BuildLev4Body2(4, {57} , {58} , {59} , {60} )) 
CompTreeTablePage.bas[74]  view1.AddRow(BuildLev3Footer2(3, {61} , {62} , {63} , {64} )) 
CompTreeTablePage.bas[75]  view1.AddRow(BuildLev3Header(3, {65} , {66} , {67} , {68} ,Array As String(), {69} , 0)) 
CompTreeTablePage.bas[76]  view1.AddRow(BuildLev4Body3(4, {70} , {71} , {72} , {73} , {74} , {75} )) 
CompTreeTablePage.bas[77]  view1.AddRow(BuildLev3Footer2(3, {76} , {77} , {78} , {79} )) 
CompTreeTablePage.bas[78]  view1.AddRow(BuildLev3Header(3, {80} , {81} , {82} , {83} ,Array As String(), {84} , 0)) 
CompTreeTablePage.bas[79]  view1.AddRow(BuildLev4Body3(4, {85} , {86} , {87} , {88} , {89} , {90} )) 
CompTreeTablePage.bas[80]  view1.AddRow(BuildLev3Footer2(3, {91} , {92} , {93} , {94} )) 
CompTreeTablePage.bas[81]  view1.AddRow(BuildLev3Header(3, {95} , {96} , {97} , {98} ,Array As String(), {99} , 0)) 
CompTreeTablePage.bas[82]  view1.AddRow(BuildLev4Body2(4, {100} , {101} , {102} , {103} )) 
CompTreeTablePage.bas[83]  view1.AddRow(BuildLev3Footer2(3, {104} , {105} , {106} , {107} )) 
CompTreeTablePage.bas[84]  view1.AddRow(BuildLev3Header(3, {108} , {109} , {110} , {111} ,Array As String(), {112} , 0)) 
CompTreeTablePage.bas[85]  view1.AddRow(BuildLev4Body4(4, {113} , {114} , {115} , Array As Int(30,50,70,80,100,140,170), Array As Int(100,120,180,150,190,100,70))) 
CompTreeTablePage.bas[86]  view1.AddRow(BuildLev3Footer2(3, {116} , {117} , {118} , {119} )) 
CompTreeTablePage.bas[87]  view1.AddRow(BuildLev2Footer(2, {120} , {121} , {122} )) 
CompTreeTablePage.bas[88]  
CompTreeTablePage.bas[89]  PlusParents.Put( {123} , NewPlusStructure( {124} , 4)) 
CompTreeTablePage.bas[90]  
CompTreeTablePage.bas[91]  view1.AddRow(BuildLev2Header1(2, {125} , {126} , {127} , {128} , DateTime.Date(DateTime.Now))) 
CompTreeTablePage.bas[92]  view1.AddRow(BuildLev3Header(3, {129} , {130} , {131} , {132} ,Array As String( {133} ), {134} , 1)) 
CompTreeTablePage.bas[93]  view1.AddRow(BuildLev4Body1(4, {135} , {136} , {137} , {138} , {139} , {140} )) 
CompTreeTablePage.bas[94]  view1.AddRow(BuildLev3Footer1(3, {141} , {142} , {143} , {144} , {145} , {146} )) 
CompTreeTablePage.bas[95]  view1.AddRow(BuildLev3Header(3, {147} , {148} , {149} , {150} ,Array As String( {151} ), {152} , 0)) 
CompTreeTablePage.bas[96]  view1.AddRow(BuildLev4Body2(4, {153} , {154} , {155} , {156} )) 
CompTreeTablePage.bas[97]  view1.AddRow(BuildLev4Body2(4, {157} , {158} , {159} , {160} )) 
CompTreeTablePage.bas[98]  view1.AddRow(BuildLev3Footer2(3, {161} , {162} , {163} , {164} )) 
CompTreeTablePage.bas[99]  view1.AddRow(BuildLev3Header(3, {165} , {166} , {167} , {168} ,Array As String(), {169} , 0)) 
CompTreeTablePage.bas[100]  view1.AddRow(BuildLev4Body5(4, {170} , {171} , {172} , 50.8500, 2.8833)) 
CompTreeTablePage.bas[101]  view1.AddRow(BuildLev3Footer2(3, {173} , {174} , {175} , {176} )) 
CompTreeTablePage.bas[102]  view1.AddRow(BuildLev2Footer(2, {177} , {178} , {179} )) 
CompTreeTablePage.bas[103]  
CompTreeTablePage.bas[104]  PlusParents.Put( {180} , NewPlusStructure( {181} , 2)) 
CompTreeTablePage.bas[105]  
CompTreeTablePage.bas[106]  view1.AddRow(BuildLev2Header1(2, {182} , {183} , {184} , {185} , DateTime.Date(DateTime.Now))) 
CompTreeTablePage.bas[107]  view1.AddRow(BuildLev3Header(3, {186} , {187} , {188} , {189} ,Array As String( {190} ), {191} , 1)) 
CompTreeTablePage.bas[108]  view1.AddRow(BuildLev4Body1(4, {192} , {193} , {194} , {195} , {196} , {197} )) 
CompTreeTablePage.bas[109]  view1.AddRow(BuildLev3Footer1(3, {198} , {199} , {200} , {201} , {202} , {203} )) 
CompTreeTablePage.bas[110]  view1.AddRow(BuildLev3Header(3, {204} , {205} , {206} , {207} ,Array As String( {208} ), {209} , 0)) 
CompTreeTablePage.bas[111]  view1.AddRow(BuildLev4Body2(4, {210} , {211} , {212} , {213} )) 
CompTreeTablePage.bas[112]  view1.AddRow(BuildLev3Footer2(3, {214} , {215} , {216} , {217} )) 
CompTreeTablePage.bas[113]  view1.AddRow(BuildLev3Header(3, {218} , {219} , {220} , {221} ,Array As String(), {222} , 0)) 
CompTreeTablePage.bas[114]  view1.AddRow(BuildLev4Body3(4, {223} , {224} , {225} , {226} , {227} , {228} )) 
CompTreeTablePage.bas[115]  view1.AddRow(BuildLev3Footer2(3, {229} , {230} , {231} , {232} )) 
CompTreeTablePage.bas[116]  view1.AddRow(BuildLev2Footer(2, {233} , {234} , {235} )) 
CompTreeTablePage.bas[117]  
CompTreeTablePage.bas[118]  PlusParents.Put( {236} , NewPlusStructure( {237} , 1)) 
CompTreeTablePage.bas[119]  
CompTreeTablePage.bas[120]  view1.AddRow(BuildLev2Header1(2, {238} , {239} , {240} , {241} , DateTime.Date(DateTime.Now))) 
CompTreeTablePage.bas[121]  view1.AddRow(BuildLev3Header(3, {242} , {243} , {244} , {245} ,Array As String( {246} ), {247} , 1)) 
CompTreeTablePage.bas[122]  view1.AddRow(BuildLev4Body1(4, {248} , {249} , {250} , {251} , {252} , {253} )) 
CompTreeTablePage.bas[123]  view1.AddRow(BuildLev4Body1(4, {254} , {255} , {256} , {257} , {258} , {259} )) 
CompTreeTablePage.bas[124]  view1.AddRow(BuildLev4Body1(4, {260} , {261} , {262} , {263} , {264} , {265} )) 
CompTreeTablePage.bas[125]  view1.AddRow(BuildLev3Footer1(3, {266} , {267} , {268} , {269} , {270} , {271} )) 
CompTreeTablePage.bas[126]  view1.AddRow(BuildLev3Header(3, {272} , {273} , {274} , {275} ,Array As String( {276} ), {277} , 0)) 
CompTreeTablePage.bas[127]  view1.AddRow(BuildLev4Body2(4, {278} , {279} , {280} , {281} )) 
CompTreeTablePage.bas[128]  view1.AddRow(BuildLev3Footer2(3, {282} , {283} , {284} , {285} )) 
CompTreeTablePage.bas[129]  view1.AddRow(BuildLev3Header(3, {286} , {287} , {288} , {289} ,Array As String(), {290} , 0)) 
CompTreeTablePage.bas[130]  view1.AddRow(BuildLev4Body3(4, {291} , {292} , {293} , {294} , {295} , {296} )) 
CompTreeTablePage.bas[131]  view1.AddRow(BuildLev3Footer2(3, {297} , {298} , {299} , {300} )) 
CompTreeTablePage.bas[132]  view1.AddRow(BuildLev2Footer(2, {301} , {302} , {303} )) 
CompTreeTablePage.bas[133]  
CompTreeTablePage.bas[134]  PlusParents.Put( {304} , NewPlusStructure( {305} , 4)) 
CompTreeTablePage.bas[135]  
CompTreeTablePage.bas[136]  view1.AddRow(BuildLev1Footer(1, {306} , {307} , {308} )) 
CompTreeTablePage.bas[137]  
CompTreeTablePage.bas[138]  view1.AddRow(BuildLev1Header(1, {309} , {310} , {311} , {312} )) 
CompTreeTablePage.bas[139]  view1.AddRow(BuildLev2Header1(2, {313} , {314} , {315} , {316} , DateTime.Date(DateTime.Now))) 
CompTreeTablePage.bas[140]  view1.AddRow(BuildLev3Header(3, {317} , {318} , {319} , {320} ,Array As String( {321} ), {322} , 1)) 
CompTreeTablePage.bas[141]  view1.AddRow(BuildLev4Body1(4, {323} , {324} , {325} , {326} , {327} , {328} )) 
CompTreeTablePage.bas[142]  view1.AddRow(BuildLev4Body1(4, {329} , {330} , {331} , {332} , {333} , {334} )) 
CompTreeTablePage.bas[143]  view1.AddRow(BuildLev3Footer1(3, {335} , {336} , {337} , {338} , {339} , {340} )) 
CompTreeTablePage.bas[144]  view1.AddRow(BuildLev3Header(3, {341} , {342} , {343} , {344} ,Array As String( {345} ), {346} , 0)) 
CompTreeTablePage.bas[145]  view1.AddRow(BuildLev4Body2(4, {347} , {348} , {349} , {350} )) 
CompTreeTablePage.bas[146]  view1.AddRow(BuildLev4Body2(4, {351} , {352} , {353} , {354} )) 
CompTreeTablePage.bas[147]  view1.AddRow(BuildLev3Footer2(3, {355} , {356} , {357} , {358} )) 
CompTreeTablePage.bas[148]  
CompTreeTablePage.bas[149]  view1.AddRow(BuildLev2Footer(2, {359} , {360} , {361} )) 
CompTreeTablePage.bas[150]  
CompTreeTablePage.bas[151]  PlusParents.Put( {362} , NewPlusStructure( {363} , 3)) 
CompTreeTablePage.bas[152]  
CompTreeTablePage.bas[153]  view1.AddRow(BuildLev1Footer(1, {364} , {365} , {366} )) 
CompTreeTablePage.bas[154]  
CompTreeTablePage.bas[155]  view1.Refresh 
CompTreeTablePage.bas[156] End Sub 
CompTreeTablePage.bas[157]  
CompTreeTablePage.bas[158] Sub NewPlusStructure(Prefix As String, NextValue As Int) As PlusStructure 
CompTreeTablePage.bas[159]  Dim ps As PlusStructure 
CompTreeTablePage.bas[160]  ps.Initialize 
CompTreeTablePage.bas[161]  ps.Prefix = Prefix 
CompTreeTablePage.bas[162]  ps.NextValue = NextValue 
CompTreeTablePage.bas[163]  Return ps 
CompTreeTablePage.bas[164] End Sub 
CompTreeTablePage.bas[165]  
CompTreeTablePage.bas[166] Private Sub WebSocket_Disconnected 
CompTreeTablePage.bas[167]  Log( {367} ) 
CompTreeTablePage.bas[168] End Sub 
CompTreeTablePage.bas[169]  
CompTreeTablePage.bas[170] Sub Page_ParseEvent(Params As Map) 
CompTreeTablePage.bas[171]  Dim eventName As String = Params.Get( {368} ) 
CompTreeTablePage.bas[172]  Dim eventParams() As String = Regex.Split( {369} ,Params.Get( {370} )) 
CompTreeTablePage.bas[173]  If eventName = {371} Then 
CompTreeTablePage.bas[174]  Log( {372} ) 
CompTreeTablePage.bas[175]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompTreeTablePage.bas[176]  Return 
CompTreeTablePage.bas[177]  End If 
CompTreeTablePage.bas[178]  If SubExists(Me, eventName) Then 
CompTreeTablePage.bas[179]  Params.Remove( {373} ) 
CompTreeTablePage.bas[180]  Params.Remove( {374} ) 
CompTreeTablePage.bas[181]  Select Case Params.Size 
CompTreeTablePage.bas[182]  Case 0 
CompTreeTablePage.bas[183]  CallSub(Me, eventName) 
CompTreeTablePage.bas[184]  Case 1 
CompTreeTablePage.bas[185]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompTreeTablePage.bas[186]  Case 2 
CompTreeTablePage.bas[187]  If Params.get(eventParams(0)) = {375} Then 
CompTreeTablePage.bas[188]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompTreeTablePage.bas[189]  CallSub2(Me, eventName, PassedTables) 
CompTreeTablePage.bas[190]  Else 
CompTreeTablePage.bas[191]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompTreeTablePage.bas[192]  End If 
CompTreeTablePage.bas[193]  Case Else 
CompTreeTablePage.bas[194]  ' cannot be called directly, to many param 
CompTreeTablePage.bas[195]  CallSub2(Me, eventName, Params) 
CompTreeTablePage.bas[196]  End Select 
CompTreeTablePage.bas[197]  End If 
CompTreeTablePage.bas[198] End Sub 
CompTreeTablePage.bas[199]  
CompTreeTablePage.bas[200] public Sub BuildTheme() 
CompTreeTablePage.bas[201]  ' start with the base theme defined in ABMShared 
CompTreeTablePage.bas[202]  theme.Initialize( {376} ) 
CompTreeTablePage.bas[203]  theme.AddABMTheme(ABMShared.MyTheme) 
CompTreeTablePage.bas[204]  
CompTreeTablePage.bas[205]  ' add additional themes specific for this page 
CompTreeTablePage.bas[206]  theme.AddTreeTableTheme( {377} ) 
CompTreeTablePage.bas[207]  theme.TreeTable( {378} ).AddCellTheme( {379} ) 
CompTreeTablePage.bas[208]  
CompTreeTablePage.bas[209]  theme.TreeTable( {380} ).Cell( {381} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompTreeTablePage.bas[210]  theme.TreeTable( {382} ).Cell( {383} ).BackColorIntensity = ABM.INTENSITY_DARKEN3 
CompTreeTablePage.bas[211]  theme.TreeTable( {384} ).Cell( {385} ).ForeColor = ABM.COLOR_WHITE 
CompTreeTablePage.bas[212]  theme.TreeTable( {386} ).Cell( {387} ).IsEditable = True 
CompTreeTablePage.bas[213]  
CompTreeTablePage.bas[214]  theme.TreeTable( {388} ).AddCellTheme( {389} ) 
CompTreeTablePage.bas[215]  theme.TreeTable( {390} ).Cell( {391} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompTreeTablePage.bas[216]  theme.TreeTable( {392} ).Cell( {393} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN2 
CompTreeTablePage.bas[217]  
CompTreeTablePage.bas[218]  theme.TreeTable( {394} ).AddCellTheme( {395} ) 
CompTreeTablePage.bas[219]  theme.TreeTable( {396} ).Cell( {397} ).BackColor = ABM.COLOR_LIGHTBLUE 
CompTreeTablePage.bas[220]  theme.TreeTable( {398} ).Cell( {399} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
CompTreeTablePage.bas[221]  
CompTreeTablePage.bas[222]  theme.TreeTable( {400} ).AddCellTheme( {401} ) 
CompTreeTablePage.bas[223]  theme.TreeTable( {402} ).Cell( {403} ).BackColor = ABM.COLOR_LIGHTGREEN 
CompTreeTablePage.bas[224]  theme.TreeTable( {404} ).Cell( {405} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
CompTreeTablePage.bas[225]  
CompTreeTablePage.bas[226]  theme.TreeTable( {406} ).AddCellTheme( {407} ) 
CompTreeTablePage.bas[227]  theme.TreeTable( {408} ).Cell( {409} ).BackColor = ABM.COLOR_ORANGE 
CompTreeTablePage.bas[228]  theme.TreeTable( {410} ).Cell( {411} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
CompTreeTablePage.bas[229]  
CompTreeTablePage.bas[230]  theme.TreeTable( {412} ).AddCellTheme( {413} ) 
CompTreeTablePage.bas[231]  theme.TreeTable( {414} ).Cell( {415} ).BackColor = ABM.COLOR_PURPLE 
CompTreeTablePage.bas[232]  theme.TreeTable( {416} ).Cell( {417} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
CompTreeTablePage.bas[233]  
CompTreeTablePage.bas[234]  theme.TreeTable( {418} ).AddCellTheme( {419} ) 
CompTreeTablePage.bas[235]  theme.TreeTable( {420} ).Cell( {421} ).BackColor = ABM.COLOR_WHITE 
CompTreeTablePage.bas[236]  
CompTreeTablePage.bas[237]  theme.TreeTable( {422} ).AddCellTheme( {423} ) 
CompTreeTablePage.bas[238]  theme.TreeTable( {424} ).Cell( {425} ).BackColor = ABM.COLOR_WHITE 
CompTreeTablePage.bas[239]  theme.TreeTable( {426} ).Cell( {427} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
CompTreeTablePage.bas[240]  
CompTreeTablePage.bas[241]  theme.TreeTable( {428} ).AddCellTheme( {429} ) 
CompTreeTablePage.bas[242]  theme.TreeTable( {430} ).Cell( {431} ).BackColor = ABM.COLOR_AMBER 
CompTreeTablePage.bas[243]  theme.TreeTable( {432} ).Cell( {433} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
CompTreeTablePage.bas[244]  
CompTreeTablePage.bas[245]  theme.TreeTable( {434} ).AddTreeIconColorTheme( {435} ) 
CompTreeTablePage.bas[246]  theme.TreeTable( {436} ).TreeIconColor( {437} ).ForeColor = ABM.COLOR_WHITE 
CompTreeTablePage.bas[247]  
CompTreeTablePage.bas[248]  theme.AddChartTheme( {438} ) 
CompTreeTablePage.bas[249]  theme.Chart( {439} ).Serie(ABM.CHART_SERIEINDEX_C).LinePointStrokeWidthPx=8 
CompTreeTablePage.bas[250]  theme.Chart( {440} ).Serie(ABM.CHART_SERIEINDEX_C).LineStrokeWidthPx=5 
CompTreeTablePage.bas[251]  
CompTreeTablePage.bas[252]  ' bluegray button 
CompTreeTablePage.bas[253]  theme.AddButtonTheme( {441} ) 
CompTreeTablePage.bas[254]  theme.Button( {442} ).BackColor = ABM.COLOR_BLUEGREY 
CompTreeTablePage.bas[255]  theme.Button( {443} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompTreeTablePage.bas[256] End Sub 
CompTreeTablePage.bas[257]  
CompTreeTablePage.bas[258] public Sub BuildPage() 
CompTreeTablePage.bas[259]  ' initialize the theme 
CompTreeTablePage.bas[260]  BuildTheme 
CompTreeTablePage.bas[261]  
CompTreeTablePage.bas[262]  ' initialize this page using our theme 
CompTreeTablePage.bas[263]  page.InitializeWithTheme(Name, {444} & ABMshared.AppName & {445} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompTreeTablePage.bas[264]  page.ShowLoader=True 
CompTreeTablePage.bas[265]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompTreeTablePage.bas[266]  page.PageTitle = {446} 
CompTreeTablePage.bas[267]  page.PageDescription = {447} 
CompTreeTablePage.bas[268]  page.PageHTMLName = {448} 
CompTreeTablePage.bas[269]  page.PageKeywords = {449} 
CompTreeTablePage.bas[270]  page.PageSiteMapPriority = {450} 
CompTreeTablePage.bas[271]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompTreeTablePage.bas[272]  'page.NeedsChart=True ' needed because we're going to add charts in our tree later 
CompTreeTablePage.bas[273]  'page.NeedsGoogleMap=True ' needed because we're going to add google maps in our tree later 
CompTreeTablePage.bas[274]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompTreeTablePage.bas[275]  
CompTreeTablePage.bas[276]  ' adding a navigation bar 
CompTreeTablePage.bas[277]  ABMShared.BuildNavigationBar(page, {451} , {452} , {453} , {454} , {455} ) 
CompTreeTablePage.bas[278]  
CompTreeTablePage.bas[279]  ' create the page grid 
CompTreeTablePage.bas[280]  page.AddRows(6,True, {456} ).AddCells12(1, {457} ) 
CompTreeTablePage.bas[281]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompTreeTablePage.bas[282]  
CompTreeTablePage.bas[283]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompTreeTablePage.bas[284]  'page.NeedsCodeLabel = True 
CompTreeTablePage.bas[285]  
CompTreeTablePage.bas[286]  ABMShared.BuildFooter(page) 
CompTreeTablePage.bas[287] End Sub 
CompTreeTablePage.bas[288]  
CompTreeTablePage.bas[289] Sub ConnectPage() 
CompTreeTablePage.bas[290]  PlusParents.Initialize 
CompTreeTablePage.bas[291]  'NEW 
CompTreeTablePage.bas[292]  ABMShared.ConnectNavigationBar(page) 
CompTreeTablePage.bas[293]  
CompTreeTablePage.bas[294]  ' add paragraph 
CompTreeTablePage.bas[295]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {458} , {459} ) ) 
CompTreeTablePage.bas[296]  ' add paragraph 
CompTreeTablePage.bas[297]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {460} , {461} ) ) 
CompTreeTablePage.bas[298]  
CompTreeTablePage.bas[299]  ' build an empty example tree 
CompTreeTablePage.bas[300]  Dim view1 As ABMTreeTable 
CompTreeTablePage.bas[301]  view1.Initialize(page, {462} , False, {463} , 20, Array As String( {464} , {465} , {466} , {467} ), 24) 
CompTreeTablePage.bas[302]  view1.CollapseTooltip = {468} 
CompTreeTablePage.bas[303]  view1.ExpandTooltip = {469} 
CompTreeTablePage.bas[304]  
CompTreeTablePage.bas[305]  page.CellR(1,1).AddComponent(view1) 
CompTreeTablePage.bas[306]  
CompTreeTablePage.bas[307] ' Dim btnGetSign As ABMButton 
CompTreeTablePage.bas[308] ' btnGetSign.InitializeRaised(page, {470} , {471} , {472} , {473} , {474} ) 
CompTreeTablePage.bas[309] ' page.CellR(1,1).AddComponent(btnGetSign) 
CompTreeTablePage.bas[310]  
CompTreeTablePage.bas[311]  ' also add the components to the footer 
CompTreeTablePage.bas[312]  ABMShared.ConnectFooter(page) 
CompTreeTablePage.bas[313]  
CompTreeTablePage.bas[314]  page.Refresh ' IMPORTANT 
CompTreeTablePage.bas[315]  
CompTreeTablePage.bas[316]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompTreeTablePage.bas[317]  page.FinishedLoading 'IMPORTANT 
CompTreeTablePage.bas[318]  
CompTreeTablePage.bas[319]  LoadTree 
CompTreeTablePage.bas[320]  
CompTreeTablePage.bas[321]  Dim view1 As ABMTreeTable = page.Component( {475} ) 
CompTreeTablePage.bas[322]  view1.Expand( {476} ) 
CompTreeTablePage.bas[323]  
CompTreeTablePage.bas[324]  page.RestoreNavigationBarPosition 
CompTreeTablePage.bas[325] End Sub 
CompTreeTablePage.bas[326]  
CompTreeTablePage.bas[327] Sub BuildLev1Header(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, Stad As String) As ABMtreeTableRow 
CompTreeTablePage.bas[328]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[329]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {477} , {478} , {479} ) 
CompTreeTablePage.bas[330]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[331]  cell1.Initalize( {480} & treeRowId & {481} , Stad, 1,24, False, {482} ) 
CompTreeTablePage.bas[332]  l.Addcell(cell1) 
CompTreeTablePage.bas[333]  Return l 
CompTreeTablePage.bas[334] End Sub 
CompTreeTablePage.bas[335]  
CompTreeTablePage.bas[336] Sub BuildLev1Footer(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String) As ABMtreeTableRow 
CompTreeTablePage.bas[337]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[338]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {483} , {484} , {485} ) 
CompTreeTablePage.bas[339]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[340]  cell1.InitalizeAsIcon( {486} & treeRowId & {487} , {488} , {489} , 3,3, {490} ) 
CompTreeTablePage.bas[341]  l.addcell(cell1) 
CompTreeTablePage.bas[342]  Return l 
CompTreeTablePage.bas[343] End Sub 
CompTreeTablePage.bas[344]  
CompTreeTablePage.bas[345] Sub BuildLev2Header1(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, Straat As String, Datum As String) As ABMtreeTableRow 
CompTreeTablePage.bas[346]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[347]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {491} , {492} , {493} ) 
CompTreeTablePage.bas[348]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[349]  cell1.Initalize( {494} & treeRowId & {495} , Straat, 2,12, False, {496} ) 
CompTreeTablePage.bas[350]  l.addcell(cell1) 
CompTreeTablePage.bas[351]  Dim cell2 As ABMTreeTableCell 
CompTreeTablePage.bas[352]  cell2.Initalize( {497} & treeRowId & {498} , Datum, 14,10, False, {499} ) 
CompTreeTablePage.bas[353]  l.addcell(cell2) 
CompTreeTablePage.bas[354]  Return l 
CompTreeTablePage.bas[355] End Sub 
CompTreeTablePage.bas[356]  
CompTreeTablePage.bas[357] Sub BuildLev2Footer(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String) As ABMtreeTableRow 
CompTreeTablePage.bas[358]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[359]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {500} , {501} , {502} ) 
CompTreeTablePage.bas[360]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[361]  cell1.InitalizeAsIcon( {503} & treeRowId & {504} , {505} , {506} , 4,3, {507} ) 
CompTreeTablePage.bas[362]  l.addcell(cell1) 
CompTreeTablePage.bas[363]  Return l 
CompTreeTablePage.bas[364] End Sub 
CompTreeTablePage.bas[365]  
CompTreeTablePage.bas[366] Sub BuildLev3Header(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, soort As String, DragDropNames As List, overruleTheme As String, sortIndex As Int) As ABMtreeTableRow 
CompTreeTablePage.bas[367]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[368]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {508} , {509} , overruleTheme) 
CompTreeTablePage.bas[369]  If sortIndex > 0 Then 
CompTreeTablePage.bas[370]  l.SortChildrenOn(sortIndex) 
CompTreeTablePage.bas[371]  End If 
CompTreeTablePage.bas[372]  l.SetCanReceiveDropsFrom(DragDropNames) 
CompTreeTablePage.bas[373]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[374]  cell1.Initalize( {510} & treeRowId & {511} , soort, 3,21, False, {512} ) 
CompTreeTablePage.bas[375]  l.Addcell(cell1) 
CompTreeTablePage.bas[376]  Return l 
CompTreeTablePage.bas[377] End Sub 
CompTreeTablePage.bas[378]  
CompTreeTablePage.bas[379] Sub BuildLev3Footer1(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, pers As String, time As String, overruleTheme As String) As ABMtreeTableRow 
CompTreeTablePage.bas[380]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[381]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {513} , {514} , overruleTheme) 
CompTreeTablePage.bas[382]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[383]  cell1.Initalize( {515} & treeRowId & {516} , pers, 4,3, False, {517} ) 
CompTreeTablePage.bas[384]  l.Addcell(cell1) 
CompTreeTablePage.bas[385]  Dim cell2 As ABMTreeTableCell 
CompTreeTablePage.bas[386]  cell2.Initalize( {518} & treeRowId & {519} , time, 16,4, False, {520} ) 
CompTreeTablePage.bas[387]  l.Addcell(cell2) 
CompTreeTablePage.bas[388]  Return l 
CompTreeTablePage.bas[389] End Sub 
CompTreeTablePage.bas[390]  
CompTreeTablePage.bas[391] Sub BuildLev3Footer2(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, overruleTheme As String) As ABMtreeTableRow 
CompTreeTablePage.bas[392]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[393]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {521} , {522} , overruleTheme) 
CompTreeTablePage.bas[394]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[395]  cell1.Initalize( {523} & treeRowId & {524} , {525} , 4,3, False, {526} ) 
CompTreeTablePage.bas[396]  l.Addcell(cell1) 
CompTreeTablePage.bas[397]  Return l 
CompTreeTablePage.bas[398]  
CompTreeTablePage.bas[399] End Sub 
CompTreeTablePage.bas[400]  
CompTreeTablePage.bas[401] Sub BuildLev4Body1(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, Code As String, Naam As String, Hours As String) As ABMtreeTableRow 
CompTreeTablePage.bas[402]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[403]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {527} , {528} , {529} ) 
CompTreeTablePage.bas[404]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[405]  cell1.Initalize( {530} & treeRowId & {531} , Code, 4,3, False, {532} ) 
CompTreeTablePage.bas[406]  l.Addcell(cell1) 
CompTreeTablePage.bas[407]  Dim cell2 As ABMTreeTableCell 
CompTreeTablePage.bas[408]  cell2.Initalize( {533} & treeRowId & {534} , Naam, 8,6, False, {535} ) 
CompTreeTablePage.bas[409]  l.Addcell(cell2) 
CompTreeTablePage.bas[410]  Dim cell3 As ABMTreeTableCell 
CompTreeTablePage.bas[411]  cell3.Initalize( {536} & treeRowId & {537} , Hours, 15,2, False, {538} ) 
CompTreeTablePage.bas[412]  l.Addcell(cell3) 
CompTreeTablePage.bas[413]  
CompTreeTablePage.bas[414]  Dim cell4 As ABMTreeTableCell 
CompTreeTablePage.bas[415]  Dim btnEdit As ABMButton 
CompTreeTablePage.bas[416]  btnEdit.InitializeFloating(page, treeRowId, {539} , {540} ) 
CompTreeTablePage.bas[417]  btnEdit.size = ABM.BUTTONSIZE_SMALL 
CompTreeTablePage.bas[418]  cell4.InitalizeAsComponent( {541} & treeRowId & {542} , btnEdit, {543} , 18,1, {544} ) 
CompTreeTablePage.bas[419]  l.Addcell(cell4) 
CompTreeTablePage.bas[420]  
CompTreeTablePage.bas[421]  Dim cell5 As ABMTreeTableCell 
CompTreeTablePage.bas[422]  Dim btnDelete As ABMButton 
CompTreeTablePage.bas[423]  btnDelete.InitializeFloating(page, treeRowId, {545} , {546} ) 
CompTreeTablePage.bas[424]  btnDelete.size = ABM.BUTTONSIZE_SMALL 
CompTreeTablePage.bas[425]  cell5.InitalizeAsComponent( {547} & treeRowId & {548} , btnDelete, {549} , 19,1, {550} ) 
CompTreeTablePage.bas[426]  l.Addcell(cell5) 
CompTreeTablePage.bas[427]  
CompTreeTablePage.bas[428]  Return l 
CompTreeTablePage.bas[429] End Sub 
CompTreeTablePage.bas[430]  
CompTreeTablePage.bas[431] Sub BuildLev4Body2(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, Artikel As String) As ABMtreeTableRow 
CompTreeTablePage.bas[432]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[433]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {551} , {552} , {553} ) 
CompTreeTablePage.bas[434]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[435]  cell1.Initalize( {554} & treeRowId & {555} , Artikel, 4,19, False, {556} ) 
CompTreeTablePage.bas[436]  l.Addcell(cell1) 
CompTreeTablePage.bas[437]  Return l 
CompTreeTablePage.bas[438] End Sub 
CompTreeTablePage.bas[439]  
CompTreeTablePage.bas[440] Sub BuildLev4Body3(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, Artikel As String, aantal As String, eenheid As String) As ABMtreeTableRow 
CompTreeTablePage.bas[441]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[442]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {557} , {558} , {559} ) 
CompTreeTablePage.bas[443]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[444]  cell1.Initalize( {560} & treeRowId & {561} , Artikel, 4,9, False, {562} ) 
CompTreeTablePage.bas[445]  l.Addcell(cell1) 
CompTreeTablePage.bas[446]  Dim cell2 As ABMTreeTableCell 
CompTreeTablePage.bas[447]  cell2.Initalize( {563} & treeRowId & {564} , aantal, 15,2, False, {565} ) 
CompTreeTablePage.bas[448]  l.Addcell(cell2) 
CompTreeTablePage.bas[449]  Dim cell3 As ABMTreeTableCell 
CompTreeTablePage.bas[450]  cell3.Initalize( {566} & treeRowId & {567} , eenheid, 17,3, False, {568} ) 
CompTreeTablePage.bas[451]  l.Addcell(cell3) 
CompTreeTablePage.bas[452]  Return l 
CompTreeTablePage.bas[453] End Sub 
CompTreeTablePage.bas[454]  
CompTreeTablePage.bas[455] Sub BuildLev4Body4(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, values1 As List, values2 As List) As ABMtreeTableRow 
CompTreeTablePage.bas[456]  ' create a line chart 
CompTreeTablePage.bas[457]  Dim chart1 As ABMChart 
CompTreeTablePage.bas[458]  chart1.Initialize(page, treeRowId, ABM.CHART_TYPELINE, ABM.CHART_RATIO_GOLDENSECTION, {569} ) 
CompTreeTablePage.bas[459]  
CompTreeTablePage.bas[460]  ' add the labels 
CompTreeTablePage.bas[461]  chart1.AddLabels(Array As String( {570} , {571} , {572} , {573} , {574} , {575} , {576} )) 
CompTreeTablePage.bas[462]  ' set some options 
CompTreeTablePage.bas[463]  chart1.OptionsLine.FullWidth=True 
CompTreeTablePage.bas[464]  chart1.OptionsLine.ChartPaddingRight=60 ' because we set fullwidth, we have to adjust so the final label also fits 
CompTreeTablePage.bas[465]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_A).LineSmooth = ABM.CHART_LINESMOOTH_NONE 
CompTreeTablePage.bas[466]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).LineSmooth = ABM.CHART_LINESMOOTH_SIMPLE 
CompTreeTablePage.bas[467]  chart1.OptionsLine.Serie(ABM.CHART_SERIEINDEX_C).ShowArea = True 
CompTreeTablePage.bas[468]  
CompTreeTablePage.bas[469]  ' add some series 
CompTreeTablePage.bas[470]  Dim SerieA As ABMChartSerie 
CompTreeTablePage.bas[471]  SerieA.InitializeForLine(ABM.CHART_SERIEINDEX_A) 
CompTreeTablePage.bas[472]  SerieA.SetValues(values1) 
CompTreeTablePage.bas[473]  chart1.AddSerie(SerieA) 
CompTreeTablePage.bas[474]  
CompTreeTablePage.bas[475]  Dim SerieC As ABMChartSerie 
CompTreeTablePage.bas[476]  SerieC.InitializeForLine(ABM.CHART_SERIEINDEX_C) 
CompTreeTablePage.bas[477]  SerieC.SetValues(values2) 
CompTreeTablePage.bas[478]  chart1.AddSerie(SerieC) 
CompTreeTablePage.bas[479]  
CompTreeTablePage.bas[480]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[481]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {577} , {578} , {579} ) 
CompTreeTablePage.bas[482]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[483]  cell1.InitalizeAsComponent( {580} & treeRowId & {581} , chart1, {582} , 4,19, {583} ) 
CompTreeTablePage.bas[484]  l.Addcell(cell1) 
CompTreeTablePage.bas[485]  Return l 
CompTreeTablePage.bas[486] End Sub 
CompTreeTablePage.bas[487]  
CompTreeTablePage.bas[488] Sub BuildLev4Body5(depth As Int, treeRowId As String, treeRowParentId As String, IsFooterForId As String, lat As Double, lng As Double) As ABMtreeTableRow 
CompTreeTablePage.bas[489]  ' create the google map 
CompTreeTablePage.bas[490]  Dim gm1 As ABMGoogleMap 
CompTreeTablePage.bas[491]  gm1.Initialize(page, treeRowId, lat, lng, 15, 350, ABM.GOOGLEMAPTYPE_ROADMAP) 
CompTreeTablePage.bas[492]  gm1.Draggable = False 
CompTreeTablePage.bas[493]  gm1.HasMapTypeControl = True 
CompTreeTablePage.bas[494]  gm1.HasStreetViewControl = True 
CompTreeTablePage.bas[495]  gm1.HasZoomControl = True 
CompTreeTablePage.bas[496]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_ROADMAP) 
CompTreeTablePage.bas[497]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_TERRAIN) 
CompTreeTablePage.bas[498]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_HYBRID) 
CompTreeTablePage.bas[499]  gm1.AddMapType(ABM.GOOGLEMAPTYPE_SATELLITE) 
CompTreeTablePage.bas[500]  
CompTreeTablePage.bas[501]  Dim l As ABMtreeTableRow 
CompTreeTablePage.bas[502]  l.Initialize(depth, treeRowId, treeRowParentId, IsFooterForId, {584} , {585} , {586} ) 
CompTreeTablePage.bas[503]  Dim cell1 As ABMTreeTableCell 
CompTreeTablePage.bas[504]  cell1.InitalizeAsComponent( {587} & treeRowId & {588} , gm1, {589} , 4,19, {590} ) 
CompTreeTablePage.bas[505]  l.Addcell(cell1) 
CompTreeTablePage.bas[506]  Return l 
CompTreeTablePage.bas[507] End Sub 
CompTreeTablePage.bas[508]  
CompTreeTablePage.bas[509] ' clicked on the navigation bar 
CompTreeTablePage.bas[510] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompTreeTablePage.bas[511]  page.SaveNavigationBarPosition 
CompTreeTablePage.bas[512]  If Action = {591} Then Return 
CompTreeTablePage.bas[513]  If Action = {592} Then 
CompTreeTablePage.bas[514]  myToastId = myToastId + 1 
CompTreeTablePage.bas[515]  page.ShowToast( {593} & myToastId, {594} , {595} , 5000) 
CompTreeTablePage.bas[516]  Return 
CompTreeTablePage.bas[517]  End If 
CompTreeTablePage.bas[518]  If Action = {596} Then 
CompTreeTablePage.bas[519]  ABMShared.LogOff(page) 
CompTreeTablePage.bas[520]  Return 
CompTreeTablePage.bas[521]  End If 
CompTreeTablePage.bas[522]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompTreeTablePage.bas[523] End Sub 
CompTreeTablePage.bas[524]  
CompTreeTablePage.bas[525] Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompTreeTablePage.bas[526]  
CompTreeTablePage.bas[527] End Sub 
CompTreeTablePage.bas[528]  
CompTreeTablePage.bas[529] Sub Page_ToastClicked(ToastId As String, Action As String) 
CompTreeTablePage.bas[530]  
CompTreeTablePage.bas[531] End Sub 
CompTreeTablePage.bas[532]  
CompTreeTablePage.bas[533] Sub Page_ToastDismissed(ToastId As String) 
CompTreeTablePage.bas[534]  
CompTreeTablePage.bas[535] End Sub 
CompTreeTablePage.bas[536]  
CompTreeTablePage.bas[537] ' event raised when node is expanded by the user so maybe som children (like a ABMGoogleMap) needs to be refreshed 
CompTreeTablePage.bas[538] Sub View1_NeedsRefreshChildren(rowId As String) 
CompTreeTablePage.bas[539]  Dim view1 As ABMTreeTable = page.Component( {597} ) 
CompTreeTablePage.bas[540]  view1.RefreshChildren(rowId) 
CompTreeTablePage.bas[541] End Sub 
CompTreeTablePage.bas[542]  
CompTreeTablePage.bas[543] ' the user clicked on a row 
CompTreeTablePage.bas[544] Sub view1_Clicked(TreeRowId As String, TreeCellId As String) 
CompTreeTablePage.bas[545]  
CompTreeTablePage.bas[546]  ' did he click on a plus, let him add the values of the new row 
CompTreeTablePage.bas[547]  If PlusParents.ContainsKey(TreeRowId) Then 
CompTreeTablePage.bas[548]  Dim ps As PlusStructure = PlusParents.Get(TreeRowId) 
CompTreeTablePage.bas[549]  
CompTreeTablePage.bas[550]  ' here you can show a modal sheet where the user adds new data in the browser 
CompTreeTablePage.bas[551]  ' after saving the modal sheet, add the new data in the database and add a new leaf 
CompTreeTablePage.bas[552]  
CompTreeTablePage.bas[553]  Log( {598} & ps.Prefix & {599} & ps.NextValue) 
CompTreeTablePage.bas[554]  
CompTreeTablePage.bas[555]  Dim view1 As ABMTreeTable = page.Component( {600} ) 
CompTreeTablePage.bas[556]  DateTime.timeFormat = {601} 
CompTreeTablePage.bas[557]  view1.AddRow(BuildLev4Body1(4, ps.Prefix & {602} & ps.NextValue, ps.Prefix, {603} , {604} , DateTime.time(DateTime.Now), {605} )) 
CompTreeTablePage.bas[558]  ps.NextValue = ps.NextValue + 1 
CompTreeTablePage.bas[559]  PlusParents.Put(TreeRowId, ps) 
CompTreeTablePage.bas[560]  view1.Refresh 
CompTreeTablePage.bas[561]  End If 
CompTreeTablePage.bas[562]  
CompTreeTablePage.bas[563] End Sub 
CompTreeTablePage.bas[564]  
CompTreeTablePage.bas[565] Sub view1_Dropped(Params As Map) 
CompTreeTablePage.bas[566]  Dim Success As Boolean = Params.Get( {606} ) 
CompTreeTablePage.bas[567]  Dim TreeRowId As String = Params.Get( {607} ) 
CompTreeTablePage.bas[568]  Dim FromTreeRowID As String = Params.get( {608} ) 
CompTreeTablePage.bas[569]  Dim OnTreeRowID As String = Params.get( {609} ) 
CompTreeTablePage.bas[570]  Log( {610} & TreeRowId & {611} & FromTreeRowID & {612} & OnTreeRowID & {613} & Success) 
CompTreeTablePage.bas[571]  
CompTreeTablePage.bas[572]  Dim view1 As ABMTreeTable = page.Component( {614} ) 
CompTreeTablePage.bas[573]  view1.Sync(TreeRowId, FromTreeRowID, OnTreeRowID) ' IMPORTANT so the tree in memory is the same as the tree in the browser 
CompTreeTablePage.bas[574] End Sub 
CompTreeTablePage.bas[575]  
CompTreeTablePage.bas[576] ' here a sheet can be shown to let the user modify the row 
CompTreeTablePage.bas[577] Sub btnEdit_Clicked(Target As String) 
CompTreeTablePage.bas[578]  ' get the current row form the Target btnEdit1_1_1_1 -> 1_1_1_1 
CompTreeTablePage.bas[579]  Dim currRow As String = ABMShared.Mid2(Target, 8) 
CompTreeTablePage.bas[580]  Log( {615} & currRow) 
CompTreeTablePage.bas[581]  
CompTreeTablePage.bas[582]  ' do your stuff in the database 
CompTreeTablePage.bas[583]  
CompTreeTablePage.bas[584]  ' change it in the tree 
CompTreeTablePage.bas[585]  Dim view1 As ABMTreeTable = page.Component( {616} ) 
CompTreeTablePage.bas[586]  DateTime.timeFormat = {617} 
CompTreeTablePage.bas[587]  view1.SetString(currRow, 2, DateTime.time(DateTime.Now)) 
CompTreeTablePage.bas[588]  ' refresh, only what is changed will be refreshed 
CompTreeTablePage.bas[589]  view1.Refresh 
CompTreeTablePage.bas[590] End Sub 
CompTreeTablePage.bas[591]  
CompTreeTablePage.bas[592] Sub btnDelete_Clicked(Target As String) 
CompTreeTablePage.bas[593]  ' get the current row form the Target btnDelete1_1_1_1 -> 1_1_1_1 
CompTreeTablePage.bas[594]  Dim currRow As String = ABMShared.Mid2(Target, 10) 
CompTreeTablePage.bas[595]  Log( {618} & currRow) 
CompTreeTablePage.bas[596]  
CompTreeTablePage.bas[597]  ' do your stuff in the database 
CompTreeTablePage.bas[598]  
CompTreeTablePage.bas[599]  
CompTreeTablePage.bas[600]  ' delete it in the tree 
CompTreeTablePage.bas[601]  Dim view1 As ABMTreeTable = page.Component( {619} ) 
CompTreeTablePage.bas[602]  view1.RemoveRow(currRow) 
CompTreeTablePage.bas[603]  ' refresh, only what is changed will be refreshed 
CompTreeTablePage.bas[604]  view1.Refresh 
CompTreeTablePage.bas[605] End Sub 
CompTreeTablePage.bas[606]  
CompTreeTablePage.bas[607] 'Sub btnPrint_Clicked(Target As String) 
CompTreeTablePage.bas[608] ' Log( {620} ) 
CompTreeTablePage.bas[609] ' 
CompTreeTablePage.bas[610] ' 'page.ws.RunFunction( {621} , Null) 
CompTreeTablePage.bas[611] ' 'page.ws.Flush 
CompTreeTablePage.bas[612] ' 
CompTreeTablePage.bas[613] ' Dim view1 As ABMTreeTable = page.Component( {622} ) 
CompTreeTablePage.bas[614] ' PDFName = {623} & DateTime.Now 
CompTreeTablePage.bas[615] ' ABMPrint.PrintToPDF(page, Me, theme, {624} , view1, File.DirApp, PDFName & {625} ) 
CompTreeTablePage.bas[616] 'End Sub 
CompTreeTablePage.bas[617] ' 
CompTreeTablePage.bas[618] 'public Sub PDFCreated() 
CompTreeTablePage.bas[619] ' Dim lbl As ABMLabel 
CompTreeTablePage.bas[620] ' lbl.Initialize(page, {626} & PDFName, {627} & PDFName & {628} & {629} , ABM.SIZE_H6, False, {630} ) 
CompTreeTablePage.bas[621] ' page.Cell(6,1).AddComponent(lbl) 
CompTreeTablePage.bas[622] ' page.Row(6).Refresh 
CompTreeTablePage.bas[623] 'End Sub 
CompTreeTablePage.bas[624]  
Analysing: CompUploadPage.bas
CompUploadPage.bas[0] ﻿Type=Class 
CompUploadPage.bas[0] Version=4.7 
CompUploadPage.bas[0] ModulesStructureVersion=1 
CompUploadPage.bas[0] B4J=true 
CompUploadPage.bas[0] @EndOfDesignText@ 
CompUploadPage.bas[1] 'Class module 
CompUploadPage.bas[2] Sub Class_Globals 
CompUploadPage.bas[3]  Private ws As WebSocket 'ignore 
CompUploadPage.bas[4]  ' will hold our page information 
CompUploadPage.bas[5]  Public page As ABMPage 
CompUploadPage.bas[6]  ' page theme 
CompUploadPage.bas[7]  Private theme As ABMTheme 
CompUploadPage.bas[8]  ' to access the constants 
CompUploadPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompUploadPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompUploadPage.bas[11]  Public Name As String = {4} 
CompUploadPage.bas[12]  Private ABMPageId As String = {5} 
CompUploadPage.bas[13]  ' the download folder 
CompUploadPage.bas[14]  Public DownloadFolder As String = {6} & ABMShared.AppName & {7} 
CompUploadPage.bas[15]  Public DownloadMaxSize As String = 100*1024 
CompUploadPage.bas[16]  
CompUploadPage.bas[17]  ' your own variables 
CompUploadPage.bas[18]  Dim myToastId As Int 
CompUploadPage.bas[19] End Sub 
CompUploadPage.bas[20]  
CompUploadPage.bas[21] 'Initializes the object. You can add parameters to this method if needed. 
CompUploadPage.bas[22] Public Sub Initialize 
CompUploadPage.bas[23]  ' build the local structure IMPORTANT! 
CompUploadPage.bas[24]  BuildPage 
CompUploadPage.bas[25] End Sub 
CompUploadPage.bas[26]  
CompUploadPage.bas[27] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompUploadPage.bas[28]  Log( {8} ) 
CompUploadPage.bas[29]  ws = WebSocket1 
CompUploadPage.bas[30]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompUploadPage.bas[31]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompUploadPage.bas[32]  
CompUploadPage.bas[33]  If ABMShared.NeedsAuthorization Then 
CompUploadPage.bas[34]  If session.GetAttribute2( {9} , {10} ) = {11} Then 
CompUploadPage.bas[35]  ABMShared.NavigateToPage(ws, ABMPageId, {12} ) 
CompUploadPage.bas[36]  Return 
CompUploadPage.bas[37]  End If 
CompUploadPage.bas[38]  End If 
CompUploadPage.bas[39]  
CompUploadPage.bas[40]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompUploadPage.bas[41]  If page.ComesFromPageCache Then 
CompUploadPage.bas[42]  ' refresh the page 
CompUploadPage.bas[43]  page.Refresh 
CompUploadPage.bas[44]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompUploadPage.bas[45]  page.FinishedLoading 
CompUploadPage.bas[46]  Else 
CompUploadPage.bas[47]  ' Prepare the page 
CompUploadPage.bas[48]  page.Prepare 
CompUploadPage.bas[49]  ' load the dynamic content 
CompUploadPage.bas[50]  ConnectPage 
CompUploadPage.bas[51]  End If 
CompUploadPage.bas[52]  Log(ABMPageId) 
CompUploadPage.bas[53]  ' this page uses uploads, so needs some settings 
CompUploadPage.bas[54]  ws.Session.SetAttribute( {13} , Me) 
CompUploadPage.bas[55]  ws.Session.SetAttribute( {14} , DownloadFolder) 
CompUploadPage.bas[56]  ws.Session.SetAttribute( {15} , DownloadMaxSize) 
CompUploadPage.bas[57] End Sub 
CompUploadPage.bas[58]  
CompUploadPage.bas[59] Private Sub WebSocket_Disconnected 
CompUploadPage.bas[60]  Log( {16} ) 
CompUploadPage.bas[61]  ' and remove them again 
CompUploadPage.bas[62]  Try 
CompUploadPage.bas[63]  ws.Session.RemoveAttribute( {17} ) 
CompUploadPage.bas[64]  ws.Session.RemoveAttribute( {18} ) 
CompUploadPage.bas[65]  ws.Session.RemoveAttribute( {19} ) 
CompUploadPage.bas[66]  Catch 
CompUploadPage.bas[67]  Log(LastException.Message) 
CompUploadPage.bas[68]  End Try 
CompUploadPage.bas[69] End Sub 
CompUploadPage.bas[70]  
CompUploadPage.bas[71] Sub Page_ParseEvent(Params As Map) 
CompUploadPage.bas[72]  Dim eventName As String = Params.Get( {20} ) 
CompUploadPage.bas[73]  Dim eventParams() As String = Regex.Split( {21} ,Params.Get( {22} )) 
CompUploadPage.bas[74]  If eventName = {23} Then 
CompUploadPage.bas[75]  Log( {24} ) 
CompUploadPage.bas[76]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompUploadPage.bas[77]  Return 
CompUploadPage.bas[78]  End If 
CompUploadPage.bas[79]  If SubExists(Me, eventName) Then 
CompUploadPage.bas[80]  Params.Remove( {25} ) 
CompUploadPage.bas[81]  Params.Remove( {26} ) 
CompUploadPage.bas[82]  Select Case Params.Size 
CompUploadPage.bas[83]  Case 0 
CompUploadPage.bas[84]  CallSub(Me, eventName) 
CompUploadPage.bas[85]  Case 1 
CompUploadPage.bas[86]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompUploadPage.bas[87]  Case 2 
CompUploadPage.bas[88]  If Params.get(eventParams(0)) = {27} Then 
CompUploadPage.bas[89]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompUploadPage.bas[90]  CallSub2(Me, eventName, PassedTables) 
CompUploadPage.bas[91]  Else 
CompUploadPage.bas[92]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompUploadPage.bas[93]  End If 
CompUploadPage.bas[94]  Case Else 
CompUploadPage.bas[95]  ' cannot be called directly, to many param 
CompUploadPage.bas[96]  CallSub2(Me, eventName, Params) 
CompUploadPage.bas[97]  End Select 
CompUploadPage.bas[98]  End If 
CompUploadPage.bas[99] End Sub 
CompUploadPage.bas[100]  
CompUploadPage.bas[101] public Sub BuildTheme() 
CompUploadPage.bas[102]  ' start with the base theme defined in ABMShared 
CompUploadPage.bas[103]  theme.Initialize( {28} ) 
CompUploadPage.bas[104]  theme.AddABMTheme(ABMShared.MyTheme) 
CompUploadPage.bas[105]  
CompUploadPage.bas[106]  ' add additional themes specific for this page 
CompUploadPage.bas[107]  ' another toast theme 
CompUploadPage.bas[108]  theme.AddToastTheme( {29} ) 
CompUploadPage.bas[109]  theme.Toast( {30} ).Rounded = True 
CompUploadPage.bas[110]  theme.Toast( {31} ).ActionForeColor = ABM.COLOR_BLACK 
CompUploadPage.bas[111]  theme.Toast( {32} ).BackColor = ABM.COLOR_GREEN 
CompUploadPage.bas[112]  
CompUploadPage.bas[113]  theme.AddUploadTheme( {33} ) 
CompUploadPage.bas[114]  theme.Upload( {34} ).ErrorColor = ABM.COLOR_RED 
CompUploadPage.bas[115] End Sub 
CompUploadPage.bas[116]  
CompUploadPage.bas[117] public Sub BuildPage() 
CompUploadPage.bas[118]  ' initialize the theme 
CompUploadPage.bas[119]  BuildTheme 
CompUploadPage.bas[120]  
CompUploadPage.bas[121]  ' initialize this page using our theme 
CompUploadPage.bas[122]  page.InitializeWithTheme(Name, {35} & ABMshared.AppName & {36} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompUploadPage.bas[123]  page.ShowLoader=True 
CompUploadPage.bas[124]  page.PageTitle = {37} 
CompUploadPage.bas[125]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompUploadPage.bas[126]  page.PageDescription = {38} 
CompUploadPage.bas[127]  page.PageHTMLName = {39} 
CompUploadPage.bas[128]  page.PageKeywords = {40} 
CompUploadPage.bas[129]  page.PageSiteMapPriority = {41} 
CompUploadPage.bas[130]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompUploadPage.bas[131]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompUploadPage.bas[132]  
CompUploadPage.bas[133]  ABMShared.BuildNavigationBar(page, {42} , {43} , {44} , {45} , {46} ) 
CompUploadPage.bas[134]  
CompUploadPage.bas[135]  ' create the page grid 
CompUploadPage.bas[136]  page.AddRows(7,True, {47} ).AddCells12(1, {48} ) 
CompUploadPage.bas[137]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompUploadPage.bas[138]  
CompUploadPage.bas[139]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompUploadPage.bas[140]  'page.NeedsCodeLabel = True 
CompUploadPage.bas[141]  
CompUploadPage.bas[142]  ABMShared.BuildFooter(page) 
CompUploadPage.bas[143] End Sub 
CompUploadPage.bas[144]  
CompUploadPage.bas[145] Sub ConnectPage() 
CompUploadPage.bas[146]  'NEW 
CompUploadPage.bas[147]  ABMShared.ConnectNavigationBar(page) 
CompUploadPage.bas[148]  
CompUploadPage.bas[149]  ' add paragraph 
CompUploadPage.bas[150]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} )) 
CompUploadPage.bas[151]  
CompUploadPage.bas[152]  ' create the upload 
CompUploadPage.bas[153]  Dim upload1 As ABMUpload 
CompUploadPage.bas[154]  upload1.Initialize(page, {51} , {52} , {53} , {54} ) 
CompUploadPage.bas[155]  page.Cell(2,1).AddComponent(upload1) 
CompUploadPage.bas[156]  
CompUploadPage.bas[157]  ' add codeblock 
CompUploadPage.bas[158]  Dim code As String = {0} 
CompUploadPage.bas[162]  
CompUploadPage.bas[163]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {55} , code)) 
CompUploadPage.bas[164]  
CompUploadPage.bas[165]  ' add paragraph 
CompUploadPage.bas[166]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {56} , {57} )) 
CompUploadPage.bas[167]  
CompUploadPage.bas[168]  ' add codeblock 
CompUploadPage.bas[169]  code = {1} 
CompUploadPage.bas[178]  
CompUploadPage.bas[179]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {58} , code)) 
CompUploadPage.bas[180]  
CompUploadPage.bas[181]  ' add paragraph 
CompUploadPage.bas[182]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {59} , {60} )) 
CompUploadPage.bas[183]  
CompUploadPage.bas[184]  ' add codeblock 
CompUploadPage.bas[185]  code = {2} 
CompUploadPage.bas[189]  
CompUploadPage.bas[190]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {61} , code)) 
CompUploadPage.bas[191]  ' add codeblock 
CompUploadPage.bas[192]  code = {3} 
CompUploadPage.bas[200]  
CompUploadPage.bas[201]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {62} , code)) 
CompUploadPage.bas[202]  
CompUploadPage.bas[203]  ' also add the components to the footer 
CompUploadPage.bas[204]  ABMShared.ConnectFooter(page) 
CompUploadPage.bas[205]  
CompUploadPage.bas[206]  page.Refresh ' IMPORTANT 
CompUploadPage.bas[207]  
CompUploadPage.bas[208]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompUploadPage.bas[209]  page.FinishedLoading 'IMPORTANT 
CompUploadPage.bas[210]  
CompUploadPage.bas[211]  page.RestoreNavigationBarPosition 
CompUploadPage.bas[212] End Sub 
CompUploadPage.bas[213]  
CompUploadPage.bas[214] ' clicked on the navigation bar 
CompUploadPage.bas[215] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompUploadPage.bas[216]  page.SaveNavigationBarPosition 
CompUploadPage.bas[217]  If Action = {63} Then Return 
CompUploadPage.bas[218]  If Action = {64} Then 
CompUploadPage.bas[219]  myToastId = myToastId + 1 
CompUploadPage.bas[220]  page.ShowToast( {65} & myToastId, {66} , {67} , 5000) 
CompUploadPage.bas[221]  Return 
CompUploadPage.bas[222]  End If 
CompUploadPage.bas[223]  If Action = {68} Then 
CompUploadPage.bas[224]  ABMShared.LogOff(page) 
CompUploadPage.bas[225]  Return 
CompUploadPage.bas[226]  End If 
CompUploadPage.bas[227]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompUploadPage.bas[228] End Sub 
CompUploadPage.bas[229]  
CompUploadPage.bas[230] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompUploadPage.bas[231]  page.ws.Session.SetAttribute( {69} , {70} ) 
CompUploadPage.bas[232]  page.ws.Session.SetAttribute( {71} , {72} ) 
CompUploadPage.bas[233]  page.ws.Session.SetAttribute( {73} , {74} ) 
CompUploadPage.bas[234]  ABMShared.NavigateToPage(ws, ABMPageId, {75} ) 
CompUploadPage.bas[235] End Sub 
CompUploadPage.bas[236]  
CompUploadPage.bas[237] Sub Page_FileUploaded(FileName As String, success As Boolean) 
CompUploadPage.bas[238]  myToastId = myToastId + 1 
CompUploadPage.bas[239]  If success Then 
CompUploadPage.bas[240]  page.ShowToast( {76} & myToastId, {77} , {78} & FileName & {79} , 5000) 
CompUploadPage.bas[241]  Else 
CompUploadPage.bas[242]  page.ShowToast( {80} & myToastId, {81} , {82} & FileName & {83} , 5000) 
CompUploadPage.bas[243]  End If 
CompUploadPage.bas[244]  page.ws.Flush ' IMPORTANT 
CompUploadPage.bas[245] End Sub 
Analysing: CompVideoPage.bas
CompVideoPage.bas[0] ﻿Type=Class 
CompVideoPage.bas[0] Version=4.7 
CompVideoPage.bas[0] ModulesStructureVersion=1 
CompVideoPage.bas[0] B4J=true 
CompVideoPage.bas[0] @EndOfDesignText@ 
CompVideoPage.bas[1] 'Class module 
CompVideoPage.bas[2] Sub Class_Globals 
CompVideoPage.bas[3]  Private ws As WebSocket 'ignore 
CompVideoPage.bas[4]  ' will hold our page information 
CompVideoPage.bas[5]  Public page As ABMPage 
CompVideoPage.bas[6]  ' page theme 
CompVideoPage.bas[7]  Private theme As ABMTheme 
CompVideoPage.bas[8]  ' to access the constants 
CompVideoPage.bas[9]  Private ABM As ABMaterial 'ignore 
CompVideoPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
CompVideoPage.bas[11]  Public Name As String = {1} 
CompVideoPage.bas[12]  ' will hold the unique browsers window id 
CompVideoPage.bas[13]  Private ABMPageId As String = {2} 
CompVideoPage.bas[14]  
CompVideoPage.bas[15]  ' your own variables 
CompVideoPage.bas[16]  Dim Origin As String = {3} '<--- IMPORTANT for youtube videos. Set here your website address 
CompVideoPage.bas[17]  Dim myToastId As Int 
CompVideoPage.bas[18]  
CompVideoPage.bas[19]  Dim IsPlaying As Boolean = False 
CompVideoPage.bas[20]  Dim IsMuted As Boolean = False 
CompVideoPage.bas[21]  Dim Volume As Int = 100 
CompVideoPage.bas[22]  Dim InitialVideo As Boolean = True 
CompVideoPage.bas[23]  
CompVideoPage.bas[24]  Dim IsPlaying5 As Boolean = False 
CompVideoPage.bas[25]  Dim IsMuted5 As Boolean = False 
CompVideoPage.bas[26]  Dim Volume5 As Int = 100 
CompVideoPage.bas[27]  Dim InitialVideo5 As Boolean = True 
CompVideoPage.bas[28] End Sub 
CompVideoPage.bas[29]  
CompVideoPage.bas[30] 'Initializes the object. You can add parameters to this method if needed. 
CompVideoPage.bas[31] Public Sub Initialize 
CompVideoPage.bas[32]  ' build the local structure IMPORTANT! 
CompVideoPage.bas[33]  BuildPage 
CompVideoPage.bas[34] End Sub 
CompVideoPage.bas[35]  
CompVideoPage.bas[36] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
CompVideoPage.bas[37]  Log( {4} ) 
CompVideoPage.bas[38]  ws = WebSocket1 
CompVideoPage.bas[39]  ABMPageId = ABM.GetPageID(page, Name,ws) 
CompVideoPage.bas[40]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
CompVideoPage.bas[41]  
CompVideoPage.bas[42]  If ABMShared.NeedsAuthorization Then 
CompVideoPage.bas[43]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
CompVideoPage.bas[44]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
CompVideoPage.bas[45]  Return 
CompVideoPage.bas[46]  End If 
CompVideoPage.bas[47]  End If 
CompVideoPage.bas[48]  
CompVideoPage.bas[49]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
CompVideoPage.bas[50]  If page.ComesFromPageCache Then 
CompVideoPage.bas[51]  ' refresh the page 
CompVideoPage.bas[52]  page.Refresh 
CompVideoPage.bas[53]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompVideoPage.bas[54]  page.FinishedLoading 
CompVideoPage.bas[55]  Else 
CompVideoPage.bas[56]  ' Prepare the page 
CompVideoPage.bas[57]  page.Prepare 
CompVideoPage.bas[58]  ' load the dynamic content 
CompVideoPage.bas[59]  ConnectPage 
CompVideoPage.bas[60]  End If 
CompVideoPage.bas[61]  Log(ABMPageId) 
CompVideoPage.bas[62] End Sub 
CompVideoPage.bas[63]  
CompVideoPage.bas[64] Private Sub WebSocket_Disconnected 
CompVideoPage.bas[65]  Log( {9} ) 
CompVideoPage.bas[66] End Sub 
CompVideoPage.bas[67]  
CompVideoPage.bas[68] Sub Page_ParseEvent(Params As Map) 
CompVideoPage.bas[69]  Dim eventName As String = Params.Get( {10} ) 
CompVideoPage.bas[70]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
CompVideoPage.bas[71]  If eventName = {13} Then 
CompVideoPage.bas[72]  Log( {14} ) 
CompVideoPage.bas[73]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
CompVideoPage.bas[74]  Return 
CompVideoPage.bas[75]  End If 
CompVideoPage.bas[76]  If SubExists(Me, eventName) Then 
CompVideoPage.bas[77]  Params.Remove( {15} ) 
CompVideoPage.bas[78]  Params.Remove( {16} ) 
CompVideoPage.bas[79]  Select Case Params.Size 
CompVideoPage.bas[80]  Case 0 
CompVideoPage.bas[81]  CallSub(Me, eventName) 
CompVideoPage.bas[82]  Case 1 
CompVideoPage.bas[83]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
CompVideoPage.bas[84]  Case 2 
CompVideoPage.bas[85]  If Params.get(eventParams(0)) = {17} Then 
CompVideoPage.bas[86]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
CompVideoPage.bas[87]  CallSub2(Me, eventName, PassedTables) 
CompVideoPage.bas[88]  Else 
CompVideoPage.bas[89]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
CompVideoPage.bas[90]  End If 
CompVideoPage.bas[91]  Case Else 
CompVideoPage.bas[92]  ' cannot be called directly, to many param 
CompVideoPage.bas[93]  CallSub2(Me, eventName, Params) 
CompVideoPage.bas[94]  End Select 
CompVideoPage.bas[95]  End If 
CompVideoPage.bas[96] End Sub 
CompVideoPage.bas[97]  
CompVideoPage.bas[98] public Sub BuildTheme() 
CompVideoPage.bas[99]  ' start with the base theme defined in ABMShared 
CompVideoPage.bas[100]  theme.Initialize( {18} ) 
CompVideoPage.bas[101]  theme.AddABMTheme(ABMShared.MyTheme) 
CompVideoPage.bas[102]  
CompVideoPage.bas[103]  ' add additional themes specific for this page 
CompVideoPage.bas[104]  ' bluegray button 
CompVideoPage.bas[105]  theme.AddButtonTheme( {19} ) 
CompVideoPage.bas[106]  theme.Button( {20} ).BackColor = ABM.COLOR_BLUEGREY 
CompVideoPage.bas[107]  theme.Button( {21} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompVideoPage.bas[108]  
CompVideoPage.bas[109]  ' darkred button 
CompVideoPage.bas[110]  theme.AddButtonTheme( {22} ) 
CompVideoPage.bas[111]  theme.Button( {23} ).BackColor = ABM.COLOR_RED 
CompVideoPage.bas[112]  theme.Button( {24} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
CompVideoPage.bas[113]  
CompVideoPage.bas[114]  theme.AddCellTheme( {25} ) 
CompVideoPage.bas[115]  theme.Cell( {26} ).Align = ABM.CELL_ALIGN_CENTER 
CompVideoPage.bas[116] End Sub 
CompVideoPage.bas[117]  
CompVideoPage.bas[118] public Sub BuildPage() 
CompVideoPage.bas[119]  ' initialize the theme 
CompVideoPage.bas[120]  BuildTheme 
CompVideoPage.bas[121]  
CompVideoPage.bas[122]  ' initialize this page using our theme 
CompVideoPage.bas[123]  page.InitializeWithTheme(Name, {27} & ABMShared.AppName & {28} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
CompVideoPage.bas[124]  page.ShowLoader=True 
CompVideoPage.bas[125]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
CompVideoPage.bas[126]  page.PageTitle = {29} 
CompVideoPage.bas[127]  page.PageDescription = {30} 
CompVideoPage.bas[128]  page.PageHTMLName = {31} 
CompVideoPage.bas[129]  page.PageKeywords = {32} 
CompVideoPage.bas[130]  page.PageSiteMapPriority = {33} 
CompVideoPage.bas[131]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
CompVideoPage.bas[132]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
CompVideoPage.bas[133]  
CompVideoPage.bas[134]  ABMShared.BuildNavigationBar(page, {34} , {35} , {36} , {37} , {38} ) 
CompVideoPage.bas[135]  
CompVideoPage.bas[136]  ' create the page grid 
CompVideoPage.bas[137]  page.AddRows(18,True, {39} ).AddCells12(1, {40} ) 
CompVideoPage.bas[138]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
CompVideoPage.bas[139]  
CompVideoPage.bas[140]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
CompVideoPage.bas[141]  'page.NeedsCodeLabel = True 
CompVideoPage.bas[142]  
CompVideoPage.bas[143]  ABMShared.BuildFooter(page) 
CompVideoPage.bas[144] End Sub 
CompVideoPage.bas[145]  
CompVideoPage.bas[146] Sub ConnectPage() 
CompVideoPage.bas[147]  'NEW 
CompVideoPage.bas[148]  ABMShared.ConnectNavigationBar(page) 
CompVideoPage.bas[149]  
CompVideoPage.bas[150]  ' add paragraph 
CompVideoPage.bas[151]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {41} , {42} )) 
CompVideoPage.bas[152]  
CompVideoPage.bas[153]  ' add header 
CompVideoPage.bas[154]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {43} , {44} )) 
CompVideoPage.bas[155]  
CompVideoPage.bas[156]  ' add paragraph 
CompVideoPage.bas[157]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {45} , {46} )) 
CompVideoPage.bas[158]  
CompVideoPage.bas[159]  ' add Youtube video 
CompVideoPage.bas[160]  Dim video1 As ABMVideo 
CompVideoPage.bas[161]  video1.InitializeYoutube(page, {47} , {48} , Origin, True, False, True,100) 
CompVideoPage.bas[162]  page.Cell(2,1).AddComponent(video1) 
CompVideoPage.bas[163]  
CompVideoPage.bas[164]  ' add codeblock 
CompVideoPage.bas[165]  Dim code1 As StringBuilder 
CompVideoPage.bas[166]  code1.Initialize 
CompVideoPage.bas[167]  code1.Append( {49} ).Append(CRLF) 
CompVideoPage.bas[168]  code1.Append( {50} ).Append(CRLF) 
CompVideoPage.bas[169]  code1.Append( {209} ).Append(CRLF) 
CompVideoPage.bas[170]  code1.Append( {58} ).Append(CRLF) 
CompVideoPage.bas[171]  
CompVideoPage.bas[172]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {59} , code1)) 
CompVideoPage.bas[173]  
CompVideoPage.bas[174]  ' add paragraph 
CompVideoPage.bas[175]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {60} , {61} )) 
CompVideoPage.bas[176]  
CompVideoPage.bas[177]  ' add Youtube video 
CompVideoPage.bas[178]  Dim video1b As ABMVideo 
CompVideoPage.bas[179]  video1b.InitializeYoutube(page, {62} , {63} , Origin, False, False, False, 100) 
CompVideoPage.bas[180]  page.Cell(5,1).AddComponent(video1b) 
CompVideoPage.bas[181]  
CompVideoPage.bas[182]  ' add youtube controls 
CompVideoPage.bas[183]  Dim btnPlay As ABMButton 
CompVideoPage.bas[184]  btnPlay.Initializefloating(page, {64} , {65} , {66} ) 
CompVideoPage.bas[185]  page.Cell(6,1).AddComponent(btnPlay) 
CompVideoPage.bas[186]  
CompVideoPage.bas[187]  Dim btnStop As ABMButton 
CompVideoPage.bas[188]  btnStop.Initializefloating(page, {67} , {68} , {69} ) 
CompVideoPage.bas[189]  page.Cell(6,1).AddComponent(btnStop) 
CompVideoPage.bas[190]  
CompVideoPage.bas[191]  Dim btnMute As ABMButton 
CompVideoPage.bas[192]  btnMute.Initializefloating(page, {70} , {71} , {72} ) 
CompVideoPage.bas[193]  page.Cell(6,1).AddComponent(btnMute) 
CompVideoPage.bas[194]  
CompVideoPage.bas[195]  Dim btnVolumeDown As ABMButton 
CompVideoPage.bas[196]  btnVolumeDown.Initializefloating(page, {73} , {74} , {75} ) 
CompVideoPage.bas[197]  page.Cell(6,1).AddComponent(btnVolumeDown) 
CompVideoPage.bas[198]  
CompVideoPage.bas[199]  Dim btnVolumeUp As ABMButton 
CompVideoPage.bas[200]  btnVolumeUp.Initializefloating(page, {76} , {77} , {78} ) 
CompVideoPage.bas[201]  page.Cell(6,1).AddComponent(btnVolumeUp) 
CompVideoPage.bas[202]  
CompVideoPage.bas[203]  Dim btn As ABMButton 
CompVideoPage.bas[204]  btn.InitializeRaised(page, {79} , {80} , {81} , {82} , {83} ) 
CompVideoPage.bas[205]  page.Cell(6,1).AddComponent(btn) 
CompVideoPage.bas[206]  
CompVideoPage.bas[207]  ' add header 
CompVideoPage.bas[208]  page.Cell(8,1).AddComponent(ABMShared.BuildHeader(page, {84} , {85} )) 
CompVideoPage.bas[209]  
CompVideoPage.bas[210]  ' add paragraph 
CompVideoPage.bas[211]  page.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {86} , {87} )) 
CompVideoPage.bas[212]  
CompVideoPage.bas[213]  ' add HTML5 video 
CompVideoPage.bas[214]  Dim video2 As ABMVideo 
CompVideoPage.bas[215]  video2.InitializeHTML5(page, {88} , {89} , False, {90} ) 
CompVideoPage.bas[216]  page.Cell(9,1).AddComponent(video2) 
CompVideoPage.bas[217]  
CompVideoPage.bas[218]  ' add youtube controls 
CompVideoPage.bas[219]  Dim btnPlay5 As ABMButton 
CompVideoPage.bas[220]  btnPlay5.Initializefloating(page, {91} , {92} , {93} ) 
CompVideoPage.bas[221]  page.Cell(10,1).AddComponent(btnPlay5) 
CompVideoPage.bas[222]  
CompVideoPage.bas[223]  Dim btnStop5 As ABMButton 
CompVideoPage.bas[224]  btnStop5.Initializefloating(page, {94} , {95} , {96} ) 
CompVideoPage.bas[225]  page.Cell(10,1).AddComponent(btnStop5) 
CompVideoPage.bas[226]  
CompVideoPage.bas[227]  Dim btnMute5 As ABMButton 
CompVideoPage.bas[228]  btnMute5.Initializefloating(page, {97} , {98} , {99} ) 
CompVideoPage.bas[229]  page.Cell(10,1).AddComponent(btnMute5) 
CompVideoPage.bas[230]  
CompVideoPage.bas[231]  Dim btnVolumeDown5 As ABMButton 
CompVideoPage.bas[232]  btnVolumeDown5.Initializefloating(page, {100} , {101} , {102} ) 
CompVideoPage.bas[233]  page.Cell(10,1).AddComponent(btnVolumeDown5) 
CompVideoPage.bas[234]  
CompVideoPage.bas[235]  Dim btnVolumeUp5 As ABMButton 
CompVideoPage.bas[236]  btnVolumeUp5.Initializefloating(page, {103} , {104} , {105} ) 
CompVideoPage.bas[237]  page.Cell(10,1).AddComponent(btnVolumeUp5) 
CompVideoPage.bas[238]  
CompVideoPage.bas[239]  Dim btn5 As ABMButton 
CompVideoPage.bas[240]  btn5.InitializeRaised(page, {106} , {107} , {108} , {109} , {110} ) 
CompVideoPage.bas[241]  page.Cell(10,1).AddComponent(btn5) 
CompVideoPage.bas[242]  
CompVideoPage.bas[243]  ' add codeblock 
CompVideoPage.bas[244]  Dim code2 As StringBuilder 
CompVideoPage.bas[245]  code2.Initialize 
CompVideoPage.bas[246]  code2.Append( {111} ).Append(CRLF) 
CompVideoPage.bas[247]  code2.Append( {112} ).Append(CRLF) 
CompVideoPage.bas[248]  code2.Append( {215} ).Append(CRLF) 
CompVideoPage.bas[249]  code2.Append( {120} ).Append(CRLF) 
CompVideoPage.bas[250]  
CompVideoPage.bas[251]  page.Cell(11,1).AddComponent(ABMShared.BuildCodeBlock(page, {121} , code2)) 
CompVideoPage.bas[252]  
CompVideoPage.bas[253]  ' add header 
CompVideoPage.bas[254]  page.Cell(12,1).AddComponent(ABMShared.BuildHeader(page, {122} , {123} )) 
CompVideoPage.bas[255]  
CompVideoPage.bas[256]  ' add paragraph 
CompVideoPage.bas[257]  page.Cell(12,1).AddComponent(ABMShared.BuildParagraph(page, {124} , {125} )) 
CompVideoPage.bas[258]  
CompVideoPage.bas[259]  ' add Vimeo video 
CompVideoPage.bas[260]  Dim video4 As ABMVideo 
CompVideoPage.bas[261]  video4.InitializeVimeo(page, {126} , {127} ,False, True) 
CompVideoPage.bas[262]  page.Cell(13,1).AddComponent(video4) 
CompVideoPage.bas[263]  
CompVideoPage.bas[264]  ' add codeblock 
CompVideoPage.bas[265]  Dim code4 As String = {0} 
CompVideoPage.bas[269]  page.Cell(14,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {128} , code4)) 
CompVideoPage.bas[270]  
CompVideoPage.bas[271]  ' add header 
CompVideoPage.bas[272]  page.Cell(15,1).AddComponent(ABMShared.BuildHeader(page, {129} , {130} )) 
CompVideoPage.bas[273]  
CompVideoPage.bas[274]  ' add paragraph 
CompVideoPage.bas[275]  page.Cell(15,1).AddComponent(ABMShared.BuildParagraph(page, {131} , {132} )) 
CompVideoPage.bas[276]  
CompVideoPage.bas[277]  ' add HTML5 video 
CompVideoPage.bas[278]  Dim video3 As ABMVideo 
CompVideoPage.bas[279]  video3.InitializeHTML5(page, {133} , {134} , True, {135} ) 
CompVideoPage.bas[280]  video3.SetFixedSize(320, 200) 
CompVideoPage.bas[281]  page.Cell(16,1).UseTheme( {136} ) 
CompVideoPage.bas[282]  page.Cell(16,1).AddComponent(video3) 
CompVideoPage.bas[283]  
CompVideoPage.bas[284]  ' add codeblock 
CompVideoPage.bas[285]  Dim code3 As StringBuilder 
CompVideoPage.bas[286]  code3.Initialize 
CompVideoPage.bas[287]  code3.Append( {137} ).Append(CRLF) 
CompVideoPage.bas[288]  code3.Append( {138} ).Append(CRLF) 
CompVideoPage.bas[289]  code3.Append( {221} ).Append(CRLF) 
CompVideoPage.bas[290]  code3.Append( {146} ).Append(CRLF) 
CompVideoPage.bas[291]  code3.Append( {147} ).Append(CRLF) 
CompVideoPage.bas[292]  
CompVideoPage.bas[293]  page.Cell(17,1).AddComponent(ABMShared.BuildCodeBlock(page, {148} , code3)) 
CompVideoPage.bas[294]  
CompVideoPage.bas[295]  ' also add the components to the footer 
CompVideoPage.bas[296]  ABMShared.ConnectFooter(page) 
CompVideoPage.bas[297]  
CompVideoPage.bas[298]  page.Refresh ' IMPORTANT 
CompVideoPage.bas[299]  
CompVideoPage.bas[300]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
CompVideoPage.bas[301]  page.FinishedLoading 'IMPORTANT 
CompVideoPage.bas[302]  
CompVideoPage.bas[303]  page.RestoreNavigationBarPosition 
CompVideoPage.bas[304] End Sub 
CompVideoPage.bas[305]  
CompVideoPage.bas[306] Sub video1b_YouTubeStateChanged(State As Int) 
CompVideoPage.bas[307]  Select Case State 
CompVideoPage.bas[308]  Case ABM.YOUTUBESTATE_PLAYING 
CompVideoPage.bas[309]  IsPlaying = True 
CompVideoPage.bas[310]  Dim btnPlay As ABMButton = page.Component( {149} ) 
CompVideoPage.bas[311]  btnPlay.IconName = {150} 
CompVideoPage.bas[312]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[313]  Case ABM.YOUTUBESTATE_VIDEOCUED 
CompVideoPage.bas[314]  Dim video As ABMVideo = page.Component( {151} ) 
CompVideoPage.bas[315]  video.Play 
CompVideoPage.bas[316]  Case Else 
CompVideoPage.bas[317]  If IsPlaying Then 
CompVideoPage.bas[318]  IsPlaying = False 
CompVideoPage.bas[319]  Dim btnPlay As ABMButton = page.Component( {152} ) 
CompVideoPage.bas[320]  btnPlay.IconName = {153} 
CompVideoPage.bas[321]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[322]  End If 
CompVideoPage.bas[323]  End Select 
CompVideoPage.bas[324] End Sub 
CompVideoPage.bas[325]  
CompVideoPage.bas[326] Sub btn_Clicked(Target As String) 
CompVideoPage.bas[327]  Dim button As ABMButton = page.Component( {154} ) 
CompVideoPage.bas[328]  Dim video As ABMVideo = page.Component( {155} ) 
CompVideoPage.bas[329]  If InitialVideo Then 
CompVideoPage.bas[330]  button.Text = {156} 
CompVideoPage.bas[331]  InitialVideo = False 
CompVideoPage.bas[332]  video.LoadVideoYouTube( {157} ) 
CompVideoPage.bas[333]  Else 
CompVideoPage.bas[334]  button.Text = {158} 
CompVideoPage.bas[335]  InitialVideo = True 
CompVideoPage.bas[336]  video.LoadVideoYouTube( {159} ) 
CompVideoPage.bas[337]  End If 
CompVideoPage.bas[338]  button.refresh ' IMPORTANT 
CompVideoPage.bas[339] End Sub 
CompVideoPage.bas[340]  
CompVideoPage.bas[341] Sub btnPlay_Clicked(Target As String) 
CompVideoPage.bas[342]  Dim video As ABMVideo = page.Component( {160} ) 
CompVideoPage.bas[343]  If IsPlaying Then 
CompVideoPage.bas[344]  video.Pause 
CompVideoPage.bas[345]  Else 
CompVideoPage.bas[346]  video.Play 
CompVideoPage.bas[347]  End If 
CompVideoPage.bas[348] End Sub 
CompVideoPage.bas[349]  
CompVideoPage.bas[350] Sub btnStop_Clicked(Target As String) 
CompVideoPage.bas[351]  Dim video As ABMVideo = page.Component( {161} ) 
CompVideoPage.bas[352]  video.Stop 
CompVideoPage.bas[353] End Sub 
CompVideoPage.bas[354]  
CompVideoPage.bas[355] Sub btnVolumeDown_Clicked(Target As String) 
CompVideoPage.bas[356]  Dim video As ABMVideo = page.Component( {162} ) 
CompVideoPage.bas[357]  Volume = Volume - 10 
CompVideoPage.bas[358]  If Volume < 0 Then Volume = 0 
CompVideoPage.bas[359]  video.SetVolume(Volume) 
CompVideoPage.bas[360] End Sub 
CompVideoPage.bas[361]  
CompVideoPage.bas[362] Sub btnVolumeUp_Clicked(Target As String) 
CompVideoPage.bas[363]  Dim video As ABMVideo = page.Component( {163} ) 
CompVideoPage.bas[364]  Volume = Volume + 10 
CompVideoPage.bas[365]  If Volume > 100 Then Volume = 100 
CompVideoPage.bas[366]  video.SetVolume(Volume) 
CompVideoPage.bas[367] End Sub 
CompVideoPage.bas[368]  
CompVideoPage.bas[369] Sub btnMute_Clicked(Target As String) 
CompVideoPage.bas[370]  Dim btnMute As ABMButton = page.Component( {164} ) 
CompVideoPage.bas[371]  Dim video As ABMVideo = page.Component( {165} ) 
CompVideoPage.bas[372]  If IsMuted Then 
CompVideoPage.bas[373]  IsMuted = False 
CompVideoPage.bas[374]  video.UnMute 
CompVideoPage.bas[375]  btnMute.IconName = {166} 
CompVideoPage.bas[376]  Else 
CompVideoPage.bas[377]  video.Mute 
CompVideoPage.bas[378]  IsMuted = True 
CompVideoPage.bas[379]  btnMute.IconName = {167} 
CompVideoPage.bas[380]  End If 
CompVideoPage.bas[381]  btnMute.Refresh ' IMPORTANT 
CompVideoPage.bas[382] End Sub 
CompVideoPage.bas[383]  
CompVideoPage.bas[384] Sub btn5_Clicked(Target As String) 
CompVideoPage.bas[385]  Dim button As ABMButton = page.Component( {168} ) 
CompVideoPage.bas[386]  Dim btnPlay As ABMButton = page.Component( {169} ) 
CompVideoPage.bas[387]  Dim video As ABMVideo = page.Component( {170} ) 
CompVideoPage.bas[388]  If InitialVideo5 Then 
CompVideoPage.bas[389]  button.Text = {171} 
CompVideoPage.bas[390]  InitialVideo5 = False 
CompVideoPage.bas[391]  video.LoadVideoHTML5( {172} , {173} ) 
CompVideoPage.bas[392]  Else 
CompVideoPage.bas[393]  button.Text = {174} 
CompVideoPage.bas[394]  InitialVideo5 = True 
CompVideoPage.bas[395]  video.LoadVideoHTML5( {175} , {176} ) 
CompVideoPage.bas[396]  End If 
CompVideoPage.bas[397]  IsPlaying5 = False 
CompVideoPage.bas[398]  btnPlay.IconName = {177} 
CompVideoPage.bas[399]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[400]  button.refresh ' IMPORTANT 
CompVideoPage.bas[401]  video.Refresh ' IMPORTANT 
CompVideoPage.bas[402] End Sub 
CompVideoPage.bas[403]  
CompVideoPage.bas[404] Sub btnPlay5_Clicked(Target As String) 
CompVideoPage.bas[405]  Dim video As ABMVideo = page.Component( {178} ) 
CompVideoPage.bas[406]  Dim btnPlay As ABMButton = page.Component( {179} ) 
CompVideoPage.bas[407]  If IsPlaying5 Then 
CompVideoPage.bas[408]  video.Pause 
CompVideoPage.bas[409]  IsPlaying5 = False 
CompVideoPage.bas[410]  btnPlay.IconName = {180} 
CompVideoPage.bas[411]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[412]  Else 
CompVideoPage.bas[413]  video.Play 
CompVideoPage.bas[414]  IsPlaying5 = True 
CompVideoPage.bas[415]  btnPlay.IconName = {181} 
CompVideoPage.bas[416]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[417]  End If 
CompVideoPage.bas[418] End Sub 
CompVideoPage.bas[419]  
CompVideoPage.bas[420] Sub btnStop5_Clicked(Target As String) 
CompVideoPage.bas[421]  Dim video As ABMVideo = page.Component( {182} ) 
CompVideoPage.bas[422]  video.Stop 
CompVideoPage.bas[423]  Dim btnPlay As ABMButton = page.Component( {183} ) 
CompVideoPage.bas[424]  btnPlay.IconName = {184} 
CompVideoPage.bas[425]  btnPlay.Refresh ' IMPORTANT 
CompVideoPage.bas[426] End Sub 
CompVideoPage.bas[427]  
CompVideoPage.bas[428] Sub btnVolumeDown5_Clicked(Target As String) 
CompVideoPage.bas[429]  Dim video As ABMVideo = page.Component( {185} ) 
CompVideoPage.bas[430]  Volume5 = Volume5 - 10 
CompVideoPage.bas[431]  If Volume5 < 0 Then Volume5 = 0 
CompVideoPage.bas[432]  video.SetVolume(Volume5) 
CompVideoPage.bas[433] End Sub 
CompVideoPage.bas[434]  
CompVideoPage.bas[435] Sub btnVolumeUp5_Clicked(Target As String) 
CompVideoPage.bas[436]  Dim video As ABMVideo = page.Component( {186} ) 
CompVideoPage.bas[437]  Volume5 = Volume5 + 10 
CompVideoPage.bas[438]  If Volume5 > 100 Then Volume5 = 100 
CompVideoPage.bas[439]  video.SetVolume(Volume5) 
CompVideoPage.bas[440] End Sub 
CompVideoPage.bas[441]  
CompVideoPage.bas[442] Sub btnMute5_Clicked(Target As String) 
CompVideoPage.bas[443]  Dim btnMute As ABMButton = page.Component( {187} ) 
CompVideoPage.bas[444]  Dim video As ABMVideo = page.Component( {188} ) 
CompVideoPage.bas[445]  If IsMuted5 Then 
CompVideoPage.bas[446]  IsMuted5 = False 
CompVideoPage.bas[447]  video.UnMute 
CompVideoPage.bas[448]  btnMute.IconName = {189} 
CompVideoPage.bas[449]  Else 
CompVideoPage.bas[450]  video.Mute 
CompVideoPage.bas[451]  IsMuted5 = True 
CompVideoPage.bas[452]  btnMute.IconName = {190} 
CompVideoPage.bas[453]  End If 
CompVideoPage.bas[454]  btnMute.Refresh ' IMPORTANT 
CompVideoPage.bas[455] End Sub 
CompVideoPage.bas[456]  
CompVideoPage.bas[457]  
CompVideoPage.bas[458] ' clicked on the navigation bar 
CompVideoPage.bas[459] Sub Page_NavigationbarClicked(Action As String, Value As String) 
CompVideoPage.bas[460]  page.SaveNavigationBarPosition 
CompVideoPage.bas[461]  If Action = {191} Then Return 
CompVideoPage.bas[462]  If Action = {192} Then 
CompVideoPage.bas[463]  myToastId = myToastId + 1 
CompVideoPage.bas[464]  page.ShowToast( {193} & myToastId, {194} , {195} , 5000) 
CompVideoPage.bas[465]  Return 
CompVideoPage.bas[466]  End If 
CompVideoPage.bas[467]  If Action = {196} Then 
CompVideoPage.bas[468]  ABMShared.LogOff(page) 
CompVideoPage.bas[469]  Return 
CompVideoPage.bas[470]  End If 
CompVideoPage.bas[471]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
CompVideoPage.bas[472] End Sub 
CompVideoPage.bas[473]  
CompVideoPage.bas[474] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
CompVideoPage.bas[475]  page.ws.Session.SetAttribute( {197} , {198} ) 
CompVideoPage.bas[476]  page.ws.Session.SetAttribute( {199} , {200} ) 
CompVideoPage.bas[477]  page.ws.Session.SetAttribute( {201} , {202} ) 
CompVideoPage.bas[478]  ABMShared.NavigateToPage(ws, ABMPageId, {203} ) 
CompVideoPage.bas[479] End Sub 
Analysing: CustomGauge.bas
CustomGauge.bas[0] ﻿Type=Class 
CustomGauge.bas[0] Version=4.7 
CustomGauge.bas[0] ModulesStructureVersion=1 
CustomGauge.bas[0] B4J=true 
CustomGauge.bas[0] @EndOfDesignText@ 
CustomGauge.bas[1] 'Class module 
CustomGauge.bas[2]  
CustomGauge.bas[3] ' USAGE: 
CustomGauge.bas[4] ' Sub Class_Globals 
CustomGauge.bas[5] ' Dim custGauge As CustomGauge 
CustomGauge.bas[6] ' 
CustomGauge.bas[7] ' Sub BuildPage() 
CustomGauge.bas[8] ' page.AddExtraJavaScriptFile( {3} ) 
CustomGauge.bas[9] ' page.AddExtraJavaScriptFile( {4} ) 
CustomGauge.bas[10] ' 
CustomGauge.bas[11] ' Sub ConnectPage() 
CustomGauge.bas[12] ' custGauge.Initialize(page, {5} , 25, {6} ) 
CustomGauge.bas[13] ' page.Cell(7,1).AddComponent(custGauge.ABMComp) 
CustomGauge.bas[14] ' 
CustomGauge.bas[15] ' Dim custGaugebtn1 As ABMButton 
CustomGauge.bas[16] ' custGaugebtn1.InitializeRaised(page, {7} , {8} , {9} , {10} , {11} ) 
CustomGauge.bas[17] ' page.Cell(7,1).AddComponent(custGaugebtn1) 
CustomGauge.bas[18] ' 
CustomGauge.bas[19] 'Sub custGaugebtn1_Clicked(Target As String) 
CustomGauge.bas[20] ' custGauge.myValue = Rnd(10,100) 
CustomGauge.bas[21] ' custGauge.ABMComp.Refresh 
CustomGauge.bas[22] 'End Sub 
CustomGauge.bas[23]  
CustomGauge.bas[24] Sub Class_Globals 
CustomGauge.bas[25]  Public ABMComp As ABMCustomComponent 
CustomGauge.bas[26]  Public myValue As Int 
CustomGauge.bas[27]  Public myLabel As String 
CustomGauge.bas[28] End Sub 
CustomGauge.bas[29]  
CustomGauge.bas[30] 'Initializes the object. You can add parameters to this method if needed. 
CustomGauge.bas[31] Public Sub Initialize(InternalPage As ABMPage, ID As String, value As Int, name As String) 
CustomGauge.bas[32]  ABMComp.Initialize( {12} , Me, InternalPage, ID) 
CustomGauge.bas[33]  myValue = value 
CustomGauge.bas[34]  myLabel = name 
CustomGauge.bas[35] End Sub 
CustomGauge.bas[36]  
CustomGauge.bas[37] Sub ABMComp_Build(internalID As String) As String 
CustomGauge.bas[38]  Return {0} {internalID} {13} $ 
CustomGauge.bas[39] End Sub 
CustomGauge.bas[40]  
CustomGauge.bas[41] ' Is useful to run some initalisation script. 
CustomGauge.bas[42] Sub ABMComp_FirstRun(InternalPage As ABMPage, internalID As String) 
CustomGauge.bas[43]  Dim script As String = {1} {internalID}", 
CustomGauge.bas[45]  value: ${myValue}, 
CustomGauge.bas[46]  Min: 0, 
CustomGauge.bas[47]  Max: 100, 
CustomGauge.bas[48]  relativeGaugeSize: true, 
CustomGauge.bas[49]  title: {14} 
CustomGauge.bas[50]  });"$ 
CustomGauge.bas[51]  
CustomGauge.bas[52]  InternalPage.ws.Eval(script, Array As Object(ABMComp.ID)) 
CustomGauge.bas[53]  ' flush not needed, it's done in the refresh method in the lib 
CustomGauge.bas[54] End Sub 
CustomGauge.bas[55]  
CustomGauge.bas[56] ' runs when a refresh is called 
CustomGauge.bas[57] Sub ABMComp_Refresh(InternalPage As ABMPage, internalID As String) 
CustomGauge.bas[58]  Dim script As String = {2} 
CustomGauge.bas[59]  InternalPage.ws.Eval(script, Null) 
CustomGauge.bas[60] End Sub 
CustomGauge.bas[61]  
CustomGauge.bas[62] ' do the stuff needed when the object is removed 
CustomGauge.bas[63] Sub ABMComp_CleanUp(InternalPage As ABMPage, internalID As String) 
CustomGauge.bas[64]  
CustomGauge.bas[65] End Sub 
Analysing: CustomGoogleChart.bas
CustomGoogleChart.bas[0] ﻿Type=Class 
CustomGoogleChart.bas[0] Version=4.7 
CustomGoogleChart.bas[0] ModulesStructureVersion=1 
CustomGoogleChart.bas[0] B4J=true 
CustomGoogleChart.bas[0] @EndOfDesignText@ 
CustomGoogleChart.bas[1] 'Class module 
CustomGoogleChart.bas[2] Sub Class_Globals 
CustomGoogleChart.bas[3]  'Dim ABM As ABMaterial 
CustomGoogleChart.bas[4]  Dim ABMComp As ABMCustomComponent 
CustomGoogleChart.bas[5]  
CustomGoogleChart.bas[6] End Sub 
CustomGoogleChart.bas[7]  
CustomGoogleChart.bas[8] 'Initializes the object. You can add parameters to this method if needed. 
CustomGoogleChart.bas[9] Public Sub Initialize(InternalPage As ABMPage, ID As String) 
CustomGoogleChart.bas[10]  ABMComp.Initialize( {3} , Me, InternalPage, ID) 
CustomGoogleChart.bas[11]  ' the automatic events will be raised on the page e.g. if the id = {4} then the event will be mycomp_Click(params as Map) 
CustomGoogleChart.bas[12]  ' future: we'll see if some other mechanisme is needed for non automatic events 
CustomGoogleChart.bas[13]  
CustomGoogleChart.bas[14] End Sub 
CustomGoogleChart.bas[15]  
CustomGoogleChart.bas[16] ' runs when an object is created for the first time. Expects a valid html string 
CustomGoogleChart.bas[17] ' will get surrounded by a div automatically 
CustomGoogleChart.bas[18] ' in the html file: 
CustomGoogleChart.bas[19] '<div ID= {5} class= {6} > 
CustomGoogleChart.bas[20] ' <h1 ID= {7} >This Is a test</h1> 
CustomGoogleChart.bas[21] '</div> 
CustomGoogleChart.bas[22] Sub ABMComp_Build(internalID As String) As String 
CustomGoogleChart.bas[23]  Return {0} 
CustomGoogleChart.bas[24] End Sub 
CustomGoogleChart.bas[25]  
CustomGoogleChart.bas[26] ' Is useful to run some initalisation script. 
CustomGoogleChart.bas[27] Sub ABMComp_FirstRun(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart.bas[28]  Dim script As String = {1} 
CustomGoogleChart.bas[47]  
CustomGoogleChart.bas[48]  InternalPage.ws.Eval(script, Array As Object(ABMComp.ID)) 
CustomGoogleChart.bas[49]  ' flush not needed, it's done in the refresh method in the lib 
CustomGoogleChart.bas[50] End Sub 
CustomGoogleChart.bas[51]  
CustomGoogleChart.bas[52] ' runs when a refresh is called 
CustomGoogleChart.bas[53] Sub ABMComp_Refresh(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart.bas[54]  ' use these methods to adjust the object 
CustomGoogleChart.bas[55]  ' ABM.HasClass 
CustomGoogleChart.bas[56]  ' ABM.AddClass 
CustomGoogleChart.bas[57]  ' ABM.RemoveClass 
CustomGoogleChart.bas[58]  
CustomGoogleChart.bas[59]  ' ABM.AddHTML 
CustomGoogleChart.bas[60]  ' ABM.InsertHTMLAfter 
CustomGoogleChart.bas[61]  ' ABM.RemoveHTML 
CustomGoogleChart.bas[62]  
CustomGoogleChart.bas[63]  ' ABM.GetProperty 
CustomGoogleChart.bas[64]  ' ABM.SetProperty 
CustomGoogleChart.bas[65]  ' ABM.RemoveProperty 
CustomGoogleChart.bas[66]  
CustomGoogleChart.bas[67]  ' ABM.GetStyleProperty 
CustomGoogleChart.bas[68]  ' ABM.SetStyleProperty 
CustomGoogleChart.bas[69]  
CustomGoogleChart.bas[70]  ' do some script stuff like you do in RunJavaScript 
CustomGoogleChart.bas[71]  
CustomGoogleChart.bas[72]  'Dim script As String = {2} 
CustomGoogleChart.bas[74]  'InternalPage.ws.Eval(script, Null) 
CustomGoogleChart.bas[75] End Sub 
CustomGoogleChart.bas[76]  
CustomGoogleChart.bas[77] ' do the stuff needed when the object is removed 
CustomGoogleChart.bas[78] Sub ABMComp_CleanUp(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart.bas[79]  
CustomGoogleChart.bas[80] End Sub 
CustomGoogleChart.bas[81]  
CustomGoogleChart.bas[82]  
CustomGoogleChart.bas[83]  
CustomGoogleChart.bas[84]  
Analysing: CustomGoogleChart2.bas
CustomGoogleChart2.bas[0] ﻿Type=Class 
CustomGoogleChart2.bas[0] Version=4.7 
CustomGoogleChart2.bas[0] ModulesStructureVersion=1 
CustomGoogleChart2.bas[0] B4J=true 
CustomGoogleChart2.bas[0] @EndOfDesignText@ 
CustomGoogleChart2.bas[1] 'Class module 
CustomGoogleChart2.bas[2] Sub Class_Globals 
CustomGoogleChart2.bas[3]  Dim ABM As ABMaterial 'ignore 
CustomGoogleChart2.bas[4]  Dim ABMComp As ABMCustomComponent 
CustomGoogleChart2.bas[5]  Dim Title As String 
CustomGoogleChart2.bas[6]  Dim Subtitle As String 'ignore 'only used for a google material chart 
CustomGoogleChart2.bas[7]  Dim Columns As List 
CustomGoogleChart2.bas[8]  Dim Rows As List 
CustomGoogleChart2.bas[9] End Sub 
CustomGoogleChart2.bas[10]  
CustomGoogleChart2.bas[11] 'Initializes the object. You can add parameters to this method if needed. 
CustomGoogleChart2.bas[12] Public Sub Initialize(InternalPage As ABMPage, ID As String) 
CustomGoogleChart2.bas[13]  ABMComp.Initialize( {7} , Me, InternalPage, ID) 
CustomGoogleChart2.bas[14]  ABMComp.Visibility = ABM.VISIBILITY_HIDE_ALL ' hide the chart while loading 
CustomGoogleChart2.bas[15]  ' the automatic events will be raised on the page e.g. if the id = {8} then the event will be mycomp_Click(params as Map) 
CustomGoogleChart2.bas[16]  ' future: we'll see if some other mechanisme is needed for non automatic events 
CustomGoogleChart2.bas[17]  Columns.Initialize 
CustomGoogleChart2.bas[18]  Rows.Initialize 
CustomGoogleChart2.bas[19] End Sub 
CustomGoogleChart2.bas[20]  
CustomGoogleChart2.bas[21] public Sub AddColumn(varType As String, text As String) 
CustomGoogleChart2.bas[22]  Columns.add( {0} ) 
CustomGoogleChart2.bas[23] End Sub 
CustomGoogleChart2.bas[24]  
CustomGoogleChart2.bas[25] public Sub AddRow(Day As Int, Guardians As Double, Avengers As Double, Transformers As Double) 
CustomGoogleChart2.bas[26]  If Rows.Size > 0 Then ' with comma 
CustomGoogleChart2.bas[27]  Rows.Add( {1} ) 
CustomGoogleChart2.bas[28]  Else ' first one, does not need a comma 
CustomGoogleChart2.bas[29]  Rows.Add( {2} ) 
CustomGoogleChart2.bas[30]  End If 
CustomGoogleChart2.bas[31] End Sub 
CustomGoogleChart2.bas[32]  
CustomGoogleChart2.bas[33] private Sub GetColumns() As String 
CustomGoogleChart2.bas[34]  Dim s As String 
CustomGoogleChart2.bas[35]  For i = 0 To Columns.Size-1 
CustomGoogleChart2.bas[36]  s = s & Columns.Get(i) 
CustomGoogleChart2.bas[37]  Next 
CustomGoogleChart2.bas[38]  Return s 
CustomGoogleChart2.bas[39] End Sub 
CustomGoogleChart2.bas[40]  
CustomGoogleChart2.bas[41] private Sub GetRows() As String 
CustomGoogleChart2.bas[42]  Dim s As String 
CustomGoogleChart2.bas[43]  For i = 0 To Rows.Size-1 
CustomGoogleChart2.bas[44]  s = s & Rows.Get(i) 
CustomGoogleChart2.bas[45]  Next 
CustomGoogleChart2.bas[46]  Return s 
CustomGoogleChart2.bas[47] End Sub 
CustomGoogleChart2.bas[48]  
CustomGoogleChart2.bas[49] ' runs when an object is created for the first time. Expects a valid html string 
CustomGoogleChart2.bas[50] Sub ABMComp_Build(internalID As String) As String 
CustomGoogleChart2.bas[51]  Return {3} {internalID} {9} $ 
CustomGoogleChart2.bas[52] End Sub 
CustomGoogleChart2.bas[53]  
CustomGoogleChart2.bas[54] ' Is useful to run some initalisation script. 
CustomGoogleChart2.bas[55] Sub ABMComp_FirstRun(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart2.bas[56]  ' this is for a classic google chart 
CustomGoogleChart2.bas[57]  Dim script As String = {4} 
CustomGoogleChart2.bas[102]  
CustomGoogleChart2.bas[103]  ' this is for a google material chart 
CustomGoogleChart2.bas[104] ' Dim script As String = {5} 
CustomGoogleChart2.bas[143]  
CustomGoogleChart2.bas[144]  InternalPage.ws.Eval(script, Array As Object(ABMComp.ID)) 
CustomGoogleChart2.bas[145]  ' flush not needed, it's done in the refresh method in the lib 
CustomGoogleChart2.bas[146] End Sub 
CustomGoogleChart2.bas[147]  
CustomGoogleChart2.bas[148] ' runs when a refresh is called 
CustomGoogleChart2.bas[149] Sub ABMComp_Refresh(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart2.bas[150]  ' use these methods to adjust the object 
CustomGoogleChart2.bas[151]  ' ABM.HasClass 
CustomGoogleChart2.bas[152]  ' ABM.AddClass 
CustomGoogleChart2.bas[153]  ' ABM.RemoveClass 
CustomGoogleChart2.bas[154]  
CustomGoogleChart2.bas[155]  ' ABM.AddHTML 
CustomGoogleChart2.bas[156]  ' ABM.InsertHTMLAfter 
CustomGoogleChart2.bas[157]  ' ABM.RemoveHTML 
CustomGoogleChart2.bas[158]  
CustomGoogleChart2.bas[159]  ' ABM.GetProperty 
CustomGoogleChart2.bas[160]  ' ABM.SetProperty 
CustomGoogleChart2.bas[161]  ' ABM.RemoveProperty 
CustomGoogleChart2.bas[162]  
CustomGoogleChart2.bas[163]  ' ABM.GetStyleProperty 
CustomGoogleChart2.bas[164]  ' ABM.SetStyleProperty 
CustomGoogleChart2.bas[165]  
CustomGoogleChart2.bas[166]  ' do some script stuff like you do in RunJavaScript 
CustomGoogleChart2.bas[167]  'Dim script As String = {6} 
CustomGoogleChart2.bas[168]  'InternalPage.ws.Eval(script, Null) 
CustomGoogleChart2.bas[169] End Sub 
CustomGoogleChart2.bas[170]  
CustomGoogleChart2.bas[171] ' do the stuff needed when the object is removed 
CustomGoogleChart2.bas[172] Sub ABMComp_CleanUp(InternalPage As ABMPage, internalID As String) 
CustomGoogleChart2.bas[173]  
CustomGoogleChart2.bas[174] End Sub 
CustomGoogleChart2.bas[175]  
CustomGoogleChart2.bas[176]  
CustomGoogleChart2.bas[177]  
CustomGoogleChart2.bas[178]  
Analysing: CustomSlidebar.bas
CustomSlidebar.bas[0] ﻿Type=Class 
CustomSlidebar.bas[0] Version=4.7 
CustomSlidebar.bas[0] ModulesStructureVersion=1 
CustomSlidebar.bas[0] B4J=true 
CustomSlidebar.bas[0] @EndOfDesignText@ 
CustomSlidebar.bas[1] 'Class module 
CustomSlidebar.bas[2]  
CustomSlidebar.bas[3] Sub Class_Globals 
CustomSlidebar.bas[4]  'Dim ABM As ABMaterial 
CustomSlidebar.bas[5]  Dim ABMComp As ABMCustomComponent 
CustomSlidebar.bas[6]  Private myValue As Double 
CustomSlidebar.bas[7] End Sub 
CustomSlidebar.bas[8]  
CustomSlidebar.bas[9] 'Initializes the object. You can add parameters to this method if needed. 
CustomSlidebar.bas[10] Public Sub Initialize(InternalPage As ABMPage, ID As String, value As Double) 
CustomSlidebar.bas[11]  ABMComp.Initialize( {3} , Me, InternalPage, ID) 
CustomSlidebar.bas[12]  ' the automatic events will be raised on the page e.g. if the id = {4} then the event will be mycomp_Click(params as Map) 
CustomSlidebar.bas[13]  ' future: we'll see if some other mechanisme is needed for non automatic events 
CustomSlidebar.bas[14]  myValue = value 
CustomSlidebar.bas[15] End Sub 
CustomSlidebar.bas[16]  
CustomSlidebar.bas[17] ' runs when an object is created for the first time. Expects a valid html string 
CustomSlidebar.bas[18] ' will get surrounded by a div automatically 
CustomSlidebar.bas[19] ' in the html file: 
CustomSlidebar.bas[20] '<div ID= {5} class= {6} > 
CustomSlidebar.bas[21] ' <h1 ID= {7} >This Is a test</h1> 
CustomSlidebar.bas[22] '</div> 
CustomSlidebar.bas[23] Sub ABMComp_Build(internalID As String) As String 
CustomSlidebar.bas[24]  Return {0} 
CustomSlidebar.bas[25] End Sub 
CustomSlidebar.bas[26]  
CustomSlidebar.bas[27] ' Is useful to run some initalisation script. 
CustomSlidebar.bas[28] Sub ABMComp_FirstRun(InternalPage As ABMPage, internalID As String) 
CustomSlidebar.bas[29]  Dim script As String = {1} 
CustomSlidebar.bas[45]  
CustomSlidebar.bas[46]  InternalPage.ws.Eval(script, Array As Object(ABMComp.ID)) 
CustomSlidebar.bas[47]  ' flush not needed, it's done in the refresh method in the lib 
CustomSlidebar.bas[48] End Sub 
CustomSlidebar.bas[49]  
CustomSlidebar.bas[50] ' runs when a refresh is called 
CustomSlidebar.bas[51] Sub ABMComp_Refresh(InternalPage As ABMPage, internalID As String) 
CustomSlidebar.bas[52]  ' use these methods to adjust the object 
CustomSlidebar.bas[53]  ' ABM.HasClass 
CustomSlidebar.bas[54]  ' ABM.AddClass 
CustomSlidebar.bas[55]  ' ABM.RemoveClass 
CustomSlidebar.bas[56]  
CustomSlidebar.bas[57]  ' ABM.AddHTML 
CustomSlidebar.bas[58]  ' ABM.InsertHTMLAfter 
CustomSlidebar.bas[59]  ' ABM.RemoveHTML 
CustomSlidebar.bas[60]  
CustomSlidebar.bas[61]  ' ABM.GetProperty 
CustomSlidebar.bas[62]  ' ABM.SetProperty 
CustomSlidebar.bas[63]  ' ABM.RemoveProperty 
CustomSlidebar.bas[64]  
CustomSlidebar.bas[65]  ' ABM.GetStyleProperty 
CustomSlidebar.bas[66]  ' ABM.SetStyleProperty 
CustomSlidebar.bas[67]  
CustomSlidebar.bas[68]  ' do some script stuff like you do in RunJavaScript 
CustomSlidebar.bas[69]  
CustomSlidebar.bas[70]  Dim script As String = {2} 
CustomSlidebar.bas[72]  InternalPage.ws.Eval(script, Null) 
CustomSlidebar.bas[73] End Sub 
CustomSlidebar.bas[74]  
CustomSlidebar.bas[75] ' do the stuff needed when the object is removed 
CustomSlidebar.bas[76] Sub ABMComp_CleanUp(InternalPage As ABMPage, internalID As String) 
CustomSlidebar.bas[77]  
CustomSlidebar.bas[78] End Sub 
CustomSlidebar.bas[79]  
CustomSlidebar.bas[80] Public Sub SetValue(Value As Double) 
CustomSlidebar.bas[81]  myValue = Value 
CustomSlidebar.bas[82] End Sub 
CustomSlidebar.bas[83]  
CustomSlidebar.bas[84]  
CustomSlidebar.bas[85]  
Analysing: DonateButton.bas
DonateButton.bas[0] ﻿Type=Class 
DonateButton.bas[0] Version=4.7 
DonateButton.bas[0] ModulesStructureVersion=1 
DonateButton.bas[0] B4J=true 
DonateButton.bas[0] @EndOfDesignText@ 
DonateButton.bas[1] 'Class module 
DonateButton.bas[2]  
DonateButton.bas[3] Sub Class_Globals 
DonateButton.bas[4]  'Dim ABM As ABMaterial 
DonateButton.bas[5]  Dim ABMComp As ABMCustomComponent 
DonateButton.bas[6] End Sub 
DonateButton.bas[7]  
DonateButton.bas[8] 'Initializes the object. You can add parameters to this method if needed. 
DonateButton.bas[9] Public Sub Initialize(InternalPage As ABMPage, ID As String) 
DonateButton.bas[10]  ABMComp.Initialize( {1} , Me, InternalPage, ID) 
DonateButton.bas[11]  ' the automatic events will be raised on the page e.g. if the id = {2} then the event will be mycomp_Click(params as Map) 
DonateButton.bas[12]  ' future: we'll see if some other mechanisme is needed for non automatic events 
DonateButton.bas[13]  
DonateButton.bas[14] End Sub 
DonateButton.bas[15]  
DonateButton.bas[16] ' runs when an object is created for the first time. Expects a valid html string 
DonateButton.bas[17] ' will get surrounded by a div automatically 
DonateButton.bas[18] ' in the html file: 
DonateButton.bas[19] '<div ID= {3} class= {4} > 
DonateButton.bas[20] ' <h1 ID= {5} >This Is a test</h1> 
DonateButton.bas[21] '</div> 
DonateButton.bas[22] Sub ABMComp_Build(internalID As String) As String 
DonateButton.bas[23]  Return {0} 
DonateButton.bas[24] End Sub 
DonateButton.bas[25]  
DonateButton.bas[26] ' Is useful to run some initalisation script. 
DonateButton.bas[27] Sub ABMComp_FirstRun(InternalPage As ABMPage, internalID As String) 
DonateButton.bas[28]  
DonateButton.bas[29]  ' flush not needed, it's done in the refresh method in the lib 
DonateButton.bas[30] End Sub 
DonateButton.bas[31]  
DonateButton.bas[32] ' runs when a refresh is called 
DonateButton.bas[33] Sub ABMComp_Refresh(InternalPage As ABMPage, internalID As String) 
DonateButton.bas[34]  ' use these methods to adjust the object 
DonateButton.bas[35]  ' ABM.HasClass 
DonateButton.bas[36]  ' ABM.AddClass 
DonateButton.bas[37]  ' ABM.RemoveClass 
DonateButton.bas[38]  
DonateButton.bas[39]  ' ABM.AddHTML 
DonateButton.bas[40]  ' ABM.InsertHTMLAfter 
DonateButton.bas[41]  ' ABM.RemoveHTML 
DonateButton.bas[42]  
DonateButton.bas[43]  ' ABM.GetProperty 
DonateButton.bas[44]  ' ABM.SetProperty 
DonateButton.bas[45]  ' ABM.RemoveProperty 
DonateButton.bas[46]  
DonateButton.bas[47]  ' ABM.GetStyleProperty 
DonateButton.bas[48]  ' ABM.SetStyleProperty 
DonateButton.bas[49]  
DonateButton.bas[50]  ' do some script stuff like you do in RunJavaScript 
DonateButton.bas[51] End Sub 
DonateButton.bas[52]  
DonateButton.bas[53] ' do the stuff needed when the object is removed 
DonateButton.bas[54] Sub ABMComp_CleanUp(InternalPage As ABMPage, internalID As String) 
DonateButton.bas[55]  
DonateButton.bas[56] End Sub 
DonateButton.bas[57]  
DonateButton.bas[58]  
DonateButton.bas[59]  
DonateButton.bas[60]  
Analysing: DonatorsExtraLibsPage.bas
DonatorsExtraLibsPage.bas[0] ﻿Type=Class 
DonatorsExtraLibsPage.bas[0] Version=4.7 
DonatorsExtraLibsPage.bas[0] ModulesStructureVersion=1 
DonatorsExtraLibsPage.bas[0] B4J=true 
DonatorsExtraLibsPage.bas[0] @EndOfDesignText@ 
DonatorsExtraLibsPage.bas[1] 'Class module 
DonatorsExtraLibsPage.bas[2] Sub Class_Globals 
DonatorsExtraLibsPage.bas[3]  Private ws As WebSocket 'ignore 
DonatorsExtraLibsPage.bas[4]  ' will hold our page information 
DonatorsExtraLibsPage.bas[5]  Public page As ABMPage 
DonatorsExtraLibsPage.bas[6]  ' page theme 
DonatorsExtraLibsPage.bas[7]  Private theme As ABMTheme 
DonatorsExtraLibsPage.bas[8]  ' to access the constants 
DonatorsExtraLibsPage.bas[9]  Private ABM As ABMaterial 'ignore 
DonatorsExtraLibsPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
DonatorsExtraLibsPage.bas[11]  Public Name As String = {11} 
DonatorsExtraLibsPage.bas[12]  ' will hold the unique browsers window id 
DonatorsExtraLibsPage.bas[13]  Private ABMPageId As String = {12} 
DonatorsExtraLibsPage.bas[14]  
DonatorsExtraLibsPage.bas[15]  ' your own variables 
DonatorsExtraLibsPage.bas[16]  Dim myToastId As Int 
DonatorsExtraLibsPage.bas[17] End Sub 
DonatorsExtraLibsPage.bas[18]  
DonatorsExtraLibsPage.bas[19] Public Sub Initialize 
DonatorsExtraLibsPage.bas[20]  ' build the local structure IMPORTANT! 
DonatorsExtraLibsPage.bas[21]  BuildPage 
DonatorsExtraLibsPage.bas[22] End Sub 
DonatorsExtraLibsPage.bas[23]  
DonatorsExtraLibsPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
DonatorsExtraLibsPage.bas[25]  Log( {13} ) 
DonatorsExtraLibsPage.bas[26]  ws = WebSocket1 
DonatorsExtraLibsPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
DonatorsExtraLibsPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
DonatorsExtraLibsPage.bas[29]  
DonatorsExtraLibsPage.bas[30]  If ABMShared.NeedsAuthorization Then 
DonatorsExtraLibsPage.bas[31]  If session.GetAttribute2( {14} , {15} ) = {16} Then 
DonatorsExtraLibsPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {17} ) 
DonatorsExtraLibsPage.bas[33]  Return 
DonatorsExtraLibsPage.bas[34]  End If 
DonatorsExtraLibsPage.bas[35]  End If 
DonatorsExtraLibsPage.bas[36]  
DonatorsExtraLibsPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
DonatorsExtraLibsPage.bas[38]  If page.ComesFromPageCache Then 
DonatorsExtraLibsPage.bas[39]  ' refresh the page 
DonatorsExtraLibsPage.bas[40]  page.Refresh 
DonatorsExtraLibsPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
DonatorsExtraLibsPage.bas[42]  page.FinishedLoading 
DonatorsExtraLibsPage.bas[43]  Else 
DonatorsExtraLibsPage.bas[44]  ' Prepare the page 
DonatorsExtraLibsPage.bas[45]  page.Prepare 
DonatorsExtraLibsPage.bas[46]  ' load the dynamic content 
DonatorsExtraLibsPage.bas[47]  ConnectPage 
DonatorsExtraLibsPage.bas[48]  End If 
DonatorsExtraLibsPage.bas[49]  Log(ABMPageId) 
DonatorsExtraLibsPage.bas[50] End Sub 
DonatorsExtraLibsPage.bas[51]  
DonatorsExtraLibsPage.bas[52] Private Sub WebSocket_Disconnected 
DonatorsExtraLibsPage.bas[53]  Log( {18} ) 
DonatorsExtraLibsPage.bas[54] End Sub 
DonatorsExtraLibsPage.bas[55]  
DonatorsExtraLibsPage.bas[56] Sub Page_ParseEvent(Params As Map) 
DonatorsExtraLibsPage.bas[57]  Dim eventName As String = Params.Get( {19} ) 
DonatorsExtraLibsPage.bas[58]  Dim eventParams() As String = Regex.Split( {20} ,Params.Get( {21} )) 
DonatorsExtraLibsPage.bas[59]  If eventName = {22} Then 
DonatorsExtraLibsPage.bas[60]  Log( {23} ) 
DonatorsExtraLibsPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
DonatorsExtraLibsPage.bas[62]  Return 
DonatorsExtraLibsPage.bas[63]  End If 
DonatorsExtraLibsPage.bas[64]  If SubExists(Me, eventName) Then 
DonatorsExtraLibsPage.bas[65]  Params.Remove( {24} ) 
DonatorsExtraLibsPage.bas[66]  Params.Remove( {25} ) 
DonatorsExtraLibsPage.bas[67]  Select Case Params.Size 
DonatorsExtraLibsPage.bas[68]  Case 0 
DonatorsExtraLibsPage.bas[69]  CallSub(Me, eventName) 
DonatorsExtraLibsPage.bas[70]  Case 1 
DonatorsExtraLibsPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
DonatorsExtraLibsPage.bas[72]  Case 2 
DonatorsExtraLibsPage.bas[73]  If Params.get(eventParams(0)) = {26} Then 
DonatorsExtraLibsPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
DonatorsExtraLibsPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
DonatorsExtraLibsPage.bas[76]  Else 
DonatorsExtraLibsPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
DonatorsExtraLibsPage.bas[78]  End If 
DonatorsExtraLibsPage.bas[79]  Case Else 
DonatorsExtraLibsPage.bas[80]  ' cannot be called directly, to many param 
DonatorsExtraLibsPage.bas[81]  CallSub2(Me, eventName, Params) 
DonatorsExtraLibsPage.bas[82]  End Select 
DonatorsExtraLibsPage.bas[83]  End If 
DonatorsExtraLibsPage.bas[84] End Sub 
DonatorsExtraLibsPage.bas[85]  
DonatorsExtraLibsPage.bas[86] public Sub BuildTheme() 
DonatorsExtraLibsPage.bas[87]  ' start with the base theme defined in ABMShared 
DonatorsExtraLibsPage.bas[88]  theme.Initialize( {27} ) 
DonatorsExtraLibsPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
DonatorsExtraLibsPage.bas[90]  
DonatorsExtraLibsPage.bas[91]  ' add additional themes specific for this page 
DonatorsExtraLibsPage.bas[92]  
DonatorsExtraLibsPage.bas[93] End Sub 
DonatorsExtraLibsPage.bas[94]  
DonatorsExtraLibsPage.bas[95] public Sub BuildPage() 
DonatorsExtraLibsPage.bas[96]  ' initialize the theme 
DonatorsExtraLibsPage.bas[97]  BuildTheme 
DonatorsExtraLibsPage.bas[98]  
DonatorsExtraLibsPage.bas[99]  ' initialize this page using our theme 
DonatorsExtraLibsPage.bas[100]  page.InitializeWithTheme(Name, {28} & ABMshared.AppName & {29} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
DonatorsExtraLibsPage.bas[101]  page.ShowLoader=True 
DonatorsExtraLibsPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
DonatorsExtraLibsPage.bas[103]  page.PageTitle = {30} 
DonatorsExtraLibsPage.bas[104]  page.PageDescription = {31} 
DonatorsExtraLibsPage.bas[105]  page.PageHTMLName = {32} 
DonatorsExtraLibsPage.bas[106]  page.PageKeywords = {33} 
DonatorsExtraLibsPage.bas[107]  page.PageSiteMapPriority = {34} 
DonatorsExtraLibsPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
DonatorsExtraLibsPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
DonatorsExtraLibsPage.bas[110]  
DonatorsExtraLibsPage.bas[111]  ABMShared.BuildNavigationBar(page, {35} , {36} , {37} , {38} , {39} ) 
DonatorsExtraLibsPage.bas[112]  
DonatorsExtraLibsPage.bas[113]  ' create the page grid 
DonatorsExtraLibsPage.bas[114]  page.AddRows(10,True, {40} ).AddCells12(1, {41} ) 
DonatorsExtraLibsPage.bas[115]  
DonatorsExtraLibsPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
DonatorsExtraLibsPage.bas[117]  
DonatorsExtraLibsPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
DonatorsExtraLibsPage.bas[119]  'page.NeedsCodeLabel = True 
DonatorsExtraLibsPage.bas[120]  
DonatorsExtraLibsPage.bas[121]  ABMShared.BuildFooter(page) 
DonatorsExtraLibsPage.bas[122] End Sub 
DonatorsExtraLibsPage.bas[123]  
DonatorsExtraLibsPage.bas[124] Sub ConnectPage() 
DonatorsExtraLibsPage.bas[125]  'NEW 
DonatorsExtraLibsPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
DonatorsExtraLibsPage.bas[127]  
DonatorsExtraLibsPage.bas[128]  ' add paragraph 
DonatorsExtraLibsPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} )) 
DonatorsExtraLibsPage.bas[130]  
DonatorsExtraLibsPage.bas[131]  Dim donButton As DonateButton 
DonatorsExtraLibsPage.bas[132]  donButton.Initialize(page, {44} ) 
DonatorsExtraLibsPage.bas[133]  page.Cell(1,1).AddComponent(donButton.ABMComp) 
DonatorsExtraLibsPage.bas[134]  
DonatorsExtraLibsPage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {45} , {46} )) 
DonatorsExtraLibsPage.bas[136]  
DonatorsExtraLibsPage.bas[137]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {47} , {48} )) 
DonatorsExtraLibsPage.bas[138]  
DonatorsExtraLibsPage.bas[139]  Dim code1 As String = {0} 
DonatorsExtraLibsPage.bas[180]  
DonatorsExtraLibsPage.bas[181]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {49} , code1)) 
DonatorsExtraLibsPage.bas[182]  
DonatorsExtraLibsPage.bas[183]  Dim code2 As String = {1} 
DonatorsExtraLibsPage.bas[186]  
DonatorsExtraLibsPage.bas[187]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {50} , code2)) 
DonatorsExtraLibsPage.bas[188]  
DonatorsExtraLibsPage.bas[189]  Dim code3 As String = {2} 
DonatorsExtraLibsPage.bas[212]  
DonatorsExtraLibsPage.bas[213]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {51} , code3)) 
DonatorsExtraLibsPage.bas[214]  
DonatorsExtraLibsPage.bas[215]  Dim code4 As String = {3} 
DonatorsExtraLibsPage.bas[229]  
DonatorsExtraLibsPage.bas[230]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {52} , code4)) 
DonatorsExtraLibsPage.bas[231]  
DonatorsExtraLibsPage.bas[232]  Dim code5 As String = {4} 
DonatorsExtraLibsPage.bas[238]  
DonatorsExtraLibsPage.bas[239]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {53} , code5)) 
DonatorsExtraLibsPage.bas[240]  
DonatorsExtraLibsPage.bas[241]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} )) 
DonatorsExtraLibsPage.bas[242]  
DonatorsExtraLibsPage.bas[243]  Dim code6 As String = {5} 
DonatorsExtraLibsPage.bas[258]  
DonatorsExtraLibsPage.bas[259]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {56} , code6)) 
DonatorsExtraLibsPage.bas[260]  
DonatorsExtraLibsPage.bas[261]  page.Cell(4,1).AddComponent(ABMShared.BuildHeader(page, {57} , {58} )) 
DonatorsExtraLibsPage.bas[262]  
DonatorsExtraLibsPage.bas[263]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {59} , {60} )) 
DonatorsExtraLibsPage.bas[264]  
DonatorsExtraLibsPage.bas[265]  Dim code7 As String = {6} 
DonatorsExtraLibsPage.bas[286]  
DonatorsExtraLibsPage.bas[287]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {61} , code7)) 
DonatorsExtraLibsPage.bas[288]  
DonatorsExtraLibsPage.bas[289]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {62} , {63} )) 
DonatorsExtraLibsPage.bas[290]  
DonatorsExtraLibsPage.bas[291]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {64} , {65} )) 
DonatorsExtraLibsPage.bas[292]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {66} , {67} )) 
DonatorsExtraLibsPage.bas[293]  
DonatorsExtraLibsPage.bas[294]  Dim code8 As String = {7} 
DonatorsExtraLibsPage.bas[297]  
DonatorsExtraLibsPage.bas[298]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {68} , code8)) 
DonatorsExtraLibsPage.bas[299]  
DonatorsExtraLibsPage.bas[300]  Dim code9 As String = {8} 
DonatorsExtraLibsPage.bas[306]  
DonatorsExtraLibsPage.bas[307]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {69} , code9)) 
DonatorsExtraLibsPage.bas[308]  
DonatorsExtraLibsPage.bas[309]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {70} , {71} )) 
DonatorsExtraLibsPage.bas[310]  
DonatorsExtraLibsPage.bas[311]  Dim code10 As String = {9} 
DonatorsExtraLibsPage.bas[317]  
DonatorsExtraLibsPage.bas[318]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {72} , code10)) 
DonatorsExtraLibsPage.bas[319]  
DonatorsExtraLibsPage.bas[320]  Dim code11 As String = {10} 
DonatorsExtraLibsPage.bas[328]  
DonatorsExtraLibsPage.bas[329]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {73} , code11)) 
DonatorsExtraLibsPage.bas[330]  
DonatorsExtraLibsPage.bas[331]  ' also add the components to the footer 
DonatorsExtraLibsPage.bas[332]  ABMShared.ConnectFooter(page) 
DonatorsExtraLibsPage.bas[333]  
DonatorsExtraLibsPage.bas[334]  page.Refresh ' IMPORTANT 
DonatorsExtraLibsPage.bas[335]  
DonatorsExtraLibsPage.bas[336]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
DonatorsExtraLibsPage.bas[337]  page.FinishedLoading 'IMPORTANT 
DonatorsExtraLibsPage.bas[338]  
DonatorsExtraLibsPage.bas[339]  page.RestoreNavigationBarPosition 
DonatorsExtraLibsPage.bas[340] End Sub 
DonatorsExtraLibsPage.bas[341]  
DonatorsExtraLibsPage.bas[342] ' clicked on the navigation bar 
DonatorsExtraLibsPage.bas[343] Sub Page_NavigationbarClicked(Action As String, Value As String) 
DonatorsExtraLibsPage.bas[344]  page.SaveNavigationBarPosition 
DonatorsExtraLibsPage.bas[345]  If Action = {74} Then Return 
DonatorsExtraLibsPage.bas[346]  If Action = {75} Then 
DonatorsExtraLibsPage.bas[347]  myToastId = myToastId + 1 
DonatorsExtraLibsPage.bas[348]  page.ShowToast( {76} & myToastId, {77} , {78} , 5000) 
DonatorsExtraLibsPage.bas[349]  Return 
DonatorsExtraLibsPage.bas[350]  End If 
DonatorsExtraLibsPage.bas[351]  If Action = {79} Then 
DonatorsExtraLibsPage.bas[352]  ABMShared.LogOff(page) 
DonatorsExtraLibsPage.bas[353]  Return 
DonatorsExtraLibsPage.bas[354]  End If 
DonatorsExtraLibsPage.bas[355]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
DonatorsExtraLibsPage.bas[356] End Sub 
DonatorsExtraLibsPage.bas[357]  
DonatorsExtraLibsPage.bas[358] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
DonatorsExtraLibsPage.bas[359]  page.ws.Session.SetAttribute( {80} , {81} ) 
DonatorsExtraLibsPage.bas[360]  page.ws.Session.SetAttribute( {82} , {83} ) 
DonatorsExtraLibsPage.bas[361]  page.ws.Session.SetAttribute( {84} , {85} ) 
DonatorsExtraLibsPage.bas[362]  ABMShared.NavigateToPage(ws, ABMPageId, {86} ) 
DonatorsExtraLibsPage.bas[363] End Sub 
DonatorsExtraLibsPage.bas[364]  
Analysing: GettingStartedPage.bas
GettingStartedPage.bas[0] ﻿Type=Class 
GettingStartedPage.bas[0] Version=4.7 
GettingStartedPage.bas[0] ModulesStructureVersion=1 
GettingStartedPage.bas[0] B4J=true 
GettingStartedPage.bas[0] @EndOfDesignText@ 
GettingStartedPage.bas[1] 'Class module 
GettingStartedPage.bas[2] Sub Class_Globals 
GettingStartedPage.bas[3]  Private ws As WebSocket 'ignore 
GettingStartedPage.bas[4]  ' will hold our page information 
GettingStartedPage.bas[5]  Public page As ABMPage 
GettingStartedPage.bas[6]  ' page theme 
GettingStartedPage.bas[7]  Private theme As ABMTheme 
GettingStartedPage.bas[8]  ' to access the constants 
GettingStartedPage.bas[9]  Private ABM As ABMaterial 'ignore 
GettingStartedPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
GettingStartedPage.bas[11]  Public Name As String = {19} 
GettingStartedPage.bas[12]  ' will hold the unique browsers window id 
GettingStartedPage.bas[13]  Private ABMPageId As String = {20} 
GettingStartedPage.bas[14]  
GettingStartedPage.bas[15]  ' your own variables 
GettingStartedPage.bas[16]  Dim myToastId As Int 
GettingStartedPage.bas[17] End Sub 
GettingStartedPage.bas[18]  
GettingStartedPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
GettingStartedPage.bas[20] Public Sub Initialize 
GettingStartedPage.bas[21]  ' build the local structure IMPORTANT! 
GettingStartedPage.bas[22]  BuildPage 
GettingStartedPage.bas[23] End Sub 
GettingStartedPage.bas[24]  
GettingStartedPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
GettingStartedPage.bas[26]  Log( {21} ) 
GettingStartedPage.bas[27]  ws = WebSocket1 
GettingStartedPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
GettingStartedPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
GettingStartedPage.bas[30]  
GettingStartedPage.bas[31]  If ABMShared.NeedsAuthorization Then 
GettingStartedPage.bas[32]  If session.GetAttribute2( {22} , {23} ) = {24} Then 
GettingStartedPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {25} ) 
GettingStartedPage.bas[34]  Return 
GettingStartedPage.bas[35]  End If 
GettingStartedPage.bas[36]  End If 
GettingStartedPage.bas[37]  
GettingStartedPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
GettingStartedPage.bas[39]  If page.ComesFromPageCache Then 
GettingStartedPage.bas[40]  ' refresh the page 
GettingStartedPage.bas[41]  page.Refresh 
GettingStartedPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
GettingStartedPage.bas[43]  page.FinishedLoading 
GettingStartedPage.bas[44]  Else 
GettingStartedPage.bas[45]  ' Prepare the page 
GettingStartedPage.bas[46]  page.Prepare 
GettingStartedPage.bas[47]  ' load the dynamic content 
GettingStartedPage.bas[48]  ConnectPage 
GettingStartedPage.bas[49]  End If 
GettingStartedPage.bas[50]  Log(ABMPageId) 
GettingStartedPage.bas[51] End Sub 
GettingStartedPage.bas[52]  
GettingStartedPage.bas[53] Private Sub WebSocket_Disconnected 
GettingStartedPage.bas[54]  Log( {26} ) 
GettingStartedPage.bas[55] End Sub 
GettingStartedPage.bas[56]  
GettingStartedPage.bas[57] Sub Page_ParseEvent(Params As Map) 
GettingStartedPage.bas[58]  Dim eventName As String = Params.Get( {27} ) 
GettingStartedPage.bas[59]  Dim eventParams() As String = Regex.Split( {28} ,Params.Get( {29} )) 
GettingStartedPage.bas[60]  If eventName = {30} Then 
GettingStartedPage.bas[61]  Log( {31} ) 
GettingStartedPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
GettingStartedPage.bas[63]  Return 
GettingStartedPage.bas[64]  End If 
GettingStartedPage.bas[65]  If SubExists(Me, eventName) Then 
GettingStartedPage.bas[66]  Params.Remove( {32} ) 
GettingStartedPage.bas[67]  Params.Remove( {33} ) 
GettingStartedPage.bas[68]  Select Case Params.Size 
GettingStartedPage.bas[69]  Case 0 
GettingStartedPage.bas[70]  CallSub(Me, eventName) 
GettingStartedPage.bas[71]  Case 1 
GettingStartedPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
GettingStartedPage.bas[73]  Case 2 
GettingStartedPage.bas[74]  If Params.get(eventParams(0)) = {34} Then 
GettingStartedPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
GettingStartedPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
GettingStartedPage.bas[77]  Else 
GettingStartedPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
GettingStartedPage.bas[79]  End If 
GettingStartedPage.bas[80]  Case Else 
GettingStartedPage.bas[81]  ' cannot be called directly, to many param 
GettingStartedPage.bas[82]  CallSub2(Me, eventName, Params) 
GettingStartedPage.bas[83]  End Select 
GettingStartedPage.bas[84]  End If 
GettingStartedPage.bas[85] End Sub 
GettingStartedPage.bas[86]  
GettingStartedPage.bas[87] public Sub BuildTheme() 
GettingStartedPage.bas[88]  ' start with the base theme defined in ABMShared 
GettingStartedPage.bas[89]  theme.Initialize( {35} ) 
GettingStartedPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
GettingStartedPage.bas[91]  
GettingStartedPage.bas[92]  ' add additional themes specific for this page 
GettingStartedPage.bas[93]  
GettingStartedPage.bas[94] End Sub 
GettingStartedPage.bas[95]  
GettingStartedPage.bas[96] public Sub BuildPage() 
GettingStartedPage.bas[97]  ' initialize the theme 
GettingStartedPage.bas[98]  BuildTheme 
GettingStartedPage.bas[99]  
GettingStartedPage.bas[100]  ' initialize this page using our theme 
GettingStartedPage.bas[101]  page.InitializeWithTheme(Name, {36} & ABMShared.AppName & {37} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
GettingStartedPage.bas[102]  page.ShowLoader=True 
GettingStartedPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
GettingStartedPage.bas[104]  page.PageTitle = {38} 
GettingStartedPage.bas[105]  page.PageDescription = {39} 
GettingStartedPage.bas[106]  page.PageHTMLName = {40} 
GettingStartedPage.bas[107]  page.PageKeywords = {41} 
GettingStartedPage.bas[108]  page.PageSiteMapPriority = {42} 
GettingStartedPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
GettingStartedPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
GettingStartedPage.bas[111]  
GettingStartedPage.bas[112]  ABMShared.BuildNavigationBar(page, {43} , {44} , {45} , {46} , {47} ) 
GettingStartedPage.bas[113]  
GettingStartedPage.bas[114]  ' create the page grid 
GettingStartedPage.bas[115]  page.AddRows(5,True, {48} ).AddCells12(1, {49} ) 
GettingStartedPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
GettingStartedPage.bas[117]  
GettingStartedPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
GettingStartedPage.bas[119]  'page.NeedsCodeLabel = True 
GettingStartedPage.bas[120]  
GettingStartedPage.bas[121]  ABMShared.BuildFooter(page) 
GettingStartedPage.bas[122] End Sub 
GettingStartedPage.bas[123]  
GettingStartedPage.bas[124] Sub ConnectPage() 
GettingStartedPage.bas[125]  'NEW 
GettingStartedPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
GettingStartedPage.bas[127]  
GettingStartedPage.bas[128]  ' add a header label 
GettingStartedPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {50} , {51} )) 
GettingStartedPage.bas[130]  ' add paragraph 
GettingStartedPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {52} , {53} ) ) 
GettingStartedPage.bas[132]  ' add paragraph 
GettingStartedPage.bas[133]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} )) 
GettingStartedPage.bas[134]  ' add paragraph 
GettingStartedPage.bas[135]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {56} , {57} )) 
GettingStartedPage.bas[136]  
GettingStartedPage.bas[137]  ' add a header label 
GettingStartedPage.bas[138]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {58} , {59} )) 
GettingStartedPage.bas[139]  
GettingStartedPage.bas[140]  Dim s1 As String = {0} 
GettingStartedPage.bas[153]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {60} ,s1)) 
GettingStartedPage.bas[154]  
GettingStartedPage.bas[155]  s1 = {1} 
GettingStartedPage.bas[156]  
GettingStartedPage.bas[157]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {61} ,s1)) 
GettingStartedPage.bas[158]  
GettingStartedPage.bas[159]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {62} , {63} )) 
GettingStartedPage.bas[160]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {64} , {65} )) 
GettingStartedPage.bas[161]  
GettingStartedPage.bas[162]  s1 = {2} 
GettingStartedPage.bas[163]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {66} ,s1)) 
GettingStartedPage.bas[164]  
GettingStartedPage.bas[165]  Dim code As String = {3} 
GettingStartedPage.bas[170]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {67} , code)) 
GettingStartedPage.bas[171]  
GettingStartedPage.bas[172]  code = {4} 
GettingStartedPage.bas[175]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {68} , code)) 
GettingStartedPage.bas[176]  
GettingStartedPage.bas[177]  code = {5} 
GettingStartedPage.bas[203]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {69} , code)) 
GettingStartedPage.bas[204]  
GettingStartedPage.bas[205]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {70} , {71} )) 
GettingStartedPage.bas[206]  s1 = {6} 
GettingStartedPage.bas[207]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {72} ,s1)) 
GettingStartedPage.bas[208]  s1 = {7} 
GettingStartedPage.bas[211]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraphBQ(page, {73} , s1)) 
GettingStartedPage.bas[212]  
GettingStartedPage.bas[213]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {74} , {75} )) 
GettingStartedPage.bas[214]  s1 = {8} 
GettingStartedPage.bas[215]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {76} ,s1)) 
GettingStartedPage.bas[216]  
GettingStartedPage.bas[217]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {77} , {78} )) 
GettingStartedPage.bas[218]  s1 = {9} 
GettingStartedPage.bas[219]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {79} ,s1)) 
GettingStartedPage.bas[220]  
GettingStartedPage.bas[221]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {80} , {81} )) 
GettingStartedPage.bas[222]  s1 = {10} 
GettingStartedPage.bas[223]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {82} ,s1)) 
GettingStartedPage.bas[224]  
GettingStartedPage.bas[225]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {83} , {84} )) 
GettingStartedPage.bas[226]  s1 = {11} 
GettingStartedPage.bas[227]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {85} ,s1)) 
GettingStartedPage.bas[228]  
GettingStartedPage.bas[229]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader2(page, {86} , {87} )) 
GettingStartedPage.bas[230]  s1 = {12} 
GettingStartedPage.bas[231]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {88} ,s1)) 
GettingStartedPage.bas[232]  
GettingStartedPage.bas[233]  code = {13} 
GettingStartedPage.bas[248]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {89} , code.Replace( {90} , {91} ))) 
GettingStartedPage.bas[249]  
GettingStartedPage.bas[250]  code = {14} 
GettingStartedPage.bas[278]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {92} , code.Replace( {93} , {94} ))) 
GettingStartedPage.bas[279]  
GettingStartedPage.bas[280]  code = {15} 
GettingStartedPage.bas[322]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {95} , code.Replace( {96} , {97} ))) 
GettingStartedPage.bas[323]  
GettingStartedPage.bas[324]  code = {16} 
GettingStartedPage.bas[327]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {98} , code.Replace( {99} , {100} ))) 
GettingStartedPage.bas[328]  
GettingStartedPage.bas[329]  code = {17} 
GettingStartedPage.bas[358]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {101} , code.Replace( {102} , {103} ))) 
GettingStartedPage.bas[359]  
GettingStartedPage.bas[360]  code = {18} 
GettingStartedPage.bas[370]  page.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {104} , code.Replace( {105} , {106} ))) 
GettingStartedPage.bas[371]  
GettingStartedPage.bas[372]  ' add paragraph 
GettingStartedPage.bas[373]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {107} , {108} )) 
GettingStartedPage.bas[374]  ' add paragraph 
GettingStartedPage.bas[375]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {109} , {110} )) 
GettingStartedPage.bas[376]  
GettingStartedPage.bas[377]  ' also add the components to the footer 
GettingStartedPage.bas[378]  ABMShared.ConnectFooter(page) 
GettingStartedPage.bas[379]  
GettingStartedPage.bas[380]  page.Refresh ' IMPORTANT 
GettingStartedPage.bas[381]  
GettingStartedPage.bas[382]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
GettingStartedPage.bas[383]  page.FinishedLoading 'IMPORTANT 
GettingStartedPage.bas[384]  
GettingStartedPage.bas[385]  page.RestoreNavigationBarPosition 
GettingStartedPage.bas[386] End Sub 
GettingStartedPage.bas[387]  
GettingStartedPage.bas[388] ' clicked on the navigation bar 
GettingStartedPage.bas[389] Sub Page_NavigationbarClicked(Action As String, Value As String) 
GettingStartedPage.bas[390]  page.SaveNavigationBarPosition 
GettingStartedPage.bas[391]  If Action = {111} Then Return 
GettingStartedPage.bas[392]  If Action = {112} Then 
GettingStartedPage.bas[393]  myToastId = myToastId + 1 
GettingStartedPage.bas[394]  page.ShowToast( {113} & myToastId, {114} , {115} , 5000) 
GettingStartedPage.bas[395]  Return 
GettingStartedPage.bas[396]  End If 
GettingStartedPage.bas[397]  If Action = {116} Then 
GettingStartedPage.bas[398]  ABMShared.LogOff(page) 
GettingStartedPage.bas[399]  Return 
GettingStartedPage.bas[400]  End If 
GettingStartedPage.bas[401]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
GettingStartedPage.bas[402] End Sub 
GettingStartedPage.bas[403]  
GettingStartedPage.bas[404] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
GettingStartedPage.bas[405]  page.ws.Session.SetAttribute( {117} , {118} ) 
GettingStartedPage.bas[406]  page.ws.Session.SetAttribute( {119} , {120} ) 
GettingStartedPage.bas[407]  page.ws.Session.SetAttribute( {121} , {122} ) 
GettingStartedPage.bas[408]  ABMShared.NavigateToPage(ws, ABMPageId, {123} ) 
GettingStartedPage.bas[409] End Sub 
Analysing: GridsPage.bas
GridsPage.bas[0] ﻿Type=Class 
GridsPage.bas[0] Version=4.7 
GridsPage.bas[0] ModulesStructureVersion=1 
GridsPage.bas[0] B4J=true 
GridsPage.bas[0] @EndOfDesignText@ 
GridsPage.bas[1] 'Class module 
GridsPage.bas[2] Sub Class_Globals 
GridsPage.bas[3]  Private ws As WebSocket 'ignore 
GridsPage.bas[4]  ' will hold our page information 
GridsPage.bas[5]  Public page As ABMPage 
GridsPage.bas[6]  ' page theme 
GridsPage.bas[7]  Private theme As ABMTheme 
GridsPage.bas[8]  ' to access the constants 
GridsPage.bas[9]  Private ABM As ABMaterial 'ignore 
GridsPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
GridsPage.bas[11]  Public Name As String = {1} 
GridsPage.bas[12]  ' will hold the unique browsers window id 
GridsPage.bas[13]  Private ABMPageId As String = {2} 
GridsPage.bas[14]  
GridsPage.bas[15]  ' your own variables 
GridsPage.bas[16]  Dim myToastId As Int 
GridsPage.bas[17]  
GridsPage.bas[18]  Dim Origin As String = {3} '<--- IMPORTANT for youtube videos. Set here your website address 
GridsPage.bas[19] End Sub 
GridsPage.bas[20]  
GridsPage.bas[21] 'Initializes the object. You can add parameters to this method if needed. 
GridsPage.bas[22] Public Sub Initialize 
GridsPage.bas[23]  ' build the local structure IMPORTANT! 
GridsPage.bas[24]  BuildPage 
GridsPage.bas[25] End Sub 
GridsPage.bas[26]  
GridsPage.bas[27] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
GridsPage.bas[28]  Log( {4} ) 
GridsPage.bas[29]  ws = WebSocket1 
GridsPage.bas[30]  ABMPageId = ABM.GetPageID(page, Name,ws) 
GridsPage.bas[31]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
GridsPage.bas[32]  
GridsPage.bas[33]  If ABMShared.NeedsAuthorization Then 
GridsPage.bas[34]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
GridsPage.bas[35]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
GridsPage.bas[36]  Return 
GridsPage.bas[37]  End If 
GridsPage.bas[38]  End If 
GridsPage.bas[39]  
GridsPage.bas[40]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
GridsPage.bas[41]  If page.ComesFromPageCache Then 
GridsPage.bas[42]  ' refresh the page 
GridsPage.bas[43]  page.Refresh 
GridsPage.bas[44]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
GridsPage.bas[45]  page.FinishedLoading 
GridsPage.bas[46]  Else 
GridsPage.bas[47]  ' Prepare the page 
GridsPage.bas[48]  page.Prepare 
GridsPage.bas[49]  ' load the dynamic content 
GridsPage.bas[50]  ConnectPage 
GridsPage.bas[51]  End If 
GridsPage.bas[52]  Log(ABMPageId) 
GridsPage.bas[53] End Sub 
GridsPage.bas[54]  
GridsPage.bas[55] Private Sub WebSocket_Disconnected 
GridsPage.bas[56]  Log( {9} ) 
GridsPage.bas[57] End Sub 
GridsPage.bas[58]  
GridsPage.bas[59] Sub Page_ParseEvent(Params As Map) 
GridsPage.bas[60]  Dim eventName As String = Params.Get( {10} ) 
GridsPage.bas[61]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
GridsPage.bas[62]  If eventName = {13} Then 
GridsPage.bas[63]  Log( {14} ) 
GridsPage.bas[64]  ws.session.SetAttribute( {15} , True) 
GridsPage.bas[65]  Return 
GridsPage.bas[66]  End If 
GridsPage.bas[67]  If SubExists(Me, eventName) Then 
GridsPage.bas[68]  Params.Remove( {16} ) 
GridsPage.bas[69]  Params.Remove( {17} ) 
GridsPage.bas[70]  Select Case Params.Size 
GridsPage.bas[71]  Case 0 
GridsPage.bas[72]  CallSub(Me, eventName) 
GridsPage.bas[73]  Case 1 
GridsPage.bas[74]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
GridsPage.bas[75]  Case 2 
GridsPage.bas[76]  If Params.get(eventParams(0)) = {18} Then 
GridsPage.bas[77]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
GridsPage.bas[78]  CallSub2(Me, eventName, PassedTables) 
GridsPage.bas[79]  Else 
GridsPage.bas[80]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
GridsPage.bas[81]  End If 
GridsPage.bas[82]  Case Else 
GridsPage.bas[83]  ' cannot be called diretly, to many param 
GridsPage.bas[84]  CallSub2(Me, eventName, Params) 
GridsPage.bas[85]  End Select 
GridsPage.bas[86]  End If 
GridsPage.bas[87] End Sub 
GridsPage.bas[88]  
GridsPage.bas[89] public Sub BuildTheme() 
GridsPage.bas[90]  ' start with the base theme defined in ABMShared 
GridsPage.bas[91]  theme.Initialize( {19} ) 
GridsPage.bas[92]  theme.AddABMTheme(ABMShared.MyTheme) 
GridsPage.bas[93]  
GridsPage.bas[94]  ' add additional themes specific for this page 
GridsPage.bas[95]  
GridsPage.bas[96]  ' cell theme 
GridsPage.bas[97]  theme.AddCellTheme( {20} ) 
GridsPage.bas[98]  theme.Cell( {21} ).BackColor = ABM.COLOR_LIGHTBLUE 
GridsPage.bas[99]  theme.Cell( {22} ).BorderColor = ABM.COLOR_WHITE 
GridsPage.bas[100]  theme.Cell( {23} ).BorderWidth = 1 
GridsPage.bas[101]  
GridsPage.bas[102]  ' grid label 
GridsPage.bas[103]  theme.AddLabelTheme( {24} ) 
GridsPage.bas[104]  theme.Label( {25} ).ForeColor = ABM.COLOR_WHITE 
GridsPage.bas[105]  theme.Label( {26} ).Align = ABM.TEXTALIGN_CENTER 
GridsPage.bas[106] End Sub 
GridsPage.bas[107]  
GridsPage.bas[108] public Sub BuildPage() 
GridsPage.bas[109]  ' initialize the theme 
GridsPage.bas[110]  BuildTheme 
GridsPage.bas[111]  
GridsPage.bas[112]  ' initialize this page using our theme 
GridsPage.bas[113]  page.InitializeWithTheme(Name, {27} & ABMShared.AppName & {28} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
GridsPage.bas[114]  page.ShowLoader=True 
GridsPage.bas[115]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
GridsPage.bas[116]  page.PageTitle = {29} 
GridsPage.bas[117]  page.PageDescription = {30} 
GridsPage.bas[118]  page.PageHTMLName = {31} 
GridsPage.bas[119]  page.PageKeywords = {32} 
GridsPage.bas[120]  page.PageSiteMapPriority = {33} 
GridsPage.bas[121]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
GridsPage.bas[122]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
GridsPage.bas[123]  
GridsPage.bas[124]  ABMShared.BuildNavigationBar(page, {34} , {35} , {36} , {37} , {38} ) 
GridsPage.bas[125]  
GridsPage.bas[126]  ' create the page grid 
GridsPage.bas[127]  page.AddRows(1, True, {39} ).AddCells12(1, {40} ) 
GridsPage.bas[128]  page.AddRowsM(1, True,0,0, {41} ).AddCellsOS(12,0,0,0,3,2,1, {42} ) 
GridsPage.bas[129]  page.AddRows(3, True, {43} ).AddCells12(1, {44} ) 
GridsPage.bas[130]  page.AddRowsM(1, True,0,0, {45} ).AddCellsOS(2,0,0,0,6,6,6, {46} ) 
GridsPage.bas[131]  page.AddRows(2, True, {47} ).AddCells12(1, {48} ) 
GridsPage.bas[132]  page.AddRowsM(1, True,0,0, {49} ).AddCellsOS(1,6,6,6,6,6,6, {50} ) 
GridsPage.bas[133]  page.AddRows(11, True, {51} ).AddCells12(1, {52} ) 
GridsPage.bas[134]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
GridsPage.bas[135]  
GridsPage.bas[136]  ABMShared.BuildFooter(page) 
GridsPage.bas[137] End Sub 
GridsPage.bas[138]  
GridsPage.bas[139] Sub ConnectPage() 
GridsPage.bas[140]  'NEW 
GridsPage.bas[141]  ABMShared.ConnectNavigationBar(page) 
GridsPage.bas[142]  
GridsPage.bas[143]  ' add a header label 
GridsPage.bas[144]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {53} , {54} )) 
GridsPage.bas[145]  ' add paragraph 
GridsPage.bas[146]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {55} , {56} ) ) 
GridsPage.bas[147]  ' add sub header 
GridsPage.bas[148]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {57} , {58} ) ) 
GridsPage.bas[149]  Dim img2 As ABMImage 
GridsPage.bas[150]  img2.Initialize(page, {59} , {60} , 1) 
GridsPage.bas[151]  img2.IsResponsive = True 
GridsPage.bas[152]  page.Cell(1,1).AddComponent(img2) 
GridsPage.bas[153]  
GridsPage.bas[154]  ' add sub header 
GridsPage.bas[155]  page.Cell(1,1).AddComponent(ABMShared.BuildSubHeader(page, {61} , {62} )) 
GridsPage.bas[156]  ' add paragraph 
GridsPage.bas[157]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {63} , {64} )) 
GridsPage.bas[158]  ' add 12 cells 
GridsPage.bas[159]  For i=1 To 12 
GridsPage.bas[160]  page.Cell(2,i).UseTheme( {65} ) 
GridsPage.bas[161]  Dim lblGrid As ABMLabel 
GridsPage.bas[162]  lblGrid.Initialize(page, {66} & i & {67} , {68} & i, ABM.SIZE_H6, True, {69} ) 
GridsPage.bas[163]  page.Cell(2,i).AddComponent(lblGrid) 
GridsPage.bas[164]  Next 
GridsPage.bas[165]  ' add paragraph 
GridsPage.bas[166]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {70} , {71} )) 
GridsPage.bas[167]  
GridsPage.bas[168]  ' add codeblock 
GridsPage.bas[169]  Dim code As String 
GridsPage.bas[170]  code = {0} 
GridsPage.bas[179]  
GridsPage.bas[180]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {72} , code)) 
GridsPage.bas[181]  
GridsPage.bas[182]  ' add sub header 
GridsPage.bas[183]  page.Cell(4,1).AddComponent(ABMShared.BuildSubHeader(page, {73} , {74} )) 
GridsPage.bas[184]  ' add paragraph 
GridsPage.bas[185]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {75} , {76} )) 
GridsPage.bas[186]  
GridsPage.bas[187]  page.Cell(5,1).UseTheme( {77} ) 
GridsPage.bas[188]  Dim lblGrid As ABMLabel 
GridsPage.bas[189]  lblGrid.Initialize(page, {78} , {79} , ABM.SIZE_H6, True, {80} ) 
GridsPage.bas[190]  page.Cell(5,1).AddComponent(lblGrid) 
GridsPage.bas[191]  
GridsPage.bas[192]  page.Cell(6,1).UseTheme( {81} ) 
GridsPage.bas[193]  Dim lblGrid As ABMLabel 
GridsPage.bas[194]  lblGrid.Initialize(page, {82} , {83} , ABM.SIZE_H6, True, {84} ) 
GridsPage.bas[195]  page.Cell(6,1).AddComponent(lblGrid) 
GridsPage.bas[196]  
GridsPage.bas[197]  page.Cell(6,2).UseTheme( {85} ) 
GridsPage.bas[198]  Dim lblGrid As ABMLabel 
GridsPage.bas[199]  lblGrid.Initialize(page, {86} , {87} , ABM.SIZE_H6, True, {88} ) 
GridsPage.bas[200]  page.Cell(6,2).AddComponent(lblGrid) 
GridsPage.bas[201]  
GridsPage.bas[202]  ' add sub header 
GridsPage.bas[203]  page.Cell(7,1).AddComponent(ABMShared.BuildSubHeader(page, {89} , {90} )) 
GridsPage.bas[204]  ' add paragraph 
GridsPage.bas[205]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {91} , {92} )) 
GridsPage.bas[206]  
GridsPage.bas[207]  page.Cell(8,1).UseTheme( {93} ) 
GridsPage.bas[208]  Dim lblGrid As ABMLabel 
GridsPage.bas[209]  lblGrid.Initialize(page, {94} , {95} , ABM.SIZE_H6, True, {96} ) 
GridsPage.bas[210]  page.Cell(8,1).AddComponent(lblGrid) 
GridsPage.bas[211]  
GridsPage.bas[212]  page.Cell(9,1).UseTheme( {97} ) 
GridsPage.bas[213]  Dim lblGrid As ABMLabel 
GridsPage.bas[214]  lblGrid.Initialize(page, {98} , {99} , ABM.SIZE_H6, True, {100} ) 
GridsPage.bas[215]  page.Cell(9,1).AddComponent(lblGrid) 
GridsPage.bas[216]  
GridsPage.bas[217]  ' add sub header 
GridsPage.bas[218]  page.Cell(10,1).AddComponent(ABMShared.BuildSubHeader(page, {101} , {102} )) 
GridsPage.bas[219]  ' add paragraph 
GridsPage.bas[220]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {103} , {104} )) 
GridsPage.bas[221]  ' add paragraph 
GridsPage.bas[222]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {105} , {106} )) 
GridsPage.bas[223]  
GridsPage.bas[224]  ' add paragraph 
GridsPage.bas[225]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {107} , {108} )) 
GridsPage.bas[226]  ' add param table 
GridsPage.bas[227]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[228]  Headers.Initialize2(Array As String( {109} , {110} )) 
GridsPage.bas[229]  codes.Initialize2(Array As String( {111} , {112} , {113} )) 
GridsPage.bas[230]  Descriptions.Initialize2(Array As String( {297} , {123} , {299} )) 
GridsPage.bas[231]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {127} , Headers, codes, Descriptions)) 
GridsPage.bas[232]  
GridsPage.bas[233]  ' add paragraph 
GridsPage.bas[234]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {128} , {129} )) 
GridsPage.bas[235]  ' add param table 
GridsPage.bas[236]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[237]  Headers.Initialize2(Array As String( {130} , {131} )) 
GridsPage.bas[238]  codes.Initialize2(Array As String( {132} , {133} , {134} , {135} , {136} )) 
GridsPage.bas[239]  Descriptions.Initialize2(Array As String( {307} , {146} , {147} , {148} , {309} )) 
GridsPage.bas[240]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {152} , Headers, codes, Descriptions)) 
GridsPage.bas[241]  
GridsPage.bas[242]  ' add paragraph 
GridsPage.bas[243]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {153} , {154} )) 
GridsPage.bas[244]  
GridsPage.bas[245]  ' add paragraph 
GridsPage.bas[246]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {155} , {156} )) 
GridsPage.bas[247]  ' add param table 
GridsPage.bas[248]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[249]  Headers.Initialize2(Array As String( {157} , {158} )) 
GridsPage.bas[250]  codes.Initialize2(Array As String( {159} , {160} )) 
GridsPage.bas[251]  Descriptions.Initialize2(Array As String( {317} , {319} )) 
GridsPage.bas[252]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {173} , Headers, codes, Descriptions)) 
GridsPage.bas[253]  
GridsPage.bas[254]  ' add paragraph 
GridsPage.bas[255]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {174} , {175} )) 
GridsPage.bas[256]  ' add param table 
GridsPage.bas[257]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[258]  Headers.Initialize2(Array As String( {176} , {177} )) 
GridsPage.bas[259]  codes.Initialize2(Array As String( {178} , {179} , {180} , {181} , {182} , {183} , {184} , {185} )) 
GridsPage.bas[260]  Descriptions.Initialize2(Array As String( {186} , {187} , {188} , {189} , {190} , {191} , {192} , {321} )) 
GridsPage.bas[261]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {196} , Headers, codes, Descriptions)) 
GridsPage.bas[262]  
GridsPage.bas[263]  ' add paragraph 
GridsPage.bas[264]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {197} , {198} )) 
GridsPage.bas[265]  ' add param table 
GridsPage.bas[266]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[267]  Headers.Initialize2(Array As String( {199} , {200} )) 
GridsPage.bas[268]  codes.Initialize2(Array As String( {201} , {202} , {203} , {204} , {205} , {206} )) 
GridsPage.bas[269]  Descriptions.Initialize2(Array As String( {207} , {208} , {209} , {210} , {211} , {323} )) 
GridsPage.bas[270]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {215} , Headers, codes, Descriptions)) 
GridsPage.bas[271]  
GridsPage.bas[272]  ' add paragraph 
GridsPage.bas[273]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {216} , {217} )) 
GridsPage.bas[274]  ' add param table 
GridsPage.bas[275]  Dim Headers, codes, Descriptions As List 
GridsPage.bas[276]  Headers.Initialize2(Array As String( {218} , {219} )) 
GridsPage.bas[277]  codes.Initialize2(Array As String( {220} , {221} , {222} , {223} , {224} , {225} , {226} , {227} , {228} , {229} , {230} , {231} )) 
GridsPage.bas[278]  Descriptions.Initialize2(Array As String( {232} , {233} , {234} , {235} , {236} , {237} , {238} , {239} , {240} , {241} , {242} , {325} )) 
GridsPage.bas[279]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {246} , Headers, codes, Descriptions)) 
GridsPage.bas[280]  
GridsPage.bas[281]  ' add sub header 
GridsPage.bas[282]  page.Cell(11,1).AddComponent(ABMShared.BuildSubHeader(page, {247} , {248} )) 
GridsPage.bas[283]  ' add paragraph 
GridsPage.bas[284]  page.Cell(11,1).AddComponent(ABMShared.BuildParagraph(page, {249} , {250} )) 
GridsPage.bas[285]  ' add paragraph 
GridsPage.bas[286]  page.Cell(11,1).AddComponent(ABMShared.BuildParagraph(page, {251} , {252} )) 
GridsPage.bas[287]  
GridsPage.bas[288]  Dim img As ABMImage 
GridsPage.bas[289]  img.Initialize(page, {253} , {254} , 1) 
GridsPage.bas[290]  img.IsResponsive = True 
GridsPage.bas[291]  page.Cell(12,1).AddComponent(img) 
GridsPage.bas[292]  
GridsPage.bas[293]  ' add a header label 
GridsPage.bas[294]  page.Cell(13,1).AddComponent(ABMShared.BuildHeader(page, {255} , {256} )) 
GridsPage.bas[295]  ' add paragraph 
GridsPage.bas[296]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {257} , {258} ) ) 
GridsPage.bas[297]  ' add paragraph 
GridsPage.bas[298]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {259} , {260} ) ) 
GridsPage.bas[299]  ' add paragraph 
GridsPage.bas[300]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {261} , {262} ) ) 
GridsPage.bas[301]  ' add paragraph 
GridsPage.bas[302]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {263} , {264} ) ) 
GridsPage.bas[303]  
GridsPage.bas[304]  ' add Youtube video 
GridsPage.bas[305]  Dim video1b As ABMVideo 
GridsPage.bas[306]  video1b.InitializeYoutube(page, {265} , {266} , Origin, False, False, False, 100) 
GridsPage.bas[307]  page.Cell(14,1).AddComponent(video1b) 
GridsPage.bas[308]  
GridsPage.bas[309]  page.Cell(15,1).AddComponent(ABMShared.BuildParagraph(page, {267} , {268} ) ) 
GridsPage.bas[310]  
GridsPage.bas[311]  Dim img2a As ABMImage 
GridsPage.bas[312]  img2a.Initialize(page, {269} , {270} , 1) 
GridsPage.bas[313]  img2a.IsResponsive = True 
GridsPage.bas[314]  page.Cell(15,1).AddComponent(img2a) 
GridsPage.bas[315]  
GridsPage.bas[316]  page.Cell(15,1).AddComponent(ABMShared.BuildParagraph(page, {271} , {272} ) ) 
GridsPage.bas[317]  
GridsPage.bas[318]  page.Cell(16,1).AddComponent(ABMShared.BuildParagraph(page, {273} , {274} ) ) 
GridsPage.bas[319]  
GridsPage.bas[320]  ' add paragraph 
GridsPage.bas[321]  page.Cell(17,1).AddComponent(ABMShared.BuildParagraph(page, {275} , {276} )) 
GridsPage.bas[322]  
GridsPage.bas[323]  ' also add the components to the footer 
GridsPage.bas[324]  ABMShared.ConnectFooter(page) 
GridsPage.bas[325]  
GridsPage.bas[326]  page.Refresh ' IMPORTANT 
GridsPage.bas[327]  
GridsPage.bas[328]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
GridsPage.bas[329]  page.FinishedLoading 'IMPORTANT 
GridsPage.bas[330]  
GridsPage.bas[331]  page.RestoreNavigationBarPosition 
GridsPage.bas[332] End Sub 
GridsPage.bas[333]  
GridsPage.bas[334]  
GridsPage.bas[335] ' clicked on the navigation bar 
GridsPage.bas[336] Sub Page_NavigationbarClicked(Action As String, Value As String) 
GridsPage.bas[337]  page.SaveNavigationBarPosition 
GridsPage.bas[338]  If Action = {277} Then Return 
GridsPage.bas[339]  If Action = {278} Then 
GridsPage.bas[340]  myToastId = myToastId + 1 
GridsPage.bas[341]  page.ShowToast( {279} & myToastId, {280} , {281} , 5000) 
GridsPage.bas[342]  Return 
GridsPage.bas[343]  End If 
GridsPage.bas[344]  If Action = {282} Then 
GridsPage.bas[345]  ABMShared.LogOff(page) 
GridsPage.bas[346]  Return 
GridsPage.bas[347]  End If 
GridsPage.bas[348]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
GridsPage.bas[349] End Sub 
GridsPage.bas[350]  
GridsPage.bas[351] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
GridsPage.bas[352]  page.ws.Session.SetAttribute( {283} , {284} ) 
GridsPage.bas[353]  page.ws.Session.SetAttribute( {285} , {286} ) 
GridsPage.bas[354]  page.ws.Session.SetAttribute( {287} , {288} ) 
GridsPage.bas[355]  ABMShared.NavigateToPage(ws, ABMPageId, {289} ) 
GridsPage.bas[356] End Sub 
GridsPage.bas[357]  
GridsPage.bas[358]  
Analysing: HelperContainerPage.bas
HelperContainerPage.bas[0] ﻿Type=Class 
HelperContainerPage.bas[0] Version=4.7 
HelperContainerPage.bas[0] ModulesStructureVersion=1 
HelperContainerPage.bas[0] B4J=true 
HelperContainerPage.bas[0] @EndOfDesignText@ 
HelperContainerPage.bas[1] 'Class module 
HelperContainerPage.bas[2] Sub Class_Globals 
HelperContainerPage.bas[3]  Private ws As WebSocket 'ignore 
HelperContainerPage.bas[4]  ' will hold our page information 
HelperContainerPage.bas[5]  Public page As ABMPage 
HelperContainerPage.bas[6]  ' page theme 
HelperContainerPage.bas[7]  Private theme As ABMTheme 
HelperContainerPage.bas[8]  ' to access the constants 
HelperContainerPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperContainerPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperContainerPage.bas[11]  Public Name As String = {4} 
HelperContainerPage.bas[12]  ' will hold the unique browsers window id 
HelperContainerPage.bas[13]  Private ABMPageId As String = {5} 
HelperContainerPage.bas[14]  
HelperContainerPage.bas[15]  ' your own variables 
HelperContainerPage.bas[16]  Dim myToastId As Int 
HelperContainerPage.bas[17] End Sub 
HelperContainerPage.bas[18]  
HelperContainerPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
HelperContainerPage.bas[20] Public Sub Initialize 
HelperContainerPage.bas[21]  ' build the local structure IMPORTANT! 
HelperContainerPage.bas[22]  BuildPage 
HelperContainerPage.bas[23] End Sub 
HelperContainerPage.bas[24]  
HelperContainerPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperContainerPage.bas[26]  Log( {6} ) 
HelperContainerPage.bas[27]  ws = WebSocket1 
HelperContainerPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperContainerPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperContainerPage.bas[30]  
HelperContainerPage.bas[31]  If ABMShared.NeedsAuthorization Then 
HelperContainerPage.bas[32]  If session.GetAttribute2( {7} , {8} ) = {9} Then 
HelperContainerPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {10} ) 
HelperContainerPage.bas[34]  Return 
HelperContainerPage.bas[35]  End If 
HelperContainerPage.bas[36]  End If 
HelperContainerPage.bas[37]  
HelperContainerPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperContainerPage.bas[39]  If page.ComesFromPageCache Then 
HelperContainerPage.bas[40]  ' refresh the page 
HelperContainerPage.bas[41]  page.Refresh 
HelperContainerPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperContainerPage.bas[43]  page.FinishedLoading 
HelperContainerPage.bas[44]  Else 
HelperContainerPage.bas[45]  ' Prepare the page 
HelperContainerPage.bas[46]  page.Prepare 
HelperContainerPage.bas[47]  ' load the dynamic content 
HelperContainerPage.bas[48]  ConnectPage 
HelperContainerPage.bas[49]  End If 
HelperContainerPage.bas[50]  Log(ABMPageId) 
HelperContainerPage.bas[51] End Sub 
HelperContainerPage.bas[52]  
HelperContainerPage.bas[53] Private Sub WebSocket_Disconnected 
HelperContainerPage.bas[54]  Log( {11} ) 
HelperContainerPage.bas[55] End Sub 
HelperContainerPage.bas[56]  
HelperContainerPage.bas[57] Sub Page_ParseEvent(Params As Map) 
HelperContainerPage.bas[58]  Dim eventName As String = Params.Get( {12} ) 
HelperContainerPage.bas[59]  Dim eventParams() As String = Regex.Split( {13} ,Params.Get( {14} )) 
HelperContainerPage.bas[60]  If eventName = {15} Then 
HelperContainerPage.bas[61]  Log( {16} ) 
HelperContainerPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperContainerPage.bas[63]  Return 
HelperContainerPage.bas[64]  End If 
HelperContainerPage.bas[65]  If SubExists(Me, eventName) Then 
HelperContainerPage.bas[66]  Params.Remove( {17} ) 
HelperContainerPage.bas[67]  Params.Remove( {18} ) 
HelperContainerPage.bas[68]  Select Case Params.Size 
HelperContainerPage.bas[69]  Case 0 
HelperContainerPage.bas[70]  CallSub(Me, eventName) 
HelperContainerPage.bas[71]  Case 1 
HelperContainerPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperContainerPage.bas[73]  Case 2 
HelperContainerPage.bas[74]  If Params.get(eventParams(0)) = {19} Then 
HelperContainerPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperContainerPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
HelperContainerPage.bas[77]  Else 
HelperContainerPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperContainerPage.bas[79]  End If 
HelperContainerPage.bas[80]  Case Else 
HelperContainerPage.bas[81]  ' cannot be called directly, to many param 
HelperContainerPage.bas[82]  CallSub2(Me, eventName, Params) 
HelperContainerPage.bas[83]  End Select 
HelperContainerPage.bas[84]  End If 
HelperContainerPage.bas[85] End Sub 
HelperContainerPage.bas[86]  
HelperContainerPage.bas[87] public Sub BuildTheme() 
HelperContainerPage.bas[88]  ' start with the base theme defined in ABMShared 
HelperContainerPage.bas[89]  theme.Initialize( {20} ) 
HelperContainerPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperContainerPage.bas[91]  
HelperContainerPage.bas[92]  ' add additional themes specific for this page 
HelperContainerPage.bas[93]  ' cell theme 
HelperContainerPage.bas[94]  theme.AddCellTheme( {21} ) 
HelperContainerPage.bas[95]  theme.Cell( {22} ).BackColor = ABM.COLOR_LIGHTBLUE 
HelperContainerPage.bas[96]  theme.Cell( {23} ).BorderColor = ABM.COLOR_WHITE 
HelperContainerPage.bas[97]  theme.Cell( {24} ).BorderWidth = 1 
HelperContainerPage.bas[98]  
HelperContainerPage.bas[99]  ' grid label 
HelperContainerPage.bas[100]  theme.AddLabelTheme( {25} ) 
HelperContainerPage.bas[101]  theme.Label( {26} ).ForeColor = ABM.COLOR_WHITE 
HelperContainerPage.bas[102]  theme.Label( {27} ).Align = ABM.TEXTALIGN_CENTER 
HelperContainerPage.bas[103]  
HelperContainerPage.bas[104]  ' bluegray button 
HelperContainerPage.bas[105]  theme.AddButtonTheme( {28} ) 
HelperContainerPage.bas[106]  theme.Button( {29} ).BackColor = ABM.COLOR_BLUEGREY 
HelperContainerPage.bas[107]  theme.Button( {30} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
HelperContainerPage.bas[108]  
HelperContainerPage.bas[109]  theme.AddCardTheme( {31} ) 
HelperContainerPage.bas[110]  theme.Card( {32} ).TitleForeColor = ABM.COLOR_WHITE 
HelperContainerPage.bas[111] End Sub 
HelperContainerPage.bas[112]  
HelperContainerPage.bas[113] public Sub BuildPage() 
HelperContainerPage.bas[114]  ' initialize the theme 
HelperContainerPage.bas[115]  BuildTheme 
HelperContainerPage.bas[116]  
HelperContainerPage.bas[117]  ' initialize this page using our theme 
HelperContainerPage.bas[118]  page.InitializeWithTheme(Name, {33} & ABMShared.AppName & {34} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperContainerPage.bas[119]  page.ShowLoader=True 
HelperContainerPage.bas[120]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperContainerPage.bas[121]  page.PageTitle = {35} 
HelperContainerPage.bas[122]  page.PageDescription = {36} 
HelperContainerPage.bas[123]  page.PageHTMLName = {37} 
HelperContainerPage.bas[124]  page.PageKeywords = {38} 
HelperContainerPage.bas[125]  page.PageSiteMapPriority = {39} 
HelperContainerPage.bas[126]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperContainerPage.bas[127]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperContainerPage.bas[128]  'page.ShowGridInfo = True 
HelperContainerPage.bas[129]  
HelperContainerPage.bas[130]  
HelperContainerPage.bas[131]  ABMShared.BuildNavigationBar(page, {40} , {41} , {42} , {43} , {44} ) 
HelperContainerPage.bas[132]  
HelperContainerPage.bas[133]  ' create the page grid 
HelperContainerPage.bas[134]  page.AddRows(1,True, {45} ).AddCells12(1, {46} ) 
HelperContainerPage.bas[135]  page.AddRows(1,True, {47} ).AddCellsOS(1,0,0,0,12,8,6, {48} ).AddCellsOS(1,0,0,0,12,4,6, {49} ) 
HelperContainerPage.bas[136]  page.AddRows(16,True, {50} ).AddCells12(1, {51} ) 
HelperContainerPage.bas[137]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperContainerPage.bas[138]  
HelperContainerPage.bas[139]  
HelperContainerPage.bas[140]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperContainerPage.bas[141]  'page.NeedsCodeLabel = True 
HelperContainerPage.bas[142]  
HelperContainerPage.bas[143]  ABMShared.BuildFooter(page) 
HelperContainerPage.bas[144] End Sub 
HelperContainerPage.bas[145]  
HelperContainerPage.bas[146] Sub ConnectPage() 
HelperContainerPage.bas[147]  'NEW 
HelperContainerPage.bas[148]  ABMShared.ConnectNavigationBar(page) 
HelperContainerPage.bas[149]  
HelperContainerPage.bas[150]  ' add paragraph 
HelperContainerPage.bas[151]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {52} , {53} ) ) 
HelperContainerPage.bas[152]  ' add paragraph 
HelperContainerPage.bas[153]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} ) ) 
HelperContainerPage.bas[154]  ' add paragraph 
HelperContainerPage.bas[155]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {56} , {57} ) ) 
HelperContainerPage.bas[156]  
HelperContainerPage.bas[157]  ' create the container 
HelperContainerPage.bas[158]  Dim cont1 As ABMContainer 
HelperContainerPage.bas[159]  cont1.Initialize(page, {58} , {59} ) 
HelperContainerPage.bas[160]  
HelperContainerPage.bas[161]  'PHONE 
HelperContainerPage.bas[162] '╔═══════════════════════════════════════════════════════════════════════════════════╗ 
HelperContainerPage.bas[163] '║ 1,1 ║ 
HelperContainerPage.bas[164] '╠═══════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[165] '║ 2,1 | 2,2 | 2,3 ║ 
HelperContainerPage.bas[166] '║-----------------------------------------------------------------------------------║ 
HelperContainerPage.bas[167] '║ 2,4 | 2,5 | 2,6 ║ 
HelperContainerPage.bas[168] '║-----------------------------------------------------------------------------------║ 
HelperContainerPage.bas[169] '║ 2,7 | 2,8 | 2,9 ║ 
HelperContainerPage.bas[170] '║-----------------------------------------------------------------------------------║ 
HelperContainerPage.bas[171] '║ 2,10 | 2,11 | 2,12 ║ 
HelperContainerPage.bas[172] '╠═══════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[173] '║ 3,1 ║ 
HelperContainerPage.bas[174] '╠═══════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[175] '║ 4,1 ║ 
HelperContainerPage.bas[176] '╚═══════════════════════════════════════════════════════════════════════════════════╝ 
HelperContainerPage.bas[177]  
HelperContainerPage.bas[178] 'TABLET 
HelperContainerPage.bas[179] '╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════╗ 
HelperContainerPage.bas[180] '║ 1,1 ║ 
HelperContainerPage.bas[181] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[182] '║ 2,1 | 2,2 | 2,3 | 2,4 ║ 
HelperContainerPage.bas[183] '║-----------------------------------------------------------------------------------------------------------║ 
HelperContainerPage.bas[184] '║ 2,5 | 2,6 | 2,7 | 2,8 ║ 
HelperContainerPage.bas[185] '║-----------------------------------------------------------------------------------------------------------║ 
HelperContainerPage.bas[186] '║ 2,9 | 2,10 | 2,11 | 2,12 ║ 
HelperContainerPage.bas[187] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[188] '║ 3,1 ║ 
HelperContainerPage.bas[189] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[190] '║ 4,1 ║ 
HelperContainerPage.bas[191] '╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════╝ 
HelperContainerPage.bas[192]  
HelperContainerPage.bas[193] 'DESKTOP 
HelperContainerPage.bas[194] '╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗ 
HelperContainerPage.bas[195] '║ 1,1 ║ 
HelperContainerPage.bas[196] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[197] '║ 2,1 | 2,2 | 2,3 | 2,4 | 2,5 | 2,6 | 2,7 | 2,8 | 2,9 | 2,10 | 2,11 | 2,12 ║ 
HelperContainerPage.bas[198] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[199] '║ 3,1 ║ 
HelperContainerPage.bas[200] '╠═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╣ 
HelperContainerPage.bas[201] '║ 4,1 ║ 
HelperContainerPage.bas[202] '╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝ 
HelperContainerPage.bas[203]  
HelperContainerPage.bas[204]  cont1.AddRows(1, True, {60} ).AddCells12(1, {61} ) 
HelperContainerPage.bas[205]  cont1.AddRows(1, True, {62} ).AddCellsOS(12,0,0,0,4,3,1, {63} ) 
HelperContainerPage.bas[206]  cont1.AddRows(2, True, {64} ).AddCells12(1, {65} ) 
HelperContainerPage.bas[207]  cont1.BuildGrid ' IMPORTANT! 
HelperContainerPage.bas[208]  
HelperContainerPage.bas[209]  ' add sub header 
HelperContainerPage.bas[210]  cont1.Cell(1,1).AddComponent(ABMShared.BuildSubHeader(page, {66} , {67} )) 
HelperContainerPage.bas[211]  
HelperContainerPage.bas[212]  ' add paragraph 
HelperContainerPage.bas[213]  cont1.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {68} , {69} )) 
HelperContainerPage.bas[214]  ' add 12 cells 
HelperContainerPage.bas[215]  For i=1 To 12 
HelperContainerPage.bas[216]  cont1.Cell(2,i).UseTheme( {70} ) 
HelperContainerPage.bas[217]  Dim lblGrid As ABMLabel 
HelperContainerPage.bas[218]  lblGrid.Initialize(page, {71} & i & {72} , {73} & i, ABM.SIZE_H6, True, {74} ) 
HelperContainerPage.bas[219]  cont1.Cell(2,i).AddComponent(lblGrid) 
HelperContainerPage.bas[220]  Next 
HelperContainerPage.bas[221]  
HelperContainerPage.bas[222]  ' add paragraph 
HelperContainerPage.bas[223]  cont1.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {75} , {76} )) 
HelperContainerPage.bas[224]  
HelperContainerPage.bas[225]  page.Cell(2,1).AddComponent(cont1) 
HelperContainerPage.bas[226]  
HelperContainerPage.bas[227]  Dim code As String = {0} 
HelperContainerPage.bas[251]  
HelperContainerPage.bas[252]  page.Cell(2,2).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {77} , code)) 
HelperContainerPage.bas[253]  
HelperContainerPage.bas[254]  ' add paragraph 
HelperContainerPage.bas[255]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {78} , {79} )) 
HelperContainerPage.bas[256]  
HelperContainerPage.bas[257]  ' add paragraph 
HelperContainerPage.bas[258]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {80} , {81} )) 
HelperContainerPage.bas[259]  
HelperContainerPage.bas[260]  ' add paragraph 
HelperContainerPage.bas[261]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {82} , {83} )) 
HelperContainerPage.bas[262]  
HelperContainerPage.bas[263]  page.Cell(4,1).AddComponent(ABMShared.BuildSubHeader(page, {84} , {85} )) 
HelperContainerPage.bas[264]  
HelperContainerPage.bas[265]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {86} , {87} )) 
HelperContainerPage.bas[266]  
HelperContainerPage.bas[267]  Dim btn1 As ABMButton 
HelperContainerPage.bas[268]  btn1.InitializeRaised(page, {88} , {89} , {90} , {91} , {92} ) 
HelperContainerPage.bas[269]  btn1.Tag = {93} 
HelperContainerPage.bas[270]  page.Cell(6,1).AddComponent(btn1) 
HelperContainerPage.bas[271]  
HelperContainerPage.bas[272]  ' create the container with animation 
HelperContainerPage.bas[273]  
HelperContainerPage.bas[274]  ' you ALWAYS need an Initial state, duration should be 0 for the initial state 
HelperContainerPage.bas[275]  Dim myAnim1 As ABMAnimation 
HelperContainerPage.bas[276]  myAnim1.Initialize( {94} , 0, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[277]  myAnim1.SlideLeft ' move it a screen to the left so it is out of view 
HelperContainerPage.bas[278]  myAnim1.ScaleX(0) 
HelperContainerPage.bas[279]  myAnim1.ScaleY(0) 
HelperContainerPage.bas[280]  myAnim1.RotateY(-180) 
HelperContainerPage.bas[281]  page.AddAnimation(myAnim1) 
HelperContainerPage.bas[282]  
HelperContainerPage.bas[283]  ' we create an animation to 'fade in' 
HelperContainerPage.bas[284]  Dim myAnim2 As ABMAnimation 
HelperContainerPage.bas[285]  myAnim2.Initialize( {95} , 500, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[286]  myAnim2.SlideInPositionX ' sliding in the 'normal' position where it would be if no animation was used 
HelperContainerPage.bas[287]  myAnim2.ScaleX(1) 
HelperContainerPage.bas[288]  myAnim2.ScaleY(1) 
HelperContainerPage.bas[289]  myAnim2.RotateY(0) 
HelperContainerPage.bas[290]  page.AddAnimation(myAnim2) 
HelperContainerPage.bas[291]  
HelperContainerPage.bas[292]  ' we create an animation to 'fade out' 
HelperContainerPage.bas[293]  Dim myAnim3 As ABMAnimation 
HelperContainerPage.bas[294]  myAnim3.Initialize( {96} , 500, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[295]  myAnim3.SlideRight ' move it a screen to the right so it is out of view. We later ae going to set it left again withthe 'initial' animation. 
HelperContainerPage.bas[296]  myAnim3.ScaleX(0) 
HelperContainerPage.bas[297]  myAnim3.ScaleY(0) 
HelperContainerPage.bas[298]  myAnim3.RotateY(-180) 
HelperContainerPage.bas[299]  page.AddAnimation(myAnim3) 
HelperContainerPage.bas[300]  
HelperContainerPage.bas[301]  Dim cont2 As ABMContainer 
HelperContainerPage.bas[302]  ' new initialize method where you have to set your initial animation 
HelperContainerPage.bas[303]  cont2.InitializeAnimated(page, {97} , {98} , {99} ) 
HelperContainerPage.bas[304]  cont2.AddRowsM(1,False,0,0, {100} ).AddCells12(1, {101} ) 
HelperContainerPage.bas[305]  cont2.BuildGrid ' IMPORTANT 
HelperContainerPage.bas[306]  
HelperContainerPage.bas[307]  ' we can put anything in the container, so for the demo, let's use an ABMCard 
HelperContainerPage.bas[308]  Dim tmpCard As ABMCard 
HelperContainerPage.bas[309]  tmpCard.InitializeAsCard(page, {102} , DateTime.Date(DateTime.Now) & {103} & DateTime.Time(DateTime.now), {104} , ABM.CARD_LARGE, {105} ) 
HelperContainerPage.bas[310]  tmpCard.Image = {106} 
HelperContainerPage.bas[311]  tmpCard.AddAction( {107} ) 
HelperContainerPage.bas[312]  ' add the card 
HelperContainerPage.bas[313]  cont2.Cell(1,1).AddComponent(tmpCard) 
HelperContainerPage.bas[314]  
HelperContainerPage.bas[315]  page.Cell(7,1).AddComponent(cont2) 
HelperContainerPage.bas[316]  
HelperContainerPage.bas[317]  ' the blur effect 
HelperContainerPage.bas[318]  Dim btn2 As ABMButton 
HelperContainerPage.bas[319]  btn2.InitializeRaised(page, {108} , {109} , {110} , {111} , {112} ) 
HelperContainerPage.bas[320]  btn2.Tag = {113} 
HelperContainerPage.bas[321]  page.Cell(8,1).AddComponent(btn2) 
HelperContainerPage.bas[322]  
HelperContainerPage.bas[323]  ' create the container with animation 
HelperContainerPage.bas[324]  
HelperContainerPage.bas[325]  ' you ALWAYS need an Initial state, duration should be 0 for the initial state 
HelperContainerPage.bas[326]  Dim myAnim4 As ABMAnimation 
HelperContainerPage.bas[327]  myAnim4.Initialize( {114} , 0, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[328]  myAnim4.Opacity(0.0) 
HelperContainerPage.bas[329]  myAnim4.Blur(20) 
HelperContainerPage.bas[330]  page.AddAnimation(myAnim4) 
HelperContainerPage.bas[331]  
HelperContainerPage.bas[332]  ' we create an animation to 'unblur' 
HelperContainerPage.bas[333]  Dim myAnim5 As ABMAnimation 
HelperContainerPage.bas[334]  myAnim5.Initialize( {115} , 500, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[335]  myAnim5.Opacity(1) 
HelperContainerPage.bas[336]  myAnim5.Blur(0) 
HelperContainerPage.bas[337]  page.AddAnimation(myAnim5) 
HelperContainerPage.bas[338]  
HelperContainerPage.bas[339]  ' we create an animation to 'blur' 
HelperContainerPage.bas[340]  Dim myAnim6 As ABMAnimation 
HelperContainerPage.bas[341]  myAnim6.Initialize( {116} , 500, ABM.TWEEN_EASEINQUAD) 
HelperContainerPage.bas[342]  myAnim6.Opacity(0.0) 
HelperContainerPage.bas[343]  myAnim6.Blur(20) 
HelperContainerPage.bas[344]  page.AddAnimation(myAnim6) 
HelperContainerPage.bas[345]  
HelperContainerPage.bas[346]  Dim cont3 As ABMContainer 
HelperContainerPage.bas[347]  ' new initialize method where you have to set your initial animation 
HelperContainerPage.bas[348]  cont3.InitializeAnimated(page, {117} , {118} , {119} ) 
HelperContainerPage.bas[349]  cont3.AddRowsM(1,False,0,0, {120} ).AddCells12(1, {121} ) 
HelperContainerPage.bas[350]  cont3.BuildGrid ' IMPORTANT 
HelperContainerPage.bas[351]  
HelperContainerPage.bas[352]  Dim codeBlock As String = {1} 
HelperContainerPage.bas[392]  
HelperContainerPage.bas[393]  cont3.Cell(1,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {122} , codeBlock)) 
HelperContainerPage.bas[394]  
HelperContainerPage.bas[395]  page.Cell(9,1).AddComponent(cont3) 
HelperContainerPage.bas[396]  
HelperContainerPage.bas[397]  page.Cell(10,1).AddComponent(ABMShared.BuildParagraph(page, {123} , {124} )) 
HelperContainerPage.bas[398]  
HelperContainerPage.bas[399]  Dim codeBlock2 As String = {2} 
HelperContainerPage.bas[417]  
HelperContainerPage.bas[418]  page.Cell(11,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {125} , codeBlock2)) 
HelperContainerPage.bas[419]  
HelperContainerPage.bas[420]  Dim codeBlock3 As String = {3} 
HelperContainerPage.bas[431]  
HelperContainerPage.bas[432]  page.Cell(12,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {126} , codeBlock3)) 
HelperContainerPage.bas[433]  
HelperContainerPage.bas[434]  ' also add the components to the footer 
HelperContainerPage.bas[435]  ABMShared.ConnectFooter(page) 
HelperContainerPage.bas[436]  
HelperContainerPage.bas[437]  page.Refresh ' IMPORTANT 
HelperContainerPage.bas[438]  
HelperContainerPage.bas[439]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperContainerPage.bas[440]  page.FinishedLoading 'IMPORTANT 
HelperContainerPage.bas[441]  
HelperContainerPage.bas[442]  page.RestoreNavigationBarPosition 
HelperContainerPage.bas[443] End Sub 
HelperContainerPage.bas[444]  
HelperContainerPage.bas[445] Sub cont2_AnimationFinished(Target As String, lastAnimation As String) 
HelperContainerPage.bas[446]  Log( {127} & lastAnimation) 
HelperContainerPage.bas[447]  Select Case lastAnimation 
HelperContainerPage.bas[448]  Case {128} 
HelperContainerPage.bas[449]  Dim btn1 As ABMButton = page.Component( {129} ) 
HelperContainerPage.bas[450]  btn1.Tag = {130} 
HelperContainerPage.bas[451]  btn1.Text = {131} 
HelperContainerPage.bas[452]  btn1.Refresh 
HelperContainerPage.bas[453]  Case {132} 
HelperContainerPage.bas[454]  Dim btn1 As ABMButton = page.Component( {133} ) 
HelperContainerPage.bas[455]  btn1.Tag = {134} 
HelperContainerPage.bas[456]  btn1.Text = {135} 
HelperContainerPage.bas[457]  btn1.Refresh 
HelperContainerPage.bas[458]  ' reset to start position 
HelperContainerPage.bas[459]  Dim cont2 As ABMContainer = page.Component( {136} ) 
HelperContainerPage.bas[460]  cont2.RunAnimation( {137} ) 
HelperContainerPage.bas[461]  End Select 
HelperContainerPage.bas[462] End Sub 
HelperContainerPage.bas[463]  
HelperContainerPage.bas[464] Sub btn1_Clicked(Target As String) 
HelperContainerPage.bas[465]  Dim btn1 As ABMButton = page.Component( {138} ) 
HelperContainerPage.bas[466]  Dim cont2 As ABMContainer = page.Component( {139} ) 
HelperContainerPage.bas[467]  
HelperContainerPage.bas[468]  Select Case btn1.Tag 
HelperContainerPage.bas[469]  Case {140} 
HelperContainerPage.bas[470]  cont2.RunAnimation( {141} ) 
HelperContainerPage.bas[471]  Case {142} 
HelperContainerPage.bas[472]  cont2.RunAnimation( {143} ) 
HelperContainerPage.bas[473]  End Select 
HelperContainerPage.bas[474] End Sub 
HelperContainerPage.bas[475]  
HelperContainerPage.bas[476] Sub cont3_AnimationFinished(Target As String, lastAnimation As String) 
HelperContainerPage.bas[477]  Log( {144} & lastAnimation) 
HelperContainerPage.bas[478]  Select Case lastAnimation 
HelperContainerPage.bas[479]  Case {145} 
HelperContainerPage.bas[480]  Dim btn2 As ABMButton = page.Component( {146} ) 
HelperContainerPage.bas[481]  btn2.Tag = {147} 
HelperContainerPage.bas[482]  btn2.Text = {148} 
HelperContainerPage.bas[483]  btn2.Refresh 
HelperContainerPage.bas[484]  Case {149} 
HelperContainerPage.bas[485]  Dim btn2 As ABMButton = page.Component( {150} ) 
HelperContainerPage.bas[486]  btn2.Tag = {151} 
HelperContainerPage.bas[487]  btn2.Text = {152} 
HelperContainerPage.bas[488]  btn2.Refresh 
HelperContainerPage.bas[489]  ' reset to start position 
HelperContainerPage.bas[490]  Dim cont3 As ABMContainer = page.Component( {153} ) 
HelperContainerPage.bas[491]  cont3.RunAnimation( {154} ) 
HelperContainerPage.bas[492]  End Select 
HelperContainerPage.bas[493] End Sub 
HelperContainerPage.bas[494]  
HelperContainerPage.bas[495] Sub btn2_Clicked(Target As String) 
HelperContainerPage.bas[496]  Dim btn2 As ABMButton = page.Component( {155} ) 
HelperContainerPage.bas[497]  Dim cont3 As ABMContainer = page.Component( {156} ) 
HelperContainerPage.bas[498]  
HelperContainerPage.bas[499]  Select Case btn2.Tag 
HelperContainerPage.bas[500]  Case {157} 
HelperContainerPage.bas[501]  cont3.RunAnimation( {158} ) 
HelperContainerPage.bas[502]  Case {159} 
HelperContainerPage.bas[503]  cont3.RunAnimation( {160} ) 
HelperContainerPage.bas[504]  End Select 
HelperContainerPage.bas[505] End Sub 
HelperContainerPage.bas[506]  
HelperContainerPage.bas[507] Sub btn3_Clicked(Target As String) 
HelperContainerPage.bas[508]  'Dim contIN As ABMContainer = page.Component( {161} ) 
HelperContainerPage.bas[509]  
HelperContainerPage.bas[510]  'contIN.BringMeIn 
HelperContainerPage.bas[511] End Sub 
HelperContainerPage.bas[512]  
HelperContainerPage.bas[513] ' clicked on the navigation bar 
HelperContainerPage.bas[514] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperContainerPage.bas[515]  page.SaveNavigationBarPosition 
HelperContainerPage.bas[516]  If Action = {162} Then Return 
HelperContainerPage.bas[517]  If Action = {163} Then 
HelperContainerPage.bas[518]  myToastId = myToastId + 1 
HelperContainerPage.bas[519]  page.ShowToast( {164} & myToastId, {165} , {166} , 5000) 
HelperContainerPage.bas[520]  Return 
HelperContainerPage.bas[521]  End If 
HelperContainerPage.bas[522]  If Action = {167} Then 
HelperContainerPage.bas[523]  ABMShared.LogOff(page) 
HelperContainerPage.bas[524]  Return 
HelperContainerPage.bas[525]  End If 
HelperContainerPage.bas[526]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperContainerPage.bas[527] End Sub 
HelperContainerPage.bas[528]  
HelperContainerPage.bas[529] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperContainerPage.bas[530]  page.ws.Session.SetAttribute( {168} , {169} ) 
HelperContainerPage.bas[531]  page.ws.Session.SetAttribute( {170} , {171} ) 
HelperContainerPage.bas[532]  page.ws.Session.SetAttribute( {172} , {173} ) 
HelperContainerPage.bas[533]  ABMShared.NavigateToPage(ws, ABMPageId, {174} ) 
HelperContainerPage.bas[534] End Sub 
Analysing: HelperFlexWallPage.bas
HelperFlexWallPage.bas[0] ﻿Type=Class 
HelperFlexWallPage.bas[0] Version=4.7 
HelperFlexWallPage.bas[0] ModulesStructureVersion=1 
HelperFlexWallPage.bas[0] B4J=true 
HelperFlexWallPage.bas[0] @EndOfDesignText@ 
HelperFlexWallPage.bas[1] 'Class module 
HelperFlexWallPage.bas[2] Sub Class_Globals 
HelperFlexWallPage.bas[3]  Private ws As WebSocket 'ignore 
HelperFlexWallPage.bas[4]  ' will hold our page information 
HelperFlexWallPage.bas[5]  Public page As ABMPage 
HelperFlexWallPage.bas[6]  ' page theme 
HelperFlexWallPage.bas[7]  Private theme As ABMTheme 
HelperFlexWallPage.bas[8]  ' to access the constants 
HelperFlexWallPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperFlexWallPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperFlexWallPage.bas[11]  Public Name As String = {0} 
HelperFlexWallPage.bas[12]  ' will hold the unique browsers window id 
HelperFlexWallPage.bas[13]  Private ABMPageId As String = {1} 
HelperFlexWallPage.bas[14]  
HelperFlexWallPage.bas[15]  ' your own variables 
HelperFlexWallPage.bas[16]  Dim myToastId As Int 
HelperFlexWallPage.bas[17] End Sub 
HelperFlexWallPage.bas[18]  
HelperFlexWallPage.bas[19] Public Sub Initialize 
HelperFlexWallPage.bas[20]  ' build the local structure IMPORTANT! 
HelperFlexWallPage.bas[21]  BuildPage 
HelperFlexWallPage.bas[22] End Sub 
HelperFlexWallPage.bas[23]  
HelperFlexWallPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperFlexWallPage.bas[25]  Log( {2} ) 
HelperFlexWallPage.bas[26]  ws = WebSocket1 
HelperFlexWallPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperFlexWallPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperFlexWallPage.bas[29]  
HelperFlexWallPage.bas[30]  If ABMShared.NeedsAuthorization Then 
HelperFlexWallPage.bas[31]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
HelperFlexWallPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
HelperFlexWallPage.bas[33]  Return 
HelperFlexWallPage.bas[34]  End If 
HelperFlexWallPage.bas[35]  End If 
HelperFlexWallPage.bas[36]  
HelperFlexWallPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperFlexWallPage.bas[38]  If page.ComesFromPageCache Then 
HelperFlexWallPage.bas[39]  ' refresh the page 
HelperFlexWallPage.bas[40]  page.Refresh 
HelperFlexWallPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperFlexWallPage.bas[42]  page.FinishedLoading 
HelperFlexWallPage.bas[43]  Else 
HelperFlexWallPage.bas[44]  ' Prepare the page 
HelperFlexWallPage.bas[45]  page.Prepare 
HelperFlexWallPage.bas[46]  ' load the dynamic content 
HelperFlexWallPage.bas[47]  ConnectPage 
HelperFlexWallPage.bas[48]  End If 
HelperFlexWallPage.bas[49]  Log(ABMPageId) 
HelperFlexWallPage.bas[50] End Sub 
HelperFlexWallPage.bas[51]  
HelperFlexWallPage.bas[52] Private Sub WebSocket_Disconnected 
HelperFlexWallPage.bas[53]  Log( {7} ) 
HelperFlexWallPage.bas[54] End Sub 
HelperFlexWallPage.bas[55]  
HelperFlexWallPage.bas[56] Sub Page_ParseEvent(Params As Map) 
HelperFlexWallPage.bas[57]  Dim eventName As String = Params.Get( {8} ) 
HelperFlexWallPage.bas[58]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
HelperFlexWallPage.bas[59]  If eventName = {11} Then 
HelperFlexWallPage.bas[60]  Log( {12} ) 
HelperFlexWallPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperFlexWallPage.bas[62]  Return 
HelperFlexWallPage.bas[63]  End If 
HelperFlexWallPage.bas[64]  If SubExists(Me, eventName) Then 
HelperFlexWallPage.bas[65]  Params.Remove( {13} ) 
HelperFlexWallPage.bas[66]  Params.Remove( {14} ) 
HelperFlexWallPage.bas[67]  Select Case Params.Size 
HelperFlexWallPage.bas[68]  Case 0 
HelperFlexWallPage.bas[69]  CallSub(Me, eventName) 
HelperFlexWallPage.bas[70]  Case 1 
HelperFlexWallPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperFlexWallPage.bas[72]  Case 2 
HelperFlexWallPage.bas[73]  If Params.get(eventParams(0)) = {15} Then 
HelperFlexWallPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperFlexWallPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
HelperFlexWallPage.bas[76]  Else 
HelperFlexWallPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperFlexWallPage.bas[78]  End If 
HelperFlexWallPage.bas[79]  Case Else 
HelperFlexWallPage.bas[80]  ' cannot be called directly, to many param 
HelperFlexWallPage.bas[81]  CallSub2(Me, eventName, Params) 
HelperFlexWallPage.bas[82]  End Select 
HelperFlexWallPage.bas[83]  End If 
HelperFlexWallPage.bas[84] End Sub 
HelperFlexWallPage.bas[85]  
HelperFlexWallPage.bas[86] public Sub BuildTheme() 
HelperFlexWallPage.bas[87]  ' start with the base theme defined in ABMShared 
HelperFlexWallPage.bas[88]  theme.Initialize( {16} ) 
HelperFlexWallPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperFlexWallPage.bas[90]  
HelperFlexWallPage.bas[91]  ' add additional themes specific for this page 
HelperFlexWallPage.bas[92]  
HelperFlexWallPage.bas[93] End Sub 
HelperFlexWallPage.bas[94]  
HelperFlexWallPage.bas[95] public Sub BuildPage() 
HelperFlexWallPage.bas[96]  ' initialize the theme 
HelperFlexWallPage.bas[97]  BuildTheme 
HelperFlexWallPage.bas[98]  
HelperFlexWallPage.bas[99]  ' initialize this page using our theme 
HelperFlexWallPage.bas[100]  page.InitializeWithTheme(Name, {17} & ABMshared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperFlexWallPage.bas[101]  page.ShowLoader=True 
HelperFlexWallPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperFlexWallPage.bas[103]  page.PageTitle = {19} 
HelperFlexWallPage.bas[104]  page.PageDescription = {20} 
HelperFlexWallPage.bas[105]  page.PageHTMLName = {21} 
HelperFlexWallPage.bas[106]  page.PageKeywords = {22} 
HelperFlexWallPage.bas[107]  page.PageSiteMapPriority = {23} 
HelperFlexWallPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperFlexWallPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperFlexWallPage.bas[110]  
HelperFlexWallPage.bas[111]  ABMShared.BuildNavigationBar(page, {24} , {25} , {26} , {27} , {28} ) 
HelperFlexWallPage.bas[112]  
HelperFlexWallPage.bas[113]  ' create the page grid 
HelperFlexWallPage.bas[114]  page.AddRows(4,True, {29} ).AddCells12(1, {30} ) 
HelperFlexWallPage.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperFlexWallPage.bas[116]  
HelperFlexWallPage.bas[117]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperFlexWallPage.bas[118]  'page.NeedsCodeLabel = True 
HelperFlexWallPage.bas[119]  
HelperFlexWallPage.bas[120]  ABMShared.BuildFooter(page) 
HelperFlexWallPage.bas[121] End Sub 
HelperFlexWallPage.bas[122]  
HelperFlexWallPage.bas[123] Sub ConnectPage() 
HelperFlexWallPage.bas[124]  'NEW 
HelperFlexWallPage.bas[125]  ABMShared.ConnectNavigationBar(page) 
HelperFlexWallPage.bas[126]  
HelperFlexWallPage.bas[127]  ' add paragraph 
HelperFlexWallPage.bas[128]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {31} , {32} )) 
HelperFlexWallPage.bas[129]  
HelperFlexWallPage.bas[130]  Dim flexWall As ABMFlexWall 
HelperFlexWallPage.bas[131]  flexWall.Initialize(page, {33} , 350) 
HelperFlexWallPage.bas[132]  
HelperFlexWallPage.bas[133]  For i = 1 To 20 
HelperFlexWallPage.bas[134]  flexWall.AddImage(ABMShared.BuildImage(page, {34} & i, {35} & i & {36} ,1, i & {37} ), 1024, 768) 
HelperFlexWallPage.bas[135]  Next 
HelperFlexWallPage.bas[136]  
HelperFlexWallPage.bas[137]  page.Cell(2,1).AddComponent(flexWall) 
HelperFlexWallPage.bas[138]  
HelperFlexWallPage.bas[139]  ' also add the components to the footer 
HelperFlexWallPage.bas[140]  ABMShared.ConnectFooter(page) 
HelperFlexWallPage.bas[141]  
HelperFlexWallPage.bas[142]  page.Refresh ' IMPORTANT 
HelperFlexWallPage.bas[143]  
HelperFlexWallPage.bas[144]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperFlexWallPage.bas[145]  page.FinishedLoading 'IMPORTANT 
HelperFlexWallPage.bas[146]  
HelperFlexWallPage.bas[147]  page.RestoreNavigationBarPosition 
HelperFlexWallPage.bas[148] End Sub 
HelperFlexWallPage.bas[149]  
HelperFlexWallPage.bas[150] ' clicked on the navigation bar 
HelperFlexWallPage.bas[151] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperFlexWallPage.bas[152]  page.SaveNavigationBarPosition 
HelperFlexWallPage.bas[153]  If Action = {38} Then Return 
HelperFlexWallPage.bas[154]  If Action = {39} Then 
HelperFlexWallPage.bas[155]  myToastId = myToastId + 1 
HelperFlexWallPage.bas[156]  page.ShowToast( {40} & myToastId, {41} , {42} , 5000) 
HelperFlexWallPage.bas[157]  Return 
HelperFlexWallPage.bas[158]  End If 
HelperFlexWallPage.bas[159]  If Action = {43} Then 
HelperFlexWallPage.bas[160]  ABMShared.LogOff(page) 
HelperFlexWallPage.bas[161]  Return 
HelperFlexWallPage.bas[162]  End If 
HelperFlexWallPage.bas[163]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperFlexWallPage.bas[164] End Sub 
HelperFlexWallPage.bas[165]  
HelperFlexWallPage.bas[166] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperFlexWallPage.bas[167]  page.ws.Session.SetAttribute( {44} , {45} ) 
HelperFlexWallPage.bas[168]  page.ws.Session.SetAttribute( {46} , {47} ) 
HelperFlexWallPage.bas[169]  page.ws.Session.SetAttribute( {48} , {49} ) 
HelperFlexWallPage.bas[170]  ABMShared.NavigateToPage(ws, ABMPageId, {50} ) 
HelperFlexWallPage.bas[171] End Sub 
HelperFlexWallPage.bas[172]  
Analysing: HelperGeneratorPage.bas
HelperGeneratorPage.bas[0] ﻿Type=Class 
HelperGeneratorPage.bas[0] Version=4.7 
HelperGeneratorPage.bas[0] ModulesStructureVersion=1 
HelperGeneratorPage.bas[0] B4J=true 
HelperGeneratorPage.bas[0] @EndOfDesignText@ 
HelperGeneratorPage.bas[1] 'Class module 
HelperGeneratorPage.bas[2] Sub Class_Globals 
HelperGeneratorPage.bas[3]  Private ws As WebSocket 'ignore 
HelperGeneratorPage.bas[4]  ' will hold our page information 
HelperGeneratorPage.bas[5]  Public page As ABMPage 
HelperGeneratorPage.bas[6]  ' page theme 
HelperGeneratorPage.bas[7]  Private theme As ABMTheme 
HelperGeneratorPage.bas[8]  ' to access the constants 
HelperGeneratorPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperGeneratorPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperGeneratorPage.bas[11]  Public Name As String = {11} 
HelperGeneratorPage.bas[12]  ' will hold the unique browsers window id 
HelperGeneratorPage.bas[13]  Private ABMPageId As String = {12} 
HelperGeneratorPage.bas[14]  
HelperGeneratorPage.bas[15]  ' your own variables 
HelperGeneratorPage.bas[16]  Dim myToastId As Int 
HelperGeneratorPage.bas[17] End Sub 
HelperGeneratorPage.bas[18]  
HelperGeneratorPage.bas[19] Public Sub Initialize 
HelperGeneratorPage.bas[20]  ' build the local structure IMPORTANT! 
HelperGeneratorPage.bas[21]  BuildPage 
HelperGeneratorPage.bas[22] End Sub 
HelperGeneratorPage.bas[23]  
HelperGeneratorPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperGeneratorPage.bas[25]  Log( {13} ) 
HelperGeneratorPage.bas[26]  ws = WebSocket1 
HelperGeneratorPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperGeneratorPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperGeneratorPage.bas[29]  
HelperGeneratorPage.bas[30]  If ABMShared.NeedsAuthorization Then 
HelperGeneratorPage.bas[31]  If session.GetAttribute2( {14} , {15} ) = {16} Then 
HelperGeneratorPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {17} ) 
HelperGeneratorPage.bas[33]  Return 
HelperGeneratorPage.bas[34]  End If 
HelperGeneratorPage.bas[35]  End If 
HelperGeneratorPage.bas[36]  
HelperGeneratorPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperGeneratorPage.bas[38]  If page.ComesFromPageCache Then 
HelperGeneratorPage.bas[39]  ' refresh the page 
HelperGeneratorPage.bas[40]  page.Refresh 
HelperGeneratorPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperGeneratorPage.bas[42]  page.FinishedLoading 
HelperGeneratorPage.bas[43]  Else 
HelperGeneratorPage.bas[44]  ' Prepare the page 
HelperGeneratorPage.bas[45]  page.Prepare 
HelperGeneratorPage.bas[46]  ' load the dynamic content 
HelperGeneratorPage.bas[47]  ConnectPage 
HelperGeneratorPage.bas[48]  End If 
HelperGeneratorPage.bas[49]  Log(ABMPageId) 
HelperGeneratorPage.bas[50] End Sub 
HelperGeneratorPage.bas[51]  
HelperGeneratorPage.bas[52] Private Sub WebSocket_Disconnected 
HelperGeneratorPage.bas[53]  Log( {18} ) 
HelperGeneratorPage.bas[54] End Sub 
HelperGeneratorPage.bas[55]  
HelperGeneratorPage.bas[56] Sub Page_ParseEvent(Params As Map) 
HelperGeneratorPage.bas[57]  Dim eventName As String = Params.Get( {19} ) 
HelperGeneratorPage.bas[58]  Dim eventParams() As String = Regex.Split( {20} ,Params.Get( {21} )) 
HelperGeneratorPage.bas[59]  If eventName = {22} Then 
HelperGeneratorPage.bas[60]  Log( {23} ) 
HelperGeneratorPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperGeneratorPage.bas[62]  Return 
HelperGeneratorPage.bas[63]  End If 
HelperGeneratorPage.bas[64]  If SubExists(Me, eventName) Then 
HelperGeneratorPage.bas[65]  Params.Remove( {24} ) 
HelperGeneratorPage.bas[66]  Params.Remove( {25} ) 
HelperGeneratorPage.bas[67]  Select Case Params.Size 
HelperGeneratorPage.bas[68]  Case 0 
HelperGeneratorPage.bas[69]  CallSub(Me, eventName) 
HelperGeneratorPage.bas[70]  Case 1 
HelperGeneratorPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperGeneratorPage.bas[72]  Case 2 
HelperGeneratorPage.bas[73]  If Params.get(eventParams(0)) = {26} Then 
HelperGeneratorPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperGeneratorPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
HelperGeneratorPage.bas[76]  Else 
HelperGeneratorPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperGeneratorPage.bas[78]  End If 
HelperGeneratorPage.bas[79]  Case Else 
HelperGeneratorPage.bas[80]  ' cannot be called directly, to many param 
HelperGeneratorPage.bas[81]  CallSub2(Me, eventName, Params) 
HelperGeneratorPage.bas[82]  End Select 
HelperGeneratorPage.bas[83]  End If 
HelperGeneratorPage.bas[84] End Sub 
HelperGeneratorPage.bas[85]  
HelperGeneratorPage.bas[86] public Sub BuildTheme() 
HelperGeneratorPage.bas[87]  ' start with the base theme defined in ABMShared 
HelperGeneratorPage.bas[88]  theme.Initialize( {27} ) 
HelperGeneratorPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperGeneratorPage.bas[90]  
HelperGeneratorPage.bas[91]  ' add additional themes specific for this page 
HelperGeneratorPage.bas[92]  
HelperGeneratorPage.bas[93] End Sub 
HelperGeneratorPage.bas[94]  
HelperGeneratorPage.bas[95] public Sub BuildPage() 
HelperGeneratorPage.bas[96]  ' initialize the theme 
HelperGeneratorPage.bas[97]  BuildTheme 
HelperGeneratorPage.bas[98]  
HelperGeneratorPage.bas[99]  ' initialize this page using our theme 
HelperGeneratorPage.bas[100]  page.InitializeWithTheme(Name, {28} & ABMshared.AppName & {29} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperGeneratorPage.bas[101]  page.ShowLoader=True 
HelperGeneratorPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperGeneratorPage.bas[103]  page.PageTitle = {30} 
HelperGeneratorPage.bas[104]  page.PageDescription = {31} 
HelperGeneratorPage.bas[105]  page.PageHTMLName = {32} 
HelperGeneratorPage.bas[106]  page.PageKeywords = {33} 
HelperGeneratorPage.bas[107]  page.PageSiteMapPriority = {34} 
HelperGeneratorPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperGeneratorPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperGeneratorPage.bas[110]  
HelperGeneratorPage.bas[111]  ABMShared.BuildNavigationBar(page, {35} , {36} , {37} , {38} , {39} ) 
HelperGeneratorPage.bas[112]  
HelperGeneratorPage.bas[113]  ' create the page grid 
HelperGeneratorPage.bas[114]  page.AddRows(7,True, {40} ).AddCells12(1, {41} ) 
HelperGeneratorPage.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperGeneratorPage.bas[116]  
HelperGeneratorPage.bas[117]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperGeneratorPage.bas[118]  'page.NeedsCodeLabel = True 
HelperGeneratorPage.bas[119]  
HelperGeneratorPage.bas[120]  ABMShared.BuildFooter(page) 
HelperGeneratorPage.bas[121] End Sub 
HelperGeneratorPage.bas[122]  
HelperGeneratorPage.bas[123] Sub ConnectPage() 
HelperGeneratorPage.bas[124]  'NEW 
HelperGeneratorPage.bas[125]  ABMShared.ConnectNavigationBar(page) 
HelperGeneratorPage.bas[126]  
HelperGeneratorPage.bas[127]  ' add paragraph 
HelperGeneratorPage.bas[128]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {42} , {43} ) ) 
HelperGeneratorPage.bas[129]  page.CellR(0,1).AddComponent(ABMShared.BuildParagraph(page, {44} , {45} ) ) 
HelperGeneratorPage.bas[130]  
HelperGeneratorPage.bas[131]  ' add a header label 
HelperGeneratorPage.bas[132]  page.CellR(1,1).AddComponent(ABMShared.BuildHeader(page, {46} , {47} )) 
HelperGeneratorPage.bas[133]  
HelperGeneratorPage.bas[134]  Dim Headers, codes, Descriptions As List 
HelperGeneratorPage.bas[135]  Headers.Initialize2(Array As String( {48} , {49} )) 
HelperGeneratorPage.bas[136]  codes.Initialize2(Array As String( {50} , {51} , {52} , {53} , {54} , {55} , {56} , {57} , {58} , {59} )) 
HelperGeneratorPage.bas[137]  
HelperGeneratorPage.bas[138]  Dim desc1 As String = {0} 
HelperGeneratorPage.bas[149]  Dim desc2 As String = {1} 
HelperGeneratorPage.bas[153]  Dim desc3 As String = {2} 
HelperGeneratorPage.bas[156]  Dim desc4 As String = {3} 
HelperGeneratorPage.bas[157]  Dim desc5 As String = {4} 
HelperGeneratorPage.bas[162]  Dim desc6 As String = {5} 
HelperGeneratorPage.bas[180]  Dim desc7 As String = {6} 
HelperGeneratorPage.bas[182]  Dim desc8 As String = {7} 
HelperGeneratorPage.bas[186]  Dim desc9 As String = {8} 
HelperGeneratorPage.bas[187]  Dim desc10 As String = {9} 
HelperGeneratorPage.bas[189]  
HelperGeneratorPage.bas[190]  Descriptions.Initialize2(Array As String(desc1, desc2, desc3, desc4, desc5, desc6, desc7, desc8, desc9, desc10)) 
HelperGeneratorPage.bas[191]  page.CellR(1,1).AddComponent(ABMShared.BuildParamTable2(page, {60} , Headers, codes, Descriptions)) 
HelperGeneratorPage.bas[192]  
HelperGeneratorPage.bas[193]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {61} , {62} ) ) 
HelperGeneratorPage.bas[194]  
HelperGeneratorPage.bas[195]  Dim code1 As String = {10} 
HelperGeneratorPage.bas[227]  
HelperGeneratorPage.bas[228]  page.CellR(0,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {63} , code1)) 
HelperGeneratorPage.bas[229]  
HelperGeneratorPage.bas[230]  page.CellR(1,1).AddComponent(ABMShared.BuildParagraph(page, {64} , {65} )) 
HelperGeneratorPage.bas[231]  
HelperGeneratorPage.bas[232]  ' also add the components to the footer 
HelperGeneratorPage.bas[233]  ABMShared.ConnectFooter(page) 
HelperGeneratorPage.bas[234]  
HelperGeneratorPage.bas[235]  page.Refresh ' IMPORTANT 
HelperGeneratorPage.bas[236]  
HelperGeneratorPage.bas[237]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperGeneratorPage.bas[238]  page.FinishedLoading 'IMPORTANT 
HelperGeneratorPage.bas[239]  
HelperGeneratorPage.bas[240]  page.RestoreNavigationBarPosition 
HelperGeneratorPage.bas[241] End Sub 
HelperGeneratorPage.bas[242]  
HelperGeneratorPage.bas[243] ' clicked on the navigation bar 
HelperGeneratorPage.bas[244] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperGeneratorPage.bas[245]  page.SaveNavigationBarPosition 
HelperGeneratorPage.bas[246]  If Action = {66} Then Return 
HelperGeneratorPage.bas[247]  If Action = {67} Then 
HelperGeneratorPage.bas[248]  myToastId = myToastId + 1 
HelperGeneratorPage.bas[249]  page.ShowToast( {68} & myToastId, {69} , {70} , 5000) 
HelperGeneratorPage.bas[250]  Return 
HelperGeneratorPage.bas[251]  End If 
HelperGeneratorPage.bas[252]  If Action = {71} Then 
HelperGeneratorPage.bas[253]  ABMShared.LogOff(page) 
HelperGeneratorPage.bas[254]  Return 
HelperGeneratorPage.bas[255]  End If 
HelperGeneratorPage.bas[256]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperGeneratorPage.bas[257] End Sub 
HelperGeneratorPage.bas[258]  
HelperGeneratorPage.bas[259] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperGeneratorPage.bas[260]  page.ws.Session.SetAttribute( {72} , {73} ) 
HelperGeneratorPage.bas[261]  page.ws.Session.SetAttribute( {74} , {75} ) 
HelperGeneratorPage.bas[262]  page.ws.Session.SetAttribute( {76} , {77} ) 
HelperGeneratorPage.bas[263]  ABMShared.NavigateToPage(ws, ABMPageId, {78} ) 
HelperGeneratorPage.bas[264] End Sub 
HelperGeneratorPage.bas[265]  
Analysing: HelperModalSheetPage.bas
HelperModalSheetPage.bas[0] ﻿Type=Class 
HelperModalSheetPage.bas[0] Version=4.7 
HelperModalSheetPage.bas[0] ModulesStructureVersion=1 
HelperModalSheetPage.bas[0] B4J=true 
HelperModalSheetPage.bas[0] @EndOfDesignText@ 
HelperModalSheetPage.bas[1] 'Class module 
HelperModalSheetPage.bas[2] Sub Class_Globals 
HelperModalSheetPage.bas[3]  Private ws As WebSocket 'ignore 
HelperModalSheetPage.bas[4]  ' will hold our page information 
HelperModalSheetPage.bas[5]  Public page As ABMPage 
HelperModalSheetPage.bas[6]  ' page theme 
HelperModalSheetPage.bas[7]  Private theme As ABMTheme 
HelperModalSheetPage.bas[8]  ' to access the constants 
HelperModalSheetPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperModalSheetPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperModalSheetPage.bas[11]  Public Name As String = {1} 
HelperModalSheetPage.bas[12]  ' will hold the unique browsers window id 
HelperModalSheetPage.bas[13]  Private ABMPageId As String = {2} 
HelperModalSheetPage.bas[14]  
HelperModalSheetPage.bas[15]  ' your own variables 
HelperModalSheetPage.bas[16]  Dim myToastId As Int 
HelperModalSheetPage.bas[17] End Sub 
HelperModalSheetPage.bas[18]  
HelperModalSheetPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
HelperModalSheetPage.bas[20] Public Sub Initialize 
HelperModalSheetPage.bas[21]  ' build the local structure IMPORTANT! 
HelperModalSheetPage.bas[22]  BuildPage 
HelperModalSheetPage.bas[23] End Sub 
HelperModalSheetPage.bas[24]  
HelperModalSheetPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperModalSheetPage.bas[26]  Log( {3} ) 
HelperModalSheetPage.bas[27]  ws = WebSocket1 
HelperModalSheetPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperModalSheetPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperModalSheetPage.bas[30]  
HelperModalSheetPage.bas[31]  If ABMShared.NeedsAuthorization Then 
HelperModalSheetPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
HelperModalSheetPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
HelperModalSheetPage.bas[34]  Return 
HelperModalSheetPage.bas[35]  End If 
HelperModalSheetPage.bas[36]  End If 
HelperModalSheetPage.bas[37]  
HelperModalSheetPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperModalSheetPage.bas[39]  If page.ComesFromPageCache Then 
HelperModalSheetPage.bas[40]  ' refresh the page 
HelperModalSheetPage.bas[41]  page.Refresh 
HelperModalSheetPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperModalSheetPage.bas[43]  page.FinishedLoading 
HelperModalSheetPage.bas[44]  Else 
HelperModalSheetPage.bas[45]  ' Prepare the page 
HelperModalSheetPage.bas[46]  page.Prepare 
HelperModalSheetPage.bas[47]  ' load the dynamic content 
HelperModalSheetPage.bas[48]  ConnectPage 
HelperModalSheetPage.bas[49]  End If 
HelperModalSheetPage.bas[50]  Log(ABMPageId) 
HelperModalSheetPage.bas[51] End Sub 
HelperModalSheetPage.bas[52]  
HelperModalSheetPage.bas[53] Private Sub WebSocket_Disconnected 
HelperModalSheetPage.bas[54]  Log( {8} ) 
HelperModalSheetPage.bas[55] End Sub 
HelperModalSheetPage.bas[56]  
HelperModalSheetPage.bas[57] Sub Page_ParseEvent(Params As Map) 
HelperModalSheetPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
HelperModalSheetPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
HelperModalSheetPage.bas[60]  If eventName = {12} Then 
HelperModalSheetPage.bas[61]  Log( {13} ) 
HelperModalSheetPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperModalSheetPage.bas[63]  Return 
HelperModalSheetPage.bas[64]  End If 
HelperModalSheetPage.bas[65]  If SubExists(Me, eventName) Then 
HelperModalSheetPage.bas[66]  Params.Remove( {14} ) 
HelperModalSheetPage.bas[67]  Params.Remove( {15} ) 
HelperModalSheetPage.bas[68]  Select Case Params.Size 
HelperModalSheetPage.bas[69]  Case 0 
HelperModalSheetPage.bas[70]  CallSub(Me, eventName) 
HelperModalSheetPage.bas[71]  Case 1 
HelperModalSheetPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperModalSheetPage.bas[73]  Case 2 
HelperModalSheetPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
HelperModalSheetPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperModalSheetPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
HelperModalSheetPage.bas[77]  Else 
HelperModalSheetPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperModalSheetPage.bas[79]  End If 
HelperModalSheetPage.bas[80]  Case Else 
HelperModalSheetPage.bas[81]  ' cannot be called directly, to many param 
HelperModalSheetPage.bas[82]  CallSub2(Me, eventName, Params) 
HelperModalSheetPage.bas[83]  End Select 
HelperModalSheetPage.bas[84]  End If 
HelperModalSheetPage.bas[85] End Sub 
HelperModalSheetPage.bas[86]  
HelperModalSheetPage.bas[87] public Sub BuildTheme() 
HelperModalSheetPage.bas[88]  ' start with the base theme defined in ABMShared 
HelperModalSheetPage.bas[89]  theme.Initialize( {17} ) 
HelperModalSheetPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperModalSheetPage.bas[91]  
HelperModalSheetPage.bas[92]  ' add additional themes specific for this page 
HelperModalSheetPage.bas[93]  ' bluegray button 
HelperModalSheetPage.bas[94]  theme.AddButtonTheme( {18} ) 
HelperModalSheetPage.bas[95]  theme.Button( {19} ).BackColor = ABM.COLOR_BLUEGREY 
HelperModalSheetPage.bas[96]  theme.Button( {20} ).BackColorIntensity = ABM.INTENSITY_DARKEN1 
HelperModalSheetPage.bas[97]  
HelperModalSheetPage.bas[98]  ' modal sheet 
HelperModalSheetPage.bas[99]  theme.AddContainerTheme( {21} ) 
HelperModalSheetPage.bas[100]  theme.Container( {22} ).BackColor = ABM.COLOR_WHITE 
HelperModalSheetPage.bas[101]  
HelperModalSheetPage.bas[102]  ' modal sheet 
HelperModalSheetPage.bas[103]  theme.AddContainerTheme( {23} ) 
HelperModalSheetPage.bas[104]  theme.Container( {24} ).BackColor = ABM.COLOR_LIGHTBLUE 
HelperModalSheetPage.bas[105]  
HelperModalSheetPage.bas[106]  ' another toast theme 
HelperModalSheetPage.bas[107]  theme.AddToastTheme( {25} ) 
HelperModalSheetPage.bas[108]  theme.Toast( {26} ).Rounded = True 
HelperModalSheetPage.bas[109]  theme.Toast( {27} ).BackColor = ABM.COLOR_GREEN 
HelperModalSheetPage.bas[110]  theme.Toast( {28} ).BackColorIntensity = ABM.INTENSITY_DARKEN2 
HelperModalSheetPage.bas[111] End Sub 
HelperModalSheetPage.bas[112]  
HelperModalSheetPage.bas[113] public Sub BuildPage() 
HelperModalSheetPage.bas[114]  ' initialize the theme 
HelperModalSheetPage.bas[115]  BuildTheme 
HelperModalSheetPage.bas[116]  
HelperModalSheetPage.bas[117]  ' initialize this page using our theme 
HelperModalSheetPage.bas[118]  page.InitializeWithTheme(Name, {29} & ABMShared.AppName & {30} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperModalSheetPage.bas[119]  page.ShowLoader=True 
HelperModalSheetPage.bas[120]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperModalSheetPage.bas[121]  page.PageTitle = {31} 
HelperModalSheetPage.bas[122]  page.PageDescription = {32} 
HelperModalSheetPage.bas[123]  page.PageHTMLName = {33} 
HelperModalSheetPage.bas[124]  page.PageKeywords = {34} 
HelperModalSheetPage.bas[125]  page.PageSiteMapPriority = {35} 
HelperModalSheetPage.bas[126]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperModalSheetPage.bas[127]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperModalSheetPage.bas[128]  
HelperModalSheetPage.bas[129]  ABMShared.BuildNavigationBar(page, {36} , {37} , {38} , {39} , {40} ) 
HelperModalSheetPage.bas[130]  
HelperModalSheetPage.bas[131]  ' create the page grid 
HelperModalSheetPage.bas[132]  page.AddRows(7,True, {41} ).AddCells12(1, {42} ) 
HelperModalSheetPage.bas[133]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[134]  
HelperModalSheetPage.bas[135]  'page.NeedsGoogleMap = True 
HelperModalSheetPage.bas[136]  page.GoogleMapsAPIExtras = {43} 
HelperModalSheetPage.bas[137]  
HelperModalSheetPage.bas[138]  page.AddCanvasImage( {44} , {45} ) 
HelperModalSheetPage.bas[139]  
HelperModalSheetPage.bas[140]  ABMShared.BuildFooter(page) 
HelperModalSheetPage.bas[141] End Sub 
HelperModalSheetPage.bas[142]  
HelperModalSheetPage.bas[143] Sub ConnectPage() 
HelperModalSheetPage.bas[144]  'NEW 
HelperModalSheetPage.bas[145]  ABMShared.ConnectNavigationBar(page) 
HelperModalSheetPage.bas[146]  
HelperModalSheetPage.bas[147]  ' add a modal sheet template to enter contact information 
HelperModalSheetPage.bas[148]  page.AddModalSheetTemplate(BuildModalSheet) 
HelperModalSheetPage.bas[149]  
HelperModalSheetPage.bas[150]  ' add a error box template if the name is not entered 
HelperModalSheetPage.bas[151]  page.AddModalSheetTemplate(BuildWrongInputModalSheet) 
HelperModalSheetPage.bas[152]  
HelperModalSheetPage.bas[153]  ' add a modal sheet with a fixed footer 
HelperModalSheetPage.bas[154]  page.AddModalSheetTemplate(BuildFixedFooterSheet) 
HelperModalSheetPage.bas[155]  
HelperModalSheetPage.bas[156]  ' add a modal button sheet 
HelperModalSheetPage.bas[157]  page.AddModalSheetTemplate(BuildBottomSheet) 
HelperModalSheetPage.bas[158]  
HelperModalSheetPage.bas[159]  ' add paragraph 
HelperModalSheetPage.bas[160]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} ) ) 
HelperModalSheetPage.bas[161]  
HelperModalSheetPage.bas[162]  ' add paragraph 
HelperModalSheetPage.bas[163]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {48} , {49} )) 
HelperModalSheetPage.bas[164]  
HelperModalSheetPage.bas[165] ' ' Dim combo1 As ABMCombo 
HelperModalSheetPage.bas[166] ' Dim combo1 As ABMCombo 
HelperModalSheetPage.bas[167] ' combo1.Initialize(page, {50} , {51} , 650, {52} ) 
HelperModalSheetPage.bas[168] ' combo1.IconName = {53} 
HelperModalSheetPage.bas[169] ' 
HelperModalSheetPage.bas[170] ' ' add items 
HelperModalSheetPage.bas[171] ' combo1.AddItem( {54} , {55} , BuildSimpleItem( {56} , {57} , {58} )) 
HelperModalSheetPage.bas[172] ' combo1.AddItem( {59} , {60} , BuildSimpleItem( {61} , {62} , {63} )) 
HelperModalSheetPage.bas[173] ' combo1.AddItem( {64} , {65} , BuildSimpleItem( {66} , {67} , {68} )) 
HelperModalSheetPage.bas[174] ' combo1.AddItem( {69} , {70} , BuildSimpleItem( {71} , {72} , {73} )) 
HelperModalSheetPage.bas[175] ' 
HelperModalSheetPage.bas[176] ' page.Cell(1,1).AddComponent(combo1) 
HelperModalSheetPage.bas[177]  
HelperModalSheetPage.bas[178]  ' add button 
HelperModalSheetPage.bas[179]  Dim btn1 As ABMButton 
HelperModalSheetPage.bas[180]  btn1.InitializeRaised(page, {74} , {75} , {76} , {77} , {78} ) 
HelperModalSheetPage.bas[181]  page.Cell(2,1).AddComponent(btn1) 
HelperModalSheetPage.bas[182]  
HelperModalSheetPage.bas[183]  ' add paragraph 
HelperModalSheetPage.bas[184]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {79} , {80} )) 
HelperModalSheetPage.bas[185]  ' add paragraph 
HelperModalSheetPage.bas[186]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {81} , {82} )) 
HelperModalSheetPage.bas[187]  
HelperModalSheetPage.bas[188]  ' add a sub header label 
HelperModalSheetPage.bas[189]  page.Cell(4,1).AddComponent(ABMShared.BuildHeader(page, {83} , {84} )) 
HelperModalSheetPage.bas[190]  ' add paragraph 
HelperModalSheetPage.bas[191]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {85} , {86} )) 
HelperModalSheetPage.bas[192]  
HelperModalSheetPage.bas[193]  ' add button 
HelperModalSheetPage.bas[194]  Dim btn2 As ABMButton 
HelperModalSheetPage.bas[195]  btn2.InitializeRaised(page, {87} , {88} , {89} , {90} , {91} ) 
HelperModalSheetPage.bas[196]  page.Cell(5,1).AddComponent(btn2) 
HelperModalSheetPage.bas[197]  
HelperModalSheetPage.bas[198]  ' add a sub header label 
HelperModalSheetPage.bas[199]  page.Cell(6,1).AddComponent(ABMShared.BuildHeader(page, {92} , {93} )) 
HelperModalSheetPage.bas[200]  ' add paragraph 
HelperModalSheetPage.bas[201]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {94} , {95} )) 
HelperModalSheetPage.bas[202]  
HelperModalSheetPage.bas[203]  ' add button 
HelperModalSheetPage.bas[204]  Dim btn3 As ABMButton 
HelperModalSheetPage.bas[205]  btn3.InitializeRaised(page, {96} , {97} , {98} , {99} , {100} ) 
HelperModalSheetPage.bas[206]  page.Cell(7,1).AddComponent(btn3) 
HelperModalSheetPage.bas[207]  
HelperModalSheetPage.bas[208]  
HelperModalSheetPage.bas[209]  
HelperModalSheetPage.bas[210]  ' also add the components to the footer 
HelperModalSheetPage.bas[211]  ABMShared.ConnectFooter(page) 
HelperModalSheetPage.bas[212]  
HelperModalSheetPage.bas[213]  page.Refresh ' IMPORTANT 
HelperModalSheetPage.bas[214]  
HelperModalSheetPage.bas[215]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperModalSheetPage.bas[216]  page.FinishedLoading 'IMPORTANT 
HelperModalSheetPage.bas[217]  
HelperModalSheetPage.bas[218]  page.RestoreNavigationBarPosition 
HelperModalSheetPage.bas[219] End Sub 
HelperModalSheetPage.bas[220]  
HelperModalSheetPage.bas[221] ' clicked on the navigation bar 
HelperModalSheetPage.bas[222] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperModalSheetPage.bas[223]  page.SaveNavigationBarPosition 
HelperModalSheetPage.bas[224]  If Action = {101} Then Return 
HelperModalSheetPage.bas[225]  If Action = {102} Then 
HelperModalSheetPage.bas[226]  myToastId = myToastId + 1 
HelperModalSheetPage.bas[227]  page.ShowToast( {103} & myToastId, {104} , {105} , 5000) 
HelperModalSheetPage.bas[228]  Return 
HelperModalSheetPage.bas[229]  End If 
HelperModalSheetPage.bas[230]  If Action = {106} Then 
HelperModalSheetPage.bas[231]  ABMShared.LogOff(page) 
HelperModalSheetPage.bas[232]  Return 
HelperModalSheetPage.bas[233]  End If 
HelperModalSheetPage.bas[234]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperModalSheetPage.bas[235] End Sub 
HelperModalSheetPage.bas[236]  
HelperModalSheetPage.bas[237] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperModalSheetPage.bas[238]  page.ws.Session.SetAttribute( {107} , {108} ) 
HelperModalSheetPage.bas[239]  page.ws.Session.SetAttribute( {109} , {110} ) 
HelperModalSheetPage.bas[240]  page.ws.Session.SetAttribute( {111} , {112} ) 
HelperModalSheetPage.bas[241]  ABMShared.NavigateToPage(ws, ABMPageId, {113} ) 
HelperModalSheetPage.bas[242] End Sub 
HelperModalSheetPage.bas[243]  
HelperModalSheetPage.bas[244] Sub btn1_Clicked(Target As String) 
HelperModalSheetPage.bas[245] ' Dim combo1 As ABMCombo = page.Component( {114} ) 
HelperModalSheetPage.bas[246] ' combo1.Valid = ABM.VALID_FALSE 
HelperModalSheetPage.bas[247] ' combo1.PlaceHolderText = {115} 
HelperModalSheetPage.bas[248] ' combo1.WrongMessage = {116} 
HelperModalSheetPage.bas[249] ' combo1.Refresh 
HelperModalSheetPage.bas[250] ' Return 
HelperModalSheetPage.bas[251]  
HelperModalSheetPage.bas[252]  Dim myModal As ABMModalSheet = page.ModalSheet( {117} ) 
HelperModalSheetPage.bas[253]  Dim googleInp As ABMInput = myModal.Content.Component( {118} ) 
HelperModalSheetPage.bas[254]  googleInp.Text = {119} 
HelperModalSheetPage.bas[255]  Dim Inp1 As ABMInput = myModal.Content.Component( {120} ) 
HelperModalSheetPage.bas[256]  Inp1.Text = {121} 
HelperModalSheetPage.bas[257]  Dim Inp2 As ABMInput = myModal.Content.Component( {122} ) 
HelperModalSheetPage.bas[258]  Inp2.Text = {123} 
HelperModalSheetPage.bas[259]  Dim Inp3 As ABMInput = myModal.Content.Component( {124} ) 
HelperModalSheetPage.bas[260]  Inp3.Text = {125} 
HelperModalSheetPage.bas[261]  Dim Inp4 As ABMInput = myModal.Content.Component( {126} ) 
HelperModalSheetPage.bas[262]  Inp4.Text = {127} 
HelperModalSheetPage.bas[263]  Dim Inp5 As ABMInput = myModal.Content.Component( {128} ) 
HelperModalSheetPage.bas[264]  Inp5.Text = {129} 
HelperModalSheetPage.bas[265]  Dim Inp6 As ABMInput = myModal.Content.Component( {130} ) 
HelperModalSheetPage.bas[266]  Inp6.Text = {131} 
HelperModalSheetPage.bas[267]  
HelperModalSheetPage.bas[268]  page.ShowModalSheet( {132} ) 
HelperModalSheetPage.bas[269] End Sub 
HelperModalSheetPage.bas[270]  
HelperModalSheetPage.bas[271] Sub btn2_Clicked(Target As String) 
HelperModalSheetPage.bas[272]  page.ShowModalSheet( {133} ) 
HelperModalSheetPage.bas[273] End Sub 
HelperModalSheetPage.bas[274]  
HelperModalSheetPage.bas[275] Sub btn3_Clicked(Target As String) 
HelperModalSheetPage.bas[276]  page.ShowModalSheet( {134} ) 
HelperModalSheetPage.bas[277] End Sub 
HelperModalSheetPage.bas[278]  
HelperModalSheetPage.bas[279] Sub BuildModalSheet() As ABMModalSheet 
HelperModalSheetPage.bas[280]  Dim myModal As ABMModalSheet 
HelperModalSheetPage.bas[281]  myModal.Initialize(page, {135} , False, False, {136} ) 
HelperModalSheetPage.bas[282]  myModal.Content.UseTheme( {137} ) 
HelperModalSheetPage.bas[283]  myModal.Footer.UseTheme( {138} ) 
HelperModalSheetPage.bas[284]  myModal.IsDismissible = False 
HelperModalSheetPage.bas[285]  
HelperModalSheetPage.bas[286]  ' create the grid for the content 
HelperModalSheetPage.bas[287]  myModal.Content.AddRows(1,True, {139} ).AddCells12(1, {140} ) 
HelperModalSheetPage.bas[288]  myModal.Content.AddRows(2,True, {141} ).AddCellsOS(2,0,0,0,6,6,6, {142} ) 
HelperModalSheetPage.bas[289]  myModal.Content.AddRows(5,True, {143} ).AddCells12(1, {144} ) 
HelperModalSheetPage.bas[290]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[291]  
HelperModalSheetPage.bas[292]  ' add paragraph 
HelperModalSheetPage.bas[293]  myModal.Content.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {145} , {146} ) ) 
HelperModalSheetPage.bas[294]  
HelperModalSheetPage.bas[295]  Dim googleInp As ABMInput 
HelperModalSheetPage.bas[296]  googleInp.Initialize(page, {147} , ABM.INPUT_TEXT, {148} , False, {149} ) 
HelperModalSheetPage.bas[297]  googleInp.AutoCompleteType = ABM.AUTOCOMPLETE_GOOGLE 
HelperModalSheetPage.bas[298]  myModal.Content.Cell(1,1).AddComponent(googleInp) 
HelperModalSheetPage.bas[299]  
HelperModalSheetPage.bas[300]  ' create the input fields for the content 
HelperModalSheetPage.bas[301]  Dim inp1 As ABMInput 
HelperModalSheetPage.bas[302]  inp1.Initialize(page, {150} , ABM.INPUT_TEXT, {151} , False, {152} ) 
HelperModalSheetPage.bas[303]  inp1.PlaceHolderText = {153} 
HelperModalSheetPage.bas[304]  myModal.Content.Cell(2,1).AddComponent(inp1) 
HelperModalSheetPage.bas[305]  
HelperModalSheetPage.bas[306]  Dim inp2 As ABMInput 
HelperModalSheetPage.bas[307]  inp2.Initialize(page, {154} , ABM.INPUT_TEXT, {155} , False, {156} ) 
HelperModalSheetPage.bas[308]  myModal.Content.Cell(2,2).AddComponent(inp2) 
HelperModalSheetPage.bas[309]  
HelperModalSheetPage.bas[310]  Dim inp3 As ABMInput 
HelperModalSheetPage.bas[311]  inp3.Initialize(page, {157} , ABM.INPUT_TEXT, {158} , False, {159} ) 
HelperModalSheetPage.bas[312]  myModal.Content.Cell(3,1).AddComponent(inp3) 
HelperModalSheetPage.bas[313]  
HelperModalSheetPage.bas[314]  Dim inp4 As ABMInput 
HelperModalSheetPage.bas[315]  inp4.Initialize(page, {160} , ABM.INPUT_TEXT, {161} , False, {162} ) 
HelperModalSheetPage.bas[316]  myModal.Content.Cell(3,2).AddComponent(inp4) 
HelperModalSheetPage.bas[317]  
HelperModalSheetPage.bas[318]  Dim inp5 As ABMInput 
HelperModalSheetPage.bas[319]  inp5.Initialize(page, {163} , ABM.INPUT_TEXT, {164} , False, {165} ) 
HelperModalSheetPage.bas[320]  myModal.Content.Cell(4,1).AddComponent(inp5) 
HelperModalSheetPage.bas[321]  
HelperModalSheetPage.bas[322]  Dim inp6 As ABMInput 
HelperModalSheetPage.bas[323]  inp6.Initialize(page, {166} , ABM.INPUT_TEXT, {167} , False, {168} ) 
HelperModalSheetPage.bas[324]  myModal.Content.Cell(5,1).AddComponent(inp6) 
HelperModalSheetPage.bas[325]  
HelperModalSheetPage.bas[326]  googleInp.SetGoogleAutocompleteResultInputComponent(inp1, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_STREETNAME) 
HelperModalSheetPage.bas[327]  googleInp.SetGoogleAutocompleteResultInputComponent(inp2, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_STREETNUMBER) 
HelperModalSheetPage.bas[328]  googleInp.SetGoogleAutocompleteResultInputComponent(inp3, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_POSTALCODE) 
HelperModalSheetPage.bas[329]  googleInp.SetGoogleAutocompleteResultInputComponent(inp4, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_CITY) 
HelperModalSheetPage.bas[330]  googleInp.SetGoogleAutocompleteResultInputComponent(inp5, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_COUNTRY) 
HelperModalSheetPage.bas[331]  googleInp.SetGoogleAutocompleteResultInputComponent(inp6, ABM.GOOGLE_AUTOCOMLETE_RESULTTYPE_LOCATION) 
HelperModalSheetPage.bas[332]  
HelperModalSheetPage.bas[333]  ' add a editor on the row 
HelperModalSheetPage.bas[334]  Dim editor As ABMEditor 
HelperModalSheetPage.bas[335]  editor.Initialize(page, {169} , True, True, {170} ) 
HelperModalSheetPage.bas[336]  myModal.Content.Cell(6,1).AddComponent(editor) 
HelperModalSheetPage.bas[337]  
HelperModalSheetPage.bas[338]  Dim rbgroup As ABMRadioGroup 
HelperModalSheetPage.bas[339]  rbgroup.Initialize( page, {171} , {172} ) 
HelperModalSheetPage.bas[340]  rbgroup.AddRadioButton( {173} , True) 
HelperModalSheetPage.bas[341]  rbgroup.AddRadioButton( {174} , True) 
HelperModalSheetPage.bas[342]  rbgroup.SetActive(1) 
HelperModalSheetPage.bas[343]  myModal.Content.Cell(1,1).AddComponent(rbgroup) 
HelperModalSheetPage.bas[344]  
HelperModalSheetPage.bas[345] ' Dim combo1 As ABMCombo 
HelperModalSheetPage.bas[346] ' combo1.Initialize(page, {175} , {176} , 650, {177} ) 
HelperModalSheetPage.bas[347] ' combo1.IconName = {178} 
HelperModalSheetPage.bas[348] ' 
HelperModalSheetPage.bas[349] ' ' add items 
HelperModalSheetPage.bas[350] ' combo1.AddItem( {179} , {180} , BuildSimpleItem( {181} , {182} , {183} )) 
HelperModalSheetPage.bas[351] ' combo1.AddItem( {184} , {185} , BuildSimpleItem( {186} , {187} , {188} )) 
HelperModalSheetPage.bas[352] ' combo1.AddItem( {189} , {190} , BuildSimpleItem( {191} , {192} , {193} )) 
HelperModalSheetPage.bas[353] ' combo1.AddItem( {194} , {195} , BuildSimpleItem( {196} , {197} , {198} )) 
HelperModalSheetPage.bas[354] ' 
HelperModalSheetPage.bas[355] ' myModal.Content.Cell(1,1).AddComponent(combo1) 
HelperModalSheetPage.bas[356]  
HelperModalSheetPage.bas[357] ' Dim fileinput As ABMFileInput 
HelperModalSheetPage.bas[358] ' fileinput.Initialize(page, {199} , {200} , {201} ,False, {202} , {203} ) 
HelperModalSheetPage.bas[359] ' myModal.Content.Cell(6,1).AddComponent(fileinput) 
HelperModalSheetPage.bas[360]  
HelperModalSheetPage.bas[361]  
HelperModalSheetPage.bas[362]  ' create the grid for the footer 
HelperModalSheetPage.bas[363]  ' we add a row without the default 20px padding so we need to use AddRowsM(). If we do not use this method, a scrollbar will appear to the sheet. 
HelperModalSheetPage.bas[364]  myModal.Footer.AddRowsM(1,True,0,0, {204} ).AddCellsOS(1,6,6,6,3,3,3, {205} ).AddCellsOS(1,0,0,0,3,3,3, {206} ) 
HelperModalSheetPage.bas[365]  myModal.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[366]  
HelperModalSheetPage.bas[367]  ' create the buttons for the footer 
HelperModalSheetPage.bas[368]  Dim msbtn1 As ABMButton 
HelperModalSheetPage.bas[369]  msbtn1.InitializeFlat(page, {207} , {208} , {209} , {210} , {211} ) 
HelperModalSheetPage.bas[370]  myModal.Footer.Cell(1,1).AddComponent(msbtn1) 
HelperModalSheetPage.bas[371]  
HelperModalSheetPage.bas[372]  Dim msbtn2 As ABMButton 
HelperModalSheetPage.bas[373]  msbtn2.InitializeFlat(page, {212} , {213} , {214} , {215} , {216} ) 
HelperModalSheetPage.bas[374]  myModal.Footer.Cell(1,2).AddComponent(msbtn2) 
HelperModalSheetPage.bas[375]  
HelperModalSheetPage.bas[376]  Return myModal 
HelperModalSheetPage.bas[377] End Sub 
HelperModalSheetPage.bas[378]  
HelperModalSheetPage.bas[379] 'Sub BuildSimpleItem(id As String, icon As String, Title As String) As ABMLabel 
HelperModalSheetPage.bas[380] ' Dim lbl As ABMLabel 
HelperModalSheetPage.bas[381] ' If icon <> {217} Then 
HelperModalSheetPage.bas[382] ' lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {218} ) 
HelperModalSheetPage.bas[383] ' Else 
HelperModalSheetPage.bas[384] ' lbl.Initialize(page, id, Title, ABM.SIZE_H6, True, {219} ) 
HelperModalSheetPage.bas[385] ' End If 
HelperModalSheetPage.bas[386] ' lbl.VerticalAlign = True 
HelperModalSheetPage.bas[387] ' lbl.IconName = icon 
HelperModalSheetPage.bas[388] ' Return lbl 
HelperModalSheetPage.bas[389] 'End Sub 
HelperModalSheetPage.bas[390]  
HelperModalSheetPage.bas[391] Sub canvas1_CanvasDown(x As Int, y As Int) 
HelperModalSheetPage.bas[392]  Log( {220} & x & {221} & y) 
HelperModalSheetPage.bas[393] End Sub 
HelperModalSheetPage.bas[394]  
HelperModalSheetPage.bas[395] Sub BuildWrongInputModalSheet() As ABMModalSheet 
HelperModalSheetPage.bas[396]  Dim myModalError As ABMModalSheet 
HelperModalSheetPage.bas[397]  myModalError.Initialize(page, {222} , False, False, {223} ) 
HelperModalSheetPage.bas[398]  myModalError.Content.UseTheme( {224} ) 
HelperModalSheetPage.bas[399]  myModalError.Footer.UseTheme( {225} ) 
HelperModalSheetPage.bas[400]  myModalError.IsDismissible = True 
HelperModalSheetPage.bas[401]  
HelperModalSheetPage.bas[402]  ' create the grid for the content 
HelperModalSheetPage.bas[403]  myModalError.Content.AddRows(1,True, {226} ).AddCells12(1, {227} ) 
HelperModalSheetPage.bas[404]  myModalError.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[405]  
HelperModalSheetPage.bas[406]  Dim lbl1 As ABMLabel 
HelperModalSheetPage.bas[407]  lbl1.Initialize(page, {228} , {229} ,ABM.SIZE_PARAGRAPH, False, {230} ) 
HelperModalSheetPage.bas[408]  myModalError.Content.Cell(1,1).AddComponent(lbl1) 
HelperModalSheetPage.bas[409]  
HelperModalSheetPage.bas[410]  Return myModalError 
HelperModalSheetPage.bas[411] End Sub 
HelperModalSheetPage.bas[412]  
HelperModalSheetPage.bas[413]  
HelperModalSheetPage.bas[414]  
HelperModalSheetPage.bas[415] Sub BuildBottomSheet() As ABMModalSheet 
HelperModalSheetPage.bas[416]  Dim myBottomModal As ABMModalSheet 
HelperModalSheetPage.bas[417]  myBottomModal.Initialize(page, {231} , False, True, {232} ) 
HelperModalSheetPage.bas[418]  myBottomModal.Content.UseTheme( {233} ) 
HelperModalSheetPage.bas[419]  myBottomModal.Footer.UseTheme( {234} ) 
HelperModalSheetPage.bas[420]  myBottomModal.IsDismissible = True 
HelperModalSheetPage.bas[421]  
HelperModalSheetPage.bas[422]  ' create the grid for the content 
HelperModalSheetPage.bas[423]  myBottomModal.Content.AddRows(1,True, {235} ).AddCells12(1, {236} ) 
HelperModalSheetPage.bas[424]  myBottomModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[425]  
HelperModalSheetPage.bas[426]  ' create list 
HelperModalSheetPage.bas[427]  Dim list1 As ABMList 
HelperModalSheetPage.bas[428]  list1.Initialize(page, {237} , ABM.COLLAPSE_ACCORDION, {238} ) 
HelperModalSheetPage.bas[429]  
HelperModalSheetPage.bas[430]  ' add items 
HelperModalSheetPage.bas[431]  list1.AddItem( {239} , BuildItem( {240} , {241} , {242} , False)) 
HelperModalSheetPage.bas[432]  list1.AddItem( {243} , BuildItem( {244} , {245} , {246} , True)) 
HelperModalSheetPage.bas[433]  list1.AddItem( {247} , BuildItem( {248} , {249} , {250} , False)) 
HelperModalSheetPage.bas[434]  list1.AddItem( {251} , BuildItem( {252} , {253} , {254} , False)) 
HelperModalSheetPage.bas[435]  
HelperModalSheetPage.bas[436]  myBottomModal.Content.Cell(1,1).AddComponent(list1) 
HelperModalSheetPage.bas[437]  
HelperModalSheetPage.bas[438]  Return myBottomModal 
HelperModalSheetPage.bas[439] End Sub 
HelperModalSheetPage.bas[440]  
HelperModalSheetPage.bas[441] Sub BuildItem(id As String, text As String, messages As String, isnew As Boolean) As ABMContainer 
HelperModalSheetPage.bas[442]  Dim ItemCont As ABMContainer 
HelperModalSheetPage.bas[443]  ItemCont.Initialize(page, id, {255} ) 
HelperModalSheetPage.bas[444]  ItemCont.AddRowsM(1,False,0,0, {256} ).AddCellsOSMP(1,0,0,0,10,10,10,6,0,0,0, {257} ).AddCellsOSMP(1,0,0,0,2,2,2,6,0,0,0, {258} ) 
HelperModalSheetPage.bas[445]  ItemCont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[446]  
HelperModalSheetPage.bas[447]  Dim lbl As ABMLabel 
HelperModalSheetPage.bas[448]  lbl.Initialize(page, id & {259} , text, ABM.SIZE_PARAGRAPH, False, {260} ) 
HelperModalSheetPage.bas[449]  ItemCont.Cell(1,1).AddComponent(lbl) 
HelperModalSheetPage.bas[450]  
HelperModalSheetPage.bas[451]  Dim badge As ABMBadge 
HelperModalSheetPage.bas[452]  badge.Initialize(page, id & {261} , messages, isnew, {262} ) 
HelperModalSheetPage.bas[453]  ItemCont.Cell(1,2).AddComponent(badge) 
HelperModalSheetPage.bas[454]  
HelperModalSheetPage.bas[455]  Return ItemCont 
HelperModalSheetPage.bas[456] End Sub 
HelperModalSheetPage.bas[457]  
HelperModalSheetPage.bas[458] Sub msbtn1_Clicked(Target As String) 
HelperModalSheetPage.bas[459]  Dim mymodal As ABMModalSheet = page.ModalSheet( {263} ) 
HelperModalSheetPage.bas[460]  
HelperModalSheetPage.bas[461]  Dim inp1 As ABMInput = mymodal.Content.Cell(2,1).Component( {264} ) 
HelperModalSheetPage.bas[462]  Dim YourName As String = inp1.Text 
HelperModalSheetPage.bas[463]  If YourName = {265} Then 
HelperModalSheetPage.bas[464]  Dim mymodalError As ABMModalSheet = page.ModalSheet( {266} ) 
HelperModalSheetPage.bas[465]  Dim myModalLbl As ABMLabel= mymodalError.Content.Component( {267} ) 
HelperModalSheetPage.bas[466]  
HelperModalSheetPage.bas[467]  myModalLbl.Text = {268} 
HelperModalSheetPage.bas[468]  
HelperModalSheetPage.bas[469]  page.ShowModalsheet( {269} ) 
HelperModalSheetPage.bas[470]  Return 
HelperModalSheetPage.bas[471]  End If 
HelperModalSheetPage.bas[472]  
HelperModalSheetPage.bas[473]  page.CloseModalSheet( {270} ) 
HelperModalSheetPage.bas[474]  myToastId = myToastId + 1 
HelperModalSheetPage.bas[475]  page.ShowToast( {271} & myToastId, {272} , {273} & YourName & {274} , 5000) 
HelperModalSheetPage.bas[476] End Sub 
HelperModalSheetPage.bas[477]  
HelperModalSheetPage.bas[478] Sub msbtn2_Clicked(Target As String) 
HelperModalSheetPage.bas[479]  page.CloseModalSheet( {275} ) 
HelperModalSheetPage.bas[480]  myToastId = myToastId + 1 
HelperModalSheetPage.bas[481]  page.ShowToast( {276} & myToastId, {277} , {278} , 5000) 
HelperModalSheetPage.bas[482] End Sub 
HelperModalSheetPage.bas[483]  
HelperModalSheetPage.bas[484] Sub BuildFixedFooterSheet() As ABMModalSheet 
HelperModalSheetPage.bas[485]  Dim myModal As ABMModalSheet 
HelperModalSheetPage.bas[486]  myModal.Initialize(page, {279} , True, False, {280} ) 
HelperModalSheetPage.bas[487]  myModal.Content.UseTheme( {281} ) 
HelperModalSheetPage.bas[488]  myModal.Footer.UseTheme( {282} ) 
HelperModalSheetPage.bas[489]  myModal.IsDismissible = False 
HelperModalSheetPage.bas[490]  
HelperModalSheetPage.bas[491]  ' create the grid for the content 
HelperModalSheetPage.bas[492]  myModal.Content.AddRows(1,True, {283} ).AddCells12(1, {284} ) 
HelperModalSheetPage.bas[493]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[494]  
HelperModalSheetPage.bas[495]  Dim Message As String = {0} 
HelperModalSheetPage.bas[595]  
HelperModalSheetPage.bas[596]  Dim lbl1 As ABMLabel 
HelperModalSheetPage.bas[597]  lbl1.Initialize(page, {285} , Message,ABM.SIZE_PARAGRAPH, False, {286} ) 
HelperModalSheetPage.bas[598]  myModal.Content.Cell(1,1).AddComponent(lbl1) 
HelperModalSheetPage.bas[599]  
HelperModalSheetPage.bas[600]  ' create the grid for the footer 
HelperModalSheetPage.bas[601]  ' we add a row without the default 20px padding so we need to use AddRowsM(). 
HelperModalSheetPage.bas[602]  myModal.Footer.AddRowsM(1,True,0,0, {287} ).AddCellsOS(1,9,9,9,3,3,3, {288} ) 
HelperModalSheetPage.bas[603]  myModal.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperModalSheetPage.bas[604]  
HelperModalSheetPage.bas[605]  ' create the buttons for the footer 
HelperModalSheetPage.bas[606]  Dim msbtn3 As ABMButton 
HelperModalSheetPage.bas[607]  msbtn3.InitializeFlat(page, {289} , {290} , {291} , {292} , {293} ) 
HelperModalSheetPage.bas[608]  myModal.Footer.Cell(1,1).AddComponent(msbtn3) 
HelperModalSheetPage.bas[609]  
HelperModalSheetPage.bas[610]  Return myModal 
HelperModalSheetPage.bas[611] End Sub 
HelperModalSheetPage.bas[612]  
HelperModalSheetPage.bas[613] Sub msbtn3_Clicked(Target As String) 
HelperModalSheetPage.bas[614]  page.CloseModalSheet( {294} ) 
HelperModalSheetPage.bas[615] End Sub 
Analysing: HelperNavigationBarPage.bas
HelperNavigationBarPage.bas[0] ﻿Type=Class 
HelperNavigationBarPage.bas[0] Version=4.7 
HelperNavigationBarPage.bas[0] ModulesStructureVersion=1 
HelperNavigationBarPage.bas[0] B4J=true 
HelperNavigationBarPage.bas[0] @EndOfDesignText@ 
HelperNavigationBarPage.bas[1] 'Class module 
HelperNavigationBarPage.bas[2] Sub Class_Globals 
HelperNavigationBarPage.bas[3]  Private ws As WebSocket 'ignore 
HelperNavigationBarPage.bas[4]  ' will hold our page information 
HelperNavigationBarPage.bas[5]  Public page As ABMPage 
HelperNavigationBarPage.bas[6]  ' page theme 
HelperNavigationBarPage.bas[7]  Private theme As ABMTheme 
HelperNavigationBarPage.bas[8]  ' to access the constants 
HelperNavigationBarPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperNavigationBarPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperNavigationBarPage.bas[11]  Public Name As String = {4} 
HelperNavigationBarPage.bas[12]  ' will hold the unique browsers window id 
HelperNavigationBarPage.bas[13]  Private ABMPageId As String = {5} 
HelperNavigationBarPage.bas[14]  
HelperNavigationBarPage.bas[15]  ' your own variables 
HelperNavigationBarPage.bas[16]  Dim myToastId As Int 
HelperNavigationBarPage.bas[17] End Sub 
HelperNavigationBarPage.bas[18]  
HelperNavigationBarPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
HelperNavigationBarPage.bas[20] Public Sub Initialize 
HelperNavigationBarPage.bas[21]  ' build the local structure IMPORTANT! 
HelperNavigationBarPage.bas[22]  BuildPage 
HelperNavigationBarPage.bas[23] End Sub 
HelperNavigationBarPage.bas[24]  
HelperNavigationBarPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperNavigationBarPage.bas[26]  Log( {6} ) 
HelperNavigationBarPage.bas[27]  ws = WebSocket1 
HelperNavigationBarPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperNavigationBarPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperNavigationBarPage.bas[30]  
HelperNavigationBarPage.bas[31]  If ABMShared.NeedsAuthorization Then 
HelperNavigationBarPage.bas[32]  If session.GetAttribute2( {7} , {8} ) = {9} Then 
HelperNavigationBarPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {10} ) 
HelperNavigationBarPage.bas[34]  Return 
HelperNavigationBarPage.bas[35]  End If 
HelperNavigationBarPage.bas[36]  End If 
HelperNavigationBarPage.bas[37]  
HelperNavigationBarPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperNavigationBarPage.bas[39]  If page.ComesFromPageCache Then 
HelperNavigationBarPage.bas[40]  ' refresh the page 
HelperNavigationBarPage.bas[41]  page.Refresh 
HelperNavigationBarPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperNavigationBarPage.bas[43]  page.FinishedLoading 
HelperNavigationBarPage.bas[44]  Else 
HelperNavigationBarPage.bas[45]  ' Prepare the page 
HelperNavigationBarPage.bas[46]  page.Prepare 
HelperNavigationBarPage.bas[47]  ' load the dynamic content 
HelperNavigationBarPage.bas[48]  ConnectPage 
HelperNavigationBarPage.bas[49]  End If 
HelperNavigationBarPage.bas[50]  Log(ABMPageId) 
HelperNavigationBarPage.bas[51] End Sub 
HelperNavigationBarPage.bas[52]  
HelperNavigationBarPage.bas[53] Private Sub WebSocket_Disconnected 
HelperNavigationBarPage.bas[54]  Log( {11} ) 
HelperNavigationBarPage.bas[55] End Sub 
HelperNavigationBarPage.bas[56]  
HelperNavigationBarPage.bas[57] Sub Page_ParseEvent(Params As Map) 
HelperNavigationBarPage.bas[58]  Dim eventName As String = Params.Get( {12} ) 
HelperNavigationBarPage.bas[59]  Dim eventParams() As String = Regex.Split( {13} ,Params.Get( {14} )) 
HelperNavigationBarPage.bas[60]  If eventName = {15} Then 
HelperNavigationBarPage.bas[61]  Log( {16} ) 
HelperNavigationBarPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperNavigationBarPage.bas[63]  Return 
HelperNavigationBarPage.bas[64]  End If 
HelperNavigationBarPage.bas[65]  If SubExists(Me, eventName) Then 
HelperNavigationBarPage.bas[66]  Params.Remove( {17} ) 
HelperNavigationBarPage.bas[67]  Params.Remove( {18} ) 
HelperNavigationBarPage.bas[68]  Select Case Params.Size 
HelperNavigationBarPage.bas[69]  Case 0 
HelperNavigationBarPage.bas[70]  CallSub(Me, eventName) 
HelperNavigationBarPage.bas[71]  Case 1 
HelperNavigationBarPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperNavigationBarPage.bas[73]  Case 2 
HelperNavigationBarPage.bas[74]  If Params.get(eventParams(0)) = {19} Then 
HelperNavigationBarPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperNavigationBarPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
HelperNavigationBarPage.bas[77]  Else 
HelperNavigationBarPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperNavigationBarPage.bas[79]  End If 
HelperNavigationBarPage.bas[80]  Case Else 
HelperNavigationBarPage.bas[81]  ' cannot be called directly, to many param 
HelperNavigationBarPage.bas[82]  CallSub2(Me, eventName, Params) 
HelperNavigationBarPage.bas[83]  End Select 
HelperNavigationBarPage.bas[84]  End If 
HelperNavigationBarPage.bas[85] End Sub 
HelperNavigationBarPage.bas[86]  
HelperNavigationBarPage.bas[87] public Sub BuildTheme() 
HelperNavigationBarPage.bas[88]  ' start with the base theme defined in ABMShared 
HelperNavigationBarPage.bas[89]  theme.Initialize( {20} ) 
HelperNavigationBarPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperNavigationBarPage.bas[91]  
HelperNavigationBarPage.bas[92]  ' add additional themes specific for this page 
HelperNavigationBarPage.bas[93]  
HelperNavigationBarPage.bas[94] End Sub 
HelperNavigationBarPage.bas[95]  
HelperNavigationBarPage.bas[96] public Sub BuildPage() 
HelperNavigationBarPage.bas[97]  ' initialize the theme 
HelperNavigationBarPage.bas[98]  BuildTheme 
HelperNavigationBarPage.bas[99]  
HelperNavigationBarPage.bas[100]  ' initialize this page using our theme 
HelperNavigationBarPage.bas[101]  page.InitializeWithTheme(Name, {21} & ABMshared.AppName & {22} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperNavigationBarPage.bas[102]  page.ShowLoader=True 
HelperNavigationBarPage.bas[103]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperNavigationBarPage.bas[104]  page.PageTitle = {23} 
HelperNavigationBarPage.bas[105]  page.PageDescription = {24} 
HelperNavigationBarPage.bas[106]  page.PageHTMLName = {25} 
HelperNavigationBarPage.bas[107]  page.PageKeywords = {26} 
HelperNavigationBarPage.bas[108]  page.PageSiteMapPriority = {27} 
HelperNavigationBarPage.bas[109]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperNavigationBarPage.bas[110]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperNavigationBarPage.bas[111]  
HelperNavigationBarPage.bas[112]  ABMShared.BuildNavigationBar(page, {28} , {29} , {30} , {31} , {32} ) 
HelperNavigationBarPage.bas[113]  
HelperNavigationBarPage.bas[114]  ' create the page grid 
HelperNavigationBarPage.bas[115]  page.AddRows(12,True, {33} ).AddCells12(1, {34} ) 
HelperNavigationBarPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperNavigationBarPage.bas[117]  
HelperNavigationBarPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperNavigationBarPage.bas[119]  'page.NeedsCodeLabel = True 
HelperNavigationBarPage.bas[120]  
HelperNavigationBarPage.bas[121]  ABMShared.BuildFooter(page) 
HelperNavigationBarPage.bas[122] End Sub 
HelperNavigationBarPage.bas[123]  
HelperNavigationBarPage.bas[124] Sub ConnectPage() 
HelperNavigationBarPage.bas[125]  'NEW 
HelperNavigationBarPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
HelperNavigationBarPage.bas[127]  
HelperNavigationBarPage.bas[128]  ' add a header label 
HelperNavigationBarPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {35} , {36} )) 
HelperNavigationBarPage.bas[130]  ' add paragraph 
HelperNavigationBarPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} ) ) 
HelperNavigationBarPage.bas[132]  
HelperNavigationBarPage.bas[133]  ' add a header label 
HelperNavigationBarPage.bas[134]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {39} , {40} )) 
HelperNavigationBarPage.bas[135]  ' add paragraph 
HelperNavigationBarPage.bas[136]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {41} , {42} ) ) 
HelperNavigationBarPage.bas[137]  ' add paragraph 
HelperNavigationBarPage.bas[138]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {43} , {44} ) ) 
HelperNavigationBarPage.bas[139]  
HelperNavigationBarPage.bas[140]  
HelperNavigationBarPage.bas[141]  ' add a code block 
HelperNavigationBarPage.bas[142]  Dim code As String = {0} 
HelperNavigationBarPage.bas[193]  
HelperNavigationBarPage.bas[194]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {45} , code)) 
HelperNavigationBarPage.bas[195]  
HelperNavigationBarPage.bas[196]  ' add paragraph 
HelperNavigationBarPage.bas[197]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {46} , {47} ) ) 
HelperNavigationBarPage.bas[198]  
HelperNavigationBarPage.bas[199]  code = {1} 
HelperNavigationBarPage.bas[200]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {48} , code)) 
HelperNavigationBarPage.bas[201]  
HelperNavigationBarPage.bas[202]  ' add paragraph 
HelperNavigationBarPage.bas[203]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} ) ) 
HelperNavigationBarPage.bas[204]  
HelperNavigationBarPage.bas[205]  ' param table 
HelperNavigationBarPage.bas[206]  Dim Headers, codes, Descriptions As List 
HelperNavigationBarPage.bas[207]  Headers.Initialize2(Array As String( {51} , {52} )) 
HelperNavigationBarPage.bas[208]  codes.Initialize2(Array As String( {53} , {54} , {55} )) 
HelperNavigationBarPage.bas[209]  Descriptions.Initialize2(Array As String( {56} , {57} , {58} )) 
HelperNavigationBarPage.bas[210]  page.Cell(6,1).AddComponent(ABMShared.BuildParamTable(page, {59} , Headers, codes, Descriptions)) 
HelperNavigationBarPage.bas[211]  
HelperNavigationBarPage.bas[212]  ' add paragraph 
HelperNavigationBarPage.bas[213]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {60} , {61} ) ) 
HelperNavigationBarPage.bas[214]  
HelperNavigationBarPage.bas[215]  ' add a code block 
HelperNavigationBarPage.bas[216]  Dim code As String = {2} 
HelperNavigationBarPage.bas[217]  
HelperNavigationBarPage.bas[218]  page.Cell(8,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {62} , code)) 
HelperNavigationBarPage.bas[219]  
HelperNavigationBarPage.bas[220]  ' add a header label 
HelperNavigationBarPage.bas[221]  page.Cell(9,1).AddComponent(ABMShared.BuildHeader(page, {63} , {64} )) 
HelperNavigationBarPage.bas[222]  ' add paragraph 
HelperNavigationBarPage.bas[223]  page.Cell(9,1).AddComponent(ABMShared.BuildParagraph(page, {65} , {66} ) ) 
HelperNavigationBarPage.bas[224]  
HelperNavigationBarPage.bas[225]  ' param table 
HelperNavigationBarPage.bas[226]  Dim Headers, codes, Descriptions As List 
HelperNavigationBarPage.bas[227]  Headers.Initialize2(Array As String( {67} , {68} )) 
HelperNavigationBarPage.bas[228]  codes.Initialize2(Array As String( {69} , {70} , {71} , {72} , {73} , {74} , {75} , {76} , {77} , {78} , {79} , {80} , {81} )) 
HelperNavigationBarPage.bas[229]  Descriptions.Initialize 
HelperNavigationBarPage.bas[230]  Descriptions.Add( {82} ) 
HelperNavigationBarPage.bas[231]  Descriptions.Add( {83} ) 
HelperNavigationBarPage.bas[232]  Descriptions.Add( {84} ) 
HelperNavigationBarPage.bas[233]  Descriptions.Add( {85} ) 
HelperNavigationBarPage.bas[234]  Descriptions.Add( {86} ) 
HelperNavigationBarPage.bas[235]  Descriptions.Add( {87} ) 
HelperNavigationBarPage.bas[236]  Descriptions.Add( {88} ) 
HelperNavigationBarPage.bas[237]  Descriptions.Add( {89} ) 
HelperNavigationBarPage.bas[238]  Descriptions.Add( {90} ) 
HelperNavigationBarPage.bas[239]  Descriptions.Add( {91} ) 
HelperNavigationBarPage.bas[240]  Descriptions.Add( {92} ) 
HelperNavigationBarPage.bas[241]  Descriptions.Add( {93} ) 
HelperNavigationBarPage.bas[242]  Descriptions.Add( {94} ) 
HelperNavigationBarPage.bas[243]  page.Cell(10,1).AddComponent(ABMShared.BuildParamTable(page, {95} , Headers, codes, Descriptions)) 
HelperNavigationBarPage.bas[244]  
HelperNavigationBarPage.bas[245]  ' add paragraph 
HelperNavigationBarPage.bas[246]  page.Cell(11,1).AddComponent(ABMShared.BuildParagraph(page, {96} , {97} ) ) 
HelperNavigationBarPage.bas[247]  
HelperNavigationBarPage.bas[248]  code = {3} 
HelperNavigationBarPage.bas[258]  
HelperNavigationBarPage.bas[259]  page.Cell(12,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {98} , code)) 
HelperNavigationBarPage.bas[260]  
HelperNavigationBarPage.bas[261]  
HelperNavigationBarPage.bas[262]  ' also add the components to the footer 
HelperNavigationBarPage.bas[263]  ABMShared.ConnectFooter(page) 
HelperNavigationBarPage.bas[264]  
HelperNavigationBarPage.bas[265]  page.Refresh ' IMPORTANT 
HelperNavigationBarPage.bas[266]  
HelperNavigationBarPage.bas[267]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperNavigationBarPage.bas[268]  page.FinishedLoading 'IMPORTANT 
HelperNavigationBarPage.bas[269]  
HelperNavigationBarPage.bas[270]  page.RestoreNavigationBarPosition 
HelperNavigationBarPage.bas[271] End Sub 
HelperNavigationBarPage.bas[272]  
HelperNavigationBarPage.bas[273] ' clicked on the navigation bar 
HelperNavigationBarPage.bas[274] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperNavigationBarPage.bas[275]  page.SaveNavigationBarPosition 
HelperNavigationBarPage.bas[276]  If Action = {99} Then Return 
HelperNavigationBarPage.bas[277]  If Action = {100} Then 
HelperNavigationBarPage.bas[278]  myToastId = myToastId + 1 
HelperNavigationBarPage.bas[279]  page.ShowToast( {101} & myToastId, {102} , {103} , 5000) 
HelperNavigationBarPage.bas[280]  Return 
HelperNavigationBarPage.bas[281]  End If 
HelperNavigationBarPage.bas[282]  If Action = {104} Then 
HelperNavigationBarPage.bas[283]  ABMShared.LogOff(page) 
HelperNavigationBarPage.bas[284]  Return 
HelperNavigationBarPage.bas[285]  End If 
HelperNavigationBarPage.bas[286]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperNavigationBarPage.bas[287] End Sub 
HelperNavigationBarPage.bas[288]  
HelperNavigationBarPage.bas[289] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperNavigationBarPage.bas[290]  page.ws.Session.SetAttribute( {105} , {106} ) 
HelperNavigationBarPage.bas[291]  page.ws.Session.SetAttribute( {107} , {108} ) 
HelperNavigationBarPage.bas[292]  page.ws.Session.SetAttribute( {109} , {110} ) 
HelperNavigationBarPage.bas[293]  ABMShared.NavigateToPage(ws, ABMPageId, {111} ) 
HelperNavigationBarPage.bas[294] End Sub 
Analysing: HelperPagePage.bas
HelperPagePage.bas[0] ﻿Type=Class 
HelperPagePage.bas[0] Version=4.7 
HelperPagePage.bas[0] ModulesStructureVersion=1 
HelperPagePage.bas[0] B4J=true 
HelperPagePage.bas[0] @EndOfDesignText@ 
HelperPagePage.bas[1] 'Class module 
HelperPagePage.bas[2] Sub Class_Globals 
HelperPagePage.bas[3]  Private ws As WebSocket 'ignore 
HelperPagePage.bas[4]  ' will hold our page information 
HelperPagePage.bas[5]  Public page As ABMPage 
HelperPagePage.bas[6]  ' page theme 
HelperPagePage.bas[7]  Private theme As ABMTheme 
HelperPagePage.bas[8]  ' to access the constants 
HelperPagePage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperPagePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperPagePage.bas[11]  Public Name As String = {8} 
HelperPagePage.bas[12]  ' will hold the unique browsers window id 
HelperPagePage.bas[13]  Private ABMPageId As String = {9} 
HelperPagePage.bas[14]  
HelperPagePage.bas[15]  ' your own variables 
HelperPagePage.bas[16]  Dim myToastId As Int 
HelperPagePage.bas[17]  Dim tmpCardId As Int 
HelperPagePage.bas[18] End Sub 
HelperPagePage.bas[19]  
HelperPagePage.bas[20] 'Initializes the object. You can add parameters to this method if needed. 
HelperPagePage.bas[21] Public Sub Initialize 
HelperPagePage.bas[22]  ' build the local structure IMPORTANT! 
HelperPagePage.bas[23]  BuildPage 
HelperPagePage.bas[24] End Sub 
HelperPagePage.bas[25]  
HelperPagePage.bas[26] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperPagePage.bas[27]  Log( {10} ) 
HelperPagePage.bas[28]  ws = WebSocket1 
HelperPagePage.bas[29]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperPagePage.bas[30]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperPagePage.bas[31]  
HelperPagePage.bas[32]  If ABMShared.NeedsAuthorization Then 
HelperPagePage.bas[33]  If session.GetAttribute2( {11} , {12} ) = {13} Then 
HelperPagePage.bas[34]  ABMShared.NavigateToPage(ws, ABMPageId, {14} ) 
HelperPagePage.bas[35]  Return 
HelperPagePage.bas[36]  End If 
HelperPagePage.bas[37]  End If 
HelperPagePage.bas[38]  
HelperPagePage.bas[39]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperPagePage.bas[40]  If page.ComesFromPageCache Then 
HelperPagePage.bas[41]  ' refresh the page 
HelperPagePage.bas[42]  page.Refresh 
HelperPagePage.bas[43]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperPagePage.bas[44]  page.FinishedLoading 
HelperPagePage.bas[45]  Else 
HelperPagePage.bas[46]  ' Prepare the page 
HelperPagePage.bas[47]  page.Prepare 
HelperPagePage.bas[48]  ' load the dynamic content 
HelperPagePage.bas[49]  ConnectPage 
HelperPagePage.bas[50]  End If 
HelperPagePage.bas[51]  Log(ABMPageId) 
HelperPagePage.bas[52] End Sub 
HelperPagePage.bas[53]  
HelperPagePage.bas[54] Private Sub WebSocket_Disconnected 
HelperPagePage.bas[55]  Log( {15} ) 
HelperPagePage.bas[56] End Sub 
HelperPagePage.bas[57]  
HelperPagePage.bas[58] Sub Page_ParseEvent(Params As Map) 
HelperPagePage.bas[59]  Dim eventName As String = Params.Get( {16} ) 
HelperPagePage.bas[60]  Dim eventParams() As String = Regex.Split( {17} ,Params.Get( {18} )) 
HelperPagePage.bas[61]  If eventName = {19} Then 
HelperPagePage.bas[62]  Log( {20} ) 
HelperPagePage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperPagePage.bas[64]  Return 
HelperPagePage.bas[65]  End If 
HelperPagePage.bas[66]  If SubExists(Me, eventName) Then 
HelperPagePage.bas[67]  Params.Remove( {21} ) 
HelperPagePage.bas[68]  Params.Remove( {22} ) 
HelperPagePage.bas[69]  Select Case Params.Size 
HelperPagePage.bas[70]  Case 0 
HelperPagePage.bas[71]  CallSub(Me, eventName) 
HelperPagePage.bas[72]  Case 1 
HelperPagePage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperPagePage.bas[74]  Case 2 
HelperPagePage.bas[75]  If Params.get(eventParams(0)) = {23} Then 
HelperPagePage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperPagePage.bas[77]  CallSub2(Me, eventName, PassedTables) 
HelperPagePage.bas[78]  Else 
HelperPagePage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperPagePage.bas[80]  End If 
HelperPagePage.bas[81]  Case Else 
HelperPagePage.bas[82]  ' cannot be called directly, to many param 
HelperPagePage.bas[83]  CallSub2(Me, eventName, Params) 
HelperPagePage.bas[84]  End Select 
HelperPagePage.bas[85]  End If 
HelperPagePage.bas[86] End Sub 
HelperPagePage.bas[87]  
HelperPagePage.bas[88] public Sub BuildTheme() 
HelperPagePage.bas[89]  ' start with the base theme defined in ABMShared 
HelperPagePage.bas[90]  theme.Initialize( {24} ) 
HelperPagePage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperPagePage.bas[92]  
HelperPagePage.bas[93]  ' add additional themes specific for this page 
HelperPagePage.bas[94]  theme.AddContainerTheme( {25} ) 
HelperPagePage.bas[95]  theme.Container( {26} ).BackColor = ABM.COLOR_BLUEGREY 
HelperPagePage.bas[96]  theme.Container( {27} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN4 
HelperPagePage.bas[97]  
HelperPagePage.bas[98]  theme.AddCardTheme( {28} ) 
HelperPagePage.bas[99]  theme.Card( {29} ).TitleForeColor = ABM.COLOR_WHITE 
HelperPagePage.bas[100]  
HelperPagePage.bas[101] End Sub 
HelperPagePage.bas[102]  
HelperPagePage.bas[103] public Sub BuildPage() 
HelperPagePage.bas[104]  ' initialize the theme 
HelperPagePage.bas[105]  BuildTheme 
HelperPagePage.bas[106]  
HelperPagePage.bas[107]  ' initialize this page using our theme 
HelperPagePage.bas[108]  page.InitializeWithTheme(Name, {30} & ABMshared.AppName & {31} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperPagePage.bas[109]  page.ShowLoader=True 
HelperPagePage.bas[110]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperPagePage.bas[111]  page.PageTitle = {32} 
HelperPagePage.bas[112]  page.PageDescription = {33} 
HelperPagePage.bas[113]  page.PageHTMLName = {34} 
HelperPagePage.bas[114]  page.PageKeywords = {35} 
HelperPagePage.bas[115]  page.PageSiteMapPriority = {36} 
HelperPagePage.bas[116]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperPagePage.bas[117]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperPagePage.bas[118]  
HelperPagePage.bas[119]  ' experimental, may not work on some devices 
HelperPagePage.bas[120]  page.SetBackgroundVideo( {37} , {38} , {39} , True, 0, True, {40} ) 
HelperPagePage.bas[121]  ' just setting a background image 
HelperPagePage.bas[122]  ' page.SetBackgroundImage( {41} ) 
HelperPagePage.bas[123]  
HelperPagePage.bas[124]  ABMShared.BuildNavigationBar(page, {42} , {43} , {44} , {45} , {46} ) 
HelperPagePage.bas[125]  
HelperPagePage.bas[126]  ' create the page grid 
HelperPagePage.bas[127]  page.AddRows(1,True, {47} ).AddCells12(1, {48} ) 
HelperPagePage.bas[128]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperPagePage.bas[129]  
HelperPagePage.bas[130]  ABMShared.BuildFooterFixed(page) 
HelperPagePage.bas[131] End Sub 
HelperPagePage.bas[132]  
HelperPagePage.bas[133] Sub ConnectPage() 
HelperPagePage.bas[134]  'NEW 
HelperPagePage.bas[135]  ABMShared.ConnectNavigationBar(page) 
HelperPagePage.bas[136]  
HelperPagePage.bas[137]  ' because we have an animated background, we'll put everything into a ABMContainer 
HelperPagePage.bas[138]  Dim pagecont As ABMContainer 
HelperPagePage.bas[139]  pagecont.Initialize(page, {49} , {50} ) 
HelperPagePage.bas[140]  pagecont.AddRows(17,True, {51} ).AddCells12(1, {52} ) 
HelperPagePage.bas[141]  pagecont.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperPagePage.bas[142]  
HelperPagePage.bas[143]  ' add paragraph 
HelperPagePage.bas[144]  pagecont.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {53} , {54} ) ) 
HelperPagePage.bas[145]  
HelperPagePage.bas[146]  ' add paragraph 
HelperPagePage.bas[147]  pagecont.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {55} , {56} ) ) 
HelperPagePage.bas[148]  
HelperPagePage.bas[149]  Dim code As String = {0} 
HelperPagePage.bas[159]  
HelperPagePage.bas[160]  pagecont.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {57} , code)) 
HelperPagePage.bas[161]  
HelperPagePage.bas[162]  ' add paragraph 
HelperPagePage.bas[163]  pagecont.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {58} , {59} ) ) 
HelperPagePage.bas[164]  ' add paragraph 
HelperPagePage.bas[165]  pagecont.Cell(3,1).AddComponent(ABMShared.BuildParagraphBQ(page, {60} , {61} ) ) 
HelperPagePage.bas[166]  
HelperPagePage.bas[167]  code = {1} 
HelperPagePage.bas[181]  
HelperPagePage.bas[182]  pagecont.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {62} , code)) 
HelperPagePage.bas[183]  
HelperPagePage.bas[184]  ' add a header label 
HelperPagePage.bas[185]  pagecont.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {63} , {64} )) 
HelperPagePage.bas[186]  ' add paragraph 
HelperPagePage.bas[187]  pagecont.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {65} , {66} ) ) 
HelperPagePage.bas[188]  ' add paragraph 
HelperPagePage.bas[189]  pagecont.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {67} , {68} ) ) 
HelperPagePage.bas[190]  
HelperPagePage.bas[191]  code = {2} 
HelperPagePage.bas[193]  
HelperPagePage.bas[194]  pagecont.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {69} , code)) 
HelperPagePage.bas[195]  
HelperPagePage.bas[196]  ' add paragraph 
HelperPagePage.bas[197]  pagecont.Cell(7,1).AddComponent(ABMShared.BuildParagraphBQ(page, {70} , {71} ) ) 
HelperPagePage.bas[198]  
HelperPagePage.bas[199]  ' add paragraph 
HelperPagePage.bas[200]  pagecont.Cell(8,1).AddComponent(ABMShared.BuildHeader(page, {72} , {73} )) 
HelperPagePage.bas[201]  
HelperPagePage.bas[202]  ' add paragraph 
HelperPagePage.bas[203]  pagecont.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {74} , {75} )) 
HelperPagePage.bas[204]  
HelperPagePage.bas[205]  ' add paragraph 
HelperPagePage.bas[206]  pagecont.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {76} , {77} )) 
HelperPagePage.bas[207]  
HelperPagePage.bas[208]  ' add codeblock 
HelperPagePage.bas[209]  Dim code3 As StringBuilder 
HelperPagePage.bas[210]  code3.Initialize 
HelperPagePage.bas[211]  code3.Append( {78} ).Append(CRLF) 
HelperPagePage.bas[212]  code3.Append( {79} ).Append(CRLF) 
HelperPagePage.bas[213]  code3.Append( {206} ).Append(CRLF) 
HelperPagePage.bas[214]  code3.Append( {208} ).Append(CRLF) 
HelperPagePage.bas[215]  code3.Append( {210} ).Append(CRLF) 
HelperPagePage.bas[216]  code3.Append( {93} ).Append(CRLF) 
HelperPagePage.bas[217]  code3.Append( {94} ).Append(CRLF) 
HelperPagePage.bas[218]  code3.Append( {216} ).Append(CRLF) 
HelperPagePage.bas[219]  code3.Append( {218} ).Append(CRLF) 
HelperPagePage.bas[220]  code3.Append( {220} ).Append(CRLF) 
HelperPagePage.bas[221]  code3.Append( {108} ).Append(CRLF) 
HelperPagePage.bas[222]  code3.Append( {109} ).Append(CRLF) 
HelperPagePage.bas[223]  code3.Append( {226} ).Append(CRLF) 
HelperPagePage.bas[224]  code3.Append( {228} ).Append(CRLF) 
HelperPagePage.bas[225]  code3.Append( {230} ).Append(CRLF) 
HelperPagePage.bas[226]  code3.Append( {123} ).Append(CRLF) 
HelperPagePage.bas[227]  code3.Append( {124} ).Append(CRLF) 
HelperPagePage.bas[228]  code3.Append( {236} ).Append(CRLF) 
HelperPagePage.bas[229]  code3.Append( {238} ).Append(CRLF) 
HelperPagePage.bas[230]  code3.Append( {240} ).Append(CRLF) 
HelperPagePage.bas[231]  
HelperPagePage.bas[232]  pagecont.Cell(8,1).AddComponent(ABMShared.BuildCodeBlock(page, {138} , code3)) 
HelperPagePage.bas[233]  
HelperPagePage.bas[234]  ' add codeblock 
HelperPagePage.bas[235]  Dim code4 As StringBuilder 
HelperPagePage.bas[236]  code4.Initialize 
HelperPagePage.bas[237]  code4.Append( {139} ).Append(CRLF) 
HelperPagePage.bas[238]  code4.Append( {140} ).Append(CRLF) 
HelperPagePage.bas[239]  code4.Append( {141} ).Append(CRLF) 
HelperPagePage.bas[240]  code4.Append( {142} ).Append(CRLF) 
HelperPagePage.bas[241]  code4.Append( {143} ).Append(CRLF) 
HelperPagePage.bas[242]  code4.Append( {144} ).Append(CRLF) 
HelperPagePage.bas[243]  code4.Append( {145} ).Append(CRLF) 
HelperPagePage.bas[244]  code4.Append( {246} ).Append(CRLF) 
HelperPagePage.bas[245]  code4.Append( {153} ).Append(CRLF) 
HelperPagePage.bas[246]  
HelperPagePage.bas[247]  pagecont.Cell(8,1).AddComponent(ABMShared.BuildCodeBlock(page, {154} , code4)) 
HelperPagePage.bas[248]  
HelperPagePage.bas[249]  ' add paragraph 
HelperPagePage.bas[250]  pagecont.Cell(9,1).AddComponent(ABMShared.BuildHeader(page, {155} , {156} )) 
HelperPagePage.bas[251]  
HelperPagePage.bas[252]  ' add paragraph 
HelperPagePage.bas[253]  pagecont.Cell(9,1).AddComponent(ABMShared.BuildParagraph(page, {157} , {158} )) 
HelperPagePage.bas[254]  
HelperPagePage.bas[255]  ' add paragraph 
HelperPagePage.bas[256]  pagecont.Cell(9,1).AddComponent(ABMShared.BuildParagraphBQ(page, {159} , {160} ) ) 
HelperPagePage.bas[257]  
HelperPagePage.bas[258]  code = {3} 
HelperPagePage.bas[276]  
HelperPagePage.bas[277]  pagecont.Cell(10,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {161} , code)) 
HelperPagePage.bas[278]  
HelperPagePage.bas[279]  ' add a header label 
HelperPagePage.bas[280]  pagecont.Cell(11,1).AddComponent(ABMShared.BuildHeader(page, {162} , {163} )) 
HelperPagePage.bas[281]  ' add paragraph 
HelperPagePage.bas[282]  pagecont.Cell(11,1).AddComponent(ABMShared.BuildParagraph(page, {164} , {165} ) ) 
HelperPagePage.bas[283]  
HelperPagePage.bas[284]  
HelperPagePage.bas[285]  ' add paragraph 
HelperPagePage.bas[286]  pagecont.Cell(11,1).AddComponent(ABMShared.BuildParagraph(page, {166} , {167} ) ) 
HelperPagePage.bas[287]  
HelperPagePage.bas[288]  
HelperPagePage.bas[289]  pagecont.Cell(12,1).AddComponent(ABMShared.BuildHeader(page, {168} , {169} )) 
HelperPagePage.bas[290]  pagecont.Cell(12,1).AddComponent(ABMShared.BuildParagraph(page, {170} , {171} ) ) 
HelperPagePage.bas[291]  
HelperPagePage.bas[292]  Dim code8 As String = {4} 
HelperPagePage.bas[302]  
HelperPagePage.bas[303]  pagecont.Cell(13,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {172} , code8)) 
HelperPagePage.bas[304]  
HelperPagePage.bas[305]  
HelperPagePage.bas[306]  ' add a header label 
HelperPagePage.bas[307]  pagecont.Cell(14,1).AddComponent(ABMShared.BuildHeader(page, {173} , {174} )) 
HelperPagePage.bas[308]  
HelperPagePage.bas[309]  ' add paragraph 
HelperPagePage.bas[310]  pagecont.Cell(14,1).AddComponent(ABMShared.BuildParagraph(page, {175} , {176} ) ) 
HelperPagePage.bas[311]  
HelperPagePage.bas[312]  Dim code6 As String = {5} 
HelperPagePage.bas[315]  
HelperPagePage.bas[316]  pagecont.Cell(16,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {177} , code6)) 
HelperPagePage.bas[317]  
HelperPagePage.bas[318]  Dim code6 As String = {6} 
HelperPagePage.bas[321]  
HelperPagePage.bas[322]  Dim code7 As String = {7} 
HelperPagePage.bas[338]  
HelperPagePage.bas[339]  pagecont.Cell(16,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {178} , code7)) 
HelperPagePage.bas[340]  
HelperPagePage.bas[341]  page.Cell(1,1).AddComponent(pagecont) 
HelperPagePage.bas[342]  
HelperPagePage.bas[343]  ' also add the components to the footer 
HelperPagePage.bas[344]  ABMShared.ConnectFooterFixed(page) 
HelperPagePage.bas[345]  
HelperPagePage.bas[346]  page.Refresh ' IMPORTANT 
HelperPagePage.bas[347]  
HelperPagePage.bas[348]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperPagePage.bas[349]  page.FinishedLoading 'IMPORTANT 
HelperPagePage.bas[350]  
HelperPagePage.bas[351]  LoadNewCard 
HelperPagePage.bas[352]  
HelperPagePage.bas[353]  page.RestoreNavigationBarPosition 
HelperPagePage.bas[354] End Sub 
HelperPagePage.bas[355]  
HelperPagePage.bas[356] Sub Page_NextContent(TriggerComponent As String) 
HelperPagePage.bas[357]  LoadNewCard 
HelperPagePage.bas[358] End Sub 
HelperPagePage.bas[359]  
HelperPagePage.bas[360] Sub LoadNewCard() 
HelperPagePage.bas[361]  Dim pagecont As ABMContainer = page.Component( {179} ) 
HelperPagePage.bas[362]  ' build the card 
HelperPagePage.bas[363]  Dim tmpCard As ABMCard 
HelperPagePage.bas[364]  tmpCardId = tmpCardId + 1 
HelperPagePage.bas[365]  DateTime.TimeFormat = {180} 
HelperPagePage.bas[366]  tmpCard.InitializeAsCard(page, {181} & tmpCardId, DateTime.Date(DateTime.Now) & {182} & DateTime.Time(DateTime.now), {183} , ABM.CARD_LARGE, {184} ) 
HelperPagePage.bas[367]  Dim picNr As Int = Rnd(1,96) 
HelperPagePage.bas[368]  tmpCard.Image = {185} & picNr & {186} 
HelperPagePage.bas[369]  tmpCard.AddAction( {187} ) 
HelperPagePage.bas[370]  ' add the card and refresh 
HelperPagePage.bas[371]  pagecont.Cell(17,1).AddComponent(tmpCard) 
HelperPagePage.bas[372]  pagecont.cell(17,1).Refresh 
HelperPagePage.bas[373]  ' set this card as the new trigger 
HelperPagePage.bas[374]  page.RaiseNextContentOnComponent(tmpCard,200) 
HelperPagePage.bas[375] End Sub 
HelperPagePage.bas[376]  
HelperPagePage.bas[377]  
HelperPagePage.bas[378] ' clicked on the navigation bar 
HelperPagePage.bas[379] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperPagePage.bas[380]  page.SaveNavigationBarPosition 
HelperPagePage.bas[381]  If Action = {188} Then Return 
HelperPagePage.bas[382]  If Action = {189} Then 
HelperPagePage.bas[383]  myToastId = myToastId + 1 
HelperPagePage.bas[384]  page.ShowToast( {190} & myToastId, {191} , {192} , 5000) 
HelperPagePage.bas[385]  Return 
HelperPagePage.bas[386]  End If 
HelperPagePage.bas[387]  If Action = {193} Then 
HelperPagePage.bas[388]  ABMShared.LogOff(page) 
HelperPagePage.bas[389]  Return 
HelperPagePage.bas[390]  End If 
HelperPagePage.bas[391]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperPagePage.bas[392] End Sub 
HelperPagePage.bas[393]  
HelperPagePage.bas[394] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperPagePage.bas[395]  page.ws.Session.SetAttribute( {194} , {195} ) 
HelperPagePage.bas[396]  page.ws.Session.SetAttribute( {196} , {197} ) 
HelperPagePage.bas[397]  page.ws.Session.SetAttribute( {198} , {199} ) 
HelperPagePage.bas[398]  ABMShared.NavigateToPage(ws, ABMPageId, {200} ) 
HelperPagePage.bas[399] End Sub 
Analysing: HelperParallaxPage.bas
HelperParallaxPage.bas[0] ﻿Type=Class 
HelperParallaxPage.bas[0] Version=4.7 
HelperParallaxPage.bas[0] ModulesStructureVersion=1 
HelperParallaxPage.bas[0] B4J=true 
HelperParallaxPage.bas[0] @EndOfDesignText@ 
HelperParallaxPage.bas[1] 'Class module 
HelperParallaxPage.bas[2] Sub Class_Globals 
HelperParallaxPage.bas[3]  Private ws As WebSocket 'ignore 
HelperParallaxPage.bas[4]  ' will hold our page information 
HelperParallaxPage.bas[5]  Public page As ABMPage 
HelperParallaxPage.bas[6]  ' page theme 
HelperParallaxPage.bas[7]  Private theme As ABMTheme 
HelperParallaxPage.bas[8]  ' to access the constants 
HelperParallaxPage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperParallaxPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperParallaxPage.bas[11]  Public Name As String = {0} 
HelperParallaxPage.bas[12]  ' will hold the unique browsers window id 
HelperParallaxPage.bas[13]  Private ABMPageId As String = {1} 
HelperParallaxPage.bas[14]  
HelperParallaxPage.bas[15]  ' your own variables 
HelperParallaxPage.bas[16]  Dim myToastId As Int 
HelperParallaxPage.bas[17] End Sub 
HelperParallaxPage.bas[18]  
HelperParallaxPage.bas[19] Public Sub Initialize 
HelperParallaxPage.bas[20]  ' build the local structure IMPORTANT! 
HelperParallaxPage.bas[21]  BuildPage 
HelperParallaxPage.bas[22] End Sub 
HelperParallaxPage.bas[23]  
HelperParallaxPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperParallaxPage.bas[25]  Log( {2} ) 
HelperParallaxPage.bas[26]  ws = WebSocket1 
HelperParallaxPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperParallaxPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperParallaxPage.bas[29]  
HelperParallaxPage.bas[30]  If ABMShared.NeedsAuthorization Then 
HelperParallaxPage.bas[31]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
HelperParallaxPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
HelperParallaxPage.bas[33]  Return 
HelperParallaxPage.bas[34]  End If 
HelperParallaxPage.bas[35]  End If 
HelperParallaxPage.bas[36]  
HelperParallaxPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperParallaxPage.bas[38]  If page.ComesFromPageCache Then 
HelperParallaxPage.bas[39]  ' refresh the page 
HelperParallaxPage.bas[40]  page.Refresh 
HelperParallaxPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperParallaxPage.bas[42]  page.FinishedLoading 
HelperParallaxPage.bas[43]  Else 
HelperParallaxPage.bas[44]  ' Prepare the page 
HelperParallaxPage.bas[45]  page.Prepare 
HelperParallaxPage.bas[46]  ' load the dynamic content 
HelperParallaxPage.bas[47]  ConnectPage 
HelperParallaxPage.bas[48]  End If 
HelperParallaxPage.bas[49]  Log(ABMPageId) 
HelperParallaxPage.bas[50] End Sub 
HelperParallaxPage.bas[51]  
HelperParallaxPage.bas[52] Private Sub WebSocket_Disconnected 
HelperParallaxPage.bas[53]  Log( {7} ) 
HelperParallaxPage.bas[54] End Sub 
HelperParallaxPage.bas[55]  
HelperParallaxPage.bas[56] Sub Page_ParseEvent(Params As Map) 
HelperParallaxPage.bas[57]  Dim eventName As String = Params.Get( {8} ) 
HelperParallaxPage.bas[58]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
HelperParallaxPage.bas[59]  If eventName = {11} Then 
HelperParallaxPage.bas[60]  Log( {12} ) 
HelperParallaxPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperParallaxPage.bas[62]  Return 
HelperParallaxPage.bas[63]  End If 
HelperParallaxPage.bas[64]  If SubExists(Me, eventName) Then 
HelperParallaxPage.bas[65]  Params.Remove( {13} ) 
HelperParallaxPage.bas[66]  Params.Remove( {14} ) 
HelperParallaxPage.bas[67]  Select Case Params.Size 
HelperParallaxPage.bas[68]  Case 0 
HelperParallaxPage.bas[69]  CallSub(Me, eventName) 
HelperParallaxPage.bas[70]  Case 1 
HelperParallaxPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperParallaxPage.bas[72]  Case 2 
HelperParallaxPage.bas[73]  If Params.get(eventParams(0)) = {15} Then 
HelperParallaxPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperParallaxPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
HelperParallaxPage.bas[76]  Else 
HelperParallaxPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperParallaxPage.bas[78]  End If 
HelperParallaxPage.bas[79]  Case Else 
HelperParallaxPage.bas[80]  ' cannot be called directly, to many param 
HelperParallaxPage.bas[81]  CallSub2(Me, eventName, Params) 
HelperParallaxPage.bas[82]  End Select 
HelperParallaxPage.bas[83]  End If 
HelperParallaxPage.bas[84] End Sub 
HelperParallaxPage.bas[85]  
HelperParallaxPage.bas[86] public Sub BuildTheme() 
HelperParallaxPage.bas[87]  ' start with the base theme defined in ABMShared 
HelperParallaxPage.bas[88]  theme.Initialize( {16} ) 
HelperParallaxPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperParallaxPage.bas[90]  
HelperParallaxPage.bas[91]  ' add additional themes specific for this page 
HelperParallaxPage.bas[92]  
HelperParallaxPage.bas[93] End Sub 
HelperParallaxPage.bas[94]  
HelperParallaxPage.bas[95] public Sub BuildPage() 
HelperParallaxPage.bas[96]  ' initialize the theme 
HelperParallaxPage.bas[97]  BuildTheme 
HelperParallaxPage.bas[98]  
HelperParallaxPage.bas[99]  ' initialize this page using our theme 
HelperParallaxPage.bas[100]  page.InitializeWithTheme(Name, {17} & ABMshared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperParallaxPage.bas[101]  page.ShowLoader=True 
HelperParallaxPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperParallaxPage.bas[103]  page.PageTitle = {19} 
HelperParallaxPage.bas[104]  page.PageDescription = {20} 
HelperParallaxPage.bas[105]  page.PageHTMLName = {21} 
HelperParallaxPage.bas[106]  page.PageKeywords = {22} 
HelperParallaxPage.bas[107]  page.PageSiteMapPriority = {23} 
HelperParallaxPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperParallaxPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperParallaxPage.bas[110]  
HelperParallaxPage.bas[111]  ABMShared.BuildNavigationBar(page, {24} , {25} , {26} , {27} , {28} ) 
HelperParallaxPage.bas[112]  
HelperParallaxPage.bas[113]  ' create the page grid 
HelperParallaxPage.bas[114]  page.AddRows(1,False, {29} ).AddCells12(1, {30} ) 
HelperParallaxPage.bas[115]  page.AddRows(2,True, {31} ).AddCells12(1, {32} ) 
HelperParallaxPage.bas[116]  page.AddRows(1,False, {33} ).AddCells12(1, {34} ) 
HelperParallaxPage.bas[117]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperParallaxPage.bas[118]  
HelperParallaxPage.bas[119]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperParallaxPage.bas[120]  'page.NeedsCodeLabel = True 
HelperParallaxPage.bas[121]  
HelperParallaxPage.bas[122]  ABMShared.BuildFooter(page) 
HelperParallaxPage.bas[123] End Sub 
HelperParallaxPage.bas[124]  
HelperParallaxPage.bas[125] Sub ConnectPage() 
HelperParallaxPage.bas[126]  'NEW 
HelperParallaxPage.bas[127]  ABMShared.ConnectNavigationBar(page) 
HelperParallaxPage.bas[128]  
HelperParallaxPage.bas[129]  Dim parallax1 As ABMParallax 
HelperParallaxPage.bas[130]  parallax1.Initialize(page, {35} , {36} , 500) 
HelperParallaxPage.bas[131]  page.Cell(1,1).AddComponent(parallax1) 
HelperParallaxPage.bas[132]  
HelperParallaxPage.bas[133]  ' add paragraph 
HelperParallaxPage.bas[134]  page.Cell(2,1).AddComponent(ABMShared.BuildParagraph(page, {37} , {38} ) ) 
HelperParallaxPage.bas[135]  
HelperParallaxPage.bas[136]  ' add codeblock 
HelperParallaxPage.bas[137]  Dim code As StringBuilder 
HelperParallaxPage.bas[138]  code.Initialize 
HelperParallaxPage.bas[139]  code.Append( {39} ).Append(CRLF) 
HelperParallaxPage.bas[140]  code.Append( {75} ).Append(CRLF) 
HelperParallaxPage.bas[141]  code.Append( {45} ).Append(CRLF) 
HelperParallaxPage.bas[142]  code.Append( {46} ).Append(CRLF) 
HelperParallaxPage.bas[143]  code.Append( {47} ).Append(CRLF) 
HelperParallaxPage.bas[144]  code.Append( {48} ).Append(CRLF) 
HelperParallaxPage.bas[145]  code.Append( {49} ).Append(CRLF) 
HelperParallaxPage.bas[146]  code.Append( {79} ).Append(CRLF) 
HelperParallaxPage.bas[147]  code.Append( {55} ).Append(CRLF) 
HelperParallaxPage.bas[148]  
HelperParallaxPage.bas[149]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlock(page, {56} , code)) 
HelperParallaxPage.bas[150]  
HelperParallaxPage.bas[151]  Dim parallax2 As ABMParallax 
HelperParallaxPage.bas[152]  parallax2.Initialize(page, {57} , {58} , 500) 
HelperParallaxPage.bas[153]  page.Cell(4,1).AddComponent(parallax2) 
HelperParallaxPage.bas[154]  
HelperParallaxPage.bas[155]  ' also add the components to the footer 
HelperParallaxPage.bas[156]  ABMShared.ConnectFooter(page) 
HelperParallaxPage.bas[157]  
HelperParallaxPage.bas[158]  page.Refresh ' IMPORTANT 
HelperParallaxPage.bas[159]  
HelperParallaxPage.bas[160]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperParallaxPage.bas[161]  page.FinishedLoading 'IMPORTANT 
HelperParallaxPage.bas[162]  
HelperParallaxPage.bas[163]  page.RestoreNavigationBarPosition 
HelperParallaxPage.bas[164] End Sub 
HelperParallaxPage.bas[165]  
HelperParallaxPage.bas[166] ' clicked on the navigation bar 
HelperParallaxPage.bas[167] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperParallaxPage.bas[168]  page.SaveNavigationBarPosition 
HelperParallaxPage.bas[169]  If Action = {59} Then Return 
HelperParallaxPage.bas[170]  If Action = {60} Then 
HelperParallaxPage.bas[171]  myToastId = myToastId + 1 
HelperParallaxPage.bas[172]  page.ShowToast( {61} & myToastId, {62} , {63} , 5000) 
HelperParallaxPage.bas[173]  Return 
HelperParallaxPage.bas[174]  End If 
HelperParallaxPage.bas[175]  If Action = {64} Then 
HelperParallaxPage.bas[176]  ABMShared.LogOff(page) 
HelperParallaxPage.bas[177]  Return 
HelperParallaxPage.bas[178]  End If 
HelperParallaxPage.bas[179]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperParallaxPage.bas[180] End Sub 
HelperParallaxPage.bas[181]  
HelperParallaxPage.bas[182] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperParallaxPage.bas[183]  page.ws.Session.SetAttribute( {65} , {66} ) 
HelperParallaxPage.bas[184]  page.ws.Session.SetAttribute( {67} , {68} ) 
HelperParallaxPage.bas[185]  page.ws.Session.SetAttribute( {69} , {70} ) 
HelperParallaxPage.bas[186]  ABMShared.NavigateToPage(ws, ABMPageId, {71} ) 
HelperParallaxPage.bas[187] End Sub 
HelperParallaxPage.bas[188]  
Analysing: HelperTableMutablePage.bas
HelperTableMutablePage.bas[0] ﻿Type=Class 
HelperTableMutablePage.bas[0] Version=4.7 
HelperTableMutablePage.bas[0] ModulesStructureVersion=1 
HelperTableMutablePage.bas[0] B4J=true 
HelperTableMutablePage.bas[0] @EndOfDesignText@ 
HelperTableMutablePage.bas[1] 'Class module 
HelperTableMutablePage.bas[2] Sub Class_Globals 
HelperTableMutablePage.bas[3]  Private ws As WebSocket 'ignore 
HelperTableMutablePage.bas[4]  ' will hold our page information 
HelperTableMutablePage.bas[5]  Public page As ABMPage 
HelperTableMutablePage.bas[6]  ' page theme 
HelperTableMutablePage.bas[7]  Private theme As ABMTheme 
HelperTableMutablePage.bas[8]  ' to access the constants 
HelperTableMutablePage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperTableMutablePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperTableMutablePage.bas[11]  Public Name As String = {2} 
HelperTableMutablePage.bas[12]  ' will hold the unique browsers window id 
HelperTableMutablePage.bas[13]  Private ABMPageId As String = {3} 
HelperTableMutablePage.bas[14]  
HelperTableMutablePage.bas[15]  ' your own variables 
HelperTableMutablePage.bas[16]  Dim myToastId As Int 
HelperTableMutablePage.bas[17] End Sub 
HelperTableMutablePage.bas[18]  
HelperTableMutablePage.bas[19] Public Sub Initialize 
HelperTableMutablePage.bas[20]  ' build the local structure IMPORTANT! 
HelperTableMutablePage.bas[21]  BuildPage 
HelperTableMutablePage.bas[22] End Sub 
HelperTableMutablePage.bas[23]  
HelperTableMutablePage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperTableMutablePage.bas[25]  Log( {4} ) 
HelperTableMutablePage.bas[26]  ws = WebSocket1 
HelperTableMutablePage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperTableMutablePage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperTableMutablePage.bas[29]  
HelperTableMutablePage.bas[30]  If ABMShared.NeedsAuthorization Then 
HelperTableMutablePage.bas[31]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
HelperTableMutablePage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
HelperTableMutablePage.bas[33]  Return 
HelperTableMutablePage.bas[34]  End If 
HelperTableMutablePage.bas[35]  End If 
HelperTableMutablePage.bas[36]  
HelperTableMutablePage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperTableMutablePage.bas[38]  If page.ComesFromPageCache Then 
HelperTableMutablePage.bas[39]  ' refresh the page 
HelperTableMutablePage.bas[40]  page.Refresh 
HelperTableMutablePage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperTableMutablePage.bas[42]  page.FinishedLoading 
HelperTableMutablePage.bas[43]  Else 
HelperTableMutablePage.bas[44]  ' Prepare the page 
HelperTableMutablePage.bas[45]  page.Prepare 
HelperTableMutablePage.bas[46]  ' load the dynamic content 
HelperTableMutablePage.bas[47]  ConnectPage 
HelperTableMutablePage.bas[48]  End If 
HelperTableMutablePage.bas[49]  Log(ABMPageId) 
HelperTableMutablePage.bas[50] End Sub 
HelperTableMutablePage.bas[51]  
HelperTableMutablePage.bas[52] Private Sub WebSocket_Disconnected 
HelperTableMutablePage.bas[53]  Log( {9} ) 
HelperTableMutablePage.bas[54] End Sub 
HelperTableMutablePage.bas[55]  
HelperTableMutablePage.bas[56] Sub Page_ParseEvent(Params As Map) 
HelperTableMutablePage.bas[57]  Dim eventName As String = Params.Get( {10} ) 
HelperTableMutablePage.bas[58]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
HelperTableMutablePage.bas[59]  If eventName = {13} Then 
HelperTableMutablePage.bas[60]  Log( {14} ) 
HelperTableMutablePage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperTableMutablePage.bas[62]  Return 
HelperTableMutablePage.bas[63]  End If 
HelperTableMutablePage.bas[64]  If SubExists(Me, eventName) Then 
HelperTableMutablePage.bas[65]  Params.Remove( {15} ) 
HelperTableMutablePage.bas[66]  Params.Remove( {16} ) 
HelperTableMutablePage.bas[67]  Select Case Params.Size 
HelperTableMutablePage.bas[68]  Case 0 
HelperTableMutablePage.bas[69]  CallSub(Me, eventName) 
HelperTableMutablePage.bas[70]  Case 1 
HelperTableMutablePage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperTableMutablePage.bas[72]  Case 2 
HelperTableMutablePage.bas[73]  If Params.get(eventParams(0)) = {17} Then 
HelperTableMutablePage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperTableMutablePage.bas[75]  CallSub2(Me, eventName, PassedTables) 
HelperTableMutablePage.bas[76]  Else 
HelperTableMutablePage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperTableMutablePage.bas[78]  End If 
HelperTableMutablePage.bas[79]  Case Else 
HelperTableMutablePage.bas[80]  ' cannot be called directly, to many param 
HelperTableMutablePage.bas[81]  CallSub2(Me, eventName, Params) 
HelperTableMutablePage.bas[82]  End Select 
HelperTableMutablePage.bas[83]  End If 
HelperTableMutablePage.bas[84] End Sub 
HelperTableMutablePage.bas[85]  
HelperTableMutablePage.bas[86] public Sub BuildTheme() 
HelperTableMutablePage.bas[87]  ' start with the base theme defined in ABMShared 
HelperTableMutablePage.bas[88]  theme.Initialize( {18} ) 
HelperTableMutablePage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperTableMutablePage.bas[90]  
HelperTableMutablePage.bas[91]  ' add additional themes specific for this page 
HelperTableMutablePage.bas[92]  
HelperTableMutablePage.bas[93] End Sub 
HelperTableMutablePage.bas[94]  
HelperTableMutablePage.bas[95] public Sub BuildPage() 
HelperTableMutablePage.bas[96]  ' initialize the theme 
HelperTableMutablePage.bas[97]  BuildTheme 
HelperTableMutablePage.bas[98]  
HelperTableMutablePage.bas[99]  ' initialize this page using our theme 
HelperTableMutablePage.bas[100]  page.InitializeWithTheme(Name, {19} & ABMshared.AppName & {20} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperTableMutablePage.bas[101]  page.ShowLoader=True 
HelperTableMutablePage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperTableMutablePage.bas[103]  page.PageTitle = {21} 
HelperTableMutablePage.bas[104]  page.PageDescription = {22} 
HelperTableMutablePage.bas[105]  page.PageHTMLName = {23} 
HelperTableMutablePage.bas[106]  page.PageKeywords = {24} 
HelperTableMutablePage.bas[107]  page.PageSiteMapPriority = {25} 
HelperTableMutablePage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperTableMutablePage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperTableMutablePage.bas[110]  
HelperTableMutablePage.bas[111]  ABMShared.BuildNavigationBar(page, {26} , {27} , {28} , {29} , {30} ) 
HelperTableMutablePage.bas[112]  
HelperTableMutablePage.bas[113]  ' create the page grid 
HelperTableMutablePage.bas[114]  page.AddRows(4,True, {31} ).AddCells12(1, {32} ) 
HelperTableMutablePage.bas[115]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperTableMutablePage.bas[116]  
HelperTableMutablePage.bas[117]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
HelperTableMutablePage.bas[118]  'page.NeedsCodeLabel = True 
HelperTableMutablePage.bas[119]  
HelperTableMutablePage.bas[120]  ABMShared.BuildFooter(page) 
HelperTableMutablePage.bas[121] End Sub 
HelperTableMutablePage.bas[122]  
HelperTableMutablePage.bas[123] Sub ConnectPage() 
HelperTableMutablePage.bas[124]  'NEW 
HelperTableMutablePage.bas[125]  ABMShared.ConnectNavigationBar(page) 
HelperTableMutablePage.bas[126]  
HelperTableMutablePage.bas[127]  ' add paragraph 
HelperTableMutablePage.bas[128]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {33} , {34} )) 
HelperTableMutablePage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {35} , {36} )) 
HelperTableMutablePage.bas[130]  
HelperTableMutablePage.bas[131]  Dim code1 As String = {0} 
HelperTableMutablePage.bas[138]  
HelperTableMutablePage.bas[139]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {37} , code1)) 
HelperTableMutablePage.bas[140]  
HelperTableMutablePage.bas[141]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {38} , {39} )) 
HelperTableMutablePage.bas[142]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {40} , {41} )) 
HelperTableMutablePage.bas[143]  
HelperTableMutablePage.bas[144]  Dim code2 As String = {1} 
HelperTableMutablePage.bas[160]  
HelperTableMutablePage.bas[161]  page.Cell(3,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {42} , code2)) 
HelperTableMutablePage.bas[162]  
HelperTableMutablePage.bas[163]  ' also add the components to the footer 
HelperTableMutablePage.bas[164]  ABMShared.ConnectFooter(page) 
HelperTableMutablePage.bas[165]  
HelperTableMutablePage.bas[166]  page.Refresh ' IMPORTANT 
HelperTableMutablePage.bas[167]  
HelperTableMutablePage.bas[168]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperTableMutablePage.bas[169]  page.FinishedLoading 'IMPORTANT 
HelperTableMutablePage.bas[170]  
HelperTableMutablePage.bas[171]  page.RestoreNavigationBarPosition 
HelperTableMutablePage.bas[172] End Sub 
HelperTableMutablePage.bas[173]  
HelperTableMutablePage.bas[174] ' clicked on the navigation bar 
HelperTableMutablePage.bas[175] Sub Page_NavigationbarClicked(Action As String, Value As String) 
HelperTableMutablePage.bas[176]  page.SaveNavigationBarPosition 
HelperTableMutablePage.bas[177]  If Action = {43} Then Return 
HelperTableMutablePage.bas[178]  If Action = {44} Then 
HelperTableMutablePage.bas[179]  myToastId = myToastId + 1 
HelperTableMutablePage.bas[180]  page.ShowToast( {45} & myToastId, {46} , {47} , 5000) 
HelperTableMutablePage.bas[181]  Return 
HelperTableMutablePage.bas[182]  End If 
HelperTableMutablePage.bas[183]  If Action = {48} Then 
HelperTableMutablePage.bas[184]  ABMShared.LogOff(page) 
HelperTableMutablePage.bas[185]  Return 
HelperTableMutablePage.bas[186]  End If 
HelperTableMutablePage.bas[187]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
HelperTableMutablePage.bas[188] End Sub 
HelperTableMutablePage.bas[189]  
HelperTableMutablePage.bas[190] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
HelperTableMutablePage.bas[191]  page.ws.Session.SetAttribute( {49} , {50} ) 
HelperTableMutablePage.bas[192]  page.ws.Session.SetAttribute( {51} , {52} ) 
HelperTableMutablePage.bas[193]  page.ws.Session.SetAttribute( {53} , {54} ) 
HelperTableMutablePage.bas[194]  ABMShared.NavigateToPage(ws, ABMPageId, {55} ) 
HelperTableMutablePage.bas[195] End Sub 
HelperTableMutablePage.bas[196]  
Analysing: HelperTablePage.bas
HelperTablePage.bas[0] ﻿Type=Class 
HelperTablePage.bas[0] Version=4.7 
HelperTablePage.bas[0] ModulesStructureVersion=1 
HelperTablePage.bas[0] B4J=true 
HelperTablePage.bas[0] @EndOfDesignText@ 
HelperTablePage.bas[1] 'Class module 
HelperTablePage.bas[2] Sub Class_Globals 
HelperTablePage.bas[3]  Private ws As WebSocket 'ignore 
HelperTablePage.bas[4]  ' will hold our page information 
HelperTablePage.bas[5]  Public page As ABMPage 
HelperTablePage.bas[6]  ' page theme 
HelperTablePage.bas[7]  Private theme As ABMTheme 
HelperTablePage.bas[8]  ' to access the constants 
HelperTablePage.bas[9]  Private ABM As ABMaterial 'ignore 
HelperTablePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
HelperTablePage.bas[11]  Public Name As String = {3} 
HelperTablePage.bas[12]  Private ABMPageId As String = {4} 
HelperTablePage.bas[13]  
HelperTablePage.bas[14]  ' your own variables 
HelperTablePage.bas[15]  Dim myToastId As Int 
HelperTablePage.bas[16]  Dim FirstNames As List 
HelperTablePage.bas[17]  Dim LastNames As List 
HelperTablePage.bas[18]  Dim tbl1Counter As Int = 1 
HelperTablePage.bas[19] End Sub 
HelperTablePage.bas[20]  
HelperTablePage.bas[21] 'Initializes the object. You can add parameters to this method if needed. 
HelperTablePage.bas[22] Public Sub Initialize 
HelperTablePage.bas[23]  ' build the local structure IMPORTANT! 
HelperTablePage.bas[24]  BuildPage 
HelperTablePage.bas[25] End Sub 
HelperTablePage.bas[26]  
HelperTablePage.bas[27] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
HelperTablePage.bas[28]  Log( {5} ) 
HelperTablePage.bas[29]  ws = WebSocket1 
HelperTablePage.bas[30]  ABMPageId = ABM.GetPageID(page, Name,ws) 
HelperTablePage.bas[31]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
HelperTablePage.bas[32]  
HelperTablePage.bas[33]  If ABMShared.NeedsAuthorization Then 
HelperTablePage.bas[34]  If session.GetAttribute2( {6} , {7} ) = {8} Then 
HelperTablePage.bas[35]  ABMShared.NavigateToPage(ws, ABMPageId, {9} ) 
HelperTablePage.bas[36]  Return 
HelperTablePage.bas[37]  End If 
HelperTablePage.bas[38]  End If 
HelperTablePage.bas[39]  
HelperTablePage.bas[40]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
HelperTablePage.bas[41]  If page.ComesFromPageCache Then 
HelperTablePage.bas[42]  ' refresh the page 
HelperTablePage.bas[43]  page.Refresh 
HelperTablePage.bas[44]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperTablePage.bas[45]  page.FinishedLoading 
HelperTablePage.bas[46]  Else 
HelperTablePage.bas[47]  ' Prepare the page 
HelperTablePage.bas[48]  page.Prepare 
HelperTablePage.bas[49]  ' load the dynamic content 
HelperTablePage.bas[50]  ConnectPage 
HelperTablePage.bas[51]  End If 
HelperTablePage.bas[52]  Log(ABMPageId) 
HelperTablePage.bas[53] End Sub 
HelperTablePage.bas[54]  
HelperTablePage.bas[55] Private Sub WebSocket_Disconnected 
HelperTablePage.bas[56]  Log( {10} ) 
HelperTablePage.bas[57] End Sub 
HelperTablePage.bas[58]  
HelperTablePage.bas[59] Sub Page_ParseEvent(Params As Map) 
HelperTablePage.bas[60]  Dim eventName As String = Params.Get( {11} ) 
HelperTablePage.bas[61]  Dim eventParams() As String = Regex.Split( {12} ,Params.Get( {13} )) 
HelperTablePage.bas[62]  If eventName = {14} Then 
HelperTablePage.bas[63]  Log( {15} ) 
HelperTablePage.bas[64]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
HelperTablePage.bas[65]  Return 
HelperTablePage.bas[66]  End If 
HelperTablePage.bas[67]  If SubExists(Me, eventName) Then 
HelperTablePage.bas[68]  Params.Remove( {16} ) 
HelperTablePage.bas[69]  Params.Remove( {17} ) 
HelperTablePage.bas[70]  Select Case Params.Size 
HelperTablePage.bas[71]  Case 0 
HelperTablePage.bas[72]  CallSub(Me, eventName) 
HelperTablePage.bas[73]  Case 1 
HelperTablePage.bas[74]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
HelperTablePage.bas[75]  Case 2 
HelperTablePage.bas[76]  If Params.get(eventParams(0)) = {18} Then 
HelperTablePage.bas[77]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
HelperTablePage.bas[78]  CallSub2(Me, eventName, PassedTables) 
HelperTablePage.bas[79]  Else 
HelperTablePage.bas[80]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
HelperTablePage.bas[81]  End If 
HelperTablePage.bas[82]  Case Else 
HelperTablePage.bas[83]  ' cannot be called directly, to many param 
HelperTablePage.bas[84]  CallSub2(Me, eventName, Params) 
HelperTablePage.bas[85]  End Select 
HelperTablePage.bas[86]  End If 
HelperTablePage.bas[87] End Sub 
HelperTablePage.bas[88]  
HelperTablePage.bas[89] public Sub BuildTheme() 
HelperTablePage.bas[90]  ' start with the base theme defined in ABMShared 
HelperTablePage.bas[91]  theme.Initialize( {19} ) 
HelperTablePage.bas[92]  theme.AddABMTheme(ABMShared.MyTheme) 
HelperTablePage.bas[93]  
HelperTablePage.bas[94]  ' add additional themes specific for this page 
HelperTablePage.bas[95]  theme.AddTableTheme( {20} ) 
HelperTablePage.bas[96]  theme.Table( {21} ).ZDepth = ABM.ZDEPTH_1 
HelperTablePage.bas[97]  
HelperTablePage.bas[98]  theme.Table( {22} ).AddCellTheme( {23} ) 
HelperTablePage.bas[99]  theme.Table( {24} ).Cell( {25} ).BackColor = ABM.COLOR_BLUEGREY 
HelperTablePage.bas[100]  theme.Table( {26} ).Cell( {27} ).ForeColor = ABM.COLOR_WHITE 
HelperTablePage.bas[101]  
HelperTablePage.bas[102]  theme.Table( {28} ).AddCellTheme( {29} ) 
HelperTablePage.bas[103]  theme.Table( {30} ).Cell( {31} ).BackColor = ABM.COLOR_BLUEGREY 
HelperTablePage.bas[104]  theme.Table( {32} ).Cell( {33} ).ForeColor = ABM.COLOR_WHITE 
HelperTablePage.bas[105]  theme.Table( {34} ).Cell( {35} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
HelperTablePage.bas[106]  
HelperTablePage.bas[107]  theme.Table( {36} ).AddCellTheme( {37} ) 
HelperTablePage.bas[108]  theme.Table( {38} ).Cell( {39} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
HelperTablePage.bas[109]  theme.Table( {40} ).Cell( {41} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
HelperTablePage.bas[110]  
HelperTablePage.bas[111]  theme.Table( {42} ).AddCellTheme( {43} ) 
HelperTablePage.bas[112]  theme.Table( {44} ).Cell( {45} ).ActiveBackColor = ABM.COLOR_BLUEGREY 
HelperTablePage.bas[113]  theme.Table( {46} ).Cell( {47} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN2 
HelperTablePage.bas[114]  theme.Table( {48} ).Cell( {49} ).IsEditable = True 
HelperTablePage.bas[115]  theme.Table( {50} ).Cell( {51} ).InputMask = {52} 
HelperTablePage.bas[116]  theme.Table( {53} ).Cell( {54} ).AllowEnterKey = False 
HelperTablePage.bas[117]  
HelperTablePage.bas[118]  theme.Table( {55} ).AddCellTheme( {56} ) 
HelperTablePage.bas[119]  theme.Table( {57} ).Cell( {58} ).BackColor = ABM.COLOR_GREEN 
HelperTablePage.bas[120]  theme.Table( {59} ).Cell( {60} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
HelperTablePage.bas[121]  theme.Table( {61} ).Cell( {62} ).ActiveBackColor = ABM.COLOR_GREEN 
HelperTablePage.bas[122]  theme.Table( {63} ).Cell( {64} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
HelperTablePage.bas[123]  theme.Table( {65} ).Cell( {66} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
HelperTablePage.bas[124]  
HelperTablePage.bas[125]  theme.Table( {67} ).AddCellTheme( {68} ) 
HelperTablePage.bas[126]  theme.Table( {69} ).Cell( {70} ).BackColor = ABM.COLOR_RED 
HelperTablePage.bas[127]  theme.Table( {71} ).Cell( {72} ).BackColorIntensity = ABM.INTENSITY_LIGHTEN3 
HelperTablePage.bas[128]  theme.Table( {73} ).Cell( {74} ).ActiveBackColor = ABM.COLOR_RED 
HelperTablePage.bas[129]  theme.Table( {75} ).Cell( {76} ).ActiveBackColorIntensity = ABM.INTENSITY_LIGHTEN1 
HelperTablePage.bas[130]  theme.Table( {77} ).Cell( {78} ).Align = ABM.TABLECELL_HORIZONTALALIGN_RIGHT 
HelperTablePage.bas[131]  
HelperTablePage.bas[132]  theme.Table( {79} ).AddCellTheme( {80} ) 
HelperTablePage.bas[133]  theme.Table( {81} ).Cell( {82} ).VerticalAlign = ABM.TABLECELL_VERTICALALIGN_TOP 
HelperTablePage.bas[134]  
HelperTablePage.bas[135]  theme.AddCardTheme( {83} ) 
HelperTablePage.bas[136]  theme.Card( {84} ).TitleForeColor = ABM.COLOR_WHITE 
HelperTablePage.bas[137]  
HelperTablePage.bas[138]  
HelperTablePage.bas[139] End Sub 
HelperTablePage.bas[140]  
HelperTablePage.bas[141] public Sub BuildPage() 
HelperTablePage.bas[142]  ' initialize the theme 
HelperTablePage.bas[143]  BuildTheme 
HelperTablePage.bas[144]  
HelperTablePage.bas[145]  ' initialize this page using our theme 
HelperTablePage.bas[146]  page.InitializeWithTheme(Name, {85} & ABMShared.AppName & {86} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
HelperTablePage.bas[147]  page.ShowLoader=True 
HelperTablePage.bas[148]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
HelperTablePage.bas[149]  page.PageTitle = {87} 
HelperTablePage.bas[150]  page.PageDescription = {88} 
HelperTablePage.bas[151]  page.PageHTMLName = {89} 
HelperTablePage.bas[152]  page.PageKeywords = {90} 
HelperTablePage.bas[153]  page.PageSiteMapPriority = {91} 
HelperTablePage.bas[154]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
HelperTablePage.bas[155]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
HelperTablePage.bas[156]  
HelperTablePage.bas[157]  ABMShared.BuildNavigationBar(page, {92} , {93} , {94} , {95} , {96} ) 
HelperTablePage.bas[158]  
HelperTablePage.bas[159]  ' create the page grid 
HelperTablePage.bas[160]  page.AddRows(7,True, {97} ).AddCells12(1, {98} ) 
HelperTablePage.bas[161]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
HelperTablePage.bas[162]  
HelperTablePage.bas[163]  ABMShared.BuildFooter(page) 
HelperTablePage.bas[164] End Sub 
HelperTablePage.bas[165]  
HelperTablePage.bas[166] Sub ConnectPage() 
HelperTablePage.bas[167]  'NEW 
HelperTablePage.bas[168]  ABMShared.ConnectNavigationBar(page) 
HelperTablePage.bas[169]  
HelperTablePage.bas[170]  FirstNames.Initialize2(Array As String( {99} , {100} , {101} , {102} , {103} , {104} , {105} , {106} , {107} , {108} )) 
HelperTablePage.bas[171]  LastNames.Initialize2(Array As String( {109} , {110} , {111} , {112} , {113} , {114} , {115} , {116} , {117} , {118} )) 
HelperTablePage.bas[172]  
HelperTablePage.bas[173]  ' add paragraph 
HelperTablePage.bas[174]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {119} , {120} ) ) 
HelperTablePage.bas[175]  
HelperTablePage.bas[176]  ' add paragraph 
HelperTablePage.bas[177]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraphBQ(page, {121} , {122} ) ) 
HelperTablePage.bas[178]  
HelperTablePage.bas[179]  ' create a table 
HelperTablePage.bas[180]  Dim tbl1 As ABMTable 
HelperTablePage.bas[181]  tbl1.Initialize(page, {123} , True, False, True, {124} ) 
HelperTablePage.bas[182]  tbl1.SetHeaders(Array As String( {125} , {126} , {127} )) 
HelperTablePage.bas[183]  tbl1.SetColumnDataFields(Array As String( {128} , {129} , {130} )) 
HelperTablePage.bas[184]  tbl1.SetHeaderThemes(Array As String( {131} , {132} , {133} )) 
HelperTablePage.bas[185]  
HelperTablePage.bas[186]  ' add some random values 
HelperTablePage.bas[187]  For i = 0 To 9 
HelperTablePage.bas[188]  Dim r As List 
HelperTablePage.bas[189]  Dim rCellThemes As List 
HelperTablePage.bas[190]  r.Initialize 
HelperTablePage.bas[191]  rCellThemes.Initialize 
HelperTablePage.bas[192]  r.Add(FirstNames.get(Rnd(0,9))) 
HelperTablePage.bas[193]  rCellThemes.Add( {134} ) ' nocoloredit 
HelperTablePage.bas[194]  r.Add(LastNames.get(Rnd(0,9))) 
HelperTablePage.bas[195]  rCellThemes.Add( {135} ) 
HelperTablePage.bas[196]  Dim Neg As Int = Rnd(0,100) 
HelperTablePage.bas[197]  If Neg > 50 Then 
HelperTablePage.bas[198]  r.Add( {136} & Rnd(1000, 15000)) 
HelperTablePage.bas[202]  rCellThemes.Add( {137} ) 
HelperTablePage.bas[203]  End If 
HelperTablePage.bas[204]  tbl1.AddRow( {138} & i, r) 
HelperTablePage.bas[205]  tbl1.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
HelperTablePage.bas[206]  Next 
HelperTablePage.bas[207]  
HelperTablePage.bas[208]  tbl1.SetFooter( {139} , 12, {140} ) 
HelperTablePage.bas[209]  
HelperTablePage.bas[210]  page.Cell(2,1).AddComponent(tbl1) 
HelperTablePage.bas[211]  
HelperTablePage.bas[212]  Dim pagination As ABMPagination 
HelperTablePage.bas[213]  pagination.Initialize(page, {141} , 10, True, True, {142} ) 
HelperTablePage.bas[214]  pagination.SetTotalNumberOfPages(20) 
HelperTablePage.bas[215]  
HelperTablePage.bas[216]  page.Cell(3,1).AddComponent(pagination) 
HelperTablePage.bas[217]  
HelperTablePage.bas[218]  ' add paragraph 
HelperTablePage.bas[219]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {143} , {144} ) ) 
HelperTablePage.bas[220]  
HelperTablePage.bas[221]  ' create a table scrollable 
HelperTablePage.bas[222]  Dim tbl2 As ABMTable 
HelperTablePage.bas[223]  tbl2.InitializeScrollable(page, {145} , True, False, False, Array As Int(300,300,150), {146} ) 
HelperTablePage.bas[224]  tbl2.SetHeaders(Array As String( {147} , {148} , {149} )) 
HelperTablePage.bas[225]  tbl2.SetHeaderThemes(Array As String( {150} , {151} , {152} )) 
HelperTablePage.bas[226]  
HelperTablePage.bas[227]  tbl2.SetFooter( {153} , 12, {154} ) 
HelperTablePage.bas[228]  
HelperTablePage.bas[229]  ' scrollable, so we need to set a fixed height IMPORTANT! 
HelperTablePage.bas[230]  page.Cell(5,1).SetFixedHeight(360,True) 
HelperTablePage.bas[231]  page.Cell(5,1).AddComponent(tbl2) 
HelperTablePage.bas[232]  
HelperTablePage.bas[233]  ' add paragraph 
HelperTablePage.bas[234]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {155} , {156} ) ) 
HelperTablePage.bas[235]  
HelperTablePage.bas[236]  ' add paragraph 
HelperTablePage.bas[237]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraphBQ(page, {157} , {158} ) ) 
HelperTablePage.bas[238]  
HelperTablePage.bas[239]  ' create a table scrollable 
HelperTablePage.bas[240]  Dim tbl3 As ABMTable 
HelperTablePage.bas[241]  tbl3.InitializeScrollable(page, {159} , False, False, True, Array As Int(300, 200,200,150), {160} ) 
HelperTablePage.bas[242]  tbl3.SetHeaders(Array As String( {161} , {162} , {163} , {164} )) 
HelperTablePage.bas[243]  tbl3.SetHeaderThemes(Array As String( {165} , {166} , {167} , {168} )) 
HelperTablePage.bas[244]  
HelperTablePage.bas[245]  Dim fName, lName As String 
HelperTablePage.bas[246]  
HelperTablePage.bas[247]  ' add some random values 
HelperTablePage.bas[248]  For i = 0 To 9 
HelperTablePage.bas[249]  Dim r As List 
HelperTablePage.bas[250]  Dim rCellThemes As List 
HelperTablePage.bas[251]  r.Initialize 
HelperTablePage.bas[252]  rCellThemes.Initialize 
HelperTablePage.bas[253]  fName = FirstNames.get(Rnd(0,9)) 
HelperTablePage.bas[254]  lName = LastNames.get(Rnd(0,9)) 
HelperTablePage.bas[255]  r.Add(BuildCard( {169} , {170} & (i+1) & {171} , fName & {172} & lName)) ' <--- note we do not give every card a unique id. 
HelperTablePage.bas[256]  rCellThemes.Add( {173} ) 
HelperTablePage.bas[257]  r.Add(fName) 
HelperTablePage.bas[258]  rCellThemes.Add( {174} ) 
HelperTablePage.bas[259]  r.Add(lName) 
HelperTablePage.bas[260]  rCellThemes.Add( {175} ) 
HelperTablePage.bas[261]  r.Add(BuildOtherTable( {176} )) ' <--- note we do not give every innertable a unique id. 
HelperTablePage.bas[262]  rCellThemes.Add( {177} ) 
HelperTablePage.bas[263]  tbl3.AddRow( {178} & i, r) 
HelperTablePage.bas[264]  tbl3.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
HelperTablePage.bas[265]  Next 
HelperTablePage.bas[266]  
HelperTablePage.bas[267]  tbl3.SetFooter( {179} , 12, {180} ) 
HelperTablePage.bas[268]  
HelperTablePage.bas[269]  ' scrollable, so we need to set a fixed height IMPORTANT! 
HelperTablePage.bas[270]  page.Cell(7,1).SetFixedHeight(500,True) 
HelperTablePage.bas[271]  page.Cell(7,1).AddComponent(tbl3) 
HelperTablePage.bas[272]  
HelperTablePage.bas[273]  ' also add the components to the footer 
HelperTablePage.bas[274]  ABMShared.ConnectFooter(page) 
HelperTablePage.bas[275]  
HelperTablePage.bas[276]  page.Refresh ' IMPORTANT 
HelperTablePage.bas[277]  
HelperTablePage.bas[278]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
HelperTablePage.bas[279]  page.FinishedLoading 'IMPORTANT 
HelperTablePage.bas[280]  
HelperTablePage.bas[281]  page.RestoreNavigationBarPosition 
HelperTablePage.bas[282] End Sub 
HelperTablePage.bas[283]  
HelperTablePage.bas[284] 'Sub tbl1_Changed(Params As Map) 
HelperTablePage.bas[285] ' Dim row As String = Params.Get( {181} ) 
HelperTablePage.bas[286] ' Dim Value As String = Params.Get( {182} ) 
HelperTablePage.bas[287] ' 
HelperTablePage.bas[288] ' Dim tbl As ABMTable = page.Component( {183} ) 
HelperTablePage.bas[289] ' 
HelperTablePage.bas[290] ' Dim cCantidad As String = {184} & Rnd(1000, 15000)) 
HelperTablePage.bas[332]  rCellThemes.Add( {185} ) 
HelperTablePage.bas[333]  Else 
HelperTablePage.bas[334]  r.Add( {186} & Rnd(1000, 15000)) 
HelperTablePage.bas[335]  rCellThemes.Add( {187} ) 
HelperTablePage.bas[336]  End If 
HelperTablePage.bas[337]  tblinner.AddRow(id & {188} & i, r) 
HelperTablePage.bas[338]  tblinner.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
HelperTablePage.bas[339]  Next 
HelperTablePage.bas[340]  Return tblinner 
HelperTablePage.bas[341] End Sub 
HelperTablePage.bas[342]  
HelperTablePage.bas[343] Sub BuildCard(id As String, image As String, title As String) As ABMCard 
HelperTablePage.bas[344]  ' image card 
HelperTablePage.bas[345]  Dim card4 As ABMCard 
HelperTablePage.bas[346]  card4.InitializeAsCard(page, {189} , title, {190} , ABM.CARD_NOTSPECIFIED, {191} ) 
HelperTablePage.bas[347]  card4.Image = image 
HelperTablePage.bas[348]  Return card4 
HelperTablePage.bas[349] End Sub 
HelperTablePage.bas[350]  
HelperTablePage.bas[351] ' rows and columns are zero-base, meaning they start with row 0, cell 0 
HelperTablePage.bas[352] Sub tbl3_Clicked(PassedRowsAndColumns As List) 
HelperTablePage.bas[353]  ' is the root table 
HelperTablePage.bas[354]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
HelperTablePage.bas[355]  Dim tbl As ABMTable = page.Cell(7,1).Component(tblCellInfo.TableName) 
HelperTablePage.bas[356]  If tblCellInfo.Column = 0 Then 
HelperTablePage.bas[357]  Dim card As ABMCard = tbl.GetComponent(tblCellInfo.Row, {192} ) 
HelperTablePage.bas[358]  If card <> Null Then 
HelperTablePage.bas[359]  Log( {193} & tblCellInfo.Row & {194} & tblCellInfo.Column & {195} ) 
HelperTablePage.bas[360]  End If 
HelperTablePage.bas[361]  End If 
HelperTablePage.bas[362]  tbl.Refresh 
HelperTablePage.bas[363]  myToastId = myToastId + 1 
HelperTablePage.bas[364]  page.ShowToast( {196} & myToastId, {197} , {198} & tblCellInfo.TableName & {199} & tblCellInfo.Row & {200} & tblCellInfo.Column, 5000) 
HelperTablePage.bas[365] End Sub 
HelperTablePage.bas[366]  
HelperTablePage.bas[367] ' rows and columns are zero-base, meaning they start with row 0, cell 0 
HelperTablePage.bas[368] Sub innertable_Clicked(PassedRowsAndColumns As List) 
HelperTablePage.bas[369]  ' this is more complicated 
HelperTablePage.bas[370]  ' first we get the parent of our innertable 
HelperTablePage.bas[371]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
HelperTablePage.bas[372]  Dim tbl As ABMTable = page.Cell(6,1).Component(tblCellInfo.TableName) 
HelperTablePage.bas[373]  ' next we get our innertable 
HelperTablePage.bas[374]  Dim innerTblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(1) 
HelperTablePage.bas[375]  Dim innerTbl As ABMTable = tbl.GetComponent(tblCellInfo.Row,innerTblCellInfo.TableName) 
HelperTablePage.bas[376]  ' note the value will not be the right one because I used randomize in the BuildOtherTable() method. So when be saved the page we got other values than when we connected through the websocket. 
HelperTablePage.bas[377]  ' this is just to show the principle of getting a string value 
HelperTablePage.bas[378]  Dim profit As String = innerTbl.GetString(innerTblCellInfo.Row, innerTblCellInfo.Column) 
HelperTablePage.bas[379]  myToastId = myToastId + 1 
HelperTablePage.bas[380]  page.ShowToast( {201} & myToastId, {202} , {203} & innerTblCellInfo.Row & {204} & innerTblCellInfo.Column & {205} & profit , 5000) 
HelperTablePage.bas[381]  Return 
HelperTablePage.bas[382] End Sub 
HelperTablePage.bas[383]  
HelperTablePage.bas[384] Sub tbl1_Clicked(PassedRowsAndColumns As List) 
HelperTablePage.bas[385]  ' is the root table 
HelperTablePage.bas[386]  Dim tblCellInfo As ABMTableCell = PassedRowsAndColumns.Get(0) 
HelperTablePage.bas[387]  Dim tbl As ABMTable = page.Cell(2,1).Component(tblCellInfo.TableName) 
HelperTablePage.bas[388]  Dim str As String = tbl.GetString(tblCellInfo.row, 2) 
HelperTablePage.bas[389]  Dim value As Int = ABMShared.Mid(str,2,str.Length-1) 
HelperTablePage.bas[390]  
HelperTablePage.bas[391]  'Log(tbl.GetActiveRow) 
HelperTablePage.bas[392]  
HelperTablePage.bas[393]  value = value + 10 
HelperTablePage.bas[394]  tbl.SetString(tblCellInfo.row, 2, {206} & Rnd(1000, 15000)) 
HelperTablePage.bas[409]  rCellThemes.Add( {207} ) 
HelperTablePage.bas[410]  Else 
HelperTablePage.bas[411]  r.Add( {208} & Rnd(1000, 15000)) 
HelperTablePage.bas[412]  rCellThemes.Add( {209} ) 
HelperTablePage.bas[413]  End If 
HelperTablePage.bas[414]  tbl1Counter = tbl1Counter + 1 
HelperTablePage.bas[415]  tbl2.AddRow( {210} & tbl1Counter, r) 
HelperTablePage.bas[416]  tbl2.SetRowThemes(rCellThemes) ' make sure you have as many items in rCellThemes as in r! 
HelperTablePage.bas[417]  
HelperTablePage.bas[418]  'tbl.SetActiveRow( {211} ) 
HelperTablePage.bas[419]  'Log(tbl.GetActiveRow) 
HelperTablePage.bas[420]  Dim tbl3 As ABMTable = page.Cell(7,1).Component( {212} ) 
HelperTablePage.bas[421]  tbl3.ScrollTo( {213} , False) 
HelperTablePage.bas[422]  'tbl.Refresh 
HelperTablePage.bas[423]  tbl2.refresh 
HelperTablePage.bas[424] End Sub 
HelperTablePage.bas[425]  
HelperTablePage.bas[426] Sub pagination_PageChanged(OldPage As Int, NewPage As Int) 
HelperTablePage.bas[427]  ' do your stuff 
HelperTablePage.bas[428]  Dim pagination As ABMPagination = page.Component( {214} ) 
HelperTablePage.bas[429]  pagination.SetActivePage(NewPage) ' IMPORTANT! 
HelperTablePage.bas[430]  pagination.Refresh ' IMPORTANT! 
HelperTablePage.bas[431]  Dim tbl As ABMTable = page.Cell(2,1).Component( {215} ) 
HelperTablePage.bas[432]  tbl.SetActiveRow( {216} ) 
HelperTablePage.bas[433]  tbl.Refresh 
HelperTablePage.bas[434] End Sub 
HelperTablePage.bas[435]  
Analysing: IconsPage.bas
IconsPage.bas[0] ﻿Type=Class 
IconsPage.bas[0] Version=4.7 
IconsPage.bas[0] ModulesStructureVersion=1 
IconsPage.bas[0] B4J=true 
IconsPage.bas[0] @EndOfDesignText@ 
IconsPage.bas[1] 'Class module 
IconsPage.bas[2] Sub Class_Globals 
IconsPage.bas[3]  Private ws As WebSocket 'ignore 
IconsPage.bas[4]  ' will hold our page information 
IconsPage.bas[5]  Public page As ABMPage 
IconsPage.bas[6]  ' page theme 
IconsPage.bas[7]  Private theme As ABMTheme 
IconsPage.bas[8]  ' to access the constants 
IconsPage.bas[9]  Private ABM As ABMaterial 'ignore 
IconsPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
IconsPage.bas[11]  Public Name As String = {1} 
IconsPage.bas[12]  ' will hold the unique browsers window id 
IconsPage.bas[13]  Private ABMPageId As String = {2} 
IconsPage.bas[14]  
IconsPage.bas[15]  ' your own variables 
IconsPage.bas[16]  Dim myToastId As Int 
IconsPage.bas[17] End Sub 
IconsPage.bas[18]  
IconsPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
IconsPage.bas[20] Public Sub Initialize 
IconsPage.bas[21]  ' build the local structure IMPORTANT! 
IconsPage.bas[22]  BuildPage 
IconsPage.bas[23] End Sub 
IconsPage.bas[24]  
IconsPage.bas[25] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
IconsPage.bas[26]  Log( {3} ) 
IconsPage.bas[27]  ws = WebSocket1 
IconsPage.bas[28]  ABMPageId = ABM.GetPageID(page, Name,ws) 
IconsPage.bas[29]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
IconsPage.bas[30]  
IconsPage.bas[31]  If ABMShared.NeedsAuthorization Then 
IconsPage.bas[32]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
IconsPage.bas[33]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
IconsPage.bas[34]  Return 
IconsPage.bas[35]  End If 
IconsPage.bas[36]  End If 
IconsPage.bas[37]  
IconsPage.bas[38]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
IconsPage.bas[39]  If page.ComesFromPageCache Then 
IconsPage.bas[40]  ' refresh the page 
IconsPage.bas[41]  page.Refresh 
IconsPage.bas[42]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
IconsPage.bas[43]  page.FinishedLoading 
IconsPage.bas[44]  Else 
IconsPage.bas[45]  ' Prepare the page 
IconsPage.bas[46]  page.Prepare 
IconsPage.bas[47]  ' load the dynamic content 
IconsPage.bas[48]  ConnectPage 
IconsPage.bas[49]  End If 
IconsPage.bas[50]  Log(ABMPageId) 
IconsPage.bas[51] End Sub 
IconsPage.bas[52]  
IconsPage.bas[53] Private Sub WebSocket_Disconnected 
IconsPage.bas[54]  Log( {8} ) 
IconsPage.bas[55] End Sub 
IconsPage.bas[56]  
IconsPage.bas[57] Sub Page_ParseEvent(Params As Map) 
IconsPage.bas[58]  Dim eventName As String = Params.Get( {9} ) 
IconsPage.bas[59]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
IconsPage.bas[60]  If eventName = {12} Then 
IconsPage.bas[61]  Log( {13} ) 
IconsPage.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
IconsPage.bas[63]  Return 
IconsPage.bas[64]  End If 
IconsPage.bas[65]  If SubExists(Me, eventName) Then 
IconsPage.bas[66]  Params.Remove( {14} ) 
IconsPage.bas[67]  Params.Remove( {15} ) 
IconsPage.bas[68]  Select Case Params.Size 
IconsPage.bas[69]  Case 0 
IconsPage.bas[70]  CallSub(Me, eventName) 
IconsPage.bas[71]  Case 1 
IconsPage.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
IconsPage.bas[73]  Case 2 
IconsPage.bas[74]  If Params.get(eventParams(0)) = {16} Then 
IconsPage.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
IconsPage.bas[76]  CallSub2(Me, eventName, PassedTables) 
IconsPage.bas[77]  Else 
IconsPage.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
IconsPage.bas[79]  End If 
IconsPage.bas[80]  Case Else 
IconsPage.bas[81]  ' cannot be called directly, to many param 
IconsPage.bas[82]  CallSub2(Me, eventName, Params) 
IconsPage.bas[83]  End Select 
IconsPage.bas[84]  End If 
IconsPage.bas[85] End Sub 
IconsPage.bas[86]  
IconsPage.bas[87] public Sub BuildTheme() 
IconsPage.bas[88]  ' start with the base theme defined in ABMShared 
IconsPage.bas[89]  theme.Initialize( {17} ) 
IconsPage.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
IconsPage.bas[91]  
IconsPage.bas[92]  ' add additional themes specific for this page 
IconsPage.bas[93]  ' cell theme 
IconsPage.bas[94]  theme.AddCellTheme( {18} ) 
IconsPage.bas[95]  theme.Cell( {19} ).BackColor = ABM.COLOR_LIGHTBLUE 
IconsPage.bas[96]  theme.Cell( {20} ).BackColorIntensity = ABM.INTENSITY_DARKEN4 
IconsPage.bas[97]  theme.Cell( {21} ).BorderColor = ABM.COLOR_WHITE 
IconsPage.bas[98]  theme.Cell( {22} ).BorderWidth = 1 
IconsPage.bas[99]  
IconsPage.bas[100]  ' footer label theme 
IconsPage.bas[101]  theme.AddLabelTheme( {23} ) 
IconsPage.bas[102]  theme.Label( {24} ).ForeColor = ABM.COLOR_WHITE 
IconsPage.bas[103]  theme.Label( {25} ).Align = ABM.TEXTALIGN_CENTER 
IconsPage.bas[104]  theme.Label( {26} ).IconColor = ABM.COLOR_WHITE 
IconsPage.bas[105]  
IconsPage.bas[106]  theme.AddDividerTheme( {27} ) 
IconsPage.bas[107]  theme.Divider( {28} ).ForeColor = ABM.COLOR_WHITE 
IconsPage.bas[108]  
IconsPage.bas[109] End Sub 
IconsPage.bas[110]  
IconsPage.bas[111] public Sub BuildPage() 
IconsPage.bas[112]  ' initialize the theme 
IconsPage.bas[113]  BuildTheme 
IconsPage.bas[114]  
IconsPage.bas[115]  ' initialize this page using our theme 
IconsPage.bas[116]  page.InitializeWithTheme(Name, {29} & ABMshared.AppName & {30} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
IconsPage.bas[117]  page.ShowLoader=True 
IconsPage.bas[118]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
IconsPage.bas[119]  page.PageTitle = {31} 
IconsPage.bas[120]  page.PageDescription = {32} 
IconsPage.bas[121]  page.PageHTMLName = {33} 
IconsPage.bas[122]  page.PageKeywords = {34} 
IconsPage.bas[123]  page.PageSiteMapPriority = {35} 
IconsPage.bas[124]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
IconsPage.bas[125]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
IconsPage.bas[126]  
IconsPage.bas[127]  ABMShared.BuildNavigationBar(page, {36} , {37} , {38} , {39} , {40} ) 
IconsPage.bas[128]  
IconsPage.bas[129]  ' create the page grid 
IconsPage.bas[130]  page.AddRows(1,True, {41} ).AddCells12(1, {42} ) 
IconsPage.bas[131]  page.AddRows(1,True, {43} ).AddCellsOS(4,0,0,0,12,6,3, {44} ) 
IconsPage.bas[132]  page.AddRows(2,True, {45} ).AddCells12(1, {46} ) 
IconsPage.bas[133]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
IconsPage.bas[134]  
IconsPage.bas[135]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
IconsPage.bas[136]  'page.NeedsCodeLabel = True 
IconsPage.bas[137]  
IconsPage.bas[138]  ABMShared.BuildFooter(page) 
IconsPage.bas[139] End Sub 
IconsPage.bas[140]  
IconsPage.bas[141] Sub ConnectPage() 
IconsPage.bas[142]  'NEW 
IconsPage.bas[143]  ABMShared.ConnectNavigationBar(page) 
IconsPage.bas[144]  
IconsPage.bas[145]  ' add a header label 
IconsPage.bas[146]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {47} , {48} )) 
IconsPage.bas[147]  ' add paragraph 
IconsPage.bas[148]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {49} , {50} ) ) 
IconsPage.bas[149]  
IconsPage.bas[150]  ' add a header label 
IconsPage.bas[151]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {51} , {52} )) 
IconsPage.bas[152]  ' add paragraph 
IconsPage.bas[153]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {53} , {54} ) ) 
IconsPage.bas[154]  ' add paragraph 
IconsPage.bas[155]  
IconsPage.bas[156]  Dim Icons As List = LoadIcons 
IconsPage.bas[157]  
IconsPage.bas[158]  Dim imgCounter As Int = 0 
IconsPage.bas[159]  Dim j As Int 
IconsPage.bas[160]  Do While imgCounter < Icons.Size 
IconsPage.bas[161]  Dim lblicon As ABMLabel 
IconsPage.bas[162]  lblicon.Initialize(page, {55} & imgCounter & {56} , {57} , ABM.SIZE_PARAGRAPH, False, {58} ) 
IconsPage.bas[163]  lblicon.IconName = Icons.get(imgCounter) 
IconsPage.bas[164]  lblicon.IconSize = ABM.ICONSIZE_MEDIUM 
IconsPage.bas[165]  page.Cell(2, j+1).AddComponent(lblicon) 
IconsPage.bas[166]  
IconsPage.bas[167]  Dim lbliconName As ABMLabel 
IconsPage.bas[168]  lbliconName.Initialize(page, {59} & imgCounter & {60} , Icons.get(imgCounter), ABM.SIZE_PARAGRAPH, False, {61} ) 
IconsPage.bas[169]  lbliconName.Truncate = True 
IconsPage.bas[170]  page.Cell(2, j+1).AddComponent(lbliconName) 
IconsPage.bas[171]  
IconsPage.bas[172]  Dim div As ABMDivider 
IconsPage.bas[173]  div.Initialize(page, {62} & imgCounter & {63} , {64} ) 
IconsPage.bas[174]  page.Cell(2, j+1).AddComponent(div) 
IconsPage.bas[175]  
IconsPage.bas[176]  imgCounter = imgCounter + 1 
IconsPage.bas[177]  j = j + 1 
IconsPage.bas[178]  If j = 4 Then 
IconsPage.bas[179]  j = 0 
IconsPage.bas[180]  End If 
IconsPage.bas[181]  Loop 
IconsPage.bas[182]  
IconsPage.bas[183]  ' add a header label 
IconsPage.bas[184]  page.Cell(3,1).AddComponent(ABMShared.BuildHeader(page, {65} , {66} )) 
IconsPage.bas[185]  ' add paragraph 
IconsPage.bas[186]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {67} , {68} ) ) 
IconsPage.bas[187]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {69} , {70} ) ) 
IconsPage.bas[188]  
IconsPage.bas[189]  Dim code2 As String = {0} 
IconsPage.bas[190]  
IconsPage.bas[191]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {71} , code2)) 
IconsPage.bas[192]  
IconsPage.bas[193]  page.Cell(4,1).AddComponent(ABMShared.BuildParagraph(page, {72} , {73} )) 
IconsPage.bas[194]  
IconsPage.bas[195]  ' also add the components to the footer 
IconsPage.bas[196]  ABMShared.ConnectFooter(page) 
IconsPage.bas[197]  
IconsPage.bas[198]  page.Refresh ' IMPORTANT 
IconsPage.bas[199]  
IconsPage.bas[200]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
IconsPage.bas[201]  page.FinishedLoading 'IMPORTANT 
IconsPage.bas[202]  
IconsPage.bas[203]  page.RestoreNavigationBarPosition 
IconsPage.bas[204] End Sub 
IconsPage.bas[205]  
IconsPage.bas[206] ' clicked on the navigation bar 
IconsPage.bas[207] Sub Page_NavigationbarClicked(Action As String, Value As String) 
IconsPage.bas[208]  page.SaveNavigationBarPosition 
IconsPage.bas[209]  If Action = {74} Then Return 
IconsPage.bas[210]  If Action = {75} Then 
IconsPage.bas[211]  myToastId = myToastId + 1 
IconsPage.bas[212]  page.ShowToast( {76} & myToastId, {77} , {78} , 5000) 
IconsPage.bas[213]  Return 
IconsPage.bas[214]  End If 
IconsPage.bas[215]  If Action = {79} Then 
IconsPage.bas[216]  ABMShared.LogOff(page) 
IconsPage.bas[217]  Return 
IconsPage.bas[218]  End If 
IconsPage.bas[219]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
IconsPage.bas[220] End Sub 
IconsPage.bas[221]  
IconsPage.bas[222] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
IconsPage.bas[223]  page.ws.Session.SetAttribute( {80} , {81} ) 
IconsPage.bas[224]  page.ws.Session.SetAttribute( {82} , {83} ) 
IconsPage.bas[225]  page.ws.Session.SetAttribute( {84} , {85} ) 
IconsPage.bas[226]  ABMShared.NavigateToPage(ws, ABMPageId, {86} ) 
IconsPage.bas[227] End Sub 
IconsPage.bas[228]  
IconsPage.bas[229] Sub LoadIcons() As List 
IconsPage.bas[230]  Dim Icons As List 
IconsPage.bas[231]  Icons.Initialize 
IconsPage.bas[232]  Icons.Add( {87} ) 
IconsPage.bas[233]  Icons.Add( {88} ) 
IconsPage.bas[234]  Icons.Add( {89} ) 
IconsPage.bas[235]  Icons.Add( {90} ) 
IconsPage.bas[236]  Icons.Add( {91} ) 
IconsPage.bas[237]  Icons.Add( {92} ) 
IconsPage.bas[238]  Icons.Add( {93} ) 
IconsPage.bas[239]  Icons.Add( {94} ) 
IconsPage.bas[240]  Icons.Add( {95} ) 
IconsPage.bas[241]  Icons.Add( {96} ) 
IconsPage.bas[242]  Icons.Add( {97} ) 
IconsPage.bas[243]  Icons.Add( {98} ) 
IconsPage.bas[244]  Icons.Add( {99} ) 
IconsPage.bas[245]  Icons.Add( {100} ) 
IconsPage.bas[246]  Icons.Add( {101} ) 
IconsPage.bas[247]  Icons.Add( {102} ) 
IconsPage.bas[248]  Icons.Add( {103} ) 
IconsPage.bas[249]  Icons.Add( {104} ) 
IconsPage.bas[250]  Icons.Add( {105} ) 
IconsPage.bas[251]  Icons.Add( {106} ) 
IconsPage.bas[252]  Icons.Add( {107} ) 
IconsPage.bas[253]  Icons.Add( {108} ) 
IconsPage.bas[254]  Icons.Add( {109} ) 
IconsPage.bas[255]  Icons.Add( {110} ) 
IconsPage.bas[256]  Icons.Add( {111} ) 
IconsPage.bas[257]  Icons.Add( {112} ) 
IconsPage.bas[258]  Icons.Add( {113} ) 
IconsPage.bas[259]  Icons.Add( {114} ) 
IconsPage.bas[260]  Icons.Add( {115} ) 
IconsPage.bas[261]  Icons.Add( {116} ) 
IconsPage.bas[262]  Icons.Add( {117} ) 
IconsPage.bas[263]  Icons.Add( {118} ) 
IconsPage.bas[264]  Icons.Add( {119} ) 
IconsPage.bas[265]  Icons.Add( {120} ) 
IconsPage.bas[266]  Icons.Add( {121} ) 
IconsPage.bas[267]  Icons.Add( {122} ) 
IconsPage.bas[268]  Icons.Add( {123} ) 
IconsPage.bas[269]  Icons.Add( {124} ) 
IconsPage.bas[270]  Icons.Add( {125} ) 
IconsPage.bas[271]  Icons.Add( {126} ) 
IconsPage.bas[272]  Icons.Add( {127} ) 
IconsPage.bas[273]  Icons.Add( {128} ) 
IconsPage.bas[274]  Icons.Add( {129} ) 
IconsPage.bas[275]  Icons.Add( {130} ) 
IconsPage.bas[276]  Icons.Add( {131} ) 
IconsPage.bas[277]  Icons.Add( {132} ) 
IconsPage.bas[278]  Icons.Add( {133} ) 
IconsPage.bas[279]  Icons.Add( {134} ) 
IconsPage.bas[280]  Icons.Add( {135} ) 
IconsPage.bas[281]  Icons.Add( {136} ) 
IconsPage.bas[282]  Icons.Add( {137} ) 
IconsPage.bas[283]  Icons.Add( {138} ) 
IconsPage.bas[284]  Icons.Add( {139} ) 
IconsPage.bas[285]  Icons.Add( {140} ) 
IconsPage.bas[286]  Icons.Add( {141} ) 
IconsPage.bas[287]  Icons.Add( {142} ) 
IconsPage.bas[288]  Icons.Add( {143} ) 
IconsPage.bas[289]  Icons.Add( {144} ) 
IconsPage.bas[290]  Icons.Add( {145} ) 
IconsPage.bas[291]  Icons.Add( {146} ) 
IconsPage.bas[292]  Icons.Add( {147} ) 
IconsPage.bas[293]  Icons.Add( {148} ) 
IconsPage.bas[294]  Icons.Add( {149} ) 
IconsPage.bas[295]  Icons.Add( {150} ) 
IconsPage.bas[296]  Icons.Add( {151} ) 
IconsPage.bas[297]  Icons.Add( {152} ) 
IconsPage.bas[298]  Icons.Add( {153} ) 
IconsPage.bas[299]  Icons.Add( {154} ) 
IconsPage.bas[300]  Icons.Add( {155} ) 
IconsPage.bas[301]  Icons.Add( {156} ) 
IconsPage.bas[302]  Icons.Add( {157} ) 
IconsPage.bas[303]  Icons.Add( {158} ) 
IconsPage.bas[304]  Icons.Add( {159} ) 
IconsPage.bas[305]  Icons.Add( {160} ) 
IconsPage.bas[306]  Icons.Add( {161} ) 
IconsPage.bas[307]  Icons.Add( {162} ) 
IconsPage.bas[308]  Icons.Add( {163} ) 
IconsPage.bas[309]  Icons.Add( {164} ) 
IconsPage.bas[310]  Icons.Add( {165} ) 
IconsPage.bas[311]  Icons.Add( {166} ) 
IconsPage.bas[312]  Icons.Add( {167} ) 
IconsPage.bas[313]  Icons.Add( {168} ) 
IconsPage.bas[314]  Icons.Add( {169} ) 
IconsPage.bas[315]  Icons.Add( {170} ) 
IconsPage.bas[316]  Icons.Add( {171} ) 
IconsPage.bas[317]  Icons.Add( {172} ) 
IconsPage.bas[318]  Icons.Add( {173} ) 
IconsPage.bas[319]  Icons.Add( {174} ) 
IconsPage.bas[320]  Icons.Add( {175} ) 
IconsPage.bas[321]  Icons.Add( {176} ) 
IconsPage.bas[322]  Icons.Add( {177} ) 
IconsPage.bas[323]  Icons.Add( {178} ) 
IconsPage.bas[324]  Icons.Add( {179} ) 
IconsPage.bas[325]  Icons.Add( {180} ) 
IconsPage.bas[326]  Icons.Add( {181} ) 
IconsPage.bas[327]  Icons.Add( {182} ) 
IconsPage.bas[328]  Icons.Add( {183} ) 
IconsPage.bas[329]  Icons.Add( {184} ) 
IconsPage.bas[330]  Icons.Add( {185} ) 
IconsPage.bas[331]  Icons.Add( {186} ) 
IconsPage.bas[332]  Icons.Add( {187} ) 
IconsPage.bas[333]  Icons.Add( {188} ) 
IconsPage.bas[334]  Icons.Add( {189} ) 
IconsPage.bas[335]  Icons.Add( {190} ) 
IconsPage.bas[336]  Icons.Add( {191} ) 
IconsPage.bas[337]  Icons.Add( {192} ) 
IconsPage.bas[338]  Icons.Add( {193} ) 
IconsPage.bas[339]  Icons.Add( {194} ) 
IconsPage.bas[340]  Icons.Add( {195} ) 
IconsPage.bas[341]  Icons.Add( {196} ) 
IconsPage.bas[342]  Icons.Add( {197} ) 
IconsPage.bas[343]  Icons.Add( {198} ) 
IconsPage.bas[344]  Icons.Add( {199} ) 
IconsPage.bas[345]  Icons.Add( {200} ) 
IconsPage.bas[346]  Icons.Add( {201} ) 
IconsPage.bas[347]  Icons.Add( {202} ) 
IconsPage.bas[348]  Icons.Add( {203} ) 
IconsPage.bas[349]  Icons.Add( {204} ) 
IconsPage.bas[350]  Icons.Add( {205} ) 
IconsPage.bas[351]  Icons.Add( {206} ) 
IconsPage.bas[352]  Icons.Add( {207} ) 
IconsPage.bas[353]  Icons.Add( {208} ) 
IconsPage.bas[354]  Icons.Add( {209} ) 
IconsPage.bas[355]  Icons.Add( {210} ) 
IconsPage.bas[356]  Icons.Add( {211} ) 
IconsPage.bas[357]  Icons.Add( {212} ) 
IconsPage.bas[358]  Icons.Add( {213} ) 
IconsPage.bas[359]  Icons.Add( {214} ) 
IconsPage.bas[360]  Icons.Add( {215} ) 
IconsPage.bas[361]  Icons.Add( {216} ) 
IconsPage.bas[362]  Icons.Add( {217} ) 
IconsPage.bas[363]  Icons.Add( {218} ) 
IconsPage.bas[364]  Icons.Add( {219} ) 
IconsPage.bas[365]  Icons.Add( {220} ) 
IconsPage.bas[366]  Icons.Add( {221} ) 
IconsPage.bas[367]  Icons.Add( {222} ) 
IconsPage.bas[368]  Icons.Add( {223} ) 
IconsPage.bas[369]  Icons.Add( {224} ) 
IconsPage.bas[370]  Icons.Add( {225} ) 
IconsPage.bas[371]  Icons.Add( {226} ) 
IconsPage.bas[372]  Icons.Add( {227} ) 
IconsPage.bas[373]  Icons.Add( {228} ) 
IconsPage.bas[374]  Icons.Add( {229} ) 
IconsPage.bas[375]  Icons.Add( {230} ) 
IconsPage.bas[376]  Icons.Add( {231} ) 
IconsPage.bas[377]  Icons.Add( {232} ) 
IconsPage.bas[378]  Icons.Add( {233} ) 
IconsPage.bas[379]  Icons.Add( {234} ) 
IconsPage.bas[380]  Icons.Add( {235} ) 
IconsPage.bas[381]  Icons.Add( {236} ) 
IconsPage.bas[382]  Icons.Add( {237} ) 
IconsPage.bas[383]  Icons.Add( {238} ) 
IconsPage.bas[384]  Icons.Add( {239} ) 
IconsPage.bas[385]  Icons.Add( {240} ) 
IconsPage.bas[386]  Icons.Add( {241} ) 
IconsPage.bas[387]  Icons.Add( {242} ) 
IconsPage.bas[388]  Icons.Add( {243} ) 
IconsPage.bas[389]  Icons.Add( {244} ) 
IconsPage.bas[390]  Icons.Add( {245} ) 
IconsPage.bas[391]  Icons.Add( {246} ) 
IconsPage.bas[392]  Icons.Add( {247} ) 
IconsPage.bas[393]  Icons.Add( {248} ) 
IconsPage.bas[394]  Icons.Add( {249} ) 
IconsPage.bas[395]  Icons.Add( {250} ) 
IconsPage.bas[396]  Icons.Add( {251} ) 
IconsPage.bas[397]  Icons.Add( {252} ) 
IconsPage.bas[398]  Icons.Add( {253} ) 
IconsPage.bas[399]  Icons.Add( {254} ) 
IconsPage.bas[400]  Icons.Add( {255} ) 
IconsPage.bas[401]  Icons.Add( {256} ) 
IconsPage.bas[402]  Icons.Add( {257} ) 
IconsPage.bas[403]  Icons.Add( {258} ) 
IconsPage.bas[404]  Icons.Add( {259} ) 
IconsPage.bas[405]  Icons.Add( {260} ) 
IconsPage.bas[406]  Icons.Add( {261} ) 
IconsPage.bas[407]  Icons.Add( {262} ) 
IconsPage.bas[408]  Icons.Add( {263} ) 
IconsPage.bas[409]  Icons.Add( {264} ) 
IconsPage.bas[410]  Icons.Add( {265} ) 
IconsPage.bas[411]  Icons.Add( {266} ) 
IconsPage.bas[412]  Icons.Add( {267} ) 
IconsPage.bas[413]  Icons.Add( {268} ) 
IconsPage.bas[414]  Icons.Add( {269} ) 
IconsPage.bas[415]  Icons.Add( {270} ) 
IconsPage.bas[416]  Icons.Add( {271} ) 
IconsPage.bas[417]  Icons.Add( {272} ) 
IconsPage.bas[418]  Icons.Add( {273} ) 
IconsPage.bas[419]  Icons.Add( {274} ) 
IconsPage.bas[420]  Icons.Add( {275} ) 
IconsPage.bas[421]  Icons.Add( {276} ) 
IconsPage.bas[422]  Icons.Add( {277} ) 
IconsPage.bas[423]  Icons.Add( {278} ) 
IconsPage.bas[424]  Icons.Add( {279} ) 
IconsPage.bas[425]  Icons.Add( {280} ) 
IconsPage.bas[426]  Icons.Add( {281} ) 
IconsPage.bas[427]  Icons.Add( {282} ) 
IconsPage.bas[428]  Icons.Add( {283} ) 
IconsPage.bas[429]  Icons.Add( {284} ) 
IconsPage.bas[430]  Icons.Add( {285} ) 
IconsPage.bas[431]  Icons.Add( {286} ) 
IconsPage.bas[432]  Icons.Add( {287} ) 
IconsPage.bas[433]  Icons.Add( {288} ) 
IconsPage.bas[434]  Icons.Add( {289} ) 
IconsPage.bas[435]  Icons.Add( {290} ) 
IconsPage.bas[436]  Icons.Add( {291} ) 
IconsPage.bas[437]  Icons.Add( {292} ) 
IconsPage.bas[438]  Icons.Add( {293} ) 
IconsPage.bas[439]  Icons.Add( {294} ) 
IconsPage.bas[440]  Icons.Add( {295} ) 
IconsPage.bas[441]  Icons.Add( {296} ) 
IconsPage.bas[442]  Icons.Add( {297} ) 
IconsPage.bas[443]  Icons.Add( {298} ) 
IconsPage.bas[444]  Icons.Add( {299} ) 
IconsPage.bas[445]  Icons.Add( {300} ) 
IconsPage.bas[446]  Icons.Add( {301} ) 
IconsPage.bas[447]  Icons.Add( {302} ) 
IconsPage.bas[448]  Icons.Add( {303} ) 
IconsPage.bas[449]  Icons.Add( {304} ) 
IconsPage.bas[450]  Icons.Add( {305} ) 
IconsPage.bas[451]  Icons.Add( {306} ) 
IconsPage.bas[452]  Icons.Add( {307} ) 
IconsPage.bas[453]  Icons.Add( {308} ) 
IconsPage.bas[454]  Icons.Add( {309} ) 
IconsPage.bas[455]  Icons.Add( {310} ) 
IconsPage.bas[456]  Icons.Add( {311} ) 
IconsPage.bas[457]  Icons.Add( {312} ) 
IconsPage.bas[458]  Icons.Add( {313} ) 
IconsPage.bas[459]  Icons.Add( {314} ) 
IconsPage.bas[460]  Icons.Add( {315} ) 
IconsPage.bas[461]  Icons.Add( {316} ) 
IconsPage.bas[462]  Icons.Add( {317} ) 
IconsPage.bas[463]  Icons.Add( {318} ) 
IconsPage.bas[464]  Icons.Add( {319} ) 
IconsPage.bas[465]  Icons.Add( {320} ) 
IconsPage.bas[466]  Icons.Add( {321} ) 
IconsPage.bas[467]  Icons.Add( {322} ) 
IconsPage.bas[468]  Icons.Add( {323} ) 
IconsPage.bas[469]  Icons.Add( {324} ) 
IconsPage.bas[470]  Icons.Add( {325} ) 
IconsPage.bas[471]  Icons.Add( {326} ) 
IconsPage.bas[472]  Icons.Add( {327} ) 
IconsPage.bas[473]  Icons.Add( {328} ) 
IconsPage.bas[474]  Icons.Add( {329} ) 
IconsPage.bas[475]  Icons.Add( {330} ) 
IconsPage.bas[476]  Icons.Add( {331} ) 
IconsPage.bas[477]  Icons.Add( {332} ) 
IconsPage.bas[478]  Icons.Add( {333} ) 
IconsPage.bas[479]  Icons.Add( {334} ) 
IconsPage.bas[480]  Icons.Add( {335} ) 
IconsPage.bas[481]  Icons.Add( {336} ) 
IconsPage.bas[482]  Icons.Add( {337} ) 
IconsPage.bas[483]  Icons.Add( {338} ) 
IconsPage.bas[484]  Icons.Add( {339} ) 
IconsPage.bas[485]  Icons.Add( {340} ) 
IconsPage.bas[486]  Icons.Add( {341} ) 
IconsPage.bas[487]  Icons.Add( {342} ) 
IconsPage.bas[488]  Icons.Add( {343} ) 
IconsPage.bas[489]  Icons.Add( {344} ) 
IconsPage.bas[490]  Icons.Add( {345} ) 
IconsPage.bas[491]  Icons.Add( {346} ) 
IconsPage.bas[492]  Icons.Add( {347} ) 
IconsPage.bas[493]  Icons.Add( {348} ) 
IconsPage.bas[494]  Icons.Add( {349} ) 
IconsPage.bas[495]  Icons.Add( {350} ) 
IconsPage.bas[496]  Icons.Add( {351} ) 
IconsPage.bas[497]  Icons.Add( {352} ) 
IconsPage.bas[498]  Icons.Add( {353} ) 
IconsPage.bas[499]  Icons.Add( {354} ) 
IconsPage.bas[500]  Icons.Add( {355} ) 
IconsPage.bas[501]  Icons.Add( {356} ) 
IconsPage.bas[502]  Icons.Add( {357} ) 
IconsPage.bas[503]  Icons.Add( {358} ) 
IconsPage.bas[504]  Icons.Add( {359} ) 
IconsPage.bas[505]  Icons.Add( {360} ) 
IconsPage.bas[506]  Icons.Add( {361} ) 
IconsPage.bas[507]  Icons.Add( {362} ) 
IconsPage.bas[508]  Icons.Add( {363} ) 
IconsPage.bas[509]  Icons.Add( {364} ) 
IconsPage.bas[510]  Icons.Add( {365} ) 
IconsPage.bas[511]  Icons.Add( {366} ) 
IconsPage.bas[512]  Icons.Add( {367} ) 
IconsPage.bas[513]  Icons.Add( {368} ) 
IconsPage.bas[514]  Icons.Add( {369} ) 
IconsPage.bas[515]  Icons.Add( {370} ) 
IconsPage.bas[516]  Icons.Add( {371} ) 
IconsPage.bas[517]  Icons.Add( {372} ) 
IconsPage.bas[518]  Icons.Add( {373} ) 
IconsPage.bas[519]  Icons.Add( {374} ) 
IconsPage.bas[520]  Icons.Add( {375} ) 
IconsPage.bas[521]  Icons.Add( {376} ) 
IconsPage.bas[522]  Icons.Add( {377} ) 
IconsPage.bas[523]  Icons.Add( {378} ) 
IconsPage.bas[524]  Icons.Add( {379} ) 
IconsPage.bas[525]  Icons.Add( {380} ) 
IconsPage.bas[526]  Icons.Add( {381} ) 
IconsPage.bas[527]  Icons.Add( {382} ) 
IconsPage.bas[528]  Icons.Add( {383} ) 
IconsPage.bas[529]  Icons.Add( {384} ) 
IconsPage.bas[530]  Icons.Add( {385} ) 
IconsPage.bas[531]  Icons.Add( {386} ) 
IconsPage.bas[532]  Icons.Add( {387} ) 
IconsPage.bas[533]  Icons.Add( {388} ) 
IconsPage.bas[534]  Icons.Add( {389} ) 
IconsPage.bas[535]  Icons.Add( {390} ) 
IconsPage.bas[536]  Icons.Add( {391} ) 
IconsPage.bas[537]  Icons.Add( {392} ) 
IconsPage.bas[538]  Icons.Add( {393} ) 
IconsPage.bas[539]  Icons.Add( {394} ) 
IconsPage.bas[540]  Icons.Add( {395} ) 
IconsPage.bas[541]  Icons.Add( {396} ) 
IconsPage.bas[542]  Icons.Add( {397} ) 
IconsPage.bas[543]  Icons.Add( {398} ) 
IconsPage.bas[544]  Icons.Add( {399} ) 
IconsPage.bas[545]  Icons.Add( {400} ) 
IconsPage.bas[546]  Icons.Add( {401} ) 
IconsPage.bas[547]  Icons.Add( {402} ) 
IconsPage.bas[548]  Icons.Add( {403} ) 
IconsPage.bas[549]  Icons.Add( {404} ) 
IconsPage.bas[550]  Icons.Add( {405} ) 
IconsPage.bas[551]  Icons.Add( {406} ) 
IconsPage.bas[552]  Icons.Add( {407} ) 
IconsPage.bas[553]  Icons.Add( {408} ) 
IconsPage.bas[554]  Icons.Add( {409} ) 
IconsPage.bas[555]  Icons.Add( {410} ) 
IconsPage.bas[556]  Icons.Add( {411} ) 
IconsPage.bas[557]  Icons.Add( {412} ) 
IconsPage.bas[558]  Icons.Add( {413} ) 
IconsPage.bas[559]  Icons.Add( {414} ) 
IconsPage.bas[560]  Icons.Add( {415} ) 
IconsPage.bas[561]  Icons.Add( {416} ) 
IconsPage.bas[562]  Icons.Add( {417} ) 
IconsPage.bas[563]  Icons.Add( {418} ) 
IconsPage.bas[564]  Icons.Add( {419} ) 
IconsPage.bas[565]  Icons.Add( {420} ) 
IconsPage.bas[566]  Icons.Add( {421} ) 
IconsPage.bas[567]  Icons.Add( {422} ) 
IconsPage.bas[568]  Icons.Add( {423} ) 
IconsPage.bas[569]  Icons.Add( {424} ) 
IconsPage.bas[570]  Icons.Add( {425} ) 
IconsPage.bas[571]  Icons.Add( {426} ) 
IconsPage.bas[572]  Icons.Add( {427} ) 
IconsPage.bas[573]  Icons.Add( {428} ) 
IconsPage.bas[574]  Icons.Add( {429} ) 
IconsPage.bas[575]  Icons.Add( {430} ) 
IconsPage.bas[576]  Icons.Add( {431} ) 
IconsPage.bas[577]  Icons.Add( {432} ) 
IconsPage.bas[578]  Icons.Add( {433} ) 
IconsPage.bas[579]  Icons.Add( {434} ) 
IconsPage.bas[580]  Icons.Add( {435} ) 
IconsPage.bas[581]  Icons.Add( {436} ) 
IconsPage.bas[582]  Icons.Add( {437} ) 
IconsPage.bas[583]  Icons.Add( {438} ) 
IconsPage.bas[584]  Icons.Add( {439} ) 
IconsPage.bas[585]  Icons.Add( {440} ) 
IconsPage.bas[586]  Icons.Add( {441} ) 
IconsPage.bas[587]  Icons.Add( {442} ) 
IconsPage.bas[588]  Icons.Add( {443} ) 
IconsPage.bas[589]  Icons.Add( {444} ) 
IconsPage.bas[590]  Icons.Add( {445} ) 
IconsPage.bas[591]  Icons.Add( {446} ) 
IconsPage.bas[592]  Icons.Add( {447} ) 
IconsPage.bas[593]  Icons.Add( {448} ) 
IconsPage.bas[594]  Icons.Add( {449} ) 
IconsPage.bas[595]  Icons.Add( {450} ) 
IconsPage.bas[596]  Icons.Add( {451} ) 
IconsPage.bas[597]  Icons.Add( {452} ) 
IconsPage.bas[598]  Icons.Add( {453} ) 
IconsPage.bas[599]  Icons.Add( {454} ) 
IconsPage.bas[600]  Icons.Add( {455} ) 
IconsPage.bas[601]  Icons.Add( {456} ) 
IconsPage.bas[602]  Icons.Add( {457} ) 
IconsPage.bas[603]  Icons.Add( {458} ) 
IconsPage.bas[604]  Icons.Add( {459} ) 
IconsPage.bas[605]  Icons.Add( {460} ) 
IconsPage.bas[606]  Icons.Add( {461} ) 
IconsPage.bas[607]  Icons.Add( {462} ) 
IconsPage.bas[608]  Icons.Add( {463} ) 
IconsPage.bas[609]  Icons.Add( {464} ) 
IconsPage.bas[610]  Icons.Add( {465} ) 
IconsPage.bas[611]  Icons.Add( {466} ) 
IconsPage.bas[612]  Icons.Add( {467} ) 
IconsPage.bas[613]  Icons.Add( {468} ) 
IconsPage.bas[614]  Icons.Add( {469} ) 
IconsPage.bas[615]  Icons.Add( {470} ) 
IconsPage.bas[616]  Icons.Add( {471} ) 
IconsPage.bas[617]  Icons.Add( {472} ) 
IconsPage.bas[618]  Icons.Add( {473} ) 
IconsPage.bas[619]  Icons.Add( {474} ) 
IconsPage.bas[620]  Icons.Add( {475} ) 
IconsPage.bas[621]  Icons.Add( {476} ) 
IconsPage.bas[622]  Icons.Add( {477} ) 
IconsPage.bas[623]  Icons.Add( {478} ) 
IconsPage.bas[624]  Icons.Add( {479} ) 
IconsPage.bas[625]  Icons.Add( {480} ) 
IconsPage.bas[626]  Icons.Add( {481} ) 
IconsPage.bas[627]  Icons.Add( {482} ) 
IconsPage.bas[628]  Icons.Add( {483} ) 
IconsPage.bas[629]  Icons.Add( {484} ) 
IconsPage.bas[630]  Icons.Add( {485} ) 
IconsPage.bas[631]  Icons.Add( {486} ) 
IconsPage.bas[632]  Icons.Add( {487} ) 
IconsPage.bas[633]  Icons.Add( {488} ) 
IconsPage.bas[634]  Icons.Add( {489} ) 
IconsPage.bas[635]  Icons.Add( {490} ) 
IconsPage.bas[636]  Icons.Add( {491} ) 
IconsPage.bas[637]  Icons.Add( {492} ) 
IconsPage.bas[638]  Icons.Add( {493} ) 
IconsPage.bas[639]  Icons.Add( {494} ) 
IconsPage.bas[640]  Icons.Add( {495} ) 
IconsPage.bas[641]  Icons.Add( {496} ) 
IconsPage.bas[642]  Icons.Add( {497} ) 
IconsPage.bas[643]  Icons.Add( {498} ) 
IconsPage.bas[644]  Icons.Add( {499} ) 
IconsPage.bas[645]  Icons.Add( {500} ) 
IconsPage.bas[646]  Icons.Add( {501} ) 
IconsPage.bas[647]  Icons.Add( {502} ) 
IconsPage.bas[648]  Icons.Add( {503} ) 
IconsPage.bas[649]  Icons.Add( {504} ) 
IconsPage.bas[650]  Icons.Add( {505} ) 
IconsPage.bas[651]  Icons.Add( {506} ) 
IconsPage.bas[652]  Icons.Add( {507} ) 
IconsPage.bas[653]  Icons.Add( {508} ) 
IconsPage.bas[654]  Icons.Add( {509} ) 
IconsPage.bas[655]  Icons.Add( {510} ) 
IconsPage.bas[656]  Icons.Add( {511} ) 
IconsPage.bas[657]  Icons.Add( {512} ) 
IconsPage.bas[658]  Icons.Add( {513} ) 
IconsPage.bas[659]  Icons.Add( {514} ) 
IconsPage.bas[660]  Icons.Add( {515} ) 
IconsPage.bas[661]  Icons.Add( {516} ) 
IconsPage.bas[662]  Icons.Add( {517} ) 
IconsPage.bas[663]  Icons.Add( {518} ) 
IconsPage.bas[664]  Icons.Add( {519} ) 
IconsPage.bas[665]  Icons.Add( {520} ) 
IconsPage.bas[666]  Icons.Add( {521} ) 
IconsPage.bas[667]  Icons.Add( {522} ) 
IconsPage.bas[668]  Icons.Add( {523} ) 
IconsPage.bas[669]  Icons.Add( {524} ) 
IconsPage.bas[670]  Icons.Add( {525} ) 
IconsPage.bas[671]  Icons.Add( {526} ) 
IconsPage.bas[672]  Icons.Add( {527} ) 
IconsPage.bas[673]  Icons.Add( {528} ) 
IconsPage.bas[674]  Icons.Add( {529} ) 
IconsPage.bas[675]  Icons.Add( {530} ) 
IconsPage.bas[676]  Icons.Add( {531} ) 
IconsPage.bas[677]  Icons.Add( {532} ) 
IconsPage.bas[678]  Icons.Add( {533} ) 
IconsPage.bas[679]  Icons.Add( {534} ) 
IconsPage.bas[680]  Icons.Add( {535} ) 
IconsPage.bas[681]  Icons.Add( {536} ) 
IconsPage.bas[682]  Icons.Add( {537} ) 
IconsPage.bas[683]  Icons.Add( {538} ) 
IconsPage.bas[684]  Icons.Add( {539} ) 
IconsPage.bas[685]  Icons.Add( {540} ) 
IconsPage.bas[686]  Icons.Add( {541} ) 
IconsPage.bas[687]  Icons.Add( {542} ) 
IconsPage.bas[688]  Icons.Add( {543} ) 
IconsPage.bas[689]  Icons.Add( {544} ) 
IconsPage.bas[690]  Icons.Add( {545} ) 
IconsPage.bas[691]  Icons.Add( {546} ) 
IconsPage.bas[692]  Icons.Add( {547} ) 
IconsPage.bas[693]  Icons.Add( {548} ) 
IconsPage.bas[694]  Icons.Add( {549} ) 
IconsPage.bas[695]  Icons.Add( {550} ) 
IconsPage.bas[696]  Icons.Add( {551} ) 
IconsPage.bas[697]  Icons.Add( {552} ) 
IconsPage.bas[698]  Icons.Add( {553} ) 
IconsPage.bas[699]  Icons.Add( {554} ) 
IconsPage.bas[700]  Icons.Add( {555} ) 
IconsPage.bas[701]  Icons.Add( {556} ) 
IconsPage.bas[702]  Icons.Add( {557} ) 
IconsPage.bas[703]  Icons.Add( {558} ) 
IconsPage.bas[704]  Icons.Add( {559} ) 
IconsPage.bas[705]  Icons.Add( {560} ) 
IconsPage.bas[706]  Icons.Add( {561} ) 
IconsPage.bas[707]  Icons.Add( {562} ) 
IconsPage.bas[708]  Icons.Add( {563} ) 
IconsPage.bas[709]  Icons.Add( {564} ) 
IconsPage.bas[710]  Icons.Add( {565} ) 
IconsPage.bas[711]  Icons.Add( {566} ) 
IconsPage.bas[712]  Icons.Add( {567} ) 
IconsPage.bas[713]  Icons.Add( {568} ) 
IconsPage.bas[714]  Icons.Add( {569} ) 
IconsPage.bas[715]  Icons.Add( {570} ) 
IconsPage.bas[716]  Icons.Add( {571} ) 
IconsPage.bas[717]  Icons.Add( {572} ) 
IconsPage.bas[718]  Icons.Add( {573} ) 
IconsPage.bas[719]  Icons.Add( {574} ) 
IconsPage.bas[720]  Icons.Add( {575} ) 
IconsPage.bas[721]  Icons.Add( {576} ) 
IconsPage.bas[722]  Icons.Add( {577} ) 
IconsPage.bas[723]  Icons.Add( {578} ) 
IconsPage.bas[724]  Icons.Add( {579} ) 
IconsPage.bas[725]  Icons.Add( {580} ) 
IconsPage.bas[726]  Icons.Add( {581} ) 
IconsPage.bas[727]  Icons.Add( {582} ) 
IconsPage.bas[728]  Icons.Add( {583} ) 
IconsPage.bas[729]  Icons.Add( {584} ) 
IconsPage.bas[730]  Icons.Add( {585} ) 
IconsPage.bas[731]  Icons.Add( {586} ) 
IconsPage.bas[732]  Icons.Add( {587} ) 
IconsPage.bas[733]  Icons.Add( {588} ) 
IconsPage.bas[734]  Icons.Add( {589} ) 
IconsPage.bas[735]  Icons.Add( {590} ) 
IconsPage.bas[736]  Icons.Add( {591} ) 
IconsPage.bas[737]  Icons.Add( {592} ) 
IconsPage.bas[738]  Icons.Add( {593} ) 
IconsPage.bas[739]  Icons.Add( {594} ) 
IconsPage.bas[740]  Icons.Add( {595} ) 
IconsPage.bas[741]  Icons.Add( {596} ) 
IconsPage.bas[742]  Icons.Add( {597} ) 
IconsPage.bas[743]  Icons.Add( {598} ) 
IconsPage.bas[744]  Icons.Add( {599} ) 
IconsPage.bas[745]  Icons.Add( {600} ) 
IconsPage.bas[746]  Icons.Add( {601} ) 
IconsPage.bas[747]  Icons.Add( {602} ) 
IconsPage.bas[748]  Icons.Add( {603} ) 
IconsPage.bas[749]  Icons.Add( {604} ) 
IconsPage.bas[750]  Icons.Add( {605} ) 
IconsPage.bas[751]  Icons.Add( {606} ) 
IconsPage.bas[752]  Icons.Add( {607} ) 
IconsPage.bas[753]  Icons.Add( {608} ) 
IconsPage.bas[754]  Icons.Add( {609} ) 
IconsPage.bas[755]  Icons.Add( {610} ) 
IconsPage.bas[756]  Icons.Add( {611} ) 
IconsPage.bas[757]  Icons.Add( {612} ) 
IconsPage.bas[758]  Icons.Add( {613} ) 
IconsPage.bas[759]  Icons.Add( {614} ) 
IconsPage.bas[760]  Icons.Add( {615} ) 
IconsPage.bas[761]  Icons.Add( {616} ) 
IconsPage.bas[762]  Icons.Add( {617} ) 
IconsPage.bas[763]  Icons.Add( {618} ) 
IconsPage.bas[764]  Icons.Add( {619} ) 
IconsPage.bas[765]  Icons.Add( {620} ) 
IconsPage.bas[766]  Icons.Add( {621} ) 
IconsPage.bas[767]  Icons.Add( {622} ) 
IconsPage.bas[768]  Icons.Add( {623} ) 
IconsPage.bas[769]  Icons.Add( {624} ) 
IconsPage.bas[770]  Icons.Add( {625} ) 
IconsPage.bas[771]  Icons.Add( {626} ) 
IconsPage.bas[772]  Icons.Add( {627} ) 
IconsPage.bas[773]  Icons.Add( {628} ) 
IconsPage.bas[774]  Icons.Add( {629} ) 
IconsPage.bas[775]  Icons.Add( {630} ) 
IconsPage.bas[776]  Icons.Add( {631} ) 
IconsPage.bas[777]  Icons.Add( {632} ) 
IconsPage.bas[778]  Icons.Add( {633} ) 
IconsPage.bas[779]  Icons.Add( {634} ) 
IconsPage.bas[780]  Icons.Add( {635} ) 
IconsPage.bas[781]  Icons.Add( {636} ) 
IconsPage.bas[782]  Icons.Add( {637} ) 
IconsPage.bas[783]  Icons.Add( {638} ) 
IconsPage.bas[784]  Icons.Add( {639} ) 
IconsPage.bas[785]  Icons.Add( {640} ) 
IconsPage.bas[786]  Icons.Add( {641} ) 
IconsPage.bas[787]  Icons.Add( {642} ) 
IconsPage.bas[788]  Icons.Add( {643} ) 
IconsPage.bas[789]  Icons.Add( {644} ) 
IconsPage.bas[790]  Icons.Add( {645} ) 
IconsPage.bas[791]  Icons.Add( {646} ) 
IconsPage.bas[792]  Icons.Add( {647} ) 
IconsPage.bas[793]  Icons.Add( {648} ) 
IconsPage.bas[794]  Icons.Add( {649} ) 
IconsPage.bas[795]  Icons.Add( {650} ) 
IconsPage.bas[796]  Icons.Add( {651} ) 
IconsPage.bas[797]  Icons.Add( {652} ) 
IconsPage.bas[798]  Icons.Add( {653} ) 
IconsPage.bas[799]  Icons.Add( {654} ) 
IconsPage.bas[800]  Icons.Add( {655} ) 
IconsPage.bas[801]  Icons.Add( {656} ) 
IconsPage.bas[802]  Icons.Add( {657} ) 
IconsPage.bas[803]  Icons.Add( {658} ) 
IconsPage.bas[804]  Icons.Add( {659} ) 
IconsPage.bas[805]  Icons.Add( {660} ) 
IconsPage.bas[806]  Icons.Add( {661} ) 
IconsPage.bas[807]  Icons.Add( {662} ) 
IconsPage.bas[808]  Icons.Add( {663} ) 
IconsPage.bas[809]  Icons.Add( {664} ) 
IconsPage.bas[810]  Icons.Add( {665} ) 
IconsPage.bas[811]  Icons.Add( {666} ) 
IconsPage.bas[812]  Icons.Add( {667} ) 
IconsPage.bas[813]  Icons.Add( {668} ) 
IconsPage.bas[814]  Icons.Add( {669} ) 
IconsPage.bas[815]  Icons.Add( {670} ) 
IconsPage.bas[816]  Icons.Add( {671} ) 
IconsPage.bas[817]  Icons.Add( {672} ) 
IconsPage.bas[818]  Icons.Add( {673} ) 
IconsPage.bas[819]  Icons.Add( {674} ) 
IconsPage.bas[820]  Icons.Add( {675} ) 
IconsPage.bas[821]  Icons.Add( {676} ) 
IconsPage.bas[822]  Icons.Add( {677} ) 
IconsPage.bas[823]  Icons.Add( {678} ) 
IconsPage.bas[824]  Icons.Add( {679} ) 
IconsPage.bas[825]  Icons.Add( {680} ) 
IconsPage.bas[826]  Icons.Add( {681} ) 
IconsPage.bas[827]  Icons.Add( {682} ) 
IconsPage.bas[828]  Icons.Add( {683} ) 
IconsPage.bas[829]  Icons.Add( {684} ) 
IconsPage.bas[830]  Icons.Add( {685} ) 
IconsPage.bas[831]  Icons.Add( {686} ) 
IconsPage.bas[832]  Icons.Add( {687} ) 
IconsPage.bas[833]  Icons.Add( {688} ) 
IconsPage.bas[834]  Icons.Add( {689} ) 
IconsPage.bas[835]  Icons.Add( {690} ) 
IconsPage.bas[836]  Icons.Add( {691} ) 
IconsPage.bas[837]  Icons.Add( {692} ) 
IconsPage.bas[838]  Icons.Add( {693} ) 
IconsPage.bas[839]  Icons.Add( {694} ) 
IconsPage.bas[840]  Icons.Add( {695} ) 
IconsPage.bas[841]  Icons.Add( {696} ) 
IconsPage.bas[842]  Icons.Add( {697} ) 
IconsPage.bas[843]  Icons.Add( {698} ) 
IconsPage.bas[844]  Icons.Add( {699} ) 
IconsPage.bas[845]  Icons.Add( {700} ) 
IconsPage.bas[846]  Icons.Add( {701} ) 
IconsPage.bas[847]  Icons.Add( {702} ) 
IconsPage.bas[848]  Icons.Add( {703} ) 
IconsPage.bas[849]  Icons.Add( {704} ) 
IconsPage.bas[850]  Icons.Add( {705} ) 
IconsPage.bas[851]  Icons.Add( {706} ) 
IconsPage.bas[852]  Icons.Add( {707} ) 
IconsPage.bas[853]  Icons.Add( {708} ) 
IconsPage.bas[854]  Icons.Add( {709} ) 
IconsPage.bas[855]  Icons.Add( {710} ) 
IconsPage.bas[856]  Icons.Add( {711} ) 
IconsPage.bas[857]  Icons.Add( {712} ) 
IconsPage.bas[858]  Icons.Add( {713} ) 
IconsPage.bas[859]  Icons.Add( {714} ) 
IconsPage.bas[860]  Icons.Add( {715} ) 
IconsPage.bas[861]  Icons.Add( {716} ) 
IconsPage.bas[862]  Icons.Add( {717} ) 
IconsPage.bas[863]  Icons.Add( {718} ) 
IconsPage.bas[864]  Icons.Add( {719} ) 
IconsPage.bas[865]  Icons.Add( {720} ) 
IconsPage.bas[866]  Icons.Add( {721} ) 
IconsPage.bas[867]  Icons.Add( {722} ) 
IconsPage.bas[868]  Icons.Add( {723} ) 
IconsPage.bas[869]  Icons.Add( {724} ) 
IconsPage.bas[870]  Icons.Add( {725} ) 
IconsPage.bas[871]  Icons.Add( {726} ) 
IconsPage.bas[872]  Icons.Add( {727} ) 
IconsPage.bas[873]  Icons.Add( {728} ) 
IconsPage.bas[874]  Icons.Add( {729} ) 
IconsPage.bas[875]  Icons.Add( {730} ) 
IconsPage.bas[876]  Icons.Add( {731} ) 
IconsPage.bas[877]  Icons.Add( {732} ) 
IconsPage.bas[878]  Icons.Add( {733} ) 
IconsPage.bas[879]  Icons.Add( {734} ) 
IconsPage.bas[880]  Icons.Add( {735} ) 
IconsPage.bas[881]  Icons.Add( {736} ) 
IconsPage.bas[882]  Icons.Add( {737} ) 
IconsPage.bas[883]  Icons.Add( {738} ) 
IconsPage.bas[884]  Icons.Add( {739} ) 
IconsPage.bas[885]  Icons.Add( {740} ) 
IconsPage.bas[886]  Icons.Add( {741} ) 
IconsPage.bas[887]  Icons.Add( {742} ) 
IconsPage.bas[888]  Icons.Add( {743} ) 
IconsPage.bas[889]  Icons.Add( {744} ) 
IconsPage.bas[890]  Icons.Add( {745} ) 
IconsPage.bas[891]  Icons.Add( {746} ) 
IconsPage.bas[892]  Icons.Add( {747} ) 
IconsPage.bas[893]  Icons.Add( {748} ) 
IconsPage.bas[894]  Icons.Add( {749} ) 
IconsPage.bas[895]  Icons.Add( {750} ) 
IconsPage.bas[896]  Icons.Add( {751} ) 
IconsPage.bas[897]  Icons.Add( {752} ) 
IconsPage.bas[898]  Icons.Add( {753} ) 
IconsPage.bas[899]  Icons.Add( {754} ) 
IconsPage.bas[900]  Icons.Add( {755} ) 
IconsPage.bas[901]  Icons.Add( {756} ) 
IconsPage.bas[902]  Icons.Add( {757} ) 
IconsPage.bas[903]  Icons.Add( {758} ) 
IconsPage.bas[904]  Icons.Add( {759} ) 
IconsPage.bas[905]  Icons.Add( {760} ) 
IconsPage.bas[906]  Icons.Add( {761} ) 
IconsPage.bas[907]  Icons.Add( {762} ) 
IconsPage.bas[908]  Icons.Add( {763} ) 
IconsPage.bas[909]  Icons.Add( {764} ) 
IconsPage.bas[910]  Icons.Add( {765} ) 
IconsPage.bas[911]  Icons.Add( {766} ) 
IconsPage.bas[912]  Icons.Add( {767} ) 
IconsPage.bas[913]  Icons.Add( {768} ) 
IconsPage.bas[914]  Icons.Add( {769} ) 
IconsPage.bas[915]  Icons.Add( {770} ) 
IconsPage.bas[916]  Icons.Add( {771} ) 
IconsPage.bas[917]  Icons.Add( {772} ) 
IconsPage.bas[918]  Icons.Add( {773} ) 
IconsPage.bas[919]  Icons.Add( {774} ) 
IconsPage.bas[920]  Icons.Add( {775} ) 
IconsPage.bas[921]  Icons.Add( {776} ) 
IconsPage.bas[922]  Icons.Add( {777} ) 
IconsPage.bas[923]  Icons.Add( {778} ) 
IconsPage.bas[924]  Icons.Add( {779} ) 
IconsPage.bas[925]  Icons.Add( {780} ) 
IconsPage.bas[926]  Icons.Add( {781} ) 
IconsPage.bas[927]  Icons.Add( {782} ) 
IconsPage.bas[928]  Icons.Add( {783} ) 
IconsPage.bas[929]  Icons.Add( {784} ) 
IconsPage.bas[930]  Icons.Add( {785} ) 
IconsPage.bas[931]  Icons.Add( {786} ) 
IconsPage.bas[932]  Icons.Add( {787} ) 
IconsPage.bas[933]  Icons.Add( {788} ) 
IconsPage.bas[934]  Icons.Add( {789} ) 
IconsPage.bas[935]  Icons.Add( {790} ) 
IconsPage.bas[936]  Icons.Add( {791} ) 
IconsPage.bas[937]  Icons.Add( {792} ) 
IconsPage.bas[938]  Icons.Add( {793} ) 
IconsPage.bas[939]  Icons.Add( {794} ) 
IconsPage.bas[940]  Icons.Add( {795} ) 
IconsPage.bas[941]  Icons.Add( {796} ) 
IconsPage.bas[942]  Icons.Add( {797} ) 
IconsPage.bas[943]  Icons.Add( {798} ) 
IconsPage.bas[944]  Icons.Add( {799} ) 
IconsPage.bas[945]  Icons.Add( {800} ) 
IconsPage.bas[946]  Icons.Add( {801} ) 
IconsPage.bas[947]  Icons.Add( {802} ) 
IconsPage.bas[948]  Icons.Add( {803} ) 
IconsPage.bas[949]  Icons.Add( {804} ) 
IconsPage.bas[950]  Icons.Add( {805} ) 
IconsPage.bas[951]  Icons.Add( {806} ) 
IconsPage.bas[952]  Icons.Add( {807} ) 
IconsPage.bas[953]  Icons.Add( {808} ) 
IconsPage.bas[954]  Icons.Add( {809} ) 
IconsPage.bas[955]  Icons.Add( {810} ) 
IconsPage.bas[956]  Icons.Add( {811} ) 
IconsPage.bas[957]  Icons.Add( {812} ) 
IconsPage.bas[958]  Icons.Add( {813} ) 
IconsPage.bas[959]  Icons.Add( {814} ) 
IconsPage.bas[960]  Icons.Add( {815} ) 
IconsPage.bas[961]  Icons.Add( {816} ) 
IconsPage.bas[962]  Icons.Add( {817} ) 
IconsPage.bas[963]  Icons.Add( {818} ) 
IconsPage.bas[964]  Icons.Add( {819} ) 
IconsPage.bas[965]  Icons.Add( {820} ) 
IconsPage.bas[966]  Icons.Add( {821} ) 
IconsPage.bas[967]  Icons.Add( {822} ) 
IconsPage.bas[968]  Icons.Add( {823} ) 
IconsPage.bas[969]  Icons.Add( {824} ) 
IconsPage.bas[970]  Icons.Add( {825} ) 
IconsPage.bas[971]  Return Icons 
IconsPage.bas[972] End Sub 
IconsPage.bas[973]  
Analysing: OtherFirebasePage.bas
OtherFirebasePage.bas[0] ﻿Type=Class 
OtherFirebasePage.bas[0] Version=4.7 
OtherFirebasePage.bas[0] ModulesStructureVersion=1 
OtherFirebasePage.bas[0] B4J=true 
OtherFirebasePage.bas[0] @EndOfDesignText@ 
OtherFirebasePage.bas[1] 'Class module 
OtherFirebasePage.bas[2] Sub Class_Globals 
OtherFirebasePage.bas[3]  Private ws As WebSocket 'ignore 
OtherFirebasePage.bas[4]  ' will hold our page information 
OtherFirebasePage.bas[5]  Public page As ABMPage 
OtherFirebasePage.bas[6]  ' page theme 
OtherFirebasePage.bas[7]  Private theme As ABMTheme 
OtherFirebasePage.bas[8]  ' to access the constants 
OtherFirebasePage.bas[9]  Private ABM As ABMaterial 'ignore 
OtherFirebasePage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
OtherFirebasePage.bas[11]  Public Name As String = {4} 
OtherFirebasePage.bas[12]  ' will hold the unique browsers window id 
OtherFirebasePage.bas[13]  Private ABMPageId As String = {5} 
OtherFirebasePage.bas[14]  
OtherFirebasePage.bas[15]  ' your own variables 
OtherFirebasePage.bas[16]  Dim myToastId As Int 
OtherFirebasePage.bas[17] End Sub 
OtherFirebasePage.bas[18]  
OtherFirebasePage.bas[19] Public Sub Initialize 
OtherFirebasePage.bas[20]  ' build the local structure IMPORTANT! 
OtherFirebasePage.bas[21]  BuildPage 
OtherFirebasePage.bas[22] End Sub 
OtherFirebasePage.bas[23]  
OtherFirebasePage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
OtherFirebasePage.bas[25]  Log( {6} ) 
OtherFirebasePage.bas[26]  ws = WebSocket1 
OtherFirebasePage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
OtherFirebasePage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
OtherFirebasePage.bas[29]  
OtherFirebasePage.bas[30]  If ABMShared.NeedsAuthorization Then 
OtherFirebasePage.bas[31]  If session.GetAttribute2( {7} , {8} ) = {9} Then 
OtherFirebasePage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {10} ) 
OtherFirebasePage.bas[33]  Return 
OtherFirebasePage.bas[34]  End If 
OtherFirebasePage.bas[35]  End If 
OtherFirebasePage.bas[36]  
OtherFirebasePage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
OtherFirebasePage.bas[38]  If page.ComesFromPageCache Then 
OtherFirebasePage.bas[39]  ' refresh the page 
OtherFirebasePage.bas[40]  page.Refresh 
OtherFirebasePage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OtherFirebasePage.bas[42]  page.FinishedLoading 
OtherFirebasePage.bas[43]  Else 
OtherFirebasePage.bas[44]  ' Prepare the page 
OtherFirebasePage.bas[45]  page.Prepare 
OtherFirebasePage.bas[46]  ' load the dynamic content 
OtherFirebasePage.bas[47]  ConnectPage 
OtherFirebasePage.bas[48]  End If 
OtherFirebasePage.bas[49]  Log(ABMPageId) 
OtherFirebasePage.bas[50] End Sub 
OtherFirebasePage.bas[51]  
OtherFirebasePage.bas[52] Private Sub WebSocket_Disconnected 
OtherFirebasePage.bas[53]  Log( {11} ) 
OtherFirebasePage.bas[54] End Sub 
OtherFirebasePage.bas[55]  
OtherFirebasePage.bas[56] Sub Page_ParseEvent(Params As Map) 
OtherFirebasePage.bas[57]  Dim eventName As String = Params.Get( {12} ) 
OtherFirebasePage.bas[58]  Dim eventParams() As String = Regex.Split( {13} ,Params.Get( {14} )) 
OtherFirebasePage.bas[59]  If eventName = {15} Then 
OtherFirebasePage.bas[60]  Log( {16} ) 
OtherFirebasePage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
OtherFirebasePage.bas[62]  Return 
OtherFirebasePage.bas[63]  End If 
OtherFirebasePage.bas[64]  If SubExists(Me, eventName) Then 
OtherFirebasePage.bas[65]  Params.Remove( {17} ) 
OtherFirebasePage.bas[66]  Params.Remove( {18} ) 
OtherFirebasePage.bas[67]  Select Case Params.Size 
OtherFirebasePage.bas[68]  Case 0 
OtherFirebasePage.bas[69]  CallSub(Me, eventName) 
OtherFirebasePage.bas[70]  Case 1 
OtherFirebasePage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
OtherFirebasePage.bas[72]  Case 2 
OtherFirebasePage.bas[73]  If Params.get(eventParams(0)) = {19} Then 
OtherFirebasePage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
OtherFirebasePage.bas[75]  CallSub2(Me, eventName, PassedTables) 
OtherFirebasePage.bas[76]  Else 
OtherFirebasePage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
OtherFirebasePage.bas[78]  End If 
OtherFirebasePage.bas[79]  Case Else 
OtherFirebasePage.bas[80]  ' cannot be called directly, to many param 
OtherFirebasePage.bas[81]  CallSub2(Me, eventName, Params) 
OtherFirebasePage.bas[82]  End Select 
OtherFirebasePage.bas[83]  End If 
OtherFirebasePage.bas[84] End Sub 
OtherFirebasePage.bas[85]  
OtherFirebasePage.bas[86] public Sub BuildTheme() 
OtherFirebasePage.bas[87]  ' start with the base theme defined in ABMShared 
OtherFirebasePage.bas[88]  theme.Initialize( {20} ) 
OtherFirebasePage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
OtherFirebasePage.bas[90]  
OtherFirebasePage.bas[91]  ' add additional themes specific for this page 
OtherFirebasePage.bas[92]  
OtherFirebasePage.bas[93] End Sub 
OtherFirebasePage.bas[94]  
OtherFirebasePage.bas[95] public Sub BuildPage() 
OtherFirebasePage.bas[96]  ' initialize the theme 
OtherFirebasePage.bas[97]  BuildTheme 
OtherFirebasePage.bas[98]  
OtherFirebasePage.bas[99]  ' initialize this page using our theme 
OtherFirebasePage.bas[100]  page.InitializeWithTheme(Name, {21} & ABMshared.AppName & {22} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
OtherFirebasePage.bas[101]  page.ShowLoader=True 
OtherFirebasePage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
OtherFirebasePage.bas[103]  page.PageTitle = {23} 
OtherFirebasePage.bas[104]  page.PageDescription = {24} 
OtherFirebasePage.bas[105]  page.PageHTMLName = {25} 
OtherFirebasePage.bas[106]  page.PageKeywords = {26} 
OtherFirebasePage.bas[107]  page.PageSiteMapPriority = {27} 
OtherFirebasePage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
OtherFirebasePage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
OtherFirebasePage.bas[110]  
OtherFirebasePage.bas[111]  ABMShared.BuildNavigationBar(page, {28} , {29} , {30} , {31} , {32} ) 
OtherFirebasePage.bas[112]  
OtherFirebasePage.bas[113]  ' create the page grid 
OtherFirebasePage.bas[114]  page.AddRows(1,True, {33} ).AddCells12(1, {34} ) 
OtherFirebasePage.bas[115]  page.AddRows(1,True, {35} ).AddCellsOS(1,0,0,0,12,6,6, {36} ) 
OtherFirebasePage.bas[116]  page.AddRows(1,True, {37} ).AddCells12(1, {38} ) 
OtherFirebasePage.bas[117]  page.AddRows(1,True, {39} ).AddCellsOS(1,0,0,0,12,6,6, {40} ) 
OtherFirebasePage.bas[118]  page.AddRows(5,True, {41} ).AddCells12(1, {42} ) 
OtherFirebasePage.bas[119]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OtherFirebasePage.bas[120]  
OtherFirebasePage.bas[121]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
OtherFirebasePage.bas[122]  'page.NeedsCodeLabel = True 
OtherFirebasePage.bas[123]  
OtherFirebasePage.bas[124]  ABMShared.BuildFooter(page) 
OtherFirebasePage.bas[125] End Sub 
OtherFirebasePage.bas[126]  
OtherFirebasePage.bas[127] Sub ConnectPage() 
OtherFirebasePage.bas[128]  'NEW 
OtherFirebasePage.bas[129]  ABMShared.ConnectNavigationBar(page) 
OtherFirebasePage.bas[130]  
OtherFirebasePage.bas[131]  ' add paragraph 
OtherFirebasePage.bas[132]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {43} , {44} )) 
OtherFirebasePage.bas[133]  
OtherFirebasePage.bas[134]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {45} , {46} )) 
OtherFirebasePage.bas[135]  
OtherFirebasePage.bas[136]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {47} , {48} )) 
OtherFirebasePage.bas[137]  
OtherFirebasePage.bas[138]  page.Cell(2,1).AddComponent(ABMShared.BuildImage(page, {49} , {50} ,1, {51} )) 
OtherFirebasePage.bas[139]  
OtherFirebasePage.bas[140]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {52} , {53} )) 
OtherFirebasePage.bas[141]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {54} , {55} )) 
OtherFirebasePage.bas[142]  
OtherFirebasePage.bas[143]  page.Cell(4,1).AddComponent(ABMShared.BuildImage(page, {56} , {57} ,1, {58} )) 
OtherFirebasePage.bas[144]  
OtherFirebasePage.bas[145]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {59} , {60} )) 
OtherFirebasePage.bas[146]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {61} , {62} )) 
OtherFirebasePage.bas[147]  
OtherFirebasePage.bas[148]  Dim code1 As String = {0} 
OtherFirebasePage.bas[152]  
OtherFirebasePage.bas[153]  page.Cell(5,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {63} , code1)) 
OtherFirebasePage.bas[154]  
OtherFirebasePage.bas[155]  page.Cell(6,1).AddComponent(ABMShared.BuildParagraph(page, {64} , {65} )) 
OtherFirebasePage.bas[156]  
OtherFirebasePage.bas[157]  Dim code2 As String = {1} 
OtherFirebasePage.bas[158]  page.Cell(6,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {66} , code2)) 
OtherFirebasePage.bas[159]  
OtherFirebasePage.bas[160]  page.Cell(7,1).AddComponent(ABMShared.BuildParagraph(page, {67} , {68} )) 
OtherFirebasePage.bas[161]  
OtherFirebasePage.bas[162]  Dim code3 As String = {2} 
OtherFirebasePage.bas[173]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {69} , code3)) 
OtherFirebasePage.bas[174]  
OtherFirebasePage.bas[175]  Dim code4 As String = {3} 
OtherFirebasePage.bas[178]  page.Cell(7,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {70} , code4)) 
OtherFirebasePage.bas[179]  
OtherFirebasePage.bas[180]  page.Cell(8,1).AddComponent(ABMShared.BuildParagraph(page, {71} , {72} )) 
OtherFirebasePage.bas[181]  
OtherFirebasePage.bas[182]  ' also add the components to the footer 
OtherFirebasePage.bas[183]  ABMShared.ConnectFooter(page) 
OtherFirebasePage.bas[184]  
OtherFirebasePage.bas[185]  page.Refresh ' IMPORTANT 
OtherFirebasePage.bas[186]  
OtherFirebasePage.bas[187]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OtherFirebasePage.bas[188]  page.FinishedLoading 'IMPORTANT 
OtherFirebasePage.bas[189]  
OtherFirebasePage.bas[190]  page.RestoreNavigationBarPosition 
OtherFirebasePage.bas[191] End Sub 
OtherFirebasePage.bas[192]  
OtherFirebasePage.bas[193] ' clicked on the navigation bar 
OtherFirebasePage.bas[194] Sub Page_NavigationbarClicked(Action As String, Value As String) 
OtherFirebasePage.bas[195]  page.SaveNavigationBarPosition 
OtherFirebasePage.bas[196]  If Action = {73} Then Return 
OtherFirebasePage.bas[197]  If Action = {74} Then 
OtherFirebasePage.bas[198]  myToastId = myToastId + 1 
OtherFirebasePage.bas[199]  page.ShowToast( {75} & myToastId, {76} , {77} , 5000) 
OtherFirebasePage.bas[200]  Return 
OtherFirebasePage.bas[201]  End If 
OtherFirebasePage.bas[202]  If Action = {78} Then 
OtherFirebasePage.bas[203]  ABMShared.LogOff(page) 
OtherFirebasePage.bas[204]  Return 
OtherFirebasePage.bas[205]  End If 
OtherFirebasePage.bas[206]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
OtherFirebasePage.bas[207] End Sub 
OtherFirebasePage.bas[208]  
OtherFirebasePage.bas[209] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
OtherFirebasePage.bas[210]  page.ws.Session.SetAttribute( {79} , {80} ) 
OtherFirebasePage.bas[211]  page.ws.Session.SetAttribute( {81} , {82} ) 
OtherFirebasePage.bas[212]  page.ws.Session.SetAttribute( {83} , {84} ) 
OtherFirebasePage.bas[213]  ABMShared.NavigateToPage(ws, ABMPageId, {85} ) 
OtherFirebasePage.bas[214] End Sub 
OtherFirebasePage.bas[215]  
Analysing: OtherFirebaseStorPage.bas
OtherFirebaseStorPage.bas[0] ﻿Type=Class 
OtherFirebaseStorPage.bas[0] Version=4.7 
OtherFirebaseStorPage.bas[0] ModulesStructureVersion=1 
OtherFirebaseStorPage.bas[0] B4J=true 
OtherFirebaseStorPage.bas[0] @EndOfDesignText@ 
OtherFirebaseStorPage.bas[1] 'Class module 
OtherFirebaseStorPage.bas[2] Sub Class_Globals 
OtherFirebaseStorPage.bas[3]  Private ws As WebSocket 'ignore 
OtherFirebaseStorPage.bas[4]  ' will hold our page information 
OtherFirebaseStorPage.bas[5]  Public page As ABMPage 
OtherFirebaseStorPage.bas[6]  ' page theme 
OtherFirebaseStorPage.bas[7]  Private theme As ABMTheme 
OtherFirebaseStorPage.bas[8]  ' to access the constants 
OtherFirebaseStorPage.bas[9]  Private ABM As ABMaterial 'ignore 
OtherFirebaseStorPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
OtherFirebaseStorPage.bas[11]  Public Name As String = {5} 
OtherFirebaseStorPage.bas[12]  ' will hold the unique browsers window id 
OtherFirebaseStorPage.bas[13]  Private ABMPageId As String = {6} 
OtherFirebaseStorPage.bas[14]  
OtherFirebaseStorPage.bas[15]  ' your own variables 
OtherFirebaseStorPage.bas[16]  Dim myToastId As Int 
OtherFirebaseStorPage.bas[17] End Sub 
OtherFirebaseStorPage.bas[18]  
OtherFirebaseStorPage.bas[19] Public Sub Initialize 
OtherFirebaseStorPage.bas[20]  ' build the local structure IMPORTANT! 
OtherFirebaseStorPage.bas[21]  BuildPage 
OtherFirebaseStorPage.bas[22] End Sub 
OtherFirebaseStorPage.bas[23]  
OtherFirebaseStorPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
OtherFirebaseStorPage.bas[25]  Log( {7} ) 
OtherFirebaseStorPage.bas[26]  ws = WebSocket1 
OtherFirebaseStorPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
OtherFirebaseStorPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
OtherFirebaseStorPage.bas[29]  
OtherFirebaseStorPage.bas[30]  If ABMShared.NeedsAuthorization Then 
OtherFirebaseStorPage.bas[31]  If session.GetAttribute2( {8} , {9} ) = {10} Then 
OtherFirebaseStorPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {11} ) 
OtherFirebaseStorPage.bas[33]  Return 
OtherFirebaseStorPage.bas[34]  End If 
OtherFirebaseStorPage.bas[35]  End If 
OtherFirebaseStorPage.bas[36]  
OtherFirebaseStorPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
OtherFirebaseStorPage.bas[38]  If page.ComesFromPageCache Then 
OtherFirebaseStorPage.bas[39]  ' refresh the page 
OtherFirebaseStorPage.bas[40]  page.Refresh 
OtherFirebaseStorPage.bas[41]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OtherFirebaseStorPage.bas[42]  page.FinishedLoading 
OtherFirebaseStorPage.bas[43]  Else 
OtherFirebaseStorPage.bas[44]  ' Prepare the page 
OtherFirebaseStorPage.bas[45]  page.Prepare 
OtherFirebaseStorPage.bas[46]  ' load the dynamic content 
OtherFirebaseStorPage.bas[47]  ConnectPage 
OtherFirebaseStorPage.bas[48]  End If 
OtherFirebaseStorPage.bas[49]  Log(ABMPageId) 
OtherFirebaseStorPage.bas[50] End Sub 
OtherFirebaseStorPage.bas[51]  
OtherFirebaseStorPage.bas[52] Private Sub WebSocket_Disconnected 
OtherFirebaseStorPage.bas[53]  Log( {12} ) 
OtherFirebaseStorPage.bas[54] End Sub 
OtherFirebaseStorPage.bas[55]  
OtherFirebaseStorPage.bas[56] Sub Page_ParseEvent(Params As Map) 
OtherFirebaseStorPage.bas[57]  Dim eventName As String = Params.Get( {13} ) 
OtherFirebaseStorPage.bas[58]  Dim eventParams() As String = Regex.Split( {14} ,Params.Get( {15} )) 
OtherFirebaseStorPage.bas[59]  If eventName = {16} Then 
OtherFirebaseStorPage.bas[60]  Log( {17} ) 
OtherFirebaseStorPage.bas[61]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
OtherFirebaseStorPage.bas[62]  Return 
OtherFirebaseStorPage.bas[63]  End If 
OtherFirebaseStorPage.bas[64]  If SubExists(Me, eventName) Then 
OtherFirebaseStorPage.bas[65]  Params.Remove( {18} ) 
OtherFirebaseStorPage.bas[66]  Params.Remove( {19} ) 
OtherFirebaseStorPage.bas[67]  Select Case Params.Size 
OtherFirebaseStorPage.bas[68]  Case 0 
OtherFirebaseStorPage.bas[69]  CallSub(Me, eventName) 
OtherFirebaseStorPage.bas[70]  Case 1 
OtherFirebaseStorPage.bas[71]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
OtherFirebaseStorPage.bas[72]  Case 2 
OtherFirebaseStorPage.bas[73]  If Params.get(eventParams(0)) = {20} Then 
OtherFirebaseStorPage.bas[74]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
OtherFirebaseStorPage.bas[75]  CallSub2(Me, eventName, PassedTables) 
OtherFirebaseStorPage.bas[76]  Else 
OtherFirebaseStorPage.bas[77]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
OtherFirebaseStorPage.bas[78]  End If 
OtherFirebaseStorPage.bas[79]  Case Else 
OtherFirebaseStorPage.bas[80]  ' cannot be called directly, to many param 
OtherFirebaseStorPage.bas[81]  CallSub2(Me, eventName, Params) 
OtherFirebaseStorPage.bas[82]  End Select 
OtherFirebaseStorPage.bas[83]  End If 
OtherFirebaseStorPage.bas[84] End Sub 
OtherFirebaseStorPage.bas[85]  
OtherFirebaseStorPage.bas[86] public Sub BuildTheme() 
OtherFirebaseStorPage.bas[87]  ' start with the base theme defined in ABMShared 
OtherFirebaseStorPage.bas[88]  theme.Initialize( {21} ) 
OtherFirebaseStorPage.bas[89]  theme.AddABMTheme(ABMShared.MyTheme) 
OtherFirebaseStorPage.bas[90]  
OtherFirebaseStorPage.bas[91]  ' add additional themes specific for this page 
OtherFirebaseStorPage.bas[92]  
OtherFirebaseStorPage.bas[93] End Sub 
OtherFirebaseStorPage.bas[94]  
OtherFirebaseStorPage.bas[95] public Sub BuildPage() 
OtherFirebaseStorPage.bas[96]  ' initialize the theme 
OtherFirebaseStorPage.bas[97]  BuildTheme 
OtherFirebaseStorPage.bas[98]  
OtherFirebaseStorPage.bas[99]  ' initialize this page using our theme 
OtherFirebaseStorPage.bas[100]  page.InitializeWithTheme(Name, {22} & ABMshared.AppName & {23} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
OtherFirebaseStorPage.bas[101]  page.ShowLoader=True 
OtherFirebaseStorPage.bas[102]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
OtherFirebaseStorPage.bas[103]  page.PageTitle = {24} 
OtherFirebaseStorPage.bas[104]  page.PageDescription = {25} 
OtherFirebaseStorPage.bas[105]  page.PageHTMLName = {26} 
OtherFirebaseStorPage.bas[106]  page.PageKeywords = {27} 
OtherFirebaseStorPage.bas[107]  page.PageSiteMapPriority = {28} 
OtherFirebaseStorPage.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
OtherFirebaseStorPage.bas[109]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
OtherFirebaseStorPage.bas[110]  
OtherFirebaseStorPage.bas[111]  ABMShared.BuildNavigationBar(page, {29} , {30} , {31} , {32} , {33} ) 
OtherFirebaseStorPage.bas[112]  
OtherFirebaseStorPage.bas[113]  ' create the page grid 
OtherFirebaseStorPage.bas[114]  page.AddRows(4,True, {34} ).AddCells12(1, {35} ) 
OtherFirebaseStorPage.bas[115]  
OtherFirebaseStorPage.bas[116]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
OtherFirebaseStorPage.bas[117]  
OtherFirebaseStorPage.bas[118]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
OtherFirebaseStorPage.bas[119]  'page.NeedsCodeLabel = True 
OtherFirebaseStorPage.bas[120]  
OtherFirebaseStorPage.bas[121]  ABMShared.BuildFooter(page) 
OtherFirebaseStorPage.bas[122] End Sub 
OtherFirebaseStorPage.bas[123]  
OtherFirebaseStorPage.bas[124] Sub ConnectPage() 
OtherFirebaseStorPage.bas[125]  'NEW 
OtherFirebaseStorPage.bas[126]  ABMShared.ConnectNavigationBar(page) 
OtherFirebaseStorPage.bas[127]  
OtherFirebaseStorPage.bas[128]  ' add paragraph 
OtherFirebaseStorPage.bas[129]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {36} , {37} )) 
OtherFirebaseStorPage.bas[130]  
OtherFirebaseStorPage.bas[131]  page.Cell(1,1).AddComponent(ABMShared.BuildHeader(page, {38} , {39} )) 
OtherFirebaseStorPage.bas[132]  
OtherFirebaseStorPage.bas[133]  Dim code1 As String = {0} 
OtherFirebaseStorPage.bas[141]  
OtherFirebaseStorPage.bas[142]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {40} , code1)) 
OtherFirebaseStorPage.bas[143]  
OtherFirebaseStorPage.bas[144]  Dim code2 As String = {1} 
OtherFirebaseStorPage.bas[156]  
OtherFirebaseStorPage.bas[157]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {41} , code2)) 
OtherFirebaseStorPage.bas[158]  
OtherFirebaseStorPage.bas[159]  Dim code3 As String = {2} 
OtherFirebaseStorPage.bas[165]  
OtherFirebaseStorPage.bas[166]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {42} , code3)) 
OtherFirebaseStorPage.bas[167]  
OtherFirebaseStorPage.bas[168]  Dim code4 As String = {3} 
OtherFirebaseStorPage.bas[181]  
OtherFirebaseStorPage.bas[182]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {43} , code4)) 
OtherFirebaseStorPage.bas[183]  
OtherFirebaseStorPage.bas[184]  Dim code5 As String = {4} 
OtherFirebaseStorPage.bas[187]  
OtherFirebaseStorPage.bas[188]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {44} , code5)) 
OtherFirebaseStorPage.bas[189]  
OtherFirebaseStorPage.bas[190]  ' also add the components to the footer 
OtherFirebaseStorPage.bas[191]  ABMShared.ConnectFooter(page) 
OtherFirebaseStorPage.bas[192]  
OtherFirebaseStorPage.bas[193]  page.Refresh ' IMPORTANT 
OtherFirebaseStorPage.bas[194]  
OtherFirebaseStorPage.bas[195]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
OtherFirebaseStorPage.bas[196]  page.FinishedLoading 'IMPORTANT 
OtherFirebaseStorPage.bas[197]  
OtherFirebaseStorPage.bas[198]  page.RestoreNavigationBarPosition 
OtherFirebaseStorPage.bas[199] End Sub 
OtherFirebaseStorPage.bas[200]  
OtherFirebaseStorPage.bas[201] ' clicked on the navigation bar 
OtherFirebaseStorPage.bas[202] Sub Page_NavigationbarClicked(Action As String, Value As String) 
OtherFirebaseStorPage.bas[203]  page.SaveNavigationBarPosition 
OtherFirebaseStorPage.bas[204]  If Action = {45} Then Return 
OtherFirebaseStorPage.bas[205]  If Action = {46} Then 
OtherFirebaseStorPage.bas[206]  myToastId = myToastId + 1 
OtherFirebaseStorPage.bas[207]  page.ShowToast( {47} & myToastId, {48} , {49} , 5000) 
OtherFirebaseStorPage.bas[208]  Return 
OtherFirebaseStorPage.bas[209]  End If 
OtherFirebaseStorPage.bas[210]  If Action = {50} Then 
OtherFirebaseStorPage.bas[211]  ABMShared.LogOff(page) 
OtherFirebaseStorPage.bas[212]  Return 
OtherFirebaseStorPage.bas[213]  End If 
OtherFirebaseStorPage.bas[214]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
OtherFirebaseStorPage.bas[215] End Sub 
OtherFirebaseStorPage.bas[216]  
OtherFirebaseStorPage.bas[217] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
OtherFirebaseStorPage.bas[218]  page.ws.Session.SetAttribute( {51} , {52} ) 
OtherFirebaseStorPage.bas[219]  page.ws.Session.SetAttribute( {53} , {54} ) 
OtherFirebaseStorPage.bas[220]  page.ws.Session.SetAttribute( {55} , {56} ) 
OtherFirebaseStorPage.bas[221]  ABMShared.NavigateToPage(ws, ABMPageId, {57} ) 
OtherFirebaseStorPage.bas[222] End Sub 
Analysing: TestClassForAlain.bas
TestClassForAlain.bas[0] ﻿Type=Class 
TestClassForAlain.bas[0] Version=4.7 
TestClassForAlain.bas[0] ModulesStructureVersion=1 
TestClassForAlain.bas[0] B4J=true 
TestClassForAlain.bas[0] @EndOfDesignText@ 
TestClassForAlain.bas[1] 'Class module 
TestClassForAlain.bas[2] Sub Class_Globals 
TestClassForAlain.bas[3]  Dim someVar As String 'ignore 
TestClassForAlain.bas[4] End Sub 
TestClassForAlain.bas[5]  
TestClassForAlain.bas[6] 'Initializes the object. You can add parameters to this method if needed. 
TestClassForAlain.bas[7] Public Sub Initialize 
TestClassForAlain.bas[8]  
TestClassForAlain.bas[9] End Sub 
Analysing: TestPage.bas
TestPage.bas[0] ﻿Type=Class 
TestPage.bas[0] Version=4.7 
TestPage.bas[0] ModulesStructureVersion=1 
TestPage.bas[0] B4J=true 
TestPage.bas[0] @EndOfDesignText@ 
TestPage.bas[1] 'Class module 
TestPage.bas[2] Sub Class_Globals 
TestPage.bas[3]  Private ws As WebSocket 'ignore 
TestPage.bas[4]  ' will hold our page information 
TestPage.bas[5]  Public page As ABMPage 
TestPage.bas[6]  ' page theme 
TestPage.bas[7]  Private theme As ABMTheme 
TestPage.bas[8]  ' to access the constants 
TestPage.bas[9]  Private ABM As ABMaterial 'ignore 
TestPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
TestPage.bas[11]  Public Name As String = {1} 
TestPage.bas[12]  ' will hold the unique browsers window id 
TestPage.bas[13]  Private ABMPageId As String = {2} 
TestPage.bas[14]  
TestPage.bas[15]  ' your own variables 
TestPage.bas[16]  
TestPage.bas[17] End Sub 
TestPage.bas[18]  
TestPage.bas[19] 'Initializes the object. You can add parameters to this method if needed. 
TestPage.bas[20] Public Sub Initialize 
TestPage.bas[21]  ' build the local structure IMPORTANT! 
TestPage.bas[22]  
TestPage.bas[23]  BuildPage 
TestPage.bas[24]  
TestPage.bas[25] End Sub 
TestPage.bas[26]  
TestPage.bas[27] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
TestPage.bas[28]  Log( {3} ) 
TestPage.bas[29]  ws = WebSocket1 
TestPage.bas[30]  ABMPageId = ABM.GetPageID(page, Name,ws) 
TestPage.bas[31]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
TestPage.bas[32]  
TestPage.bas[33]  If ABMShared.NeedsAuthorization Then 
TestPage.bas[34]  If session.GetAttribute2( {4} , {5} ) = {6} Then 
TestPage.bas[35]  ABMShared.NavigateToPage(ws, ABMPageId, {7} ) 
TestPage.bas[36]  Return 
TestPage.bas[37]  End If 
TestPage.bas[38]  End If 
TestPage.bas[39]  
TestPage.bas[40]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
TestPage.bas[41]  If page.ComesFromPageCache Then 
TestPage.bas[42]  ' refresh the page 
TestPage.bas[43]  page.Refresh 
TestPage.bas[44]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
TestPage.bas[45]  page.FinishedLoading 
TestPage.bas[46]  Else 
TestPage.bas[47]  ' Prepare the page 
TestPage.bas[48]  page.Prepare 
TestPage.bas[49]  ' load the dynamic content 
TestPage.bas[50]  ConnectPage 
TestPage.bas[51]  End If 
TestPage.bas[52]  Log(ABMPageId) 
TestPage.bas[53] End Sub 
TestPage.bas[54]  
TestPage.bas[55] Private Sub WebSocket_Disconnected 
TestPage.bas[56]  Log( {8} ) 
TestPage.bas[57] End Sub 
TestPage.bas[58]  
TestPage.bas[59] Sub Page_ParseEvent(Params As Map) 
TestPage.bas[60]  Dim eventName As String = Params.Get( {9} ) 
TestPage.bas[61]  Dim eventParams() As String = Regex.Split( {10} ,Params.Get( {11} )) 
TestPage.bas[62]  If eventName = {12} Then 
TestPage.bas[63]  Log( {13} ) 
TestPage.bas[64]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
TestPage.bas[65]  Return 
TestPage.bas[66]  End If 
TestPage.bas[67]  If SubExists(Me, eventName) Then 
TestPage.bas[68]  Params.Remove( {14} ) 
TestPage.bas[69]  Params.Remove( {15} ) 
TestPage.bas[70]  Select Case Params.Size 
TestPage.bas[71]  Case 0 
TestPage.bas[72]  CallSub(Me, eventName) 
TestPage.bas[73]  Case 1 
TestPage.bas[74]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
TestPage.bas[75]  Case 2 
TestPage.bas[76]  If Params.get(eventParams(0)) = {16} Then 
TestPage.bas[77]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
TestPage.bas[78]  CallSub2(Me, eventName, PassedTables) 
TestPage.bas[79]  Else 
TestPage.bas[80]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
TestPage.bas[81]  End If 
TestPage.bas[82]  Case Else 
TestPage.bas[83]  ' cannot be called directly, to many param 
TestPage.bas[84]  CallSub2(Me, eventName, Params) 
TestPage.bas[85]  End Select 
TestPage.bas[86]  End If 
TestPage.bas[87] End Sub 
TestPage.bas[88]  
TestPage.bas[89] public Sub BuildTheme() 
TestPage.bas[90]  ' start with the base theme defined in ABMShared 
TestPage.bas[91]  theme.Initialize( {17} ) 
TestPage.bas[92]  theme.AddABMTheme(ABMShared.MyTheme) 
TestPage.bas[93]  
TestPage.bas[94]  theme.AddContainerTheme( {18} ) 
TestPage.bas[95]  theme.Container( {19} ).BackColor = ABM.COLOR_TEAL 
TestPage.bas[96]  theme.Container( {20} ).BackColorIntensity = ABM.INTENSITY_ACCENT3 
TestPage.bas[97]  
TestPage.bas[98]  theme.AddLabelTheme( {21} ) 
TestPage.bas[99]  theme.Label( {22} ).ForeColor = ABM.COLOR_WHITE 
TestPage.bas[100]  
TestPage.bas[101]  ' add additional themes specific for this page 
TestPage.bas[102]  theme.AddButtonTheme( {23} ) 
TestPage.bas[103]  theme.Button( {24} ).BackColor = ABM.COLOR_LIGHTBLUE 
TestPage.bas[104]  
TestPage.bas[105]  theme.AddButtonTheme( {25} ) 
TestPage.bas[106]  theme.Button( {26} ).BackColor = ABM.COLOR_RED 
TestPage.bas[107]  
TestPage.bas[108]  theme.AddButtonTheme( {27} ) 
TestPage.bas[109]  theme.Button( {28} ).BackColor = ABM.COLOR_GREEN 
TestPage.bas[110]  
TestPage.bas[111]  theme.AddButtonTheme( {29} ) 
TestPage.bas[112]  theme.Button( {30} ).BackColor = ABM.COLOR_YELLOW 
TestPage.bas[113] End Sub 
TestPage.bas[114]  
TestPage.bas[115] public Sub BuildPage() 
TestPage.bas[116]  ' initialize the theme 
TestPage.bas[117]  BuildTheme 
TestPage.bas[118]  
TestPage.bas[119]  ' initialize this page using our theme 
TestPage.bas[120]  page.InitializeWithTheme(Name, {31} & ABMshared.AppName & {32} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
TestPage.bas[121]  page.ShowLoader=True 
TestPage.bas[122]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
TestPage.bas[123]  page.PageTitle = {33} 
TestPage.bas[124]  page.PageDescription = {34} 
TestPage.bas[125]  page.PageHTMLName = {35} 
TestPage.bas[126]  page.PageKeywords = {36} 
TestPage.bas[127]  page.PageSiteMapPriority = {37} 
TestPage.bas[128]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
TestPage.bas[129]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
TestPage.bas[130]  
TestPage.bas[131]  ' create the page grid 
TestPage.bas[132]  page.AddRows(3,True, {38} ).AddCells12(1, {39} ) 
TestPage.bas[133]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
TestPage.bas[134]  
TestPage.bas[135]  
TestPage.bas[136]  
TestPage.bas[137]  Dim table As ABMTable 
TestPage.bas[138]  table.Initialize(page, {40} ,True,False,True, {41} ) 
TestPage.bas[139]  table.SetHeaders(Array As String( {42} )) 
TestPage.bas[140]  
TestPage.bas[141]  Dim player As ABMAudioPlayer 
TestPage.bas[142]  player.Initialize(page, {43} ,True,False,False, {44} ) 
TestPage.bas[143]  
TestPage.bas[144]  Dim list As List 
TestPage.bas[145]  list.Initialize 
TestPage.bas[146]  list.Add(player) 
TestPage.bas[147]  
TestPage.bas[148]  Dim song As ABMAudioPlayerSong 
TestPage.bas[149]  song.Initialize( {45} ) 
TestPage.bas[150]  player.LoadSingleSong(song) 
TestPage.bas[151]  
TestPage.bas[152]  table.AddRow( {46} ,list) 
TestPage.bas[153]  
TestPage.bas[154]  page.Cell(1,1).AddComponent(table) 
TestPage.bas[155]  
TestPage.bas[156]  ' create a floating container MUST be added in BuildPage! 
TestPage.bas[157]  Dim floatingcont1 As ABMContainer 
TestPage.bas[158]  floatingcont1.Initialize(page, {47} , {48} ) 
TestPage.bas[159]  floatingcont1.AddRowsM(1,False,0,0, {49} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {50} ) 
TestPage.bas[160]  floatingcont1.BuildGrid ' IMPORTANT 
TestPage.bas[161]  page.AddFloatingContainer(floatingcont1, ABM.FLOATING_FROMTOP, {51} ) 
TestPage.bas[162]  
TestPage.bas[163]  Dim floatingcont2 As ABMContainer 
TestPage.bas[164]  floatingcont2.Initialize(page, {52} , {53} ) 
TestPage.bas[165]  floatingcont2.AddRowsM(1,False,0,0, {54} ).AddCellsOSMP(1,0,0,0,12,12,12,0,0,0,0, {55} ) 
TestPage.bas[166]  floatingcont2.BuildGrid ' IMPORTANT 
TestPage.bas[167]  page.AddFloatingContainerHideOnScroll(floatingcont2, ABM.FLOATING_FROMBOTTOM, {56} ,0.2,1.0) 
TestPage.bas[168]  
TestPage.bas[169]  ABMShared.BuildFooterFixed(page) 
TestPage.bas[170] End Sub 
TestPage.bas[171]  
TestPage.bas[172] public Sub ConnectPage() 
TestPage.bas[173]  ' get the floating container 
TestPage.bas[174]  Dim floatingcont1 As ABMContainer 
TestPage.bas[175]  floatingcont1 = page.FloatingContainer( {57} ) 
TestPage.bas[176]  
TestPage.bas[177]  ' create menu container 
TestPage.bas[178]  Dim cont2 As ABMContainer 
TestPage.bas[179]  cont2.Initialize(page, {58} , {59} ) 
TestPage.bas[180]  cont2.AddRows(1,False, {60} ).AddCellsOS(1,0,0,0,6,2,1, {61} ).AddCellsOS(1,0,0,0,1,7,9, {62} ).AddCellsOS(1,0,0,0,5,3,2, {63} ) 
TestPage.bas[181]  cont2.BuildGrid 
TestPage.bas[182]  
TestPage.bas[183]  cont2.Cell(1,1).MarginLeft = {64} 
TestPage.bas[184]  cont2.Cell(1,1).Margintop = {65} 
TestPage.bas[185]  
TestPage.bas[186]  cont2.Cell(1,2).MarginLeft = {66} ' to compensate for the +5px in cell 1 
TestPage.bas[187]  
TestPage.bas[188]  cont2.Cell(1,3).Margintop = {67} 
TestPage.bas[189]  
TestPage.bas[190]  Dim img As ABMImage 
TestPage.bas[191]  img.Initialize(page, {68} , {69} ,1) 
TestPage.bas[192]  cont2.Cell(1,1).AddComponent(img) 
TestPage.bas[193]  
TestPage.bas[194]  Dim lbl As ABMLabel 
TestPage.bas[195]  lbl.Initialize(page, {70} , {71} , ABM.SIZE_H4, False, {72} ) 
TestPage.bas[196]  lbl.Visibility = ABM.VISIBILITY_HIDE_ON_SMALL_ONLY 
TestPage.bas[197]  cont2.Cell(1,2).AddComponent(lbl) 
TestPage.bas[198]  
TestPage.bas[199]  Dim img2 As ABMImage 
TestPage.bas[200]  img2.Initialize(page, {73} , {74} ,1) 
TestPage.bas[201]  img2.SetFixedSize(48,36) 
TestPage.bas[202]  cont2.Cell(1,3).AddComponent(img2) 
TestPage.bas[203]  
TestPage.bas[204]  Dim img3 As ABMImage 
TestPage.bas[205]  img3.Initialize(page, {75} , {76} ,1) 
TestPage.bas[206]  img3.SetFixedSize(48,36) 
TestPage.bas[207]  cont2.Cell(1,3).AddComponent(img3) 
TestPage.bas[208]  
TestPage.bas[209]  Dim img4 As ABMImage 
TestPage.bas[210]  img4.Initialize(page, {77} , {78} ,1) 
TestPage.bas[211]  img4.SetFixedSize(48,36) 
TestPage.bas[212]  cont2.Cell(1,3).AddComponent(img4) 
TestPage.bas[213]  
TestPage.bas[214]  ' add it to the floating container 
TestPage.bas[215]  floatingcont1.Cell(1,1).AddComponent(cont2) 
TestPage.bas[216]  
TestPage.bas[217]  page.Cell(1,1).PaddingTop = {79} 
TestPage.bas[218]  
TestPage.bas[219]  Dim biglabel As ABMLabel 
TestPage.bas[220]  biglabel.Initialize(page, {80} , ABM.Util.paragraphs(50,True), ABM.SIZE_PARAGRAPH, True, {81} ) 
TestPage.bas[221]  page.Cell(2,1).AddComponent(biglabel) 
TestPage.bas[222]  
TestPage.bas[223]  Dim floatingcont2 As ABMContainer 
TestPage.bas[224]  floatingcont2 = page.FloatingContainer( {82} ) 
TestPage.bas[225]  
TestPage.bas[226]  Dim cont3 As ABMContainer 
TestPage.bas[227]  cont3.Initialize(page, {83} , {84} ) 
TestPage.bas[228]  cont3.AddRows(1,False, {85} ).AddCellsOS(1,10,10,10,2,2,2, {86} ) 
TestPage.bas[229]  cont3.BuildGrid 
TestPage.bas[230]  
TestPage.bas[231]  Dim acb1 As ABMActionButton 
TestPage.bas[232]  acb1.Initialize(page, {87} , {88} , {89} , {90} ) 
TestPage.bas[233]  acb1.MainButton.size = ABM.BUTTONSIZE_LARGE 
TestPage.bas[234]  
TestPage.bas[235]  ' the sub buttons 
TestPage.bas[236]  Dim btn1 As ABMButton 
TestPage.bas[237]  btn1.InitializeFloating(page, {91} , {92} , {93} ) 
TestPage.bas[238]  acb1.AddMenuButton(btn1) 
TestPage.bas[239]  Dim btn2 As ABMButton 
TestPage.bas[240]  btn2.InitializeFloating(page, {94} , {95} , {96} ) 
TestPage.bas[241]  acb1.AddMenuButton(btn2) 
TestPage.bas[242]  Dim btn3 As ABMButton 
TestPage.bas[243]  btn3.InitializeFloating(page, {97} , {98} , {99} ) 
TestPage.bas[244]  acb1.AddMenuButton(btn3) 
TestPage.bas[245]  
TestPage.bas[246]  ' add to cell 
TestPage.bas[247]  cont3.Cell(1,1).AddComponent(acb1) 
TestPage.bas[248]  
TestPage.bas[249]  ' add it to the floating container 
TestPage.bas[250]  floatingcont2.Cell(1,1).AddComponent(cont3) 
TestPage.bas[251]  
TestPage.bas[252]  ' also add the components to the footer 
TestPage.bas[253]  ABMShared.ConnectFooterFixed(page) 
TestPage.bas[254]  
TestPage.bas[255]  page.Refresh ' IMPORTANT! 
TestPage.bas[256]  
TestPage.bas[257]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
TestPage.bas[258]  page.FinishedLoading 'IMPORTANT 
TestPage.bas[259]  
TestPage.bas[260]  page.RestoreNavigationBarPosition 
TestPage.bas[261]  
TestPage.bas[262] ' Dim script As String = {0} ( {100} ).animate({ scrollTop: $('#${img.ID}').offset().top }, 1000);"$ 
TestPage.bas[263] ' page.ws.Eval(script, Null) 
TestPage.bas[264] ' page.ws.Flush 
TestPage.bas[265] End Sub 
TestPage.bas[266]  
TestPage.bas[267] ' clicked on the navigation bar 
TestPage.bas[268] Sub Page_NavigationbarClicked(Action As String, Value As String) 
TestPage.bas[269]  page.SaveNavigationBarPosition 
TestPage.bas[270]  
TestPage.bas[271]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
TestPage.bas[272] End Sub 
TestPage.bas[273]  
TestPage.bas[274] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
TestPage.bas[275]  page.ws.Session.SetAttribute( {101} , {102} ) 
TestPage.bas[276]  page.ws.Session.SetAttribute( {103} , {104} ) 
TestPage.bas[277]  page.ws.Session.SetAttribute( {105} , {106} ) 
TestPage.bas[278]  ABMShared.NavigateToPage(ws, ABMPageId, {107} ) 
TestPage.bas[279] End Sub 
TestPage.bas[280]  
Analysing: ThemesPage.bas
ThemesPage.bas[0] ﻿Type=Class 
ThemesPage.bas[0] Version=4.7 
ThemesPage.bas[0] ModulesStructureVersion=1 
ThemesPage.bas[0] B4J=true 
ThemesPage.bas[0] @EndOfDesignText@ 
ThemesPage.bas[1] 'Class module 
ThemesPage.bas[2] Sub Class_Globals 
ThemesPage.bas[3]  Private ws As WebSocket 'ignore 
ThemesPage.bas[4]  ' will hold our page information 
ThemesPage.bas[5]  Public page As ABMPage 
ThemesPage.bas[6]  ' page theme 
ThemesPage.bas[7]  Private theme As ABMTheme 
ThemesPage.bas[8]  ' to access the constants 
ThemesPage.bas[9]  Private ABM As ABMaterial 'ignore 
ThemesPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ThemesPage.bas[11]  Public Name As String = {2} 
ThemesPage.bas[12]  ' will hold the unique browsers window id 
ThemesPage.bas[13]  Private ABMPageId As String = {3} 
ThemesPage.bas[14]  
ThemesPage.bas[15]  ' your own variables 
ThemesPage.bas[16]  Dim myToastId As Int 
ThemesPage.bas[17]  Dim Colors As List 
ThemesPage.bas[18]  Dim Intensities As List 
ThemesPage.bas[19]  Dim Zdepths As List 
ThemesPage.bas[20]  Dim RowTeller As Int 
ThemesPage.bas[21] End Sub 
ThemesPage.bas[22]  
ThemesPage.bas[23] 'Initializes the object. You can add parameters to this method if needed. 
ThemesPage.bas[24] Public Sub Initialize 
ThemesPage.bas[25]  ' build the local structure IMPORTANT! 
ThemesPage.bas[26]  BuildPage 
ThemesPage.bas[27] End Sub 
ThemesPage.bas[28]  
ThemesPage.bas[29] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ThemesPage.bas[30]  Log( {4} ) 
ThemesPage.bas[31]  ws = WebSocket1 
ThemesPage.bas[32]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ThemesPage.bas[33]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ThemesPage.bas[34]  
ThemesPage.bas[35]  If ABMShared.NeedsAuthorization Then 
ThemesPage.bas[36]  If session.GetAttribute2( {5} , {6} ) = {7} Then 
ThemesPage.bas[37]  ABMShared.NavigateToPage(ws, ABMPageId, {8} ) 
ThemesPage.bas[38]  Return 
ThemesPage.bas[39]  End If 
ThemesPage.bas[40]  End If 
ThemesPage.bas[41]  
ThemesPage.bas[42]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ThemesPage.bas[43]  If page.ComesFromPageCache Then 
ThemesPage.bas[44]  ' refresh the page 
ThemesPage.bas[45]  page.Refresh 
ThemesPage.bas[46]  ' because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ThemesPage.bas[47]  page.FinishedLoading 
ThemesPage.bas[48]  Else 
ThemesPage.bas[49]  ' Prepare the page 
ThemesPage.bas[50]  page.Prepare 
ThemesPage.bas[51]  ' load the dynamic content 
ThemesPage.bas[52]  ConnectPage 
ThemesPage.bas[53]  End If 
ThemesPage.bas[54]  Log(ABMPageId) 
ThemesPage.bas[55] End Sub 
ThemesPage.bas[56]  
ThemesPage.bas[57] Private Sub WebSocket_Disconnected 
ThemesPage.bas[58]  Log( {9} ) 
ThemesPage.bas[59] End Sub 
ThemesPage.bas[60]  
ThemesPage.bas[61] Sub Page_ParseEvent(Params As Map) 
ThemesPage.bas[62]  Dim eventName As String = Params.Get( {10} ) 
ThemesPage.bas[63]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
ThemesPage.bas[64]  If eventName = {13} Then 
ThemesPage.bas[65]  Log( {14} ) 
ThemesPage.bas[66]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ThemesPage.bas[67]  Return 
ThemesPage.bas[68]  End If 
ThemesPage.bas[69]  If SubExists(Me, eventName) Then 
ThemesPage.bas[70]  Params.Remove( {15} ) 
ThemesPage.bas[71]  Params.Remove( {16} ) 
ThemesPage.bas[72]  Select Case Params.Size 
ThemesPage.bas[73]  Case 0 
ThemesPage.bas[74]  CallSub(Me, eventName) 
ThemesPage.bas[75]  Case 1 
ThemesPage.bas[76]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ThemesPage.bas[77]  Case 2 
ThemesPage.bas[78]  If Params.get(eventParams(0)) = {17} Then 
ThemesPage.bas[79]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ThemesPage.bas[80]  CallSub2(Me, eventName, PassedTables) 
ThemesPage.bas[81]  Else 
ThemesPage.bas[82]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ThemesPage.bas[83]  End If 
ThemesPage.bas[84]  Case Else 
ThemesPage.bas[85]  ' cannot be called directly, to many param 
ThemesPage.bas[86]  CallSub2(Me, eventName, Params) 
ThemesPage.bas[87]  End Select 
ThemesPage.bas[88]  End If 
ThemesPage.bas[89] End Sub 
ThemesPage.bas[90]  
ThemesPage.bas[91] public Sub BuildTheme() 
ThemesPage.bas[92]  ' start with the base theme defined in ABMShared 
ThemesPage.bas[93]  theme.Initialize( {18} ) 
ThemesPage.bas[94]  theme.AddABMTheme(ABMShared.MyTheme) 
ThemesPage.bas[95]  
ThemesPage.bas[96]  ' add additional themes specific for this page 
ThemesPage.bas[97]  Colors.Initialize2(Array As String(ABM.COLOR_RED, ABM.COLOR_PINK, ABM.COLOR_PURPLE, ABM.COLOR_DEEPPURPLE, ABM.COLOR_INDIGO, ABM.COLOR_BLUE, ABM.COLOR_LIGHTBLUE, ABM.COLOR_CYAN, ABM.COLOR_TEAL, ABM.COLOR_GREEN, ABM.COLOR_LIGHTGREEN, ABM.COLOR_LIME, ABM.COLOR_YELLOW, ABM.COLOR_AMBER, ABM.COLOR_ORANGE, ABM.COLOR_DEEPORANGE, ABM.COLOR_BROWN, ABM.COLOR_GREY, ABM.COLOR_BLUEGREY)) 
ThemesPage.bas[98]  Intensities.Initialize2(Array As String(ABM.INTENSITY_LIGHTEN5, ABM.INTENSITY_LIGHTEN4,ABM.INTENSITY_LIGHTEN3,ABM.INTENSITY_LIGHTEN2,ABM.INTENSITY_LIGHTEN1,ABM.INTENSITY_NORMAL, ABM.INTENSITY_DARKEN1, ABM.INTENSITY_DARKEN2,ABM.INTENSITY_DARKEN3,ABM.INTENSITY_DARKEN4,ABM.INTENSITY_ACCENT1,ABM.INTENSITY_ACCENT2,ABM.INTENSITY_ACCENT3,ABM.INTENSITY_ACCENT4)) 
ThemesPage.bas[99]  
ThemesPage.bas[100]  theme.AddTableTheme( {19} ) 
ThemesPage.bas[101]  For i = 0 To 15 
ThemesPage.bas[102]  For j = 0 To 13 
ThemesPage.bas[103]  theme.Table( {20} ).AddCellTheme(Colors.Get(i) & j) 
ThemesPage.bas[104]  theme.Table( {21} ).Cell(Colors.Get(i) & j).BackColor = Colors.Get(i) 
ThemesPage.bas[105]  theme.Table( {22} ).Cell(Colors.Get(i) & j).BackColorIntensity = Intensities.Get(j) 
ThemesPage.bas[106]  Next 
ThemesPage.bas[107]  Next 
ThemesPage.bas[108]  For i = 16 To 18 
ThemesPage.bas[109]  For j = 0 To 9 
ThemesPage.bas[110]  theme.Table( {23} ).AddCellTheme(Colors.Get(i) & j) 
ThemesPage.bas[111]  theme.Table( {24} ).Cell(Colors.Get(i) & j).BackColor = Colors.Get(i) 
ThemesPage.bas[112]  theme.Table( {25} ).Cell(Colors.Get(i) & j).BackColorIntensity = Intensities.Get(j) 
ThemesPage.bas[113]  Next 
ThemesPage.bas[114]  Next 
ThemesPage.bas[115]  theme.Table( {26} ).AddCellTheme( {27} ) 
ThemesPage.bas[116]  theme.Table( {28} ).Cell( {29} ).BackColor = ABM.COLOR_BLACK 
ThemesPage.bas[117]  theme.Table( {30} ).AddCellTheme( {31} ) 
ThemesPage.bas[118]  theme.Table( {32} ).Cell( {33} ).BackColor = ABM.COLOR_WHITE 
ThemesPage.bas[119]  theme.Table( {34} ).AddCellTheme( {35} ) 
ThemesPage.bas[120]  theme.Table( {36} ).Cell( {37} ).BackColor = ABM.COLOR_TRANSPARENT 
ThemesPage.bas[121]  
ThemesPage.bas[122]  theme.AddLabelTheme( {38} ) 
ThemesPage.bas[123]  theme.Label( {39} ).ForeColor = ABM.COLOR_BLACK 
ThemesPage.bas[124]  theme.AddLabelTheme( {40} ) 
ThemesPage.bas[125]  theme.Label( {41} ).ForeColor = ABM.COLOR_WHITE 
ThemesPage.bas[126]  
ThemesPage.bas[127]  Zdepths.Initialize2(Array As String(ABM.ZDEPTH_REMOVE, ABM.ZDEPTH_1, ABM.ZDEPTH_2, ABM.ZDEPTH_3, ABM.ZDEPTH_4, ABM.ZDEPTH_5)) 
ThemesPage.bas[128]  
ThemesPage.bas[129]  For i = 0 To 5 
ThemesPage.bas[130]  theme.AddLabelTheme( {42} & i) 
ThemesPage.bas[131]  theme.Label( {43} & i).ZDepth = Zdepths.get(i) 
ThemesPage.bas[132]  theme.Label( {44} & i).BackColor = ABM.COLOR_WHITE 
ThemesPage.bas[133]  Next 
ThemesPage.bas[134]  
ThemesPage.bas[135] End Sub 
ThemesPage.bas[136]  
ThemesPage.bas[137] public Sub BuildPage() 
ThemesPage.bas[138]  ' initialize the theme 
ThemesPage.bas[139]  BuildTheme 
ThemesPage.bas[140]  
ThemesPage.bas[141]  ' initialize this page using our theme 
ThemesPage.bas[142]  page.InitializeWithTheme(Name, {45} & ABMshared.AppName & {46} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ThemesPage.bas[143]  page.ShowLoader=True 
ThemesPage.bas[144]  page.ShowLoaderType=ABM.LOADER_TYPE_MANUAL ' NEW 
ThemesPage.bas[145]  page.PageTitle = {47} 
ThemesPage.bas[146]  page.PageDescription = {48} 
ThemesPage.bas[147]  page.PageHTMLName = {49} 
ThemesPage.bas[148]  page.PageKeywords = {50} 
ThemesPage.bas[149]  page.PageSiteMapPriority = {51} 
ThemesPage.bas[150]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_MONTHLY 
ThemesPage.bas[151]  page.UseGoogleAnalytics(ABMShared.TrackingID, Null) ' IMPORTANT Change this to your own TrackingID !!!!!!! 
ThemesPage.bas[152]  
ThemesPage.bas[153]  ABMShared.BuildNavigationBar(page, {52} , {53} , {54} , {55} , {56} ) 
ThemesPage.bas[154]  
ThemesPage.bas[155]  ' create the page grid 
ThemesPage.bas[156]  page.AddRows(5,True, {57} ).AddCells12(1, {58} ) 
ThemesPage.bas[157]  page.AddRows(7,True, {59} ).AddCellsOS(3,0,0,0,4,4,4, {60} ) 
ThemesPage.bas[158]  page.AddRows(4,True, {61} ).AddCells12(1, {62} ) 
ThemesPage.bas[159]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ThemesPage.bas[160]  'page.ShowGridInfo = true 
ThemesPage.bas[161]  
ThemesPage.bas[162]  ' because we use an ABMCodeLabel, but it is not defined in this class but in ABMShared, we have to tell it manually to the page 
ThemesPage.bas[163]  'page.NeedsCodeLabel = True 
ThemesPage.bas[164]  
ThemesPage.bas[165]  ABMShared.BuildFooter(page) 
ThemesPage.bas[166] End Sub 
ThemesPage.bas[167]  
ThemesPage.bas[168] Sub ConnectPage() 
ThemesPage.bas[169]  'NEW 
ThemesPage.bas[170]  ABMShared.ConnectNavigationBar(page) 
ThemesPage.bas[171]  
ThemesPage.bas[172]  ' add paragraph 
ThemesPage.bas[173]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {63} , {64} ) ) 
ThemesPage.bas[174]  ' add paragraph 
ThemesPage.bas[175]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {65} , {146} )) 
ThemesPage.bas[176]  ' add paragraph 
ThemesPage.bas[177]  page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {71} , {72} )) 
ThemesPage.bas[178]  
ThemesPage.bas[179]  Dim code As String 
ThemesPage.bas[180]  code = {0} 
ThemesPage.bas[236]  
ThemesPage.bas[237]  page.Cell(2,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {73} , code)) 
ThemesPage.bas[238]  
ThemesPage.bas[239]  ' add paragraph 
ThemesPage.bas[240]  page.Cell(3,1).AddComponent(ABMShared.BuildParagraph(page, {74} , {75} )) 
ThemesPage.bas[241]  
ThemesPage.bas[242]  code = {1} 
ThemesPage.bas[277]  
ThemesPage.bas[278]  page.Cell(4,1).AddComponent(ABMShared.BuildCodeBlockFromSmartString(page, {76} , code)) 
ThemesPage.bas[279]  
ThemesPage.bas[280]  ' add a header label 
ThemesPage.bas[281]  page.Cell(5,1).AddComponent(ABMShared.BuildHeader(page, {77} , {78} )) 
ThemesPage.bas[282]  ' add paragraph 
ThemesPage.bas[283]  page.Cell(5,1).AddComponent(ABMShared.BuildParagraph(page, {79} , {80} )) 
ThemesPage.bas[284]  
ThemesPage.bas[285]  page.Cell(6,1).AddComponent(BuildColorTable16(ABM.COLOR_RED)) 
ThemesPage.bas[286]  page.Cell(6,2).AddComponent(BuildColorTable16(ABM.COLOR_PINK)) 
ThemesPage.bas[287]  page.Cell(6,3).AddComponent(BuildColorTable16(ABM.COLOR_PURPLE)) 
ThemesPage.bas[288]  
ThemesPage.bas[289]  page.Cell(7,1).AddComponent(BuildColorTable16(ABM.COLOR_DEEPPURPLE)) 
ThemesPage.bas[290]  page.Cell(7,2).AddComponent(BuildColorTable16(ABM.COLOR_INDIGO)) 
ThemesPage.bas[291]  page.Cell(7,3).AddComponent(BuildColorTable16(ABM.COLOR_BLUE)) 
ThemesPage.bas[292]  
ThemesPage.bas[293]  page.Cell(8,1).AddComponent(BuildColorTable16(ABM.COLOR_LIGHTBLUE)) 
ThemesPage.bas[294]  page.Cell(8,2).AddComponent(BuildColorTable16(ABM.COLOR_CYAN)) 
ThemesPage.bas[295]  page.Cell(8,3).AddComponent(BuildColorTable16(ABM.COLOR_TEAL)) 
ThemesPage.bas[296]  
ThemesPage.bas[297]  page.Cell(9,1).AddComponent(BuildColorTable16(ABM.COLOR_GREEN)) 
ThemesPage.bas[298]  page.Cell(9,2).AddComponent(BuildColorTable16(ABM.COLOR_LIGHTGREEN)) 
ThemesPage.bas[299]  page.Cell(9,3).AddComponent(BuildColorTable16(ABM.COLOR_LIME)) 
ThemesPage.bas[300]  
ThemesPage.bas[301]  page.Cell(10,1).AddComponent(BuildColorTable16(ABM.COLOR_YELLOW)) 
ThemesPage.bas[302]  page.Cell(10,2).AddComponent(BuildColorTable16(ABM.COLOR_AMBER)) 
ThemesPage.bas[303]  page.Cell(10,3).AddComponent(BuildColorTable16(ABM.COLOR_ORANGE)) 
ThemesPage.bas[304]  
ThemesPage.bas[305]  page.Cell(11,1).AddComponent(BuildColorTable16(ABM.COLOR_DEEPORANGE)) 
ThemesPage.bas[306]  page.Cell(11,2).AddComponent(BuildColorTable12(ABM.COLOR_BROWN)) 
ThemesPage.bas[307]  page.Cell(11,3).AddComponent(BuildColorTable12(ABM.COLOR_GREY)) 
ThemesPage.bas[308]  
ThemesPage.bas[309]  page.Cell(12,1).AddComponent(BuildColorTable12(ABM.COLOR_BLUEGREY)) 
ThemesPage.bas[310]  page.Cell(12,2).AddComponent(BuildColorTableOther) 
ThemesPage.bas[311]  
ThemesPage.bas[312]  ' add paragraph 
ThemesPage.bas[313]  page.Cell(13,1).AddComponent(ABMShared.BuildParagraph(page, {81} , {82} )) 
ThemesPage.bas[314]  
ThemesPage.bas[315]  Dim lbl As ABMLabel 
ThemesPage.bas[316]  lbl.Initialize(page, {83} , {84} ,ABM.SIZE_PARAGRAPH, True, {85} ) 
ThemesPage.bas[317]  page.Cell(14,1).AddComponent(lbl) 
ThemesPage.bas[318]  For i = 1 To 5 
ThemesPage.bas[319]  Dim lbl As ABMLabel 
ThemesPage.bas[320]  lbl.Initialize(page, {86} & i, {87} & i ,ABM.SIZE_PARAGRAPH, True, {88} & i) 
ThemesPage.bas[321]  page.Cell(14,1).AddComponent(lbl) 
ThemesPage.bas[322]  Next 
ThemesPage.bas[323]  
ThemesPage.bas[324]  ' add paragraph 
ThemesPage.bas[325]  page.Cell(15,1).AddComponent(ABMShared.BuildParagraph(page, {89} , {90} )) 
ThemesPage.bas[326]  
ThemesPage.bas[327]  ' also add the components to the footer 
ThemesPage.bas[328]  ABMShared.ConnectFooter(page) 
ThemesPage.bas[329]  
ThemesPage.bas[330]  page.Refresh ' IMPORTANT 
ThemesPage.bas[331]  
ThemesPage.bas[332]  ' NEW, because we use ShowLoaderType=ABM.LOADER_TYPE_MANUAL 
ThemesPage.bas[333]  page.FinishedLoading 'IMPORTANT 
ThemesPage.bas[334]  
ThemesPage.bas[335]  page.RestoreNavigationBarPosition 
ThemesPage.bas[336] End Sub 
ThemesPage.bas[337]  
ThemesPage.bas[338] ' clicked on the navigation bar 
ThemesPage.bas[339] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ThemesPage.bas[340]  page.SaveNavigationBarPosition 
ThemesPage.bas[341]  If Action = {91} Then Return 
ThemesPage.bas[342]  If Action = {92} Then 
ThemesPage.bas[343]  myToastId = myToastId + 1 
ThemesPage.bas[344]  page.ShowToast( {93} & myToastId, {94} , {95} , 5000) 
ThemesPage.bas[345]  Return 
ThemesPage.bas[346]  End If 
ThemesPage.bas[347]  If Action = {96} Then 
ThemesPage.bas[348]  ABMShared.LogOff(page) 
ThemesPage.bas[349]  Return 
ThemesPage.bas[350]  End If 
ThemesPage.bas[351]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
ThemesPage.bas[352] End Sub 
ThemesPage.bas[353]  
ThemesPage.bas[354] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
ThemesPage.bas[355]  page.ws.Session.SetAttribute( {97} , {98} ) 
ThemesPage.bas[356]  page.ws.Session.SetAttribute( {99} , {100} ) 
ThemesPage.bas[357]  page.ws.Session.SetAttribute( {101} , {102} ) 
ThemesPage.bas[358]  ABMShared.NavigateToPage(ws, ABMPageId, {103} ) 
ThemesPage.bas[359] End Sub 
ThemesPage.bas[360]  
ThemesPage.bas[361] Sub BuildColorTable16(Col As String) As ABMTable 
ThemesPage.bas[362]  ' create a table 
ThemesPage.bas[363]  Dim tbl1 As ABMTable 
ThemesPage.bas[364]  tbl1.Initialize(page, {104} & Col, False, False, False, {105} ) 
ThemesPage.bas[365]  
ThemesPage.bas[366]  Dim ColString As String = {106} & Col.ToUpperCase 
ThemesPage.bas[367]  
ThemesPage.bas[368]  For i = 0 To 13 
ThemesPage.bas[369]  Dim r As List 
ThemesPage.bas[370]  Dim t As List 
ThemesPage.bas[371]  r.Initialize 
ThemesPage.bas[372]  t.Initialize 
ThemesPage.bas[373]  Dim lbl As ABMLabel 
ThemesPage.bas[374]  Dim Intensity As String = {107} & Intensities.get(i) 
ThemesPage.bas[375]  Intensity = Intensity.ToUpperCase 
ThemesPage.bas[376]  If i < 6 Or i > 9 Then 
ThemesPage.bas[377]  lbl.Initialize(page, {108} & Col, ColString & {109} & Intensity,ABM.SIZE_PARAGRAPH, False, {110} ) 
ThemesPage.bas[378]  Else 
ThemesPage.bas[379]  lbl.Initialize(page, {111} & Col, ColString & {112} & Intensity,ABM.SIZE_PARAGRAPH, False, {113} ) 
ThemesPage.bas[380]  End If 
ThemesPage.bas[381]  r.Add(lbl) 
ThemesPage.bas[382]  t.Add(Col & i) 
ThemesPage.bas[383]  RowTeller = RowTeller + 1 
ThemesPage.bas[384]  tbl1.AddRow( {114} & RowTeller, r) 
ThemesPage.bas[385]  tbl1.SetRowThemes(t) 
ThemesPage.bas[386]  Next 
ThemesPage.bas[387]  Return tbl1 
ThemesPage.bas[388] End Sub 
ThemesPage.bas[389]  
ThemesPage.bas[390] Sub BuildColorTable12(Col As String) As ABMTable 
ThemesPage.bas[391]  ' create a table 
ThemesPage.bas[392]  Dim tbl1 As ABMTable 
ThemesPage.bas[393]  tbl1.Initialize(page, {115} & Col, False, False, False, {116} ) 
ThemesPage.bas[394]  
ThemesPage.bas[395]  Dim ColString As String = {117} & Col.ToUpperCase 
ThemesPage.bas[396]  
ThemesPage.bas[397]  For i = 0 To 9 
ThemesPage.bas[398]  Dim r As List 
ThemesPage.bas[399]  Dim t As List 
ThemesPage.bas[400]  r.Initialize 
ThemesPage.bas[401]  t.Initialize 
ThemesPage.bas[402]  Dim lbl As ABMLabel 
ThemesPage.bas[403]  Dim Intensity As String = {118} & Intensities.get(i) 
ThemesPage.bas[404]  Intensity = Intensity.ToUpperCase 
ThemesPage.bas[405]  If i < 6 Then 
ThemesPage.bas[406]  lbl.Initialize(page, {119} & Col, ColString & {120} & Intensity,ABM.SIZE_PARAGRAPH, False, {121} ) 
ThemesPage.bas[407]  Else 
ThemesPage.bas[408]  lbl.Initialize(page, {122} & Col, ColString & {123} & Intensity,ABM.SIZE_PARAGRAPH, False, {124} ) 
ThemesPage.bas[409]  End If 
ThemesPage.bas[410]  r.Add(lbl) 
ThemesPage.bas[411]  t.Add(Col & i) 
ThemesPage.bas[412]  RowTeller = RowTeller + 1 
ThemesPage.bas[413]  tbl1.AddRow( {125} & RowTeller, r) 
ThemesPage.bas[414]  tbl1.SetRowThemes(t) 
ThemesPage.bas[415]  Next 
ThemesPage.bas[416]  Return tbl1 
ThemesPage.bas[417] End Sub 
ThemesPage.bas[418]  
ThemesPage.bas[419] Sub BuildColorTableOther() As ABMTable 
ThemesPage.bas[420]  ' create a table 
ThemesPage.bas[421]  Dim tbl1 As ABMTable 
ThemesPage.bas[422]  tbl1.Initialize(page, {126} , False, False, False, {127} ) 
ThemesPage.bas[423]  
ThemesPage.bas[424]  
ThemesPage.bas[425]  Dim r As List 
ThemesPage.bas[426]  Dim t As List 
ThemesPage.bas[427]  
ThemesPage.bas[428]  r.Initialize 
ThemesPage.bas[429]  t.Initialize 
ThemesPage.bas[430]  Dim lbl1 As ABMLabel 
ThemesPage.bas[431]  lbl1.Initialize(page, {128} , {129} ,ABM.SIZE_PARAGRAPH, False, {130} ) 
ThemesPage.bas[432]  r.Add(lbl1) 
ThemesPage.bas[433]  t.Add( {131} ) 
ThemesPage.bas[434]  RowTeller = RowTeller + 1 
ThemesPage.bas[435]  tbl1.AddRow( {132} & RowTeller, r) 
ThemesPage.bas[436]  tbl1.SetRowThemes(t) 
ThemesPage.bas[437]  
ThemesPage.bas[438]  r.Initialize 
ThemesPage.bas[439]  t.Initialize 
ThemesPage.bas[440]  Dim lbl1 As ABMLabel 
ThemesPage.bas[441]  lbl1.Initialize(page, {133} , {134} ,ABM.SIZE_PARAGRAPH, False, {135} ) 
ThemesPage.bas[442]  r.Add(lbl1) 
ThemesPage.bas[443]  t.Add( {136} ) 
ThemesPage.bas[444]  RowTeller = RowTeller + 1 
ThemesPage.bas[445]  tbl1.AddRow( {137} & RowTeller, r) 
ThemesPage.bas[446]  tbl1.SetRowThemes(t) 
ThemesPage.bas[447]  
ThemesPage.bas[448]  r.Initialize 
ThemesPage.bas[449]  t.Initialize 
ThemesPage.bas[450]  Dim lbl1 As ABMLabel 
ThemesPage.bas[451]  lbl1.Initialize(page, {138} , {139} ,ABM.SIZE_PARAGRAPH, False, {140} ) 
ThemesPage.bas[452]  r.Add(lbl1) 
ThemesPage.bas[453]  t.Add( {141} ) 
ThemesPage.bas[454]  RowTeller = RowTeller + 1 
ThemesPage.bas[455]  tbl1.AddRow( {142} & RowTeller, r) 
ThemesPage.bas[456]  tbl1.SetRowThemes(t) 
ThemesPage.bas[457]  
ThemesPage.bas[458]  Return tbl1 
ThemesPage.bas[459] End Sub 
Analysing: Demo.b4j
Demo.b4j[0] ﻿Version=4.7 
Demo.b4j[0] AppType=StandardJava 
Demo.b4j[0] NumberOfModules=77 
Demo.b4j[0] Module1=CompChatPage 
Demo.b4j[0] Module2=ABMShared 
Demo.b4j[0] Module3=CompPlannerPage 
Demo.b4j[0] Module4=CompPercentSliderPage 
Demo.b4j[0] Module5=ABMApplication 
Demo.b4j[0] Module6=CompChartPage 
Demo.b4j[0] Module7=ABMSessionCreator 
Demo.b4j[0] Module8=HelperModalSheetPage 
Demo.b4j[0] Module9=CompRadioGroupPage 
Demo.b4j[0] Module10=CompDateTimePickerPage 
Demo.b4j[0] Module11=AboutPage 
Demo.b4j[0] Module12=CompSwitchPage 
Demo.b4j[0] Module13=HelperTablePage 
Demo.b4j[0] Module14=CompPivotTablePage 
Demo.b4j[0] Module15=CompDividerPage 
Demo.b4j[0] Module16=HelperContainerPage 
Demo.b4j[0] Module17=GridsPage 
Demo.b4j[0] Module18=CompVideoPage 
Demo.b4j[0] Module19=CompTabsPage 
Demo.b4j[0] Module20=CompComboPage 
Demo.b4j[0] Module21=ABMCacheScavenger 
Demo.b4j[0] Module22=HelperNavigationBarPage 
Demo.b4j[0] Module23=GettingStartedPage 
Demo.b4j[0] Module24=CompOAuthPage 
Demo.b4j[0] Module25=CompInputPage 
Demo.b4j[0] Module26=CompUploadPage 
Demo.b4j[0] Module27=CompRealSliderPage 
Demo.b4j[0] Module28=HelperFlexWallPage 
Demo.b4j[0] Module29=HelperPagePage 
Demo.b4j[0] Module30=ABMPageTemplate 
Demo.b4j[0] Module31=CompPaginationPage 
Demo.b4j[0] Module32=CompChipPage 
Demo.b4j[0] Module33=CompRangePage 
Demo.b4j[0] Module34=CompSliderPage 
Demo.b4j[0] Module35=CompGoogleMapPage 
Demo.b4j[0] Module36=CompSignaturePage 
Demo.b4j[0] Module37=CompCheckboxPage 
Demo.b4j[0] Module38=CompSocialSharePage 
Demo.b4j[0] Module39=CompCustomCompPage 
Demo.b4j[0] Module40=IconsPage 
Demo.b4j[0] Module41=OtherFirebaseStorPage 
Demo.b4j[0] Module42=OtherFirebasePage 
Demo.b4j[0] Module43=CompFileInputPage 
Demo.b4j[0] Module44=CompSVGSurfacePage 
Demo.b4j[0] Module45=CompPDFViewerPage 
Demo.b4j[0] Module46=CompTimeLinePage 
Demo.b4j[0] Module47=CompChronologyPage 
Demo.b4j[0] Module48=CompCalendarPage 
Demo.b4j[0] Module49=HelperGeneratorPage 
Demo.b4j[0] Module50=HelperTableMutablePage 
Demo.b4j[0] Module51=CompTreeTablePage 
Demo.b4j[0] Module52=CompEditorPage 
Demo.b4j[0] Module53=CompDateTimeScrollerPage 
Demo.b4j[0] Module54=CompLabelPage 
Demo.b4j[0] Module55=HelperParallaxPage 
Demo.b4j[0] Module56=CompCanvasPage 
Demo.b4j[0] Module57=CompCodeLabelPage 
Demo.b4j[0] Module58=CompCardPage 
Demo.b4j[0] Module59=CompPatternLockPage 
Demo.b4j[0] Module60=DonatorsExtraLibsPage 
Demo.b4j[0] Module61=CompListPage 
Demo.b4j[0] Module62=CompButtonPage 
Demo.b4j[0] Module63=CompBadgePage 
Demo.b4j[0] Module64=TestPage 
Demo.b4j[0] Module65=CompAudioPlayerPage 
Demo.b4j[0] Module66=CompActionButtonPage 
Demo.b4j[0] Module67=CompImagePage 
Demo.b4j[0] Module68=ThemesPage 
Demo.b4j[0] Module69=TestClassForAlain 
Demo.b4j[0] Module70=DonateButton 
Demo.b4j[0] Module71=CustomGauge 
Demo.b4j[0] Module72=CustomGoogleChart2 
Demo.b4j[0] Module73=CustomGoogleChart 
Demo.b4j[0] Module74=CustomSlidebar 
Demo.b4j[0] Module75=ABMUploadHandler 
Demo.b4j[0] Module76=ABMPrint 
Demo.b4j[0] Module77=CompPercentSlider 
Demo.b4j[0] Build1=Default,abmaterial.ab.com 
Demo.b4j[0] NumberOfFiles=0 
Demo.b4j[0] NumberOfLibraries=5 
Demo.b4j[0] Library1=jcore 
Demo.b4j[0] Library2=abmaterial 
Demo.b4j[0] Library3=jdateutils 
Demo.b4j[0] Library4=jserver 
Demo.b4j[0] Library5=javaobject 
Demo.b4j[0] @EndOfDesignText@ 
Demo.b4j[1] 'Non-UI application (console / server application) 
Demo.b4j[2] #Region Project Attributes 
Demo.b4j[3]  #CommandLineArgs: 
Demo.b4j[4]  #MergeLibraries: False 
Demo.b4j[5]  
Demo.b4j[6]  '#VirtualMachineArgs: -Xbootclasspath/p:alpn-boot-8.1.5.v20150921.jar 
Demo.b4j[7] #End Region 
Demo.b4j[8]  
Demo.b4j[9] Sub Process_Globals 
Demo.b4j[10]  Public srvr As Server 
Demo.b4j[11] End Sub 
Demo.b4j[12]  
Demo.b4j[13] Sub AppStart (Args() As String) 
Demo.b4j[14]  ' Build the Theme 
Demo.b4j[15]  ABMShared.BuildTheme( {0} ) 
Demo.b4j[16] ' ' the user needs to login 
Demo.b4j[17]  ABMShared.NeedsAuthorization = False 
Demo.b4j[18]  
Demo.b4j[19]  ABMShared.TrackingID = {1} ' IMPORTANT Change this to your own Google Analytics TrackingID !!!!!!! 
Demo.b4j[20]  
Demo.b4j[21]  ' create the app 
Demo.b4j[22]  Dim myApp As ABMApplication 
Demo.b4j[23]  myApp.Initialize 
Demo.b4j[24]  
Demo.b4j[25]  ' create the pages 
Demo.b4j[26]  Dim aboutp As AboutPage 
Demo.b4j[27]  aboutp.Initialize 
Demo.b4j[28]  
Demo.b4j[29]  Dim compactionbuttonp As CompActionButtonPage 
Demo.b4j[30]  compactionbuttonp.Initialize 
Demo.b4j[31]  
Demo.b4j[32]  Dim compaudioplayerp As CompAudioPlayerPage 
Demo.b4j[33]  compaudioplayerp.Initialize 
Demo.b4j[34]  
Demo.b4j[35]  Dim compbadgep As CompBadgePage 
Demo.b4j[36]  compbadgep.Initialize 
Demo.b4j[37]  
Demo.b4j[38]  Dim compbuttonp As CompButtonPage 
Demo.b4j[39]  compbuttonp.Initialize 
Demo.b4j[40]  
Demo.b4j[41]  Dim compcalp As CompCalendarPage 
Demo.b4j[42]  compcalp.initialize 
Demo.b4j[43]  
Demo.b4j[44]  Dim compcanvasp As CompCanvasPage 
Demo.b4j[45]  compcanvasp.Initialize 
Demo.b4j[46]  
Demo.b4j[47]  Dim compcardp As CompCardPage 
Demo.b4j[48]  compcardp.Initialize 
Demo.b4j[49]  
Demo.b4j[50]  Dim compchartp As CompChartPage 
Demo.b4j[51]  compchartp.initialize 
Demo.b4j[52]  
Demo.b4j[53]  Dim compchatp As CompChatPage 
Demo.b4j[54]  compchatp.initialize 
Demo.b4j[55]  
Demo.b4j[56]  Dim compcheckboxp As CompCheckboxPage 
Demo.b4j[57]  compcheckboxp.Initialize 
Demo.b4j[58]  
Demo.b4j[59]  Dim compchipp As CompChipPage 
Demo.b4j[60]  compchipp.Initialize 
Demo.b4j[61]  
Demo.b4j[62]  Dim compchronop As CompChronologyPage 
Demo.b4j[63]  compchronop.Initialize 
Demo.b4j[64]  
Demo.b4j[65]  Dim compcodelabelp As CompCodeLabelPage 
Demo.b4j[66]  compcodelabelp.initialize 
Demo.b4j[67]  
Demo.b4j[68]  Dim compcombop As CompComboPage 
Demo.b4j[69]  compcombop.Initialize 
Demo.b4j[70]  
Demo.b4j[71]  Dim compcustp As CompCustomCompPage 
Demo.b4j[72]  compcustp.Initialize 
Demo.b4j[73]  
Demo.b4j[74]  Dim compdtpickerp As CompDateTimePickerPage 
Demo.b4j[75]  compdtpickerp.initialize 
Demo.b4j[76]  
Demo.b4j[77]  Dim compdtscrollerp As CompDateTimeScrollerPage 
Demo.b4j[78]  compdtscrollerp.initialize 
Demo.b4j[79]  
Demo.b4j[80]  Dim compdividerp As CompDividerPage 
Demo.b4j[81]  compdividerp.initialize 
Demo.b4j[82]  
Demo.b4j[83]  Dim compeditorp As CompEditorPage 
Demo.b4j[84]  compeditorp.initialize 
Demo.b4j[85]  
Demo.b4j[86]  Dim compfileinputp As CompFileInputPage 
Demo.b4j[87]  compfileinputp.initialize 
Demo.b4j[88]  
Demo.b4j[89]  Dim compgooglemapp As CompGoogleMapPage 
Demo.b4j[90]  compgooglemapp.Initialize 
Demo.b4j[91]  
Demo.b4j[92]  Dim compimagep As CompImagePage 
Demo.b4j[93]  compimagep.Initialize 
Demo.b4j[94]  
Demo.b4j[95]  Dim compinputp As CompInputPage 
Demo.b4j[96]  compinputp.Initialize 
Demo.b4j[97]  
Demo.b4j[98]  Dim complabelp As CompLabelPage 
Demo.b4j[99]  complabelp.initialize 
Demo.b4j[100]  
Demo.b4j[101]  Dim complistp As CompListPage 
Demo.b4j[102]  complistp.Initialize 
Demo.b4j[103]  
Demo.b4j[104]  Dim compoauthp As CompOAuthPage 
Demo.b4j[105]  compoauthp.initialize 
Demo.b4j[106]  
Demo.b4j[107]  Dim comppaginationp As CompPaginationPage 
Demo.b4j[108]  comppaginationp.initialize 
Demo.b4j[109]  
Demo.b4j[110]  Dim comppatternlockp As CompPatternLockPage 
Demo.b4j[111]  comppatternlockp.initialize 
Demo.b4j[112]  
Demo.b4j[113]  Dim comppdfviewerp As CompPDFViewerPage 
Demo.b4j[114]  comppdfviewerp.initialize 
Demo.b4j[115]  
Demo.b4j[116]  Dim comppercentsliderp As CompPercentSliderPage 
Demo.b4j[117]  comppercentsliderp.initialize 
Demo.b4j[118]  
Demo.b4j[119]  Dim comppivottablep As CompPivotTablePage 
Demo.b4j[120]  comppivottablep.initialize 
Demo.b4j[121]  
Demo.b4j[122]  Dim compplannerp As CompPlannerPage 
Demo.b4j[123]  compplannerp.initialize 
Demo.b4j[124]  
Demo.b4j[125]  Dim compradiogroupp As CompRadioGroupPage 
Demo.b4j[126]  compradiogroupp.Initialize 
Demo.b4j[127]  
Demo.b4j[128]  Dim comprangep As CompRangePage 
Demo.b4j[129]  comprangep.Initialize 
Demo.b4j[130]  
Demo.b4j[131]  Dim compsignaturep As CompSignaturePage 
Demo.b4j[132]  compsignaturep.initialize 
Demo.b4j[133]  
Demo.b4j[134]  Dim comprealsliderp As CompRealSliderPage 
Demo.b4j[135]  comprealsliderp.initialize 
Demo.b4j[136]  
Demo.b4j[137]  Dim compsliderp As CompSliderPage 
Demo.b4j[138]  compsliderp.Initialize 
Demo.b4j[139]  
Demo.b4j[140]  Dim compsocialsharep As CompSocialSharePage 
Demo.b4j[141]  compsocialsharep.Initialize 
Demo.b4j[142]  
Demo.b4j[143]  Dim compsvgsurfacep As CompSVGSurfacePage 
Demo.b4j[144]  compsvgsurfacep.Initialize 
Demo.b4j[145]  
Demo.b4j[146]  Dim compswitchp As CompSwitchPage 
Demo.b4j[147]  compswitchp.Initialize 
Demo.b4j[148]  
Demo.b4j[149]  Dim comptimelinep As CompTimeLinePage 
Demo.b4j[150]  comptimelinep.Initialize 
Demo.b4j[151]  
Demo.b4j[152]  Dim comptabsp As CompTabsPage 
Demo.b4j[153]  comptabsp.Initialize 
Demo.b4j[154]  
Demo.b4j[155]  Dim comptreetablep As CompTreeTablePage 
Demo.b4j[156]  comptreetablep.Initialize 
Demo.b4j[157]  
Demo.b4j[158]  Dim compuploadp As CompUploadPage 
Demo.b4j[159]  compuploadp.Initialize 
Demo.b4j[160]  
Demo.b4j[161]  Dim compvideop As CompVideoPage 
Demo.b4j[162]  compvideop.Initialize 
Demo.b4j[163]  
Demo.b4j[164]  Dim gettingstartedp As GettingStartedPage 
Demo.b4j[165]  gettingstartedp.Initialize 
Demo.b4j[166]  
Demo.b4j[167]  Dim gridsp As GridsPage 
Demo.b4j[168]  gridsp.Initialize 
Demo.b4j[169]  
Demo.b4j[170]  Dim helpercontainerp As HelperContainerPage 
Demo.b4j[171]  helpercontainerp.initialize 
Demo.b4j[172]  
Demo.b4j[173]  Dim helperflexwallp As HelperFlexWallPage 
Demo.b4j[174]  helperflexwallp.initialize 
Demo.b4j[175]  
Demo.b4j[176]  Dim helpergeneratorp As HelperGeneratorPage 
Demo.b4j[177]  helpergeneratorp.initialize 
Demo.b4j[178]  
Demo.b4j[179]  Dim helpermodalsheetp As HelperModalSheetPage 
Demo.b4j[180]  helpermodalsheetp.initialize 
Demo.b4j[181]  
Demo.b4j[182]  Dim helpernavbarp As HelperNavigationBarPage 
Demo.b4j[183]  helpernavbarp.initialize 
Demo.b4j[184]  
Demo.b4j[185]  Dim helperpagep As HelperPagePage 
Demo.b4j[186]  helperpagep.initialize 
Demo.b4j[187]  
Demo.b4j[188]  Dim helperparallaxp As HelperParallaxPage 
Demo.b4j[189]  helperparallaxp.Initialize 
Demo.b4j[190]  
Demo.b4j[191]  Dim helpertablep As HelperTablePage 
Demo.b4j[192]  helpertablep.Initialize 
Demo.b4j[193]  
Demo.b4j[194]  Dim helpertablemutablep As HelperTableMutablePage 
Demo.b4j[195]  helpertablemutablep.Initialize 
Demo.b4j[196]  
Demo.b4j[197]  Dim iconsp As IconsPage 
Demo.b4j[198]  iconsp.initialize 
Demo.b4j[199]  
Demo.b4j[200]  Dim themesp As ThemesPage 
Demo.b4j[201]  themesp.initialize 
Demo.b4j[202]  
Demo.b4j[203]  Dim otherfirebasep As OtherFirebasePage 
Demo.b4j[204]  otherfirebasep.initialize 
Demo.b4j[205]  
Demo.b4j[206]  Dim otherfirebasestorp As OtherFirebaseStorPage 
Demo.b4j[207]  otherfirebasestorp.initialize 
Demo.b4j[208]  
Demo.b4j[209]  Dim donatorsxtralibsp As DonatorsExtraLibsPage 
Demo.b4j[210]  donatorsxtralibsp.initialize 
Demo.b4j[211]  
Demo.b4j[212]  Dim testp As TestPage 
Demo.b4j[213]  testp.initialize 
Demo.b4j[214]  
Demo.b4j[215]  
Demo.b4j[216] ' ' add the pages To the app 
Demo.b4j[217]  myApp.AddPage(aboutp.Page) 
Demo.b4j[218]  myApp.AddPage(compactionbuttonp.Page) 
Demo.b4j[219]  myApp.AddPage(compaudioplayerp.Page) 
Demo.b4j[220]  myApp.AddPage(compbadgep.Page) 
Demo.b4j[221]  myApp.AddPage(compbuttonp.Page) 
Demo.b4j[222]  myApp.AddPage(compcalp.Page) 
Demo.b4j[223]  myApp.AddPage(compcanvasp.Page) 
Demo.b4j[224]  myApp.AddPage(compcardp.Page) 
Demo.b4j[225]  myApp.AddPage(compchartp.Page) 
Demo.b4j[226]  myApp.AddPage(compchatp.Page) 
Demo.b4j[227]  myApp.AddPage(compcheckboxp.Page) 
Demo.b4j[228]  myApp.AddPage(compchipp.Page) 
Demo.b4j[229]  myApp.AddPage(compchronop.Page) 
Demo.b4j[230]  myApp.AddPage(compcodelabelp.Page) 
Demo.b4j[231]  myApp.AddPage(compcombop.Page) 
Demo.b4j[232]  myApp.AddPage(compcustp.Page) 
Demo.b4j[233]  myApp.AddPage(compdtpickerp.Page) 
Demo.b4j[234]  myApp.AddPage(compdtscrollerp.Page) 
Demo.b4j[235]  myApp.AddPage(compdividerp.Page) 
Demo.b4j[236]  myApp.AddPage(compeditorp.Page) 
Demo.b4j[237]  myApp.AddPage(compfileinputp.Page) 
Demo.b4j[238]  myApp.AddPage(compgooglemapp.Page) 
Demo.b4j[239]  myApp.AddPage(compimagep.Page) 
Demo.b4j[240]  myApp.AddPage(compinputp.Page) 
Demo.b4j[241]  myApp.AddPage(complabelp.Page) 
Demo.b4j[242]  myApp.AddPage(complistp.Page) 
Demo.b4j[243]  myApp.AddPage(compoauthp.Page) 
Demo.b4j[244]  myApp.AddPage(comppaginationp.Page) 
Demo.b4j[245]  myApp.AddPage(comppatternlockp.Page) 
Demo.b4j[246]  myApp.AddPage(comppdfviewerp.Page) 
Demo.b4j[247]  myApp.AddPage(comppercentsliderp.Page) 
Demo.b4j[248]  myApp.AddPage(comppivottablep.Page) 
Demo.b4j[249]  myApp.AddPage(compplannerp.Page) 
Demo.b4j[250]  myApp.AddPage(compradiogroupp.Page) 
Demo.b4j[251]  myApp.AddPage(comprangep.Page) 
Demo.b4j[252]  myApp.AddPage(compsignaturep.Page) 
Demo.b4j[253]  myApp.AddPage(comprealsliderp.Page) 
Demo.b4j[254]  myApp.AddPage(compsliderp.Page) 
Demo.b4j[255]  myApp.AddPage(compsocialsharep.Page) 
Demo.b4j[256]  myApp.AddPage(compsvgsurfacep.Page) 
Demo.b4j[257]  myApp.AddPage(compswitchp.Page) 
Demo.b4j[258]  myApp.AddPage(comptreetablep.Page) 
Demo.b4j[259]  myApp.AddPage(comptabsp.Page) 
Demo.b4j[260]  myApp.AddPage(comptimelinep.Page) 
Demo.b4j[261]  myApp.AddPage(compuploadp.Page) 
Demo.b4j[262]  myApp.AddPage(compvideop.Page) 
Demo.b4j[263]  myApp.AddPage(gettingstartedp.Page) 
Demo.b4j[264]  myApp.AddPage(gridsp.Page) 
Demo.b4j[265]  myApp.AddPage(helpercontainerp.Page) 
Demo.b4j[266]  myApp.AddPage(helperflexwallp.Page) 
Demo.b4j[267]  myApp.AddPage(helpergeneratorp.Page) 
Demo.b4j[268]  myApp.AddPage(helpermodalsheetp.Page) 
Demo.b4j[269]  myApp.AddPage(helpernavbarp.Page) 
Demo.b4j[270]  myApp.AddPage(helperpagep.Page) 
Demo.b4j[271]  myApp.AddPage(helperparallaxp.Page) 
Demo.b4j[272]  myApp.AddPage(helpertablep.Page) 
Demo.b4j[273]  myApp.AddPage(helpertablemutablep.Page) 
Demo.b4j[274]  myApp.AddPage(iconsp.Page) 
Demo.b4j[275]  myApp.AddPage(themesp.Page) 
Demo.b4j[276]  
Demo.b4j[277]  myApp.AddPage(otherfirebasep.Page) 
Demo.b4j[278]  myApp.AddPage(otherfirebasestorp.Page) 
Demo.b4j[279]  
Demo.b4j[280]  myApp.AddPage(donatorsxtralibsp.Page) 
Demo.b4j[281]  
Demo.b4j[282]  myApp.AddPage(testp.Page) 
Demo.b4j[283]  
Demo.b4j[284]  ' start the server 
Demo.b4j[285]  myApp.StartServer(srvr, {2} , 51042) 
Demo.b4j[286]  
Demo.b4j[287]  ' start server HTTP/2 
Demo.b4j[288]  ' myApp.StartServerHTTP2(srvr, {3} , 51042, 51043, {4} , {5} , {6} ) 
Demo.b4j[289]  
Demo.b4j[290]  ABMShared.RedirectOutput(File.DirApp, {7} ) 
Demo.b4j[291]  
Demo.b4j[292]  StartMessageLoop 
Demo.b4j[293] End Sub 
