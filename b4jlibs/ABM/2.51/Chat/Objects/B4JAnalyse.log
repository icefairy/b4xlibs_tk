Analysing: ABMShared.bas
ABMShared.bas[0] ﻿Type=StaticCode 
ABMShared.bas[0] Version=4.7 
ABMShared.bas[0] ModulesStructureVersion=1 
ABMShared.bas[0] B4J=true 
ABMShared.bas[0] @EndOfDesignText@ 
ABMShared.bas[1] 'Static code module 
ABMShared.bas[2] Sub Process_Globals 
ABMShared.bas[3]  Public MyTheme As ABMTheme 
ABMShared.bas[4]  Private ABM As ABMaterial 'ignore 
ABMShared.bas[5]  Public NeedsAuthorization As Boolean = False 
ABMShared.bas[6]  Public AppVersion As String = DateTime.now ' NEW 2.01 this helps to get the latest js/css files when the app is started/restarted 
ABMShared.bas[7]  Public AppPublishedStartURL As String = {2} 
ABMShared.bas[8]  Public AppName As String = {3} 
ABMShared.bas[9]  
ABMShared.bas[10]  Public CachedPages As Map 
ABMShared.bas[11]  Public CacheScavengePeriodSeconds As Int = 15*60 ' 15 minutes 
ABMShared.bas[12]  Public SessionMaxInactiveIntervalSeconds As Int = 30*60 ' 30 minutes '1*60*24 ' one hour ' -1 = immortal but beware! This also means your cache is NEVER emptied! 
ABMShared.bas[13] End Sub 
ABMShared.bas[14]  
ABMShared.bas[15] Public Sub NavigateToPage(ws As WebSocket, PageId As String, TargetUrl As String) 
ABMShared.bas[16]  If AppVersion <> {4} Then 
ABMShared.bas[17]  TargetUrl = TargetUrl & {5} & AppVersion 
ABMShared.bas[18]  End If 
ABMShared.bas[19]  ABM.RemoveMeFromCache(CachedPages, PageId) 
ABMShared.bas[20]  If ws.Open Then 
ABMShared.bas[21]  ws.Eval( {6} , Array As Object(TargetUrl)) 
ABMShared.bas[22]  ws.Flush 
ABMShared.bas[23]  End If 
ABMShared.bas[24] End Sub 
ABMShared.bas[25]  
ABMShared.bas[26] Public Sub NavigateToPageNewTab(ws As WebSocket, PageId As String, TargetUrl As String, OpenInNewTab As Boolean) 
ABMShared.bas[27]  If AppVersion <> {7} Then 
ABMShared.bas[28]  TargetUrl = TargetUrl & {8} & AppVersion 
ABMShared.bas[29]  End If 
ABMShared.bas[30]  ABM.RemoveMeFromCache(CachedPages, PageId) 
ABMShared.bas[31]  If ws.Open Then 
ABMShared.bas[32]  If OpenInNewTab Then 
ABMShared.bas[33]  Dim s As String 
ABMShared.bas[34]  ' check if a mobile phone only 
ABMShared.bas[35] ' s = {0} 
ABMShared.bas[42]  
ABMShared.bas[43]  ' check if a mobile phone or a tablet 
ABMShared.bas[44]  s = {1} 
ABMShared.bas[51]  ws.Eval(s, Array As Object(TargetUrl)) 
ABMShared.bas[52]  Else 
ABMShared.bas[53]  ws.Eval( {9} , Array As Object(TargetUrl)) 
ABMShared.bas[54]  End If 
ABMShared.bas[55]  ws.Flush 
ABMShared.bas[56]  End If 
ABMShared.bas[57] End Sub 
ABMShared.bas[58]  
ABMShared.bas[59] Sub RedirectOutput (Dir As String, FileName As String) 
ABMShared.bas[60]  #if RELEASE 
ABMShared.bas[61]  Dim out As OutputStream = File.OpenOutput(Dir, FileName, False) 'Set to True to append the logs 
ABMShared.bas[62]  Dim ps As JavaObject 
ABMShared.bas[63]  ps.InitializeNewInstance( {10} , Array(out, True, {11} )) 
ABMShared.bas[64]  Dim jo As JavaObject 
ABMShared.bas[65]  jo.InitializeStatic( {12} ) 
ABMShared.bas[66]  jo.RunMethod( {13} , Array(ps)) 
ABMShared.bas[67]  jo.RunMethod( {14} , Array(ps)) 
ABMShared.bas[68]  #end if 
ABMShared.bas[69] End Sub 
ABMShared.bas[70]  
ABMShared.bas[71] Sub LogOff(page As ABMPage) 
ABMShared.bas[72]  ' do whatever you have to do to log off your user 
ABMShared.bas[73]  
ABMShared.bas[74]  page.ws.Session.SetAttribute( {15} , {16} ) 
ABMShared.bas[75]  NavigateToPage(page.ws, page.GetPageID, {17} ) 
ABMShared.bas[76] End Sub 
ABMShared.bas[77]  
ABMShared.bas[78] ' build methods for ABM objects 
ABMShared.bas[79] Sub BuildTheme(themeName As String) 
ABMShared.bas[80]  MyTheme.Initialize(themeName) 
ABMShared.bas[81]  
ABMShared.bas[82]  ' the page theme 
ABMShared.bas[83]  MyTheme.Page.BackColor = ABM.COLOR_WHITE 
ABMShared.bas[84]  
ABMShared.bas[85] End Sub 
ABMShared.bas[86]  
ABMShared.bas[87] Sub BuildNavigationBar(page As ABMPage, Title As String, logo As String, ActiveTopReturnName As String, ActiveSideReturnName As String, ActiveSideSubReturnName As String) 'ignore 
ABMShared.bas[88]  ' we have to make an ABMImage from our logo url 
ABMShared.bas[89]  Dim sbtopimg As ABMImage 
ABMShared.bas[90]  sbtopimg.Initialize(page, {18} , logo, 1) 
ABMShared.bas[91]  sbtopimg.SetFixedSize(236, 49) 
ABMShared.bas[92]  
ABMShared.bas[93]  page.NavigationBar.Initialize(page, {19} , ABM.SIDEBAR_MANUAL_HIDEMEDIUMSMALL, Title, True, True, 330, 48, sbtopimg, ABM.COLLAPSE_ACCORDION, {20} ) 
ABMShared.bas[94]  
ABMShared.bas[95]  page.NavigationBar.TopBarDropDownConstrainWidth = False 
ABMShared.bas[96]  page.NavigationBar.ActiveTopReturnName = ActiveTopReturnName 
ABMShared.bas[97]  page.NavigationBar.ActiveSideReturnName = ActiveSideReturnName 
ABMShared.bas[98]  page.NavigationBar.ActiveSideSubReturnName = ActiveSideSubReturnName 
ABMShared.bas[99]  
ABMShared.bas[100]  ' you must add at least ONE dummy item if you want to add items to the topbar in ConnectNaviagationBar 
ABMShared.bas[101]  page.NavigationBar.AddTopItem( {21} , {22} , {23} , {24} , False) 
ABMShared.bas[102]  
ABMShared.bas[103]  ' you must add at least ONE dummy item if you want to add items to the sidebar 
ABMShared.bas[104]  page.NavigationBar.AddSideBarItem( {25} , {26} , {27} , {28} ) 
ABMShared.bas[105] End Sub 
ABMShared.bas[106]  
ABMShared.bas[107] Sub ConnectNavigationBar(page As ABMPage) 'ignore 
ABMShared.bas[108]  ' Clear the dummies we created in BuildNavigationBar 
ABMShared.bas[109]  page.NavigationBar.Clear 
ABMShared.bas[110]  
ABMShared.bas[111]  'on each top item you can set if it should hide of not on a medium or small device. 
ABMShared.bas[112]  'page.NavigationBar.AddTopItem( {29} , {30} , {31} , {32} , False) 
ABMShared.bas[113]  
ABMShared.bas[114]  'page.NavigationBar.AddSideBarDivider( {33} ) 
ABMShared.bas[115]  'page.NavigationBar.AddSideBarItem( {34} , {35} , {36} , {37} ) 
ABMShared.bas[116]  'page.NavigationBar.AddSideBarDivider( {38} ) 
ABMShared.bas[117]  
ABMShared.bas[118]  page.NavigationBar.Refresh ' IMPORTANT 
ABMShared.bas[119] End Sub 
ABMShared.bas[120]  
ABMShared.bas[121] public Sub BuildParagraph(page As ABMPage, id As String, Text As String) As ABMLabel 
ABMShared.bas[122]  Dim lbl As ABMLabel 
ABMShared.bas[123]  lbl.Initialize(page, id, Text , ABM.SIZE_PARAGRAPH, False, {39} ) 
ABMShared.bas[124]  Return lbl 
ABMShared.bas[125] End Sub 
ABMShared.bas[126]  
ABMShared.bas[127]  
ABMShared.bas[128]  
Analysing: ChatShared.bas
ChatShared.bas[0] ﻿Type=StaticCode 
ChatShared.bas[0] Version=4.7 
ChatShared.bas[0] ModulesStructureVersion=1 
ChatShared.bas[0] B4J=true 
ChatShared.bas[0] @EndOfDesignText@ 
ChatShared.bas[1]  
ChatShared.bas[2] Sub Process_Globals 
ChatShared.bas[3]  Public AvoidDuplicates As Map 
ChatShared.bas[4]  Private connections As Map 
ChatShared.bas[5]  Public LastMessages As List 
ChatShared.bas[6]  Private IsTypingMap As Map 
ChatShared.bas[7] End Sub 
ChatShared.bas[8]  
ChatShared.bas[9] public Sub Init 
ChatShared.bas[10]  AvoidDuplicates = Main.srvr.CreateThreadSafeMap 
ChatShared.bas[11]  connections.Initialize 
ChatShared.bas[12]  LastMessages.Initialize 
ChatShared.bas[13]  IsTypingMap.Initialize 
ChatShared.bas[14] End Sub 
ChatShared.bas[15]  
ChatShared.bas[16] public Sub NewConnection(page As ChatPage, pageID As String) 
ChatShared.bas[17]  DateTime.TimeFormat = {0} 
ChatShared.bas[18]  
ChatShared.bas[19]  Dim IdentifyBubble As ABMChatBubble 
ChatShared.bas[20]  IdentifyBubble.Initialize( {1} , page.ChatName & {2} , {3} & DateTime.Time(DateTime.Now), {4} , {5} ) 
ChatShared.bas[21]  JoinLeftMessage(pageID, IdentifyBubble) 
ChatShared.bas[22]  connections.Put(pageID, page) 
ChatShared.bas[23]  CallSubDelayed2(page, {6} , LastMessages) 
ChatShared.bas[24] End Sub 
ChatShared.bas[25]  
ChatShared.bas[26] public Sub NewMessage(pageID As String, Message As ABMChatBubble) 
ChatShared.bas[27]  LastMessages.Add(Message) 
ChatShared.bas[28]  For Each page As ChatPage In connections.Values 
ChatShared.bas[29]  CallSubDelayed2(page, {7} , Message) 
ChatShared.bas[30]  Next 
ChatShared.bas[31] End Sub 
ChatShared.bas[32]  
ChatShared.bas[33] public Sub JoinLeftMessage(pageID As String, Message As ABMChatBubble) 
ChatShared.bas[34]  For Each page As ChatPage In connections.Values 
ChatShared.bas[35]  CallSubDelayed2(page, {8} , Message) 
ChatShared.bas[36]  Next 
ChatShared.bas[37] End Sub 
ChatShared.bas[38]  
ChatShared.bas[39] public Sub IsTyping(pageID As String, Value As String) 
ChatShared.bas[40]  Dim typeBool As Boolean 
ChatShared.bas[41]  If Value = {9} Then 
ChatShared.bas[42]  IsTypingMap.Remove(pageID.ToLowerCase) 
ChatShared.bas[43]  Else 
ChatShared.bas[44]  IsTypingMap.put(pageID.ToLowerCase, {10} ) 
ChatShared.bas[45]  End If 
ChatShared.bas[46]  If IsTypingMap.Size > 0 Then 
ChatShared.bas[47]  typeBool = True 
ChatShared.bas[48]  End If 
ChatShared.bas[49]  For Each page As ChatPage In connections.Values 
ChatShared.bas[50]  CallSubDelayed3(page, {11} , pageID, typeBool) 
ChatShared.bas[51]  Next 
ChatShared.bas[52] End Sub 
ChatShared.bas[53]  
ChatShared.bas[54] public Sub Disconnected(page As ChatPage, pageID As String) 
ChatShared.bas[55]  If connections.ContainsKey(pageID) = False Or connections.Get(pageID) <> page Then Return 
ChatShared.bas[56]  Dim LeaveBubble As ABMChatBubble 
ChatShared.bas[57]  LeaveBubble.Initialize( {12} , page.ChatName & {13} , {14} & DateTime.Time(DateTime.Now), {15} , {16} ) 
ChatShared.bas[58]  JoinLeftMessage(pageID, LeaveBubble) 
ChatShared.bas[59]  connections.Remove(pageID) 
ChatShared.bas[60]  AvoidDuplicates.Remove(pageID.ToLowerCase) 
ChatShared.bas[61] End Sub 
ChatShared.bas[62]  
ChatShared.bas[63] Public Sub HasIdentified(pageID As String) As Boolean 
ChatShared.bas[64]  Return connections.ContainsKey(pageID) 
ChatShared.bas[65] End Sub 
Analysing: ABMApplication.bas
ABMApplication.bas[0] ﻿Type=Class 
ABMApplication.bas[0] Version=4.7 
ABMApplication.bas[0] ModulesStructureVersion=1 
ABMApplication.bas[0] B4J=true 
ABMApplication.bas[0] @EndOfDesignText@ 
ABMApplication.bas[1] 'Main application 
ABMApplication.bas[2] Sub Class_Globals 
ABMApplication.bas[3]  ' change to match you app 
ABMApplication.bas[4]  Private InitialPage As String = {0} '<-------- First page to load 
ABMApplication.bas[5]  
ABMApplication.bas[6]  ' NOTE: Once you've set the above parameters, run the App once. That way, the complete folder structure for your app will be created 
ABMApplication.bas[7]  ' /appname/ 
ABMApplication.bas[8]  ' /appname/images/ 
ABMApplication.bas[9]  ' /appname/uploads/ 
ABMApplication.bas[10]  ' 
ABMApplication.bas[11]  ' You can then put the images you need in the pages into the /appname/images/ folder and start using them. 
ABMApplication.bas[12]  
ABMApplication.bas[13]  ' other variables needed 
ABMApplication.bas[14]  Private AppPage As ABMPage 
ABMApplication.bas[15]  Private theme As ABMTheme 
ABMApplication.bas[16]  Private ws As WebSocket 'ignore 
ABMApplication.bas[17]  Private ABM As ABMaterial 'ignore 
ABMApplication.bas[18]  Private Pages As List 
ABMApplication.bas[19]  Private PageNeedsUpload As List 
ABMApplication.bas[20]  
ABMApplication.bas[21]  Private ABMPageId As String = {1} 
ABMApplication.bas[22] End Sub 
ABMApplication.bas[23]  
ABMApplication.bas[24] Public Sub Initialize 
ABMApplication.bas[25]  Pages.Initialize 
ABMApplication.bas[26]  PageNeedsUpload.Initialize 
ABMApplication.bas[27]  ABM.AppVersion = ABMShared.AppVersion 
ABMApplication.bas[28]  ABM.AppPublishedStartURL = ABMShared.AppPublishedStartURL 
ABMApplication.bas[29]  ABMShared.AppName = {2} '<-------------------------------------------------------- IMPORTANT 
ABMApplication.bas[30]  ' add your icons 
ABMApplication.bas[31]  ' ABM.AddAppleTouchIcon( {3} , {4} ) 
ABMApplication.bas[32]  ' ABM.AddMSTileIcon( {5} , {6} ) 
ABMApplication.bas[33]  ' ABM.AddFavorityIcon( {7} , {8} ) 
ABMApplication.bas[34]  
ABMApplication.bas[35]  #If RELEASE 
ABMApplication.bas[36]  ABM.PreloadAllJavascriptAndCSSFiles=True ' NEW 
ABMApplication.bas[37]  ABM.ActivateGZip( {9} , 1000) ' NEW 
ABMApplication.bas[38]  ABM.AppDefaultPageCSSInline=True ' NEW 
ABMApplication.bas[39]  ABM.AppDefaultPageJSInline=True ' NEW 
ABMApplication.bas[40]  
ABMApplication.bas[41]  Dim folders As List ' NEW 
ABMApplication.bas[42]  folders.Initialize 
ABMApplication.bas[43]  folders.Add(File.DirApp & {10} & ABMShared.AppName & {11} ) 
ABMApplication.bas[44]  ABM.ActivatePNGOptimize( {12} , folders, False , 9, False, True ) 
ABMApplication.bas[45]  #End If 
ABMApplication.bas[46]  
ABMApplication.bas[47]  ' build the local structure IMPORTANT! 
ABMApplication.bas[48]  BuildPage 
ABMApplication.bas[49] End Sub 
ABMApplication.bas[50]  
ABMApplication.bas[51] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMApplication.bas[52]  Log( {13} ) 
ABMApplication.bas[53]  ws = WebSocket1 
ABMApplication.bas[54]  ABMPageId = ABM.GetPageID(AppPage, ABMShared.AppName,ws) 
ABMApplication.bas[55]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ABMApplication.bas[56]  ' Prepare the page IMPORTANT! 
ABMApplication.bas[57]  AppPage.Prepare 
ABMApplication.bas[58]  ' Run ConnectPage here in ABMApplication 
ABMApplication.bas[59]  ConnectPage 
ABMApplication.bas[60]  ' navigate to the first page 
ABMApplication.bas[61]  If ABMShared.NeedsAuthorization Then 
ABMApplication.bas[62]  If session.GetAttribute2( {14} , {15} ) = {16} Then 
ABMApplication.bas[63]  AppPage.ShowModalSheet( {17} ) 
ABMApplication.bas[64]  Return 
ABMApplication.bas[65]  End If 
ABMApplication.bas[66]  End If 
ABMApplication.bas[67]  ABMShared.NavigateToPage(ws, {18} , {19} & InitialPage) 
ABMApplication.bas[68] End Sub 
ABMApplication.bas[69]  
ABMApplication.bas[70] Private Sub WebSocket_Disconnected 
ABMApplication.bas[71]  Log( {20} ) 
ABMApplication.bas[72] End Sub 
ABMApplication.bas[73]  
ABMApplication.bas[74] Sub Page_ParseEvent(Params As Map) 
ABMApplication.bas[75]  Dim eventName As String = Params.Get( {21} ) 
ABMApplication.bas[76]  Dim eventParams() As String = Regex.Split( {22} ,Params.Get( {23} )) 
ABMApplication.bas[77]  If eventName = {24} Then 
ABMApplication.bas[78]  Log( {25} ) 
ABMApplication.bas[79]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMApplication.bas[80]  Return 
ABMApplication.bas[81]  End If 
ABMApplication.bas[82]  If SubExists(Me, eventName) Then 
ABMApplication.bas[83]  Params.Remove( {26} ) 
ABMApplication.bas[84]  Params.Remove( {27} ) 
ABMApplication.bas[85]  Select Case Params.Size 
ABMApplication.bas[86]  Case 0 
ABMApplication.bas[87]  CallSub(Me, eventName) 
ABMApplication.bas[88]  Case 1 
ABMApplication.bas[89]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMApplication.bas[90]  Case 2 
ABMApplication.bas[91]  If Params.get(eventParams(0)) = {28} Then 
ABMApplication.bas[92]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMApplication.bas[93]  CallSub2(Me, eventName, PassedTables) 
ABMApplication.bas[94]  Else 
ABMApplication.bas[95]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMApplication.bas[96]  End If 
ABMApplication.bas[97]  Case Else 
ABMApplication.bas[98]  ' cannot be called diretly, to many param 
ABMApplication.bas[99]  CallSub2(Me, eventName, Params) 
ABMApplication.bas[100]  End Select 
ABMApplication.bas[101]  End If 
ABMApplication.bas[102] End Sub 
ABMApplication.bas[103]  
ABMApplication.bas[104] public Sub AddPage(Page As ABMPage) 
ABMApplication.bas[105]  Pages.Add(Page.Name) 
ABMApplication.bas[106]  PageNeedsUpload.Add(ABM.WritePageToDisk(Page, File.DirApp & {29} & ABMShared.AppName & {30} & Page.Name & {31} , Page.PageHTMLName, ABMShared.NeedsAuthorization)) 
ABMApplication.bas[107] End Sub 
ABMApplication.bas[108]  
ABMApplication.bas[109] public Sub StartServer(srvr As Server, srvrName As String, srvrPort As Int) 
ABMApplication.bas[110]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {32} & ABMShared.AppName, {33} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[111]  
ABMApplication.bas[112]  ' start the server 
ABMApplication.bas[113]  srvr.Initialize(srvrName) 
ABMApplication.bas[114]  
ABMApplication.bas[115]  srvr.AddFilter( {34} , {35} , False) 
ABMApplication.bas[116]  srvr.AddWebSocket( {36} & ABMShared.AppName, {37} ) 
ABMApplication.bas[117]  For i =0 To Pages.Size - 1 
ABMApplication.bas[118]  srvr.AddWebSocket( {38} & ABMShared.AppName & {39} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[119]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[120]  srvr.AddHandler( {40} & ABMShared.AppName & {41} & Pages.Get(i) & {42} , {43} , False) 
ABMApplication.bas[121]  End If 
ABMApplication.bas[122]  Next 
ABMApplication.bas[123]  srvr.AddBackgroundWorker( {44} ) 
ABMApplication.bas[124]  srvr.Port = srvrPort 
ABMApplication.bas[125]  
ABMApplication.bas[126]  #If RELEASE 
ABMApplication.bas[127]  srvr.SetStaticFilesOptions(CreateMap( {45} : {46} , {47} :True, {48} :False)) 
ABMApplication.bas[128]  #Else 
ABMApplication.bas[129]  srvr.SetStaticFilesOptions(CreateMap( {49} : {50} , {51} :False, {52} :False)) 
ABMApplication.bas[130]  #End If 
ABMApplication.bas[131]  srvr.Start 
ABMApplication.bas[132]  Dim jo As JavaObject = srvr 
ABMApplication.bas[133]  Dim connectors() As Object = jo.GetFieldJO( {53} ).RunMethod( {54} , Null) 
ABMApplication.bas[134]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[135]  For Each c As JavaObject In connectors 
ABMApplication.bas[136]  c.RunMethod( {55} , Array(timeout)) 
ABMApplication.bas[137]  Next 
ABMApplication.bas[138]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[139] End Sub 
ABMApplication.bas[140]  
ABMApplication.bas[141] public Sub StartServerHTTP2(srvr As Server, srvrName As String, srvrPort As Int, SSLsvrPort As Int, SSLKeyStoreFileName As String, SSLKeyStorePassword As String, SSLKeyManagerPassword As String) 
ABMApplication.bas[142]  ABM.WriteAppLauchPageToDisk(AppPage, File.DirApp & {56} & ABMShared.AppName, {57} , ABMShared.NeedsAuthorization) 
ABMApplication.bas[143]  
ABMApplication.bas[144]  Dim ssl As SslConfiguration 
ABMApplication.bas[145]  ssl.Initialize 
ABMApplication.bas[146]  ssl.SetKeyStorePath(File.DirApp, SSLKeyStoreFileName) 'path to keystore file 
ABMApplication.bas[147]  ssl.KeyStorePassword = SSLKeyStorePassword 
ABMApplication.bas[148]  ssl.KeyManagerPassword = SSLKeyManagerPassword 
ABMApplication.bas[149]  srvr.SetSslConfiguration(ssl, SSLsvrPort) 
ABMApplication.bas[150]  
ABMApplication.bas[151]  ' start the server 
ABMApplication.bas[152]  srvr.Initialize(srvrName) 
ABMApplication.bas[153]  
ABMApplication.bas[154]  srvr.AddFilter( {58} , {59} , False) 
ABMApplication.bas[155]  srvr.AddWebSocket( {60} & ABMShared.AppName, {61} ) 
ABMApplication.bas[156]  For i =0 To Pages.Size - 1 
ABMApplication.bas[157]  srvr.AddWebSocket( {62} & ABMShared.AppName & {63} & Pages.Get(i) , Pages.Get(i)) 
ABMApplication.bas[158]  If PageNeedsUpload.Get(i) Then 
ABMApplication.bas[159]  srvr.AddHandler( {64} & ABMShared.AppName & {65} & Pages.Get(i) & {66} , {67} , False) 
ABMApplication.bas[160]  End If 
ABMApplication.bas[161]  Next 
ABMApplication.bas[162]  srvr.AddBackgroundWorker( {68} ) 
ABMApplication.bas[163]  srvr.Port = srvrPort 
ABMApplication.bas[164]  srvr.Http2Enabled = True 
ABMApplication.bas[165]  #If RELEASE 
ABMApplication.bas[166]  srvr.SetStaticFilesOptions(CreateMap( {69} : {70} , {71} :True, {72} :False)) 
ABMApplication.bas[167]  #Else 
ABMApplication.bas[168]  srvr.SetStaticFilesOptions(CreateMap( {73} : {74} , {75} :False, {76} :False)) 
ABMApplication.bas[169]  #End If 
ABMApplication.bas[170]  srvr.Start 
ABMApplication.bas[171]  Dim jo As JavaObject = srvr 
ABMApplication.bas[172]  Dim connectors() As Object = jo.GetFieldJO( {77} ).RunMethod( {78} , Null) 
ABMApplication.bas[173]  Dim timeout As Long = ABMShared.SessionMaxInactiveIntervalSeconds*1000 
ABMApplication.bas[174]  For Each c As JavaObject In connectors 
ABMApplication.bas[175]  c.RunMethod( {79} , Array(timeout)) 
ABMApplication.bas[176]  Next 
ABMApplication.bas[177]  ABMShared.CachedPages = srvr.CreateThreadSafeMap 
ABMApplication.bas[178] End Sub 
ABMApplication.bas[179]  
ABMApplication.bas[180] public Sub BuildTheme() 
ABMApplication.bas[181]  ' start with the base theme defined in ABMShared 
ABMApplication.bas[182]  theme.Initialize( {80} ) 
ABMApplication.bas[183]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMApplication.bas[184]  
ABMApplication.bas[185]  ' add additional themes specific for this page 
ABMApplication.bas[186]  
ABMApplication.bas[187] End Sub 
ABMApplication.bas[188]  
ABMApplication.bas[189] public Sub BuildPage() 
ABMApplication.bas[190]  ' initialize the theme 
ABMApplication.bas[191]  BuildTheme 
ABMApplication.bas[192]  
ABMApplication.bas[193]  ' initialize this page using our theme 
ABMApplication.bas[194]  AppPage.InitializeWithTheme(ABMShared.AppName, {81} & ABMShared.AppName, False, ABMShared.SessionMaxInactiveIntervalSeconds , theme) 
ABMApplication.bas[195]  AppPage.ShowLoader=True 
ABMApplication.bas[196]  AppPage.PageTitle = {82} 
ABMApplication.bas[197]  AppPage.PageDescription = {83} 
ABMApplication.bas[198]  AppPage.PageHTMLName = {84} 
ABMApplication.bas[199]  AppPage.PageKeywords = {85} 
ABMApplication.bas[200]  AppPage.PageSiteMapPriority = {86} 
ABMApplication.bas[201]  AppPage.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ABMApplication.bas[202]  
ABMApplication.bas[203]  ' adding a navigation bar 
ABMApplication.bas[204]  
ABMApplication.bas[205]  
ABMApplication.bas[206]  ' create the page grid 
ABMApplication.bas[207]  AppPage.AddRows(1,True, {87} ).AddCells12(1, {88} ) 
ABMApplication.bas[208]  AppPage.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[209]  
ABMApplication.bas[210]  ' add a modal sheet template to enter contact information 
ABMApplication.bas[211]  AppPage.AddModalSheetTemplate(BuildLoginSheet) 
ABMApplication.bas[212]  
ABMApplication.bas[213]  ' add a error box template if the name is not entered 
ABMApplication.bas[214]  AppPage.AddModalSheetTemplate(BuildWrongInputModalSheet) 
ABMApplication.bas[215]  
ABMApplication.bas[216] End Sub 
ABMApplication.bas[217]  
ABMApplication.bas[218] public Sub ConnectPage() 
ABMApplication.bas[219]  ' you dynamic stuff 
ABMApplication.bas[220]  
ABMApplication.bas[221]  AppPage.Refresh ' IMPORTANT 
ABMApplication.bas[222]  
ABMApplication.bas[223]  ' Tell the browser we finished loading 
ABMApplication.bas[224]  AppPage.FinishedLoading 'IMPORTANT 
ABMApplication.bas[225]  
ABMApplication.bas[226]  AppPage.RestoreNavigationBarPosition 
ABMApplication.bas[227] End Sub 
ABMApplication.bas[228]  
ABMApplication.bas[229] Sub msbtn1_Clicked(Target As String) 
ABMApplication.bas[230]  Dim mymodal As ABMModalSheet = AppPage.ModalSheet( {89} ) 
ABMApplication.bas[231]  Dim inp1 As ABMInput = mymodal.Content.Component( {90} ) 
ABMApplication.bas[232]  Dim inp2 As ABMInput = mymodal.Content.Component( {91} ) 
ABMApplication.bas[233]  ' here check the login a page against your login database 
ABMApplication.bas[234]  If inp1.Text <> {92} Or inp2.Text <> {93} Then 
ABMApplication.bas[235]  AppPage.ShowModalSheet( {94} ) 
ABMApplication.bas[236]  Return 
ABMApplication.bas[237]  End If 
ABMApplication.bas[238]  ws.Session.SetAttribute( {95} , {96} ) 
ABMApplication.bas[239]  ABMShared.NavigateToPage(ws, {97} , {98} & InitialPage) 
ABMApplication.bas[240] End Sub 
ABMApplication.bas[241]  
ABMApplication.bas[242] Sub BuildLoginSheet() As ABMModalSheet 
ABMApplication.bas[243]  Dim myModal As ABMModalSheet 
ABMApplication.bas[244]  myModal.Initialize(AppPage, {99} , False, False, {100} ) 
ABMApplication.bas[245]  myModal.Content.UseTheme( {101} ) 
ABMApplication.bas[246]  myModal.Footer.UseTheme( {102} ) 
ABMApplication.bas[247]  myModal.IsDismissible = False 
ABMApplication.bas[248]  
ABMApplication.bas[249]  ' create the grid for the content 
ABMApplication.bas[250]  myModal.Content.AddRows(2,True, {103} ).AddCells12(1, {104} ) 
ABMApplication.bas[251]  myModal.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[252]  
ABMApplication.bas[253]  ' add paragraph 
ABMApplication.bas[254]  myModal.Content.Cell(1,1).AddComponent(ABMShared.BuildParagraph(AppPage, {105} , {106} ) ) 
ABMApplication.bas[255]  
ABMApplication.bas[256]  ' create the input fields for the content 
ABMApplication.bas[257]  Dim inp1 As ABMInput 
ABMApplication.bas[258]  inp1.Initialize(AppPage, {107} , ABM.INPUT_TEXT, {108} , False, {109} ) 
ABMApplication.bas[259]  myModal.Content.Cell(2,1).AddComponent(inp1) 
ABMApplication.bas[260]  
ABMApplication.bas[261]  Dim inp2 As ABMInput 
ABMApplication.bas[262]  inp2.Initialize(AppPage, {110} , ABM.INPUT_TEXT, {111} , False, {112} ) 
ABMApplication.bas[263]  myModal.Content.Cell(2,1).AddComponent(inp2) 
ABMApplication.bas[264]  
ABMApplication.bas[265]  ' create the grid for the footer 
ABMApplication.bas[266]  ' we add a row without the default 20px padding so we need to use AddRowsM(). If we do not use this method, a scrollbar will appear to the sheet. 
ABMApplication.bas[267]  myModal.Footer.AddRowsM(1,True,0,0, {113} ).AddCellsOS(1,9,9,9,3,3,3, {114} ) 
ABMApplication.bas[268]  myModal.Footer.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[269]  
ABMApplication.bas[270]  ' create the button for the footer 
ABMApplication.bas[271]  Dim msbtn1 As ABMButton 
ABMApplication.bas[272]  msbtn1.InitializeFlat(AppPage, {115} , {116} , {117} , {118} , {119} ) 
ABMApplication.bas[273]  myModal.Footer.Cell(1,1).AddComponent(msbtn1) 
ABMApplication.bas[274]  
ABMApplication.bas[275]  Return myModal 
ABMApplication.bas[276] End Sub 
ABMApplication.bas[277]  
ABMApplication.bas[278] Sub BuildWrongInputModalSheet() As ABMModalSheet 
ABMApplication.bas[279]  Dim myModalError As ABMModalSheet 
ABMApplication.bas[280]  myModalError.Initialize(AppPage, {120} , False, False, {121} ) 
ABMApplication.bas[281]  myModalError.Content.UseTheme( {122} ) 
ABMApplication.bas[282]  myModalError.Footer.UseTheme( {123} ) 
ABMApplication.bas[283]  myModalError.IsDismissible = True 
ABMApplication.bas[284]  
ABMApplication.bas[285]  ' create the grid for the content 
ABMApplication.bas[286]  myModalError.Content.AddRows(1,True, {124} ).AddCells12(1, {125} ) 
ABMApplication.bas[287]  myModalError.Content.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMApplication.bas[288]  
ABMApplication.bas[289]  Dim lbl1 As ABMLabel 
ABMApplication.bas[290]  lbl1.Initialize(AppPage, {126} , {127} ,ABM.SIZE_PARAGRAPH, False, {128} ) 
ABMApplication.bas[291]  myModalError.Content.Cell(1,1).AddComponent(lbl1) 
ABMApplication.bas[292]  
ABMApplication.bas[293]  Return myModalError 
ABMApplication.bas[294] End Sub 
ABMApplication.bas[295]  
ABMApplication.bas[296] ' clicked on the navigation bar 
ABMApplication.bas[297] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMApplication.bas[298]  AppPage.SaveNavigationBarPosition 
ABMApplication.bas[299] End Sub 
Analysing: ABMPageTemplate.bas
ABMPageTemplate.bas[0] ﻿Type=Class 
ABMPageTemplate.bas[0] Version=4.7 
ABMPageTemplate.bas[0] ModulesStructureVersion=1 
ABMPageTemplate.bas[0] B4J=true 
ABMPageTemplate.bas[0] @EndOfDesignText@ 
ABMPageTemplate.bas[1] 'Class module 
ABMPageTemplate.bas[2] Sub Class_Globals 
ABMPageTemplate.bas[3]  Private ws As WebSocket 'ignore 
ABMPageTemplate.bas[4]  ' will hold our page information 
ABMPageTemplate.bas[5]  Public page As ABMPage 
ABMPageTemplate.bas[6]  ' page theme 
ABMPageTemplate.bas[7]  Private theme As ABMTheme 
ABMPageTemplate.bas[8]  ' to access the constants 
ABMPageTemplate.bas[9]  Private ABM As ABMaterial 'ignore 
ABMPageTemplate.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ABMPageTemplate.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
ABMPageTemplate.bas[12]  ' will hold the unique browsers window id 
ABMPageTemplate.bas[13]  Private ABMPageId As String = {1} 
ABMPageTemplate.bas[14]  ' your own variables 
ABMPageTemplate.bas[15]  
ABMPageTemplate.bas[16] End Sub 
ABMPageTemplate.bas[17]  
ABMPageTemplate.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
ABMPageTemplate.bas[19] Public Sub Initialize 
ABMPageTemplate.bas[20]  ' build the local structure IMPORTANT! 
ABMPageTemplate.bas[21]  BuildPage 
ABMPageTemplate.bas[22] End Sub 
ABMPageTemplate.bas[23]  
ABMPageTemplate.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMPageTemplate.bas[25]  Log( {2} ) 
ABMPageTemplate.bas[26]  ws = WebSocket1 
ABMPageTemplate.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ABMPageTemplate.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ABMPageTemplate.bas[29]  
ABMPageTemplate.bas[30]  If ABMShared.NeedsAuthorization Then 
ABMPageTemplate.bas[31]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
ABMPageTemplate.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
ABMPageTemplate.bas[33]  Return 
ABMPageTemplate.bas[34]  End If 
ABMPageTemplate.bas[35]  End If 
ABMPageTemplate.bas[36]  
ABMPageTemplate.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ABMPageTemplate.bas[38]  If page.ComesFromPageCache Then 
ABMPageTemplate.bas[39]  ' refresh the page 
ABMPageTemplate.bas[40]  page.Refresh 
ABMPageTemplate.bas[41]  ' Tell the browser we finished loading 
ABMPageTemplate.bas[42]  page.FinishedLoading 
ABMPageTemplate.bas[43]  Else 
ABMPageTemplate.bas[44]  ' Prepare the page 
ABMPageTemplate.bas[45]  page.Prepare 
ABMPageTemplate.bas[46]  ' load the dynamic content 
ABMPageTemplate.bas[47]  ConnectPage 
ABMPageTemplate.bas[48]  End If 
ABMPageTemplate.bas[49]  Log(ABMPageId) 
ABMPageTemplate.bas[50]  
ABMPageTemplate.bas[51] End Sub 
ABMPageTemplate.bas[52]  
ABMPageTemplate.bas[53] Private Sub WebSocket_Disconnected 
ABMPageTemplate.bas[54]  Log( {7} ) 
ABMPageTemplate.bas[55] End Sub 
ABMPageTemplate.bas[56]  
ABMPageTemplate.bas[57] Sub Page_ParseEvent(Params As Map) 
ABMPageTemplate.bas[58]  Dim eventName As String = Params.Get( {8} ) 
ABMPageTemplate.bas[59]  Dim eventParams() As String = Regex.Split( {9} ,Params.Get( {10} )) 
ABMPageTemplate.bas[60]  If eventName = {11} Then 
ABMPageTemplate.bas[61]  Log( {12} ) 
ABMPageTemplate.bas[62]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMPageTemplate.bas[63]  Return 
ABMPageTemplate.bas[64]  End If 
ABMPageTemplate.bas[65]  If SubExists(Me, eventName) Then 
ABMPageTemplate.bas[66]  Params.Remove( {13} ) 
ABMPageTemplate.bas[67]  Params.Remove( {14} ) 
ABMPageTemplate.bas[68]  Select Case Params.Size 
ABMPageTemplate.bas[69]  Case 0 
ABMPageTemplate.bas[70]  CallSub(Me, eventName) 
ABMPageTemplate.bas[71]  Case 1 
ABMPageTemplate.bas[72]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMPageTemplate.bas[73]  Case 2 
ABMPageTemplate.bas[74]  If Params.get(eventParams(0)) = {15} Then 
ABMPageTemplate.bas[75]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMPageTemplate.bas[76]  CallSub2(Me, eventName, PassedTables) 
ABMPageTemplate.bas[77]  Else 
ABMPageTemplate.bas[78]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMPageTemplate.bas[79]  End If 
ABMPageTemplate.bas[80]  Case Else 
ABMPageTemplate.bas[81]  ' cannot be called directly, to many param 
ABMPageTemplate.bas[82]  CallSub2(Me, eventName, Params) 
ABMPageTemplate.bas[83]  End Select 
ABMPageTemplate.bas[84]  End If 
ABMPageTemplate.bas[85] End Sub 
ABMPageTemplate.bas[86]  
ABMPageTemplate.bas[87] public Sub BuildTheme() 
ABMPageTemplate.bas[88]  ' start with the base theme defined in ABMShared 
ABMPageTemplate.bas[89]  theme.Initialize( {16} ) 
ABMPageTemplate.bas[90]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMPageTemplate.bas[91]  
ABMPageTemplate.bas[92]  ' add additional themes specific for this page 
ABMPageTemplate.bas[93]  
ABMPageTemplate.bas[94] End Sub 
ABMPageTemplate.bas[95]  
ABMPageTemplate.bas[96] public Sub BuildPage() 
ABMPageTemplate.bas[97]  ' initialize the theme 
ABMPageTemplate.bas[98]  BuildTheme 
ABMPageTemplate.bas[99]  
ABMPageTemplate.bas[100]  ' initialize this page using our theme 
ABMPageTemplate.bas[101]  page.InitializeWithTheme(Name, {17} & ABMShared.AppName & {18} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMPageTemplate.bas[102]  page.ShowLoader=True 
ABMPageTemplate.bas[103]  page.PageHTMLName = {19} 
ABMPageTemplate.bas[104]  page.PageTitle = {20} 
ABMPageTemplate.bas[105]  page.PageDescription = {21} 
ABMPageTemplate.bas[106]  page.PageKeywords = {22} 
ABMPageTemplate.bas[107]  page.PageSiteMapPriority = {23} 
ABMPageTemplate.bas[108]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ABMPageTemplate.bas[109]  
ABMPageTemplate.bas[110]  page.ShowConnectedIndicator = True 
ABMPageTemplate.bas[111]  
ABMPageTemplate.bas[112]  ' adding a navigation bar 
ABMPageTemplate.bas[113]  
ABMPageTemplate.bas[114]  
ABMPageTemplate.bas[115]  ' create the page grid 
ABMPageTemplate.bas[116]  page.AddRows(2,True, {24} ).AddCells12(1, {25} ) 
ABMPageTemplate.bas[117]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMPageTemplate.bas[118]  
ABMPageTemplate.bas[119] End Sub 
ABMPageTemplate.bas[120]  
ABMPageTemplate.bas[121] public Sub ConnectPage() 
ABMPageTemplate.bas[122] ' connecting the navigation bar 
ABMPageTemplate.bas[123]  
ABMPageTemplate.bas[124]  
ABMPageTemplate.bas[125] ' init all your own variables (like a List, Map) and add your components 
ABMPageTemplate.bas[126]  
ABMPageTemplate.bas[127] ' page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {26} , {27} )) 
ABMPageTemplate.bas[128] ' 
ABMPageTemplate.bas[129] ' Dim btn As ABMButton 
ABMPageTemplate.bas[130] ' btn.InitializeRaised(page, {28} , {29} , {30} , {31} , {32} ) 
ABMPageTemplate.bas[131] ' page.Cell(2,1).AddComponent(btn) 
ABMPageTemplate.bas[132]  
ABMPageTemplate.bas[133]  ' refresh the page 
ABMPageTemplate.bas[134]  page.Refresh 
ABMPageTemplate.bas[135]  ' Tell the browser we finished loading 
ABMPageTemplate.bas[136]  page.FinishedLoading 
ABMPageTemplate.bas[137]  ' restoring the navigation bar position 
ABMPageTemplate.bas[138]  page.RestoreNavigationBarPosition 
ABMPageTemplate.bas[139] End Sub 
ABMPageTemplate.bas[140]  
ABMPageTemplate.bas[141] ' clicked on the navigation bar 
ABMPageTemplate.bas[142] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMPageTemplate.bas[143]  ' saving the navigation bar position 
ABMPageTemplate.bas[144]  page.SaveNavigationBarPosition 
ABMPageTemplate.bas[145]  If Action = {33} Then 
ABMPageTemplate.bas[146]  ABMShared.LogOff(page) 
ABMPageTemplate.bas[147]  Return 
ABMPageTemplate.bas[148]  End If 
ABMPageTemplate.bas[149]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
ABMPageTemplate.bas[150] End Sub 
ABMPageTemplate.bas[151]  
ABMPageTemplate.bas[152] Sub Page_FileUploaded(FileName As String, success As Boolean) 
ABMPageTemplate.bas[153]  
ABMPageTemplate.bas[154] End Sub 
ABMPageTemplate.bas[155]  
ABMPageTemplate.bas[156] Sub Page_ToastClicked(ToastId As String, Action As String) 
ABMPageTemplate.bas[157]  
ABMPageTemplate.bas[158] End Sub 
ABMPageTemplate.bas[159]  
ABMPageTemplate.bas[160] Sub Page_ToastDismissed(ToastId As String) 
ABMPageTemplate.bas[161]  
ABMPageTemplate.bas[162] End Sub 
ABMPageTemplate.bas[163]  
ABMPageTemplate.bas[164] Sub Page_Authenticated(Params As Map) 
ABMPageTemplate.bas[165]  
ABMPageTemplate.bas[166] End Sub 
ABMPageTemplate.bas[167]  
ABMPageTemplate.bas[168] Sub Page_FirebaseAuthError(extra As String) 
ABMPageTemplate.bas[169]  
ABMPageTemplate.bas[170] End Sub 
ABMPageTemplate.bas[171]  
ABMPageTemplate.bas[172] Sub Page_FirebaseAuthStateChanged(IsLoggedIn As Boolean) 
ABMPageTemplate.bas[173]  
ABMPageTemplate.bas[174] End Sub 
ABMPageTemplate.bas[175]  
ABMPageTemplate.bas[176] Sub Page_FirebaseStorageError(jobID As String, extra As String) 
ABMPageTemplate.bas[177]  
ABMPageTemplate.bas[178] End Sub 
ABMPageTemplate.bas[179]  
ABMPageTemplate.bas[180] Sub Page_FirebaseStorageResult(jobID As String, extra As String) 
ABMPageTemplate.bas[181]  
ABMPageTemplate.bas[182] End Sub 
ABMPageTemplate.bas[183]  
ABMPageTemplate.bas[184] Sub Page_ModalSheetDismissed(ModalSheetName As String) 
ABMPageTemplate.bas[185]  
ABMPageTemplate.bas[186] End Sub 
ABMPageTemplate.bas[187]  
ABMPageTemplate.bas[188] Sub Page_NextContent(TriggerComponent As String) 
ABMPageTemplate.bas[189]  
ABMPageTemplate.bas[190] End Sub 
ABMPageTemplate.bas[191]  
ABMPageTemplate.bas[192] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
ABMPageTemplate.bas[193]  
ABMPageTemplate.bas[194] End Sub 
Analysing: ABMSessionCreator.bas
ABMSessionCreator.bas[0] ﻿Type=Class 
ABMSessionCreator.bas[0] Version=4.7 
ABMSessionCreator.bas[0] ModulesStructureVersion=1 
ABMSessionCreator.bas[0] B4J=true 
ABMSessionCreator.bas[0] @EndOfDesignText@ 
ABMSessionCreator.bas[1] 'Filter class 
ABMSessionCreator.bas[2] Sub Class_Globals 
ABMSessionCreator.bas[3]  
ABMSessionCreator.bas[4] End Sub 
ABMSessionCreator.bas[5]  
ABMSessionCreator.bas[6] Public Sub Initialize 
ABMSessionCreator.bas[7]  
ABMSessionCreator.bas[8] End Sub 
ABMSessionCreator.bas[9]  
ABMSessionCreator.bas[10] 'Return True to allow the request to proceed. 
ABMSessionCreator.bas[11] Public Sub Filter(req As ServletRequest, resp As ServletResponse) As Boolean 
ABMSessionCreator.bas[12]  DateTime.DateFormat = {0} 
ABMSessionCreator.bas[13]  DateTime.TimeFormat = {1} 
ABMSessionCreator.bas[14]  
ABMSessionCreator.bas[15]  Log( {2} & DateTime.Date(DateTime.Now) & {3} & DateTime.Time(DateTime.now)) 
ABMSessionCreator.bas[16]  
ABMSessionCreator.bas[17]  req.GetSession 'a new session will be created if a session doesn't exist. 
ABMSessionCreator.bas[18]  Return True 
ABMSessionCreator.bas[19] End Sub 
Analysing: ABMUploadHandler.bas
ABMUploadHandler.bas[0] ﻿Type=Class 
ABMUploadHandler.bas[0] Version=4.7 
ABMUploadHandler.bas[0] ModulesStructureVersion=1 
ABMUploadHandler.bas[0] B4J=true 
ABMUploadHandler.bas[0] @EndOfDesignText@ 
ABMUploadHandler.bas[1] 'Handler class 
ABMUploadHandler.bas[2] Sub Class_Globals 
ABMUploadHandler.bas[3]  Dim ABM As ABMaterial 
ABMUploadHandler.bas[4] End Sub 
ABMUploadHandler.bas[5]  
ABMUploadHandler.bas[6] Public Sub Initialize 
ABMUploadHandler.bas[7]  
ABMUploadHandler.bas[8] End Sub 
ABMUploadHandler.bas[9]  
ABMUploadHandler.bas[10] Sub Handle(req As ServletRequest, resp As ServletResponse) 
ABMUploadHandler.bas[11]  'get the callback page from the session (multiple modules can use this handler) 
ABMUploadHandler.bas[12]  Dim callback As Object = req.GetSession.GetAttribute( {0} ) 
ABMUploadHandler.bas[13]  Dim downloadfolder As String = File.Combine(File.DirApp, req.GetSession.GetAttribute( {1} )) 
ABMUploadHandler.bas[14]  Dim MaxSize As Int 
ABMUploadHandler.bas[15]  Try 
ABMUploadHandler.bas[16]  MaxSize = req.GetSession.GetAttribute( {2} ) 
ABMUploadHandler.bas[17]  Catch 
ABMUploadHandler.bas[18]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[19]  Return 
ABMUploadHandler.bas[20]  End Try 
ABMUploadHandler.bas[21]  Dim data As Map 
ABMUploadHandler.bas[22]  Dim fileName As String 
ABMUploadHandler.bas[23]  Dim tmpFileName As String 
ABMUploadHandler.bas[24]  
ABMUploadHandler.bas[25]  Try 
ABMUploadHandler.bas[26]  data = req.GetMultipartData(downloadfolder, MaxSize) 
ABMUploadHandler.bas[27]  Dim filePart As Part = data.Get( {3} ) 
ABMUploadHandler.bas[28]  If filePart.IsInitialized Then 
ABMUploadHandler.bas[29]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[30]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[31]  If ABM.HandleUpload(downloadfolder, tmpFileName, fileName) Then 
ABMUploadHandler.bas[32]  If SubExists(callback, {4} ) Then 
ABMUploadHandler.bas[33]  CallSubDelayed3(callback, {5} , fileName, True) 
ABMUploadHandler.bas[34]  End If 
ABMUploadHandler.bas[35]  Else 
ABMUploadHandler.bas[36]  If SubExists(callback, {6} ) Then 
ABMUploadHandler.bas[37]  CallSubDelayed3(callback, {7} , fileName, False) 
ABMUploadHandler.bas[38]  End If 
ABMUploadHandler.bas[39]  End If 
ABMUploadHandler.bas[40]  Else ' try image 
ABMUploadHandler.bas[41]  Dim filePart As Part = data.Get( {8} ) 
ABMUploadHandler.bas[42]  fileName = filePart.SubmittedFilename 
ABMUploadHandler.bas[43]  tmpFileName = filePart.TempFile 
ABMUploadHandler.bas[44]  If ABM.HandleUpload(downloadfolder, tmpFileName, fileName) Then 
ABMUploadHandler.bas[45]  If SubExists(callback, {9} ) Then 
ABMUploadHandler.bas[46]  CallSubDelayed3(callback, {10} , fileName, True) 
ABMUploadHandler.bas[47]  End If 
ABMUploadHandler.bas[48]  Else 
ABMUploadHandler.bas[49]  If SubExists(callback, {11} ) Then 
ABMUploadHandler.bas[50]  CallSubDelayed3(callback, {12} , fileName, False) 
ABMUploadHandler.bas[51]  End If 
ABMUploadHandler.bas[52]  End If 
ABMUploadHandler.bas[53]  End If 
ABMUploadHandler.bas[54]  
ABMUploadHandler.bas[55]  Catch 
ABMUploadHandler.bas[56]  resp.SendError(500, LastException.Message) 
ABMUploadHandler.bas[57]  If SubExists(callback, {13} ) Then 
ABMUploadHandler.bas[58]  CallSubDelayed3(callback, {14} , LastException.Message , False) 
ABMUploadHandler.bas[59]  End If 
ABMUploadHandler.bas[60]  End Try 
ABMUploadHandler.bas[61] End Sub 
Analysing: ABMCacheScavenger.bas
ABMCacheScavenger.bas[0] ﻿Type=Class 
ABMCacheScavenger.bas[0] Version=4.7 
ABMCacheScavenger.bas[0] ModulesStructureVersion=1 
ABMCacheScavenger.bas[0] B4J=true 
ABMCacheScavenger.bas[0] @EndOfDesignText@ 
ABMCacheScavenger.bas[1] 'CacheScavenger 
ABMCacheScavenger.bas[2] Sub Class_Globals 
ABMCacheScavenger.bas[3]  Private scavengeTimer As Timer 
ABMCacheScavenger.bas[4]  Private ABM As ABMaterial 
ABMCacheScavenger.bas[5] End Sub 
ABMCacheScavenger.bas[6]  
ABMCacheScavenger.bas[7] Public Sub Initialize 
ABMCacheScavenger.bas[8]  scavengeTimer.Initialize( {0} , ABMShared.CacheScavengePeriodSeconds * 1000) 
ABMCacheScavenger.bas[9]  scavengeTimer.Enabled = True 
ABMCacheScavenger.bas[10]  StartMessageLoop '<- don't forget! 
ABMCacheScavenger.bas[11] End Sub 
ABMCacheScavenger.bas[12]  
ABMCacheScavenger.bas[13] Sub ScavengeTimer_Tick 
ABMCacheScavenger.bas[14]  'do the work required 
ABMCacheScavenger.bas[15]  ABM.ScavengeCache(ABMShared.CachedPages) 
ABMCacheScavenger.bas[16] End Sub 
Analysing: ABMPageTemplateAlternative.bas
ABMPageTemplateAlternative.bas[0] ﻿Type=Class 
ABMPageTemplateAlternative.bas[0] Version=4.7 
ABMPageTemplateAlternative.bas[0] ModulesStructureVersion=1 
ABMPageTemplateAlternative.bas[0] B4J=true 
ABMPageTemplateAlternative.bas[0] @EndOfDesignText@ 
ABMPageTemplateAlternative.bas[1] 'Class module 
ABMPageTemplateAlternative.bas[2] Sub Class_Globals 
ABMPageTemplateAlternative.bas[3]  Private ws As WebSocket 'ignore 
ABMPageTemplateAlternative.bas[4]  ' will hold our page information 
ABMPageTemplateAlternative.bas[5]  Public page As ABMPage 
ABMPageTemplateAlternative.bas[6]  ' page theme 
ABMPageTemplateAlternative.bas[7]  Private theme As ABMTheme 
ABMPageTemplateAlternative.bas[8]  ' to access the constants 
ABMPageTemplateAlternative.bas[9]  Private ABM As ABMaterial 'ignore 
ABMPageTemplateAlternative.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ABMPageTemplateAlternative.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
ABMPageTemplateAlternative.bas[12]  ' will hold the unique browsers window id 
ABMPageTemplateAlternative.bas[13]  Private ABMPageId As String = {1} 
ABMPageTemplateAlternative.bas[14]  
ABMPageTemplateAlternative.bas[15] End Sub 
ABMPageTemplateAlternative.bas[16]  
ABMPageTemplateAlternative.bas[17] 'Initializes the object. You can add parameters to this method if needed. 
ABMPageTemplateAlternative.bas[18] Public Sub Initialize 
ABMPageTemplateAlternative.bas[19]  ' build the local structure IMPORTANT! 
ABMPageTemplateAlternative.bas[20]  ' start with the base theme defined in ABMShared 
ABMPageTemplateAlternative.bas[21]  theme.Initialize( {2} ) 
ABMPageTemplateAlternative.bas[22]  theme.AddABMTheme(ABMShared.MyTheme) 
ABMPageTemplateAlternative.bas[23]  
ABMPageTemplateAlternative.bas[24]  ' add additional themes specific for this page 
ABMPageTemplateAlternative.bas[25]  
ABMPageTemplateAlternative.bas[26]  ' initialize this page using our theme 
ABMPageTemplateAlternative.bas[27]  page.InitializeWithTheme(Name, {3} & ABMShared.AppName & {4} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ABMPageTemplateAlternative.bas[28]  page.ShowLoader=True 
ABMPageTemplateAlternative.bas[29]  page.PageHTMLName = {5} 
ABMPageTemplateAlternative.bas[30]  page.PageTitle = {6} 
ABMPageTemplateAlternative.bas[31]  page.PageDescription = {7} 
ABMPageTemplateAlternative.bas[32]  page.PageKeywords = {8} 
ABMPageTemplateAlternative.bas[33]  page.PageSiteMapPriority = {9} 
ABMPageTemplateAlternative.bas[34]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ABMPageTemplateAlternative.bas[35]  
ABMPageTemplateAlternative.bas[36]  page.ShowConnectedIndicator = True 
ABMPageTemplateAlternative.bas[37]  
ABMPageTemplateAlternative.bas[38]  ' adding a navigation bar 
ABMPageTemplateAlternative.bas[39]  
ABMPageTemplateAlternative.bas[40]  
ABMPageTemplateAlternative.bas[41]  ' create the page grid 
ABMPageTemplateAlternative.bas[42]  page.AddRows(2,True, {10} ).AddCells12(1, {11} ) 
ABMPageTemplateAlternative.bas[43]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ABMPageTemplateAlternative.bas[44] End Sub 
ABMPageTemplateAlternative.bas[45]  
ABMPageTemplateAlternative.bas[46] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ABMPageTemplateAlternative.bas[47]  Log( {12} ) 
ABMPageTemplateAlternative.bas[48]  ws = WebSocket1 
ABMPageTemplateAlternative.bas[49]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ABMPageTemplateAlternative.bas[50]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ABMPageTemplateAlternative.bas[51]  
ABMPageTemplateAlternative.bas[52]  If ABMShared.NeedsAuthorization Then 
ABMPageTemplateAlternative.bas[53]  If session.GetAttribute2( {13} , {14} ) = {15} Then 
ABMPageTemplateAlternative.bas[54]  ABMShared.NavigateToPage(ws, ABMPageId, {16} ) 
ABMPageTemplateAlternative.bas[55]  Return 
ABMPageTemplateAlternative.bas[56]  End If 
ABMPageTemplateAlternative.bas[57]  End If 
ABMPageTemplateAlternative.bas[58]  
ABMPageTemplateAlternative.bas[59]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ABMPageTemplateAlternative.bas[60]  If page.ComesFromPageCache Then 
ABMPageTemplateAlternative.bas[61]  ' refresh the page 
ABMPageTemplateAlternative.bas[62]  page.Refresh 
ABMPageTemplateAlternative.bas[63]  ' Tell the browser we finished loading 
ABMPageTemplateAlternative.bas[64]  page.FinishedLoading 
ABMPageTemplateAlternative.bas[65]  Else 
ABMPageTemplateAlternative.bas[66]  ' Prepare the page 
ABMPageTemplateAlternative.bas[67]  page.Prepare 
ABMPageTemplateAlternative.bas[68]  ' load the dynamic content 
ABMPageTemplateAlternative.bas[69]  
ABMPageTemplateAlternative.bas[70]  ' connecting the navigation bar 
ABMPageTemplateAlternative.bas[71]  
ABMPageTemplateAlternative.bas[72]  ' init all your own variables (like a List, Map) and add your components 
ABMPageTemplateAlternative.bas[73]  ' page.Cell(1,1).AddComponent(ABMShared.BuildParagraph(page, {17} , {18} )) 
ABMPageTemplateAlternative.bas[74]  ' 
ABMPageTemplateAlternative.bas[75]  ' Dim btn As ABMButton 
ABMPageTemplateAlternative.bas[76]  ' btn.InitializeRaised(page, {19} , {20} , {21} , {22} , {23} ) 
ABMPageTemplateAlternative.bas[77]  ' page.Cell(2,1).AddComponent(btn) 
ABMPageTemplateAlternative.bas[78]  
ABMPageTemplateAlternative.bas[79]  ' refresh the page 
ABMPageTemplateAlternative.bas[80]  page.Refresh 
ABMPageTemplateAlternative.bas[81]  ' Tell the browser we finished loading 
ABMPageTemplateAlternative.bas[82]  page.FinishedLoading 
ABMPageTemplateAlternative.bas[83]  ' restoring the navigation bar position 
ABMPageTemplateAlternative.bas[84]  page.RestoreNavigationBarPosition 
ABMPageTemplateAlternative.bas[85]  End If 
ABMPageTemplateAlternative.bas[86]  Log(ABMPageId) 
ABMPageTemplateAlternative.bas[87] End Sub 
ABMPageTemplateAlternative.bas[88]  
ABMPageTemplateAlternative.bas[89] Private Sub WebSocket_Disconnected 
ABMPageTemplateAlternative.bas[90]  Log( {24} ) 
ABMPageTemplateAlternative.bas[91] End Sub 
ABMPageTemplateAlternative.bas[92]  
ABMPageTemplateAlternative.bas[93] Sub Page_ParseEvent(Params As Map) 
ABMPageTemplateAlternative.bas[94]  Dim eventName As String = Params.Get( {25} ) 
ABMPageTemplateAlternative.bas[95]  Dim eventParams() As String = Regex.Split( {26} ,Params.Get( {27} )) 
ABMPageTemplateAlternative.bas[96]  If eventName = {28} Then 
ABMPageTemplateAlternative.bas[97]  Log( {29} ) 
ABMPageTemplateAlternative.bas[98]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ABMPageTemplateAlternative.bas[99]  Return 
ABMPageTemplateAlternative.bas[100]  End If 
ABMPageTemplateAlternative.bas[101]  If SubExists(Me, eventName) Then 
ABMPageTemplateAlternative.bas[102]  Params.Remove( {30} ) 
ABMPageTemplateAlternative.bas[103]  Params.Remove( {31} ) 
ABMPageTemplateAlternative.bas[104]  Select Case Params.Size 
ABMPageTemplateAlternative.bas[105]  Case 0 
ABMPageTemplateAlternative.bas[106]  CallSub(Me, eventName) 
ABMPageTemplateAlternative.bas[107]  Case 1 
ABMPageTemplateAlternative.bas[108]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ABMPageTemplateAlternative.bas[109]  Case 2 
ABMPageTemplateAlternative.bas[110]  If Params.get(eventParams(0)) = {32} Then 
ABMPageTemplateAlternative.bas[111]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ABMPageTemplateAlternative.bas[112]  CallSub2(Me, eventName, PassedTables) 
ABMPageTemplateAlternative.bas[113]  Else 
ABMPageTemplateAlternative.bas[114]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ABMPageTemplateAlternative.bas[115]  End If 
ABMPageTemplateAlternative.bas[116]  Case Else 
ABMPageTemplateAlternative.bas[117]  ' cannot be called directly, to many param 
ABMPageTemplateAlternative.bas[118]  CallSub2(Me, eventName, Params) 
ABMPageTemplateAlternative.bas[119]  End Select 
ABMPageTemplateAlternative.bas[120]  End If 
ABMPageTemplateAlternative.bas[121] End Sub 
ABMPageTemplateAlternative.bas[122]  
ABMPageTemplateAlternative.bas[123] ' clicked on the navigation bar 
ABMPageTemplateAlternative.bas[124] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ABMPageTemplateAlternative.bas[125]  ' saving the navigation bar position 
ABMPageTemplateAlternative.bas[126]  page.SaveNavigationBarPosition 
ABMPageTemplateAlternative.bas[127]  If Action = {33} Then 
ABMPageTemplateAlternative.bas[128]  ABMShared.LogOff(page) 
ABMPageTemplateAlternative.bas[129]  Return 
ABMPageTemplateAlternative.bas[130]  End If 
ABMPageTemplateAlternative.bas[131]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
ABMPageTemplateAlternative.bas[132] End Sub 
ABMPageTemplateAlternative.bas[133]  
ABMPageTemplateAlternative.bas[134]  
ABMPageTemplateAlternative.bas[135] Sub Page_FileUploaded(FileName As String, success As Boolean) 
ABMPageTemplateAlternative.bas[136]  
ABMPageTemplateAlternative.bas[137] End Sub 
ABMPageTemplateAlternative.bas[138]  
ABMPageTemplateAlternative.bas[139] Sub Page_ToastClicked(ToastId As String, Action As String) 
ABMPageTemplateAlternative.bas[140]  
ABMPageTemplateAlternative.bas[141] End Sub 
ABMPageTemplateAlternative.bas[142]  
ABMPageTemplateAlternative.bas[143] Sub Page_ToastDismissed(ToastId As String) 
ABMPageTemplateAlternative.bas[144]  
ABMPageTemplateAlternative.bas[145] End Sub 
ABMPageTemplateAlternative.bas[146]  
ABMPageTemplateAlternative.bas[147] Sub Page_Authenticated(Params As Map) 
ABMPageTemplateAlternative.bas[148]  
ABMPageTemplateAlternative.bas[149] End Sub 
ABMPageTemplateAlternative.bas[150]  
ABMPageTemplateAlternative.bas[151] Sub Page_FirebaseAuthError(extra As String) 
ABMPageTemplateAlternative.bas[152]  
ABMPageTemplateAlternative.bas[153] End Sub 
ABMPageTemplateAlternative.bas[154]  
ABMPageTemplateAlternative.bas[155] Sub Page_FirebaseAuthStateChanged(IsLoggedIn As Boolean) 
ABMPageTemplateAlternative.bas[156]  
ABMPageTemplateAlternative.bas[157] End Sub 
ABMPageTemplateAlternative.bas[158]  
ABMPageTemplateAlternative.bas[159] Sub Page_FirebaseStorageError(jobID As String, extra As String) 
ABMPageTemplateAlternative.bas[160]  
ABMPageTemplateAlternative.bas[161] End Sub 
ABMPageTemplateAlternative.bas[162]  
ABMPageTemplateAlternative.bas[163] Sub Page_FirebaseStorageResult(jobID As String, extra As String) 
ABMPageTemplateAlternative.bas[164]  
ABMPageTemplateAlternative.bas[165] End Sub 
ABMPageTemplateAlternative.bas[166]  
ABMPageTemplateAlternative.bas[167] Sub Page_ModalSheetDismissed(ModalSheetName As String) 
ABMPageTemplateAlternative.bas[168]  
ABMPageTemplateAlternative.bas[169] End Sub 
ABMPageTemplateAlternative.bas[170]  
ABMPageTemplateAlternative.bas[171] Sub Page_NextContent(TriggerComponent As String) 
ABMPageTemplateAlternative.bas[172]  
ABMPageTemplateAlternative.bas[173] End Sub 
ABMPageTemplateAlternative.bas[174]  
ABMPageTemplateAlternative.bas[175] Sub Page_SignedOffSocialNetwork(Network As String, Extra As String) 
ABMPageTemplateAlternative.bas[176]  
ABMPageTemplateAlternative.bas[177] End Sub 
ABMPageTemplateAlternative.bas[178]  
Analysing: ChatPage.bas
ChatPage.bas[0] ﻿Type=Class 
ChatPage.bas[0] Version=4.7 
ChatPage.bas[0] ModulesStructureVersion=1 
ChatPage.bas[0] B4J=true 
ChatPage.bas[0] @EndOfDesignText@ 
ChatPage.bas[1] 'Class module 
ChatPage.bas[2] Sub Class_Globals 
ChatPage.bas[3]  Private ws As WebSocket 'ignore 
ChatPage.bas[4]  ' will hold our page information 
ChatPage.bas[5]  Public page As ABMPage 
ChatPage.bas[6]  ' page theme 
ChatPage.bas[7]  Private theme As ABMTheme 
ChatPage.bas[8]  ' to access the constants 
ChatPage.bas[9]  Private ABM As ABMaterial 'ignore 
ChatPage.bas[10]  ' name of the page, must be the same as the class name (case sensitive!) 
ChatPage.bas[11]  Public Name As String = {0} '<-------------------------------------------------------- IMPORTANT 
ChatPage.bas[12]  ' will hold the unique browsers window id 
ChatPage.bas[13]  Private ABMPageId As String = {1} 
ChatPage.bas[14]  ' your own variables 
ChatPage.bas[15]  Public ChatName As String 
ChatPage.bas[16] End Sub 
ChatPage.bas[17]  
ChatPage.bas[18] 'Initializes the object. You can add parameters to this method if needed. 
ChatPage.bas[19] Public Sub Initialize 
ChatPage.bas[20]  ' build the local structure IMPORTANT! 
ChatPage.bas[21]  BuildPage 
ChatPage.bas[22] End Sub 
ChatPage.bas[23]  
ChatPage.bas[24] Private Sub WebSocket_Connected (WebSocket1 As WebSocket) 
ChatPage.bas[25]  Log( {2} ) 
ChatPage.bas[26]  ws = WebSocket1 
ChatPage.bas[27]  ABMPageId = ABM.GetPageID(page, Name,ws) 
ChatPage.bas[28]  Dim session As HttpSession = ABM.GetSession(ws, ABMShared.SessionMaxInactiveIntervalSeconds) 
ChatPage.bas[29]  
ChatPage.bas[30]  If ABMShared.NeedsAuthorization Then 
ChatPage.bas[31]  If session.GetAttribute2( {3} , {4} ) = {5} Then 
ChatPage.bas[32]  ABMShared.NavigateToPage(ws, ABMPageId, {6} ) 
ChatPage.bas[33]  Return 
ChatPage.bas[34]  End If 
ChatPage.bas[35]  End If 
ChatPage.bas[36]  
ChatPage.bas[37]  ABM.UpdateFromCache(Me, ABMShared.CachedPages, ABMPageId, ws) 
ChatPage.bas[38]  If page.ComesFromPageCache Then 
ChatPage.bas[39]  ' refresh the page 
ChatPage.bas[40]  page.Refresh 
ChatPage.bas[41]  ' Tell the browser we finished loading 
ChatPage.bas[42]  page.FinishedLoading 
ChatPage.bas[43]  Else 
ChatPage.bas[44]  ' Prepare the page 
ChatPage.bas[45]  page.Prepare 
ChatPage.bas[46]  ' load the dynamic content 
ChatPage.bas[47]  ConnectPage 
ChatPage.bas[48]  End If 
ChatPage.bas[49]  Log(ABMPageId) 
ChatPage.bas[50]  
ChatPage.bas[51] End Sub 
ChatPage.bas[52]  
ChatPage.bas[53] Private Sub WebSocket_Disconnected 
ChatPage.bas[54]  Log( {7} ) 
ChatPage.bas[55]  If ABMPageId <> {8} Then CallSubDelayed3(ChatShared, {9} , Me, ABMPageId) 
ChatPage.bas[56] End Sub 
ChatPage.bas[57]  
ChatPage.bas[58] Sub Page_ParseEvent(Params As Map) 
ChatPage.bas[59]  Dim eventName As String = Params.Get( {10} ) 
ChatPage.bas[60]  Dim eventParams() As String = Regex.Split( {11} ,Params.Get( {12} )) 
ChatPage.bas[61]  If eventName = {13} Then 
ChatPage.bas[62]  Log( {14} ) 
ChatPage.bas[63]  ABM.RemoveMeFromCache(ABMShared.CachedPages, ABMPageId) 
ChatPage.bas[64]  Return 
ChatPage.bas[65]  End If 
ChatPage.bas[66]  If SubExists(Me, eventName) Then 
ChatPage.bas[67]  Params.Remove( {15} ) 
ChatPage.bas[68]  Params.Remove( {16} ) 
ChatPage.bas[69]  Select Case Params.Size 
ChatPage.bas[70]  Case 0 
ChatPage.bas[71]  CallSub(Me, eventName) 
ChatPage.bas[72]  Case 1 
ChatPage.bas[73]  CallSub2(Me, eventName, Params.Get(eventParams(0))) 
ChatPage.bas[74]  Case 2 
ChatPage.bas[75]  If Params.get(eventParams(0)) = {17} Then 
ChatPage.bas[76]  Dim PassedTables As List = ABM.ProcessTablesFromTargetName(Params.get(eventParams(1))) 
ChatPage.bas[77]  CallSub2(Me, eventName, PassedTables) 
ChatPage.bas[78]  Else 
ChatPage.bas[79]  CallSub3(Me, eventName, Params.Get(eventParams(0)), Params.Get(eventParams(1))) 
ChatPage.bas[80]  End If 
ChatPage.bas[81]  Case Else 
ChatPage.bas[82]  ' cannot be called directly, to many param 
ChatPage.bas[83]  CallSub2(Me, eventName, Params) 
ChatPage.bas[84]  End Select 
ChatPage.bas[85]  End If 
ChatPage.bas[86] End Sub 
ChatPage.bas[87]  
ChatPage.bas[88] public Sub BuildTheme() 
ChatPage.bas[89]  ' start with the base theme defined in ABMShared 
ChatPage.bas[90]  theme.Initialize( {18} ) 
ChatPage.bas[91]  theme.AddABMTheme(ABMShared.MyTheme) 
ChatPage.bas[92]  
ChatPage.bas[93]  ' add additional themes specific for this page 
ChatPage.bas[94]  theme.AddChatTheme( {19} ) 
ChatPage.bas[95]  theme.Chat( {20} ).AddBubble( {21} ) 
ChatPage.bas[96]  theme.Chat( {22} ).Bubble( {23} ).Color = ABM.COLOR_BLACK 
ChatPage.bas[97]  theme.Chat( {24} ).Bubble( {25} ).TextColor = ABM.COLOR_WHITE 
ChatPage.bas[98]  
ChatPage.bas[99]  theme.Chat( {26} ).AddBubble( {27} ) 
ChatPage.bas[100]  theme.Chat( {28} ).Bubble( {29} ).Color = ABM.COLOR_LIGHTBLUE 
ChatPage.bas[101]  theme.Chat( {30} ).Bubble( {31} ).TextColor = ABM.COLOR_WHITE 
ChatPage.bas[102]  
ChatPage.bas[103]  theme.Chat( {32} ).AddBubble( {33} ) 
ChatPage.bas[104]  theme.Chat( {34} ).Bubble( {35} ).Color = ABM.COLOR_GREY 
ChatPage.bas[105]  theme.Chat( {36} ).Bubble( {37} ).ColorIntensity = ABM.INTENSITY_LIGHTEN2 
ChatPage.bas[106]  theme.Chat( {38} ).Bubble( {39} ).TextColor = ABM.COLOR_BLACK 
ChatPage.bas[107] End Sub 
ChatPage.bas[108]  
ChatPage.bas[109] public Sub BuildPage() 
ChatPage.bas[110]  ' initialize the theme 
ChatPage.bas[111]  BuildTheme 
ChatPage.bas[112]  
ChatPage.bas[113]  ' initialize this page using our theme 
ChatPage.bas[114]  page.InitializeWithTheme(Name, {40} & ABMShared.AppName & {41} & Name, False, ABMShared.SessionMaxInactiveIntervalSeconds, theme) 
ChatPage.bas[115]  page.ShowLoader=True 
ChatPage.bas[116]  page.PageHTMLName = {42} 
ChatPage.bas[117]  page.PageTitle = {43} 
ChatPage.bas[118]  page.PageDescription = {44} 
ChatPage.bas[119]  page.PageKeywords = {45} 
ChatPage.bas[120]  page.PageSiteMapPriority = {46} 
ChatPage.bas[121]  page.PageSiteMapFrequency = ABM.SITEMAP_FREQ_YEARLY 
ChatPage.bas[122]  
ChatPage.bas[123]  page.ShowConnectedIndicator = True 
ChatPage.bas[124]  
ChatPage.bas[125]  ' adding a navigation bar 
ChatPage.bas[126]  
ChatPage.bas[127]  ' create the page grid 
ChatPage.bas[128]  page.AddRows(2,True, {47} ).AddCells12(1, {48} ) 
ChatPage.bas[129]  page.BuildGrid 'IMPORTANT once you loaded the complete grid AND before you start adding components 
ChatPage.bas[130]  
ChatPage.bas[131] End Sub 
ChatPage.bas[132]  
ChatPage.bas[133] public Sub ConnectPage() 
ChatPage.bas[134] ' connecting the navigation bar 
ChatPage.bas[135]  
ChatPage.bas[136] ' init all your own variables (like a List, Map) and add your components 
ChatPage.bas[137]  Dim chat As ABMChat 
ChatPage.bas[138]  chat.Initialize(page, {49} ,600, 450, 255, {50} ) 
ChatPage.bas[139]  chat.AddBubble( {51} , {52} , {53} , {54} , {55} ) 
ChatPage.bas[140]  
ChatPage.bas[141]  page.Cell(1,1).AddComponent(chat) 
ChatPage.bas[142]  
ChatPage.bas[143]  Dim ChatInput As ABMInput 
ChatPage.bas[144]  ChatInput.Initialize(page, {56} , ABM.INPUT_TEXT, {57} , False, {58} ) 
ChatPage.bas[145]  ChatInput.PlaceHolderText = {59} 
ChatPage.bas[146]  ChatInput.RaiseChangedEvent = True 
ChatPage.bas[147]  page.Cell(2,1).AddComponent(ChatInput) 
ChatPage.bas[148]  
ChatPage.bas[149]  ' refresh the page 
ChatPage.bas[150]  page.Refresh 
ChatPage.bas[151]  ' Tell the browser we finished loading 
ChatPage.bas[152]  page.FinishedLoading 
ChatPage.bas[153]  ' restoring the navigation bar position 
ChatPage.bas[154]  page.RestoreNavigationBarPosition 
ChatPage.bas[155] End Sub 
ChatPage.bas[156]  
ChatPage.bas[157] Sub ChatInput_Changed(value As String) 
ChatPage.bas[158]  If ChatShared.HasIdentified(ABMPageId) Then 
ChatPage.bas[159]  CallSubDelayed3(ChatShared, {60} , ABMPageId, value) 
ChatPage.bas[160]  End If 
ChatPage.bas[161] End Sub 
ChatPage.bas[162]  
ChatPage.bas[163] Sub ChatInput_EnterPressed(value As String) 
ChatPage.bas[164]  DateTime.TimeFormat = {61} 
ChatPage.bas[165]  
ChatPage.bas[166]  If ChatShared.HasIdentified(ABMPageId) Then 
ChatPage.bas[167]  Dim bubble As ABMChatBubble 
ChatPage.bas[168]  bubble.Initialize(ChatName, value, ChatName & {62} & DateTime.Time(DateTime.Now), {63} , {64} ) 
ChatPage.bas[169]  CallSubDelayed3(ChatShared, {65} , ABMPageId, bubble) 
ChatPage.bas[170]  CallSubDelayed3(ChatShared, {66} , ABMPageId, {67} ) 
ChatPage.bas[171]  Else 
ChatPage.bas[172]  If value = {68} Then Return 
ChatPage.bas[173]  If ChatShared.AvoidDuplicates.ContainsKey(value.ToLowerCase) Then 
ChatPage.bas[174]  Dim chat As ABMChat = page.Component( {69} ) 
ChatPage.bas[175]  chat.AddBubble( {70} , {71} & value & {72} , {73} , {74} , {75} ) 
ChatPage.bas[176]  chat.Refresh 
ChatPage.bas[177]  Else 
ChatPage.bas[178]  ChatName = value 
ChatPage.bas[179]  ChatShared.AvoidDuplicates.Put(value.ToLowerCase, value) 
ChatPage.bas[180]  Dim chat As ABMChat = page.Component( {76} ) 
ChatPage.bas[181]  chat.SetMyFrom(ChatName) 
ChatPage.bas[182]  chat.AddBubble( {77} , {78} & ChatName & {79} , {80} , {81} , {82} ) 
ChatPage.bas[183]  chat.Refresh 
ChatPage.bas[184]  CallSubDelayed3(ChatShared, {83} , Me, ABMPageId) 
ChatPage.bas[185]  End If 
ChatPage.bas[186]  End If 
ChatPage.bas[187]  
ChatPage.bas[188]  Dim ChatInput As ABMInput = page.Component( {84} ) 
ChatPage.bas[189]  ChatInput.Text = {85} 
ChatPage.bas[190]  ChatInput.Refresh 
ChatPage.bas[191] End Sub 
ChatPage.bas[192]  
ChatPage.bas[193] public Sub NewMessage(bubble As ABMChatBubble) 
ChatPage.bas[194]  Dim chat As ABMChat = page.Component( {86} ) 
ChatPage.bas[195]  chat.AddBubble2(bubble) 
ChatPage.bas[196]  chat.Refresh 
ChatPage.bas[197]  chat.ScrollToBottom ' scroll to the end of the chat 
ChatPage.bas[198] End Sub 
ChatPage.bas[199]  
ChatPage.bas[200] public Sub IsTyping(pageID As String, typeBool As Boolean) 
ChatPage.bas[201]  Dim chat As ABMChat = page.Component( {87} ) 
ChatPage.bas[202]  If pageID <> ABMPageId Then 
ChatPage.bas[203]  If typeBool = False Then 
ChatPage.bas[204]  chat.ThemAreTyping(False, {88} ) 'hide the 'is typing' bubble 
ChatPage.bas[205]  Else 
ChatPage.bas[206]  chat.ThemAreTyping(True, {89} ) ' show the 'is typing' bubble if not yet shown 
ChatPage.bas[207]  End If 
ChatPage.bas[208]  chat.Refresh 
ChatPage.bas[209]  chat.ScrollToBottom ' scroll to the end of the chat 
ChatPage.bas[210]  End If 
ChatPage.bas[211] End Sub 
ChatPage.bas[212]  
ChatPage.bas[213] public Sub CurrentConversation(LastMessages As List) 
ChatPage.bas[214]  If LastMessages.Size > 0 Then 
ChatPage.bas[215]  Dim chat As ABMChat = page.Component( {90} ) 
ChatPage.bas[216]  chat.SetConversation(LastMessages) 
ChatPage.bas[217]  chat.Refresh 
ChatPage.bas[218]  chat.ScrollToBottom ' scroll to the end of the chat 
ChatPage.bas[219]  End If 
ChatPage.bas[220] End Sub 
ChatPage.bas[221]  
ChatPage.bas[222] ' clicked on the navigation bar 
ChatPage.bas[223] Sub Page_NavigationbarClicked(Action As String, Value As String) 
ChatPage.bas[224]  ' saving the navigation bar position 
ChatPage.bas[225]  page.SaveNavigationBarPosition 
ChatPage.bas[226]  If Action = {91} Then 
ChatPage.bas[227]  ABMShared.LogOff(page) 
ChatPage.bas[228]  Return 
ChatPage.bas[229]  End If 
ChatPage.bas[230]  ABMShared.NavigateToPage(ws, ABMPageId, Value) 
ChatPage.bas[231] End Sub 
Analysing: Chat.b4j
Chat.b4j[0] ﻿Version=4.7 
Chat.b4j[0] AppType=StandardJava 
Chat.b4j[0] NumberOfModules=9 
Chat.b4j[0] Module1=ABMApplication 
Chat.b4j[0] Module2=ABMShared 
Chat.b4j[0] Module3=ABMPageTemplate 
Chat.b4j[0] Module4=ABMPageTemplateAlternative 
Chat.b4j[0] Module5=ABMUploadHandler 
Chat.b4j[0] Module6=ABMSessionCreator 
Chat.b4j[0] Module7=ABMCacheScavenger 
Chat.b4j[0] Module8=ChatPage 
Chat.b4j[0] Module9=ChatShared 
Chat.b4j[0] Build1=Default,b4j.example 
Chat.b4j[0] NumberOfFiles=0 
Chat.b4j[0] NumberOfLibraries=4 
Chat.b4j[0] Library1=jcore 
Chat.b4j[0] Library2=abmaterial 
Chat.b4j[0] Library3=jserver 
Chat.b4j[0] Library4=javaobject 
Chat.b4j[0] @EndOfDesignText@ 
Chat.b4j[1] 'Non-UI application (console / server application) 
Chat.b4j[2] #Region Project Attributes 
Chat.b4j[3]  #CommandLineArgs: 
Chat.b4j[4]  #MergeLibraries: True 
Chat.b4j[5] #End Region 
Chat.b4j[6]  
Chat.b4j[7] Sub Process_Globals 
Chat.b4j[8]  Public srvr As Server 
Chat.b4j[9] End Sub 
Chat.b4j[10]  
Chat.b4j[11] Sub AppStart (Args() As String) 
Chat.b4j[12]  ' the user needs to login 
Chat.b4j[13]  'ABMShared.NeedsAuthorization = True 
Chat.b4j[14]  
Chat.b4j[15]  ' Build the Theme 
Chat.b4j[16]  ABMShared.BuildTheme( {0} ) 
Chat.b4j[17]  
Chat.b4j[18]  ' create the app 
Chat.b4j[19]  Dim myApp As ABMApplication 
Chat.b4j[20]  myApp.Initialize 
Chat.b4j[21]  
Chat.b4j[22]  ' create the pages 
Chat.b4j[23]  Dim myChatPage As ChatPage 
Chat.b4j[24]  myChatPage.Initialize 
Chat.b4j[25]  
Chat.b4j[26]  ' add the pages to the app 
Chat.b4j[27]  myApp.AddPage(myChatPage.Page) 
Chat.b4j[28]  
Chat.b4j[29]  ChatShared.Init 
Chat.b4j[30]  
Chat.b4j[31]  ' start the server 
Chat.b4j[32]  myApp.StartServer(srvr, {1} , 51042) 
Chat.b4j[33]  
Chat.b4j[34]  ABMShared.RedirectOutput(File.DirApp, {2} ) 
Chat.b4j[35]  
Chat.b4j[36]  StartMessageLoop 
Chat.b4j[37] End Sub 
